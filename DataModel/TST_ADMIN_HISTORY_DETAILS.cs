//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TST_ADMIN_HISTORY_CHANGESET))]
    [KnownType(typeof(User))]
    [KnownType(typeof(ArtifactField))]
    [KnownType(typeof(CustomProperty))]
    public partial class TST_ADMIN_HISTORY_DETAILS: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ADMIN_HISTORY_DETAIL_ID
        {
            get { return _aDMIN_HISTORY_DETAIL_ID; }
            set
            {
                if (_aDMIN_HISTORY_DETAIL_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ADMIN_HISTORY_DETAIL_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aDMIN_HISTORY_DETAIL_ID = value;
                    OnPropertyChanged("ADMIN_HISTORY_DETAIL_ID");
                }
            }
        }
        private long _aDMIN_HISTORY_DETAIL_ID;
    
        [DataMember]
        public string ADMIN_PROPERTY_NAME
        {
            get { return _aDMIN_PROPERTY_NAME; }
            set
            {
                if (_aDMIN_PROPERTY_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_PROPERTY_NAME", _aDMIN_PROPERTY_NAME);
                    _aDMIN_PROPERTY_NAME = value;
                    OnPropertyChanged("ADMIN_PROPERTY_NAME");
                }
            }
        }
        private string _aDMIN_PROPERTY_NAME;
    
        [DataMember]
        public string OLD_VALUE
        {
            get { return _oLD_VALUE; }
            set
            {
                if (_oLD_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE", _oLD_VALUE);
                    _oLD_VALUE = value;
                    OnPropertyChanged("OLD_VALUE");
                }
            }
        }
        private string _oLD_VALUE;
    
        [DataMember]
        public string NEW_VALUE
        {
            get { return _nEW_VALUE; }
            set
            {
                if (_nEW_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE", _nEW_VALUE);
                    _nEW_VALUE = value;
                    OnPropertyChanged("NEW_VALUE");
                }
            }
        }
        private string _nEW_VALUE;
    
        [DataMember]
        public Nullable<int> OLD_VALUE_INT
        {
            get { return _oLD_VALUE_INT; }
            set
            {
                if (_oLD_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_INT", _oLD_VALUE_INT);
                    _oLD_VALUE_INT = value;
                    OnPropertyChanged("OLD_VALUE_INT");
                }
            }
        }
        private Nullable<int> _oLD_VALUE_INT;
    
        [DataMember]
        public Nullable<int> NEW_VALUE_INT
        {
            get { return _nEW_VALUE_INT; }
            set
            {
                if (_nEW_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_INT", _nEW_VALUE_INT);
                    _nEW_VALUE_INT = value;
                    OnPropertyChanged("NEW_VALUE_INT");
                }
            }
        }
        private Nullable<int> _nEW_VALUE_INT;
    
        [DataMember]
        public Nullable<System.DateTime> OLD_VALUE_DATE
        {
            get { return _oLD_VALUE_DATE; }
            set
            {
                if (_oLD_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_DATE", _oLD_VALUE_DATE);
                    _oLD_VALUE_DATE = value;
                    OnPropertyChanged("OLD_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _oLD_VALUE_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> NEW_VALUE_DATE
        {
            get { return _nEW_VALUE_DATE; }
            set
            {
                if (_nEW_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_DATE", _nEW_VALUE_DATE);
                    _nEW_VALUE_DATE = value;
                    OnPropertyChanged("NEW_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _nEW_VALUE_DATE;
    
        [DataMember]
        public int ADMIN_USER_ID
        {
            get { return _aDMIN_USER_ID; }
            set
            {
                if (_aDMIN_USER_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_USER_ID", _aDMIN_USER_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_USER != null && TST_USER.UserId != value)
                        {
                            TST_USER = null;
                        }
                    }
                    _aDMIN_USER_ID = value;
                    OnPropertyChanged("ADMIN_USER_ID");
                }
            }
        }
        private int _aDMIN_USER_ID;
    
        [DataMember]
        public Nullable<int> ADMIN_ARTIFACT_FIELD_ID
        {
            get { return _aDMIN_ARTIFACT_FIELD_ID; }
            set
            {
                if (_aDMIN_ARTIFACT_FIELD_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_ARTIFACT_FIELD_ID", _aDMIN_ARTIFACT_FIELD_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_ARTIFACT_FIELD != null && TST_ARTIFACT_FIELD.ArtifactFieldId != value)
                        {
                            TST_ARTIFACT_FIELD = null;
                        }
                    }
                    _aDMIN_ARTIFACT_FIELD_ID = value;
                    OnPropertyChanged("ADMIN_ARTIFACT_FIELD_ID");
                }
            }
        }
        private Nullable<int> _aDMIN_ARTIFACT_FIELD_ID;
    
        [DataMember]
        public Nullable<int> ADMIN_CUSTOM_PROPERTY_ID
        {
            get { return _aDMIN_CUSTOM_PROPERTY_ID; }
            set
            {
                if (_aDMIN_CUSTOM_PROPERTY_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_CUSTOM_PROPERTY_ID", _aDMIN_CUSTOM_PROPERTY_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_CUSTOM_PROPERTY != null && TST_CUSTOM_PROPERTY.CustomPropertyId != value)
                        {
                            TST_CUSTOM_PROPERTY = null;
                        }
                    }
                    _aDMIN_CUSTOM_PROPERTY_ID = value;
                    OnPropertyChanged("ADMIN_CUSTOM_PROPERTY_ID");
                }
            }
        }
        private Nullable<int> _aDMIN_CUSTOM_PROPERTY_ID;
    
        [DataMember]
        public long ADMIN_CHANGESET_ID
        {
            get { return _aDMIN_CHANGESET_ID; }
            set
            {
                if (_aDMIN_CHANGESET_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_CHANGESET_ID", _aDMIN_CHANGESET_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_ADMIN_HISTORY_CHANGESET != null && TST_ADMIN_HISTORY_CHANGESET.CHANGESET_ID != value)
                        {
                            TST_ADMIN_HISTORY_CHANGESET = null;
                        }
                    }
                    _aDMIN_CHANGESET_ID = value;
                    OnPropertyChanged("ADMIN_CHANGESET_ID");
                }
            }
        }
        private long _aDMIN_CHANGESET_ID;
    
        [DataMember]
        public string ADMIN_ARTIFACT_FIELD_NAME
        {
            get { return _aDMIN_ARTIFACT_FIELD_NAME; }
            set
            {
                if (_aDMIN_ARTIFACT_FIELD_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_ARTIFACT_FIELD_NAME", _aDMIN_ARTIFACT_FIELD_NAME);
                    _aDMIN_ARTIFACT_FIELD_NAME = value;
                    OnPropertyChanged("ADMIN_ARTIFACT_FIELD_NAME");
                }
            }
        }
        private string _aDMIN_ARTIFACT_FIELD_NAME;
    
        [DataMember]
        public string ADMIN_ARTIFACT_FIELD_CAPTION
        {
            get { return _aDMIN_ARTIFACT_FIELD_CAPTION; }
            set
            {
                if (_aDMIN_ARTIFACT_FIELD_CAPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_ARTIFACT_FIELD_CAPTION", _aDMIN_ARTIFACT_FIELD_CAPTION);
                    _aDMIN_ARTIFACT_FIELD_CAPTION = value;
                    OnPropertyChanged("ADMIN_ARTIFACT_FIELD_CAPTION");
                }
            }
        }
        private string _aDMIN_ARTIFACT_FIELD_CAPTION;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TST_ADMIN_HISTORY_CHANGESET TST_ADMIN_HISTORY_CHANGESET
        {
            get { return _tST_ADMIN_HISTORY_CHANGESET; }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_CHANGESET, value))
                {
                    var previousValue = _tST_ADMIN_HISTORY_CHANGESET;
                    _tST_ADMIN_HISTORY_CHANGESET = value;
                    FixupTST_ADMIN_HISTORY_CHANGESET(previousValue);
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_CHANGESET");
                }
            }
        }
        private TST_ADMIN_HISTORY_CHANGESET _tST_ADMIN_HISTORY_CHANGESET;
    
        [DataMember]
        public User TST_USER
        {
            get { return _tST_USER; }
            set
            {
                if (!ReferenceEquals(_tST_USER, value))
                {
                    var previousValue = _tST_USER;
                    _tST_USER = value;
                    FixupTST_USER(previousValue);
                    OnNavigationPropertyChanged("TST_USER");
                }
            }
        }
        private User _tST_USER;
    
        [DataMember]
        public ArtifactField TST_ARTIFACT_FIELD
        {
            get { return _tST_ARTIFACT_FIELD; }
            set
            {
                if (!ReferenceEquals(_tST_ARTIFACT_FIELD, value))
                {
                    var previousValue = _tST_ARTIFACT_FIELD;
                    _tST_ARTIFACT_FIELD = value;
                    FixupTST_ARTIFACT_FIELD(previousValue);
                    OnNavigationPropertyChanged("TST_ARTIFACT_FIELD");
                }
            }
        }
        private ArtifactField _tST_ARTIFACT_FIELD;
    
        [DataMember]
        public CustomProperty TST_CUSTOM_PROPERTY
        {
            get { return _tST_CUSTOM_PROPERTY; }
            set
            {
                if (!ReferenceEquals(_tST_CUSTOM_PROPERTY, value))
                {
                    var previousValue = _tST_CUSTOM_PROPERTY;
                    _tST_CUSTOM_PROPERTY = value;
                    FixupTST_CUSTOM_PROPERTY(previousValue);
                    OnNavigationPropertyChanged("TST_CUSTOM_PROPERTY");
                }
            }
        }
        private CustomProperty _tST_CUSTOM_PROPERTY;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_ADMIN_HISTORY_CHANGESET = null;
            TST_USER = null;
            TST_ARTIFACT_FIELD = null;
            TST_CUSTOM_PROPERTY = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_ADMIN_HISTORY_CHANGESET(TST_ADMIN_HISTORY_CHANGESET previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_DETAILS.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_DETAILS.Remove(this);
            }
    
            if (TST_ADMIN_HISTORY_CHANGESET != null)
            {
                if (!TST_ADMIN_HISTORY_CHANGESET.TST_ADMIN_HISTORY_DETAILS.Contains(this))
                {
                    TST_ADMIN_HISTORY_CHANGESET.TST_ADMIN_HISTORY_DETAILS.Add(this);
                }
    
                ADMIN_CHANGESET_ID = TST_ADMIN_HISTORY_CHANGESET.CHANGESET_ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_ADMIN_HISTORY_CHANGESET")
                    && (ChangeTracker.OriginalValues["TST_ADMIN_HISTORY_CHANGESET"] == TST_ADMIN_HISTORY_CHANGESET))
                {
                    ChangeTracker.OriginalValues.Remove("TST_ADMIN_HISTORY_CHANGESET");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_ADMIN_HISTORY_CHANGESET", previousValue);
                }
                if (TST_ADMIN_HISTORY_CHANGESET != null && !TST_ADMIN_HISTORY_CHANGESET.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_ADMIN_HISTORY_CHANGESET.StartTracking();
                }
            }
        }
    
        private void FixupTST_USER(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_DETAILS.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_DETAILS.Remove(this);
            }
    
            if (TST_USER != null)
            {
                if (!TST_USER.TST_ADMIN_HISTORY_DETAILS.Contains(this))
                {
                    TST_USER.TST_ADMIN_HISTORY_DETAILS.Add(this);
                }
    
                ADMIN_USER_ID = TST_USER.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_USER")
                    && (ChangeTracker.OriginalValues["TST_USER"] == TST_USER))
                {
                    ChangeTracker.OriginalValues.Remove("TST_USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_USER", previousValue);
                }
                if (TST_USER != null && !TST_USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_USER.StartTracking();
                }
            }
        }
    
        private void FixupTST_ARTIFACT_FIELD(ArtifactField previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_DETAILS.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_DETAILS.Remove(this);
            }
    
            if (TST_ARTIFACT_FIELD != null)
            {
                if (!TST_ARTIFACT_FIELD.TST_ADMIN_HISTORY_DETAILS.Contains(this))
                {
                    TST_ARTIFACT_FIELD.TST_ADMIN_HISTORY_DETAILS.Add(this);
                }
    
                ADMIN_ARTIFACT_FIELD_ID = TST_ARTIFACT_FIELD.ArtifactFieldId;
            }
            else if (!skipKeys)
            {
                ADMIN_ARTIFACT_FIELD_ID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_ARTIFACT_FIELD")
                    && (ChangeTracker.OriginalValues["TST_ARTIFACT_FIELD"] == TST_ARTIFACT_FIELD))
                {
                    ChangeTracker.OriginalValues.Remove("TST_ARTIFACT_FIELD");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_ARTIFACT_FIELD", previousValue);
                }
                if (TST_ARTIFACT_FIELD != null && !TST_ARTIFACT_FIELD.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_ARTIFACT_FIELD.StartTracking();
                }
            }
        }
    
        private void FixupTST_CUSTOM_PROPERTY(CustomProperty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_DETAILS.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_DETAILS.Remove(this);
            }
    
            if (TST_CUSTOM_PROPERTY != null)
            {
                if (!TST_CUSTOM_PROPERTY.TST_ADMIN_HISTORY_DETAILS.Contains(this))
                {
                    TST_CUSTOM_PROPERTY.TST_ADMIN_HISTORY_DETAILS.Add(this);
                }
    
                ADMIN_CUSTOM_PROPERTY_ID = TST_CUSTOM_PROPERTY.CustomPropertyId;
            }
            else if (!skipKeys)
            {
                ADMIN_CUSTOM_PROPERTY_ID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_CUSTOM_PROPERTY")
                    && (ChangeTracker.OriginalValues["TST_CUSTOM_PROPERTY"] == TST_CUSTOM_PROPERTY))
                {
                    ChangeTracker.OriginalValues.Remove("TST_CUSTOM_PROPERTY");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_CUSTOM_PROPERTY", previousValue);
                }
                if (TST_CUSTOM_PROPERTY != null && !TST_CUSTOM_PROPERTY.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_CUSTOM_PROPERTY.StartTracking();
                }
            }
        }

        #endregion

    }
}
