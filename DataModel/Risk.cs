//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Component))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ProjectGoal))]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(RiskImpact))]
    [KnownType(typeof(RiskProbability))]
    [KnownType(typeof(RiskStatus))]
    [KnownType(typeof(RiskDiscussion))]
    [KnownType(typeof(RiskMitigation))]
    [KnownType(typeof(RiskType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(RiskDetectability))]
    public partial class Risk: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RiskId
        {
            get { return _riskId; }
            set
            {
                if (_riskId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RiskId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _riskId = value;
                    OnPropertyChanged("RiskId");
                }
            }
        }
        private int _riskId;
    
        [DataMember]
        public Nullable<int> RiskImpactId
        {
            get { return _riskImpactId; }
            set
            {
                if (_riskImpactId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskImpactId", _riskImpactId);
                    if (!IsDeserializing)
                    {
                        if (Impact != null && Impact.RiskImpactId != value)
                        {
                            Impact = null;
                        }
                    }
                    _riskImpactId = value;
                    OnPropertyChanged("RiskImpactId");
                }
            }
        }
        private Nullable<int> _riskImpactId;
    
        [DataMember]
        public int RiskStatusId
        {
            get { return _riskStatusId; }
            set
            {
                if (_riskStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskStatusId", _riskStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.RiskStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _riskStatusId = value;
                    OnPropertyChanged("RiskStatusId");
                }
            }
        }
        private int _riskStatusId;
    
        [DataMember]
        public Nullable<int> RiskProbabilityId
        {
            get { return _riskProbabilityId; }
            set
            {
                if (_riskProbabilityId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskProbabilityId", _riskProbabilityId);
                    if (!IsDeserializing)
                    {
                        if (Probability != null && Probability.RiskProbabilityId != value)
                        {
                            Probability = null;
                        }
                    }
                    _riskProbabilityId = value;
                    OnPropertyChanged("RiskProbabilityId");
                }
            }
        }
        private Nullable<int> _riskProbabilityId;
    
        [DataMember]
        public int RiskTypeId
        {
            get { return _riskTypeId; }
            set
            {
                if (_riskTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskTypeId", _riskTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.RiskTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _riskTypeId = value;
                    OnPropertyChanged("RiskTypeId");
                }
            }
        }
        private int _riskTypeId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorId", _creatorId);
                    if (!IsDeserializing)
                    {
                        if (Creator != null && Creator.UserId != value)
                        {
                            Creator = null;
                        }
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public Nullable<int> ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroupId", _projectGroupId);
                    if (!IsDeserializing)
                    {
                        if (ProjectGroup != null && ProjectGroup.ProjectGroupId != value)
                        {
                            ProjectGroup = null;
                        }
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private Nullable<int> _projectGroupId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public Nullable<int> ComponentId
        {
            get { return _componentId; }
            set
            {
                if (_componentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ComponentId", _componentId);
                    if (!IsDeserializing)
                    {
                        if (Component != null && Component.ComponentId != value)
                        {
                            Component = null;
                        }
                    }
                    _componentId = value;
                    OnPropertyChanged("ComponentId");
                }
            }
        }
        private Nullable<int> _componentId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<System.DateTime> ReviewDate
        {
            get { return _reviewDate; }
            set
            {
                if (_reviewDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ReviewDate", _reviewDate);
                    _reviewDate = value;
                    OnPropertyChanged("ReviewDate");
                }
            }
        }
        private Nullable<System.DateTime> _reviewDate;
    
        [DataMember]
        public Nullable<int> GoalId
        {
            get { return _goalId; }
            set
            {
                if (_goalId != value)
                {
                    ChangeTracker.RecordOriginalValue("GoalId", _goalId);
                    if (!IsDeserializing)
                    {
                        if (ProjectGoal != null && ProjectGoal.GoalId != value)
                        {
                            ProjectGoal = null;
                        }
                    }
                    _goalId = value;
                    OnPropertyChanged("GoalId");
                }
            }
        }
        private Nullable<int> _goalId;
    
        [DataMember]
        public Nullable<System.DateTime> ClosedDate
        {
            get { return _closedDate; }
            set
            {
                if (_closedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ClosedDate", _closedDate);
                    _closedDate = value;
                    OnPropertyChanged("ClosedDate");
                }
            }
        }
        private Nullable<System.DateTime> _closedDate;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public Nullable<int> RiskDetectabilityId
        {
            get { return _riskDetectabilityId; }
            set
            {
                if (_riskDetectabilityId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskDetectabilityId", _riskDetectabilityId);
                    if (!IsDeserializing)
                    {
                        if (Detectability != null && Detectability.RiskDetectabilityId != value)
                        {
                            Detectability = null;
                        }
                    }
                    _riskDetectabilityId = value;
                    OnPropertyChanged("RiskDetectabilityId");
                }
            }
        }
        private Nullable<int> _riskDetectabilityId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Component Component
        {
            get { return _component; }
            set
            {
                if (!ReferenceEquals(_component, value))
                {
                    var previousValue = _component;
                    _component = value;
                    FixupComponent(previousValue);
                    OnNavigationPropertyChanged("Component");
                }
            }
        }
        private Component _component;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public ProjectGoal ProjectGoal
        {
            get { return _projectGoal; }
            set
            {
                if (!ReferenceEquals(_projectGoal, value))
                {
                    var previousValue = _projectGoal;
                    _projectGoal = value;
                    FixupProjectGoal(previousValue);
                    OnNavigationPropertyChanged("ProjectGoal");
                }
            }
        }
        private ProjectGoal _projectGoal;
    
        [DataMember]
        public ProjectGroup ProjectGroup
        {
            get { return _projectGroup; }
            set
            {
                if (!ReferenceEquals(_projectGroup, value))
                {
                    var previousValue = _projectGroup;
                    _projectGroup = value;
                    FixupProjectGroup(previousValue);
                    OnNavigationPropertyChanged("ProjectGroup");
                }
            }
        }
        private ProjectGroup _projectGroup;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public RiskImpact Impact
        {
            get { return _impact; }
            set
            {
                if (!ReferenceEquals(_impact, value))
                {
                    var previousValue = _impact;
                    _impact = value;
                    FixupImpact(previousValue);
                    OnNavigationPropertyChanged("Impact");
                }
            }
        }
        private RiskImpact _impact;
    
        [DataMember]
        public RiskProbability Probability
        {
            get { return _probability; }
            set
            {
                if (!ReferenceEquals(_probability, value))
                {
                    var previousValue = _probability;
                    _probability = value;
                    FixupProbability(previousValue);
                    OnNavigationPropertyChanged("Probability");
                }
            }
        }
        private RiskProbability _probability;
    
        [DataMember]
        public RiskStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private RiskStatus _status;
    
        [DataMember]
        public TrackableCollection<RiskDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<RiskDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<RiskDiscussion> _discussions;
    
        [DataMember]
        public TrackableCollection<RiskMitigation> Mitigations
        {
            get
            {
                if (_mitigations == null)
                {
                    _mitigations = new TrackableCollection<RiskMitigation>();
                    _mitigations.CollectionChanged += FixupMitigations;
                }
                return _mitigations;
            }
            set
            {
                if (!ReferenceEquals(_mitigations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mitigations != null)
                    {
                        _mitigations.CollectionChanged -= FixupMitigations;
                    }
                    _mitigations = value;
                    if (_mitigations != null)
                    {
                        _mitigations.CollectionChanged += FixupMitigations;
                    }
                    OnNavigationPropertyChanged("Mitigations");
                }
            }
        }
        private TrackableCollection<RiskMitigation> _mitigations;
    
        [DataMember]
        public RiskType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private RiskType _type;
    
        [DataMember]
        public User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                    OnNavigationPropertyChanged("Creator");
                }
            }
        }
        private User _creator;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;
    
        [DataMember]
        public RiskDetectability Detectability
        {
            get { return _detectability; }
            set
            {
                if (!ReferenceEquals(_detectability, value))
                {
                    var previousValue = _detectability;
                    _detectability = value;
                    FixupDetectability(previousValue);
                    OnNavigationPropertyChanged("Detectability");
                }
            }
        }
        private RiskDetectability _detectability;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Component = null;
            Project = null;
            ProjectGoal = null;
            ProjectGroup = null;
            Release = null;
            Impact = null;
            Probability = null;
            Status = null;
            Discussions.Clear();
            Mitigations.Clear();
            Type = null;
            Creator = null;
            Owner = null;
            Tasks.Clear();
            Detectability = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupComponent(Component previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Component != null)
            {
                if (!Component.Risks.Contains(this))
                {
                    Component.Risks.Add(this);
                }
    
                ComponentId = Component.ComponentId;
            }
            else if (!skipKeys)
            {
                ComponentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Component")
                    && (ChangeTracker.OriginalValues["Component"] == Component))
                {
                    ChangeTracker.OriginalValues.Remove("Component");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Component", previousValue);
                }
                if (Component != null && !Component.ChangeTracker.ChangeTrackingEnabled)
                {
                    Component.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Risks.Contains(this))
                {
                    Project.Risks.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupProjectGoal(ProjectGoal previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (ProjectGoal != null)
            {
                if (!ProjectGoal.Risks.Contains(this))
                {
                    ProjectGoal.Risks.Add(this);
                }
    
                GoalId = ProjectGoal.GoalId;
            }
            else if (!skipKeys)
            {
                GoalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectGoal")
                    && (ChangeTracker.OriginalValues["ProjectGoal"] == ProjectGoal))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectGoal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectGoal", previousValue);
                }
                if (ProjectGoal != null && !ProjectGoal.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectGoal.StartTracking();
                }
            }
        }
    
        private void FixupProjectGroup(ProjectGroup previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risk.Contains(this))
            {
                previousValue.Risk.Remove(this);
            }
    
            if (ProjectGroup != null)
            {
                if (!ProjectGroup.Risk.Contains(this))
                {
                    ProjectGroup.Risk.Add(this);
                }
    
                ProjectGroupId = ProjectGroup.ProjectGroupId;
            }
            else if (!skipKeys)
            {
                ProjectGroupId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectGroup")
                    && (ChangeTracker.OriginalValues["ProjectGroup"] == ProjectGroup))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroup", previousValue);
                }
                if (ProjectGroup != null && !ProjectGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectGroup.StartTracking();
                }
            }
        }
    
        private void FixupRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.Risks.Contains(this))
                {
                    Release.Risks.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            else if (!skipKeys)
            {
                ReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupImpact(RiskImpact previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Impact != null)
            {
                if (!Impact.Risks.Contains(this))
                {
                    Impact.Risks.Add(this);
                }
    
                RiskImpactId = Impact.RiskImpactId;
            }
            else if (!skipKeys)
            {
                RiskImpactId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Impact")
                    && (ChangeTracker.OriginalValues["Impact"] == Impact))
                {
                    ChangeTracker.OriginalValues.Remove("Impact");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Impact", previousValue);
                }
                if (Impact != null && !Impact.ChangeTracker.ChangeTrackingEnabled)
                {
                    Impact.StartTracking();
                }
            }
        }
    
        private void FixupProbability(RiskProbability previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Probability != null)
            {
                if (!Probability.Risks.Contains(this))
                {
                    Probability.Risks.Add(this);
                }
    
                RiskProbabilityId = Probability.RiskProbabilityId;
            }
            else if (!skipKeys)
            {
                RiskProbabilityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Probability")
                    && (ChangeTracker.OriginalValues["Probability"] == Probability))
                {
                    ChangeTracker.OriginalValues.Remove("Probability");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Probability", previousValue);
                }
                if (Probability != null && !Probability.ChangeTracker.ChangeTrackingEnabled)
                {
                    Probability.StartTracking();
                }
            }
        }
    
        private void FixupStatus(RiskStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Risks.Contains(this))
                {
                    Status.Risks.Add(this);
                }
    
                RiskStatusId = Status.RiskStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupType(RiskType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Risks.Contains(this))
                {
                    Type.Risks.Add(this);
                }
    
                RiskTypeId = Type.RiskTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CreatedRisks.Contains(this))
            {
                previousValue.CreatedRisks.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.CreatedRisks.Contains(this))
                {
                    Creator.CreatedRisks.Add(this);
                }
    
                CreatorId = Creator.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Creator")
                    && (ChangeTracker.OriginalValues["Creator"] == Creator))
                {
                    ChangeTracker.OriginalValues.Remove("Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Creator", previousValue);
                }
                if (Creator != null && !Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Creator.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedRisks.Contains(this))
            {
                previousValue.OwnedRisks.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedRisks.Contains(this))
                {
                    Owner.OwnedRisks.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupDetectability(RiskDetectability previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Risks.Contains(this))
            {
                previousValue.Risks.Remove(this);
            }
    
            if (Detectability != null)
            {
                if (!Detectability.Risks.Contains(this))
                {
                    Detectability.Risks.Add(this);
                }
    
                RiskDetectabilityId = Detectability.RiskDetectabilityId;
            }
            else if (!skipKeys)
            {
                RiskDetectabilityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Detectability")
                    && (ChangeTracker.OriginalValues["Detectability"] == Detectability))
                {
                    ChangeTracker.OriginalValues.Remove("Detectability");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Detectability", previousValue);
                }
                if (Detectability != null && !Detectability.ChangeTracker.ChangeTrackingEnabled)
                {
                    Detectability.StartTracking();
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskDiscussion item in e.NewItems)
                {
                    item.Risk = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Risk, this))
                    {
                        item.Risk = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupMitigations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskMitigation item in e.NewItems)
                {
                    item.Risk = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Mitigations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskMitigation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Risk, this))
                    {
                        item.Risk = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Mitigations", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.TST_RISK = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_RISK, this))
                    {
                        item.TST_RISK = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }

        #endregion

    }
}
