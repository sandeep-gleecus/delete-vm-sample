//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(ProjectGroupTheme))]
    public partial class ProjectGroupGoal: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int GoalId
        {
            get { return _goalId; }
            set
            {
                if (_goalId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'GoalId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _goalId = value;
                    OnPropertyChanged("GoalId");
                }
            }
        }
        private int _goalId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public int ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroupId", _projectGroupId);
                    if (!IsDeserializing)
                    {
                        if (ProjectGroup != null && ProjectGroup.ProjectGroupId != value)
                        {
                            ProjectGroup = null;
                        }
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private int _projectGroupId;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ProjectGroup ProjectGroup
        {
            get { return _projectGroup; }
            set
            {
                if (!ReferenceEquals(_projectGroup, value))
                {
                    var previousValue = _projectGroup;
                    _projectGroup = value;
                    FixupProjectGroup(previousValue);
                    OnNavigationPropertyChanged("ProjectGroup");
                }
            }
        }
        private ProjectGroup _projectGroup;
    
        [DataMember]
        public TrackableCollection<ProjectGroupTheme> Themes
        {
            get
            {
                if (_themes == null)
                {
                    _themes = new TrackableCollection<ProjectGroupTheme>();
                    _themes.CollectionChanged += FixupThemes;
                }
                return _themes;
            }
            set
            {
                if (!ReferenceEquals(_themes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_themes != null)
                    {
                        _themes.CollectionChanged -= FixupThemes;
                    }
                    _themes = value;
                    if (_themes != null)
                    {
                        _themes.CollectionChanged += FixupThemes;
                    }
                    OnNavigationPropertyChanged("Themes");
                }
            }
        }
        private TrackableCollection<ProjectGroupTheme> _themes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProjectGroup = null;
            Themes.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProjectGroup(ProjectGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Goals.Contains(this))
            {
                previousValue.Goals.Remove(this);
            }
    
            if (ProjectGroup != null)
            {
                if (!ProjectGroup.Goals.Contains(this))
                {
                    ProjectGroup.Goals.Add(this);
                }
    
                ProjectGroupId = ProjectGroup.ProjectGroupId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectGroup")
                    && (ChangeTracker.OriginalValues["ProjectGroup"] == ProjectGroup))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroup", previousValue);
                }
                if (ProjectGroup != null && !ProjectGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectGroup.StartTracking();
                }
            }
        }
    
        private void FixupThemes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupTheme item in e.NewItems)
                {
                    item.Goal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Themes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupTheme item in e.OldItems)
                {
                    if (ReferenceEquals(item.Goal, this))
                    {
                        item.Goal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Themes", item);
                    }
                }
            }
        }

        #endregion

    }
}
