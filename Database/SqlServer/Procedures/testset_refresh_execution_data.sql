-- =======================================================
-- Author:			Inflectra Corporation
-- Business Object: TestSet
-- Description:		Refreshes the execution data associated with a test set
-- Remarks:			If @TestSetId = NULL, it refreshes all test sets in the project
-- =======================================================
IF OBJECT_ID ( 'TESTSET_REFRESH_EXECUTION_DATA', 'P' ) IS NOT NULL 
    DROP PROCEDURE [TESTSET_REFRESH_EXECUTION_DATA];
GO
CREATE PROCEDURE [TESTSET_REFRESH_EXECUTION_DATA]
	@ProjectId INT,
	@TestSetId INT
AS
BEGIN
	SET NOCOUNT ON;
	SET ANSI_WARNINGS OFF;

    --First reset the execution data to starting values
    UPDATE TST_TEST_SET
	SET
		ESTIMATED_DURATION = NULL,
		ACTUAL_DURATION = NULL,
		COUNT_PASSED = 0,
		COUNT_FAILED = 0,
		COUNT_CAUTION = 0,
		COUNT_BLOCKED = 0,
		COUNT_NOT_RUN = 0,
		COUNT_NOT_APPLICABLE = 0,
		EXECUTION_DATE = NULL
	WHERE TEST_SET_ID = @TestSetId;

	--Next we need to update the test set execution data
	MERGE TST_TEST_SET AS TSX
	USING (SELECT
			TEST_SET_ID, MIN(EXECUTION_DATE) AS EXECUTION_DATE, SUM(ESTIMATED_DURATION) AS ESTIMATED_DURATION, SUM(ACTUAL_DURATION) AS ACTUAL_DURATION,
			SUM(IS_FAILED) AS COUNT_FAILED, SUM(IS_PASSED) AS COUNT_PASSED, SUM(IS_NOT_RUN) AS COUNT_NOT_RUN, SUM(IS_BLOCKED) AS COUNT_BLOCKED,
			SUM(IS_CAUTION) AS COUNT_CAUTION, SUM(IS_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE
		FROM
			(SELECT TSE.TEST_SET_ID, TSC.TEST_CASE_ID, TSC.TEST_SET_TEST_CASE_ID, TRN.EXECUTION_DATE, TST.ESTIMATED_DURATION, TRN.ACTUAL_DURATION,
					(CASE TRN.EXECUTION_STATUS_ID WHEN 1 THEN 1 ELSE 0 END) AS IS_FAILED,
					(CASE TRN.EXECUTION_STATUS_ID WHEN 2 THEN 1 ELSE 0 END) AS IS_PASSED,
					(CASE ISNULL(TRN.EXECUTION_STATUS_ID,3) WHEN 3 THEN 1 ELSE 0 END) AS IS_NOT_RUN,
					(CASE TRN.EXECUTION_STATUS_ID WHEN 4 THEN 1 ELSE 0 END) AS IS_NOT_APPLICABLE,
					(CASE TRN.EXECUTION_STATUS_ID WHEN 5 THEN 1 ELSE 0 END) AS IS_BLOCKED,
					(CASE TRN.EXECUTION_STATUS_ID WHEN 6 THEN 1 ELSE 0 END) AS IS_CAUTION
			FROM TST_TEST_SET TSE LEFT JOIN TST_TEST_SET_TEST_CASE TSC
			ON TSE.TEST_SET_ID = TSC.TEST_SET_ID LEFT JOIN 
						(SELECT RUN1.TEST_SET_TEST_CASE_ID, MIN(RUN1.EXECUTION_STATUS_ID) AS EXECUTION_STATUS_ID, MIN(RUN1.END_DATE) AS EXECUTION_DATE, MIN(RUN1.ESTIMATED_DURATION) AS ESTIMATED_DURATION, MIN(RUN1.ACTUAL_DURATION) AS ACTUAL_DURATION
						FROM TST_TEST_RUN RUN1 INNER JOIN
							(SELECT TEST_SET_TEST_CASE_ID, MAX(END_DATE) AS END_DATE
							FROM TST_TEST_RUN
							GROUP BY TEST_SET_TEST_CASE_ID) RUN2
						ON RUN1.TEST_SET_TEST_CASE_ID = RUN2.TEST_SET_TEST_CASE_ID AND RUN1.END_DATE = RUN2.END_DATE
						GROUP BY RUN1.TEST_SET_TEST_CASE_ID) TRN
			ON		TSC.TEST_SET_TEST_CASE_ID = TRN.TEST_SET_TEST_CASE_ID INNER JOIN TST_TEST_CASE TST
			ON     TST.TEST_CASE_ID = TSC.TEST_CASE_ID
			WHERE TSE.IS_DELETED = 0
				AND TST.IS_DELETED = 0
				AND (@TestSetId IS NULL OR TSE.TEST_SET_ID = @TestSetId)
				AND TSE.PROJECT_ID = @ProjectId
				AND TST.PROJECT_ID = @ProjectId) TSE2
		GROUP BY TEST_SET_ID) AS TSE3
		ON TSX.TEST_SET_ID = TSE3.TEST_SET_ID
	WHEN MATCHED THEN
		UPDATE
			SET
				TSX.ESTIMATED_DURATION = TSE3.ESTIMATED_DURATION,
				TSX.ACTUAL_DURATION = TSE3.ACTUAL_DURATION,
				TSX.COUNT_PASSED = TSE3.COUNT_PASSED,
				TSX.COUNT_FAILED = TSE3.COUNT_FAILED,
				TSX.COUNT_CAUTION = TSE3.COUNT_CAUTION,
				TSX.COUNT_BLOCKED = TSE3.COUNT_BLOCKED,
				TSX.COUNT_NOT_RUN = TSE3.COUNT_NOT_RUN,
				TSX.COUNT_NOT_APPLICABLE = TSE3.COUNT_NOT_APPLICABLE,
				TSX.EXECUTION_DATE = TSE3.EXECUTION_DATE;
				
	--Next we need to update the release data (for all releases)
	WITH CTE AS
	(
		SELECT T1.TEST_SET_ID, T1.TEST_RUN_ID, T2.RELEASE_ID AS RELEASE_ID, T1.TEST_SET_TEST_CASE_ID, T1.END_DATE, T1.EXECUTION_STATUS_ID, T1.ACTUAL_DURATION, ROW_NUMBER() OVER
		(
			PARTITION BY T2.RELEASE_ID, T1.TEST_SET_TEST_CASE_ID
			ORDER BY END_DATE DESC
		) AS TRN
		FROM TST_TEST_RUN T1
		CROSS APPLY dbo.FN_RELEASE_GET_SELF_AND_ROLLUP_PARENTS(@ProjectId, T1.RELEASE_ID) AS T2
		WHERE (T1.TEST_SET_ID = @TestSetId OR (@TestSetId IS NULL AND T1.TEST_SET_ID IS NOT NULL))AND T1.EXECUTION_STATUS_ID <> 3 /* Not Run */	
	)
	
	MERGE TST_RELEASE_TEST_SET AS TARGET
	USING (
		SELECT 
			RTC.TEST_SET_ID,
			RTC.RELEASE_ID,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 1 THEN 1 ELSE 0 END) AS COUNT_FAILED,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 2 THEN 1 ELSE 0 END) AS COUNT_PASSED,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 3 THEN 1 ELSE 0 END) AS COUNT_NOT_RUN,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 4 THEN 1 ELSE 0 END) AS COUNT_NOT_APPLICABLE,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 5 THEN 1 ELSE 0 END) AS COUNT_BLOCKED,
			SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 6 THEN 1 ELSE 0 END) AS COUNT_CAUTION,
			MIN(RTC.END_DATE) AS EXECUTION_DATE,
			SUM(RTC.ACTUAL_DURATION) AS ACTUAL_DURATION
		FROM
		(
			SELECT TEST_SET_ID, TEST_RUN_ID, RELEASE_ID, TEST_SET_TEST_CASE_ID, END_DATE, EXECUTION_STATUS_ID, ACTUAL_DURATION
			FROM CTE
			WHERE TRN = 1
		) RTC
		GROUP BY RTC.TEST_SET_ID, RTC.RELEASE_ID
	) AS SOURCE
	ON
		TARGET.RELEASE_ID = SOURCE.RELEASE_ID AND
		TARGET.TEST_SET_ID = SOURCE.TEST_SET_ID
	WHEN MATCHED THEN
		UPDATE
			SET
				TARGET.COUNT_PASSED = SOURCE.COUNT_PASSED,
				TARGET.COUNT_FAILED = SOURCE.COUNT_FAILED,
				TARGET.COUNT_CAUTION = SOURCE.COUNT_CAUTION,
				TARGET.COUNT_BLOCKED = SOURCE.COUNT_BLOCKED,
				TARGET.COUNT_NOT_RUN = SOURCE.COUNT_NOT_RUN,
				TARGET.COUNT_NOT_APPLICABLE = SOURCE.COUNT_NOT_APPLICABLE,
				TARGET.ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
				TARGET.EXECUTION_DATE = SOURCE.EXECUTION_DATE
	WHEN NOT MATCHED BY TARGET THEN 
		INSERT (RELEASE_ID, TEST_SET_ID,
			COUNT_PASSED, COUNT_FAILED, COUNT_CAUTION, COUNT_BLOCKED, COUNT_NOT_RUN, COUNT_NOT_APPLICABLE,
			ACTUAL_DURATION, EXECUTION_DATE) 
		VALUES (SOURCE.RELEASE_ID, SOURCE.TEST_SET_ID,
			SOURCE.COUNT_PASSED, SOURCE.COUNT_FAILED, SOURCE.COUNT_CAUTION, SOURCE.COUNT_BLOCKED, SOURCE.COUNT_NOT_RUN,
			SOURCE.COUNT_NOT_APPLICABLE, SOURCE.ACTUAL_DURATION, SOURCE.EXECUTION_DATE);	
END
GO
