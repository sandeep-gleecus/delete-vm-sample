//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_Event: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EVENT_ID
        {
            get { return _eVENT_ID; }
            set
            {
                if (_eVENT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_ID = value;
                    OnPropertyChanged("EVENT_ID");
                }
            }
        }
        private string _eVENT_ID;

		[DataMember]
		public string EVENT_TYPE_NAME
		{
			get { return _eVENT_TYPE_NAME; }
			set
			{
				if (_eVENT_TYPE_NAME != value)
				{
					if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
					{
						throw new InvalidOperationException("The property 'EVENT_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
					}
					_eVENT_TYPE_NAME = value;
					OnPropertyChanged("EVENT_TYPE_NAME");
				}
			}
		}
		private string _eVENT_TYPE_NAME;
		[DataMember]
        public int EVENT_TYPE_ID
        {
            get { return _eVENT_TYPE_ID; }
            set
            {
                if (_eVENT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_TYPE_ID = value;
                    OnPropertyChanged("EVENT_TYPE_ID");
                }
            }
        }
        private int _eVENT_TYPE_ID;
    
        [DataMember]
        public System.DateTime EVENT_TIME_UTC
        {
            get { return _eVENT_TIME_UTC; }
            set
            {
                if (_eVENT_TIME_UTC != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_TIME_UTC' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_TIME_UTC = value;
                    OnPropertyChanged("EVENT_TIME_UTC");
                }
            }
        }
        private System.DateTime _eVENT_TIME_UTC;
    
        [DataMember]
        public System.DateTime EVENT_TIME
        {
            get { return _eVENT_TIME; }
            set
            {
                if (_eVENT_TIME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_TIME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_TIME = value;
                    OnPropertyChanged("EVENT_TIME");
                }
            }
        }
        private System.DateTime _eVENT_TIME;
    
        [DataMember]
        public string EVENT_CATEGORY
        {
            get { return _eVENT_CATEGORY; }
            set
            {
                if (_eVENT_CATEGORY != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_CATEGORY' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_CATEGORY = value;
                    OnPropertyChanged("EVENT_CATEGORY");
                }
            }
        }
        private string _eVENT_CATEGORY;
    
        [DataMember]
        public decimal EVENT_SEQUENCE
        {
            get { return _eVENT_SEQUENCE; }
            set
            {
                if (_eVENT_SEQUENCE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_SEQUENCE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_SEQUENCE = value;
                    OnPropertyChanged("EVENT_SEQUENCE");
                }
            }
        }
        private decimal _eVENT_SEQUENCE;
    
        [DataMember]
        public decimal EVENT_OCCURRENCE
        {
            get { return _eVENT_OCCURRENCE; }
            set
            {
                if (_eVENT_OCCURRENCE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_OCCURRENCE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_OCCURRENCE = value;
                    OnPropertyChanged("EVENT_OCCURRENCE");
                }
            }
        }
        private decimal _eVENT_OCCURRENCE;
    
        [DataMember]
        public int EVENT_CODE
        {
            get { return _eVENT_CODE; }
            set
            {
                if (_eVENT_CODE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_CODE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_CODE = value;
                    OnPropertyChanged("EVENT_CODE");
                }
            }
        }
        private int _eVENT_CODE;
    
        [DataMember]
        public int EVENT_DETAIL_CODE
        {
            get { return _eVENT_DETAIL_CODE; }
            set
            {
                if (_eVENT_DETAIL_CODE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EVENT_DETAIL_CODE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eVENT_DETAIL_CODE = value;
                    OnPropertyChanged("EVENT_DETAIL_CODE");
                }
            }
        }
        private int _eVENT_DETAIL_CODE;
    
        [DataMember]
        public string MESSAGE
        {
            get { return _mESSAGE; }
            set
            {
                if (_mESSAGE != value)
                {
                    ChangeTracker.RecordOriginalValue("MESSAGE", _mESSAGE);
                    _mESSAGE = value;
                    OnPropertyChanged("MESSAGE");
                }
            }
        }
        private string _mESSAGE;
    
        [DataMember]
        public string APPLICATION_PATH
        {
            get { return _aPPLICATION_PATH; }
            set
            {
                if (_aPPLICATION_PATH != value)
                {
                    ChangeTracker.RecordOriginalValue("APPLICATION_PATH", _aPPLICATION_PATH);
                    _aPPLICATION_PATH = value;
                    OnPropertyChanged("APPLICATION_PATH");
                }
            }
        }
        private string _aPPLICATION_PATH;
    
        [DataMember]
        public string APPLICATION_VIRTUAL_PATH
        {
            get { return _aPPLICATION_VIRTUAL_PATH; }
            set
            {
                if (_aPPLICATION_VIRTUAL_PATH != value)
                {
                    ChangeTracker.RecordOriginalValue("APPLICATION_VIRTUAL_PATH", _aPPLICATION_VIRTUAL_PATH);
                    _aPPLICATION_VIRTUAL_PATH = value;
                    OnPropertyChanged("APPLICATION_VIRTUAL_PATH");
                }
            }
        }
        private string _aPPLICATION_VIRTUAL_PATH;
    
        [DataMember]
        public string MACHINE_NAME
        {
            get { return _mACHINE_NAME; }
            set
            {
                if (_mACHINE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MACHINE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _mACHINE_NAME = value;
                    OnPropertyChanged("MACHINE_NAME");
                }
            }
        }
        private string _mACHINE_NAME;
    
        [DataMember]
        public string REQUEST_URL
        {
            get { return _rEQUEST_URL; }
            set
            {
                if (_rEQUEST_URL != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUEST_URL", _rEQUEST_URL);
                    _rEQUEST_URL = value;
                    OnPropertyChanged("REQUEST_URL");
                }
            }
        }
        private string _rEQUEST_URL;
    
        [DataMember]
        public string EXCEPTION_TYPE
        {
            get { return _eXCEPTION_TYPE; }
            set
            {
                if (_eXCEPTION_TYPE != value)
                {
                    ChangeTracker.RecordOriginalValue("EXCEPTION_TYPE", _eXCEPTION_TYPE);
                    _eXCEPTION_TYPE = value;
                    OnPropertyChanged("EXCEPTION_TYPE");
                }
            }
        }
        private string _eXCEPTION_TYPE;
    
        [DataMember]
        public string DETAILS
        {
            get { return _dETAILS; }
            set
            {
                if (_dETAILS != value)
                {
                    ChangeTracker.RecordOriginalValue("DETAILS", _dETAILS);
                    _dETAILS = value;
                    OnPropertyChanged("DETAILS");
                }
            }
        }
        private string _dETAILS;
    
        

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
