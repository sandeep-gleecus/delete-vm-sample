//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Project))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(RequirementUser))]
    [KnownType(typeof(RequirementStatus))]
    [KnownType(typeof(RequirementStep))]
    [KnownType(typeof(RequirementType))]
    [KnownType(typeof(Component))]
    [KnownType(typeof(Importance))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(RequirementDiscussion))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(TestStep))]
    [KnownType(typeof(ProjectGoal))]
    [KnownType(typeof(ProjectGroupTheme))]
    [KnownType(typeof(TST_REQUIREMENT_SIGNATURE))]
    public partial class Requirement: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RequirementId
        {
            get { return _requirementId; }
            set
            {
                if (_requirementId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RequirementId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _requirementId = value;
                    OnPropertyChanged("RequirementId");
                }
            }
        }
        private int _requirementId;
    
        [DataMember]
        public int AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorId", _authorId);
                    if (!IsDeserializing)
                    {
                        if (Author != null && Author.UserId != value)
                        {
                            Author = null;
                        }
                    }
                    _authorId = value;
                    OnPropertyChanged("AuthorId");
                }
            }
        }
        private int _authorId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int RequirementTypeId
        {
            get { return _requirementTypeId; }
            set
            {
                if (_requirementTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementTypeId", _requirementTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.RequirementTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _requirementTypeId = value;
                    OnPropertyChanged("RequirementTypeId");
                }
            }
        }
        private int _requirementTypeId;
    
        [DataMember]
        public int RequirementStatusId
        {
            get { return _requirementStatusId; }
            set
            {
                if (_requirementStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementStatusId", _requirementStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.RequirementStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _requirementStatusId = value;
                    OnPropertyChanged("RequirementStatusId");
                }
            }
        }
        private int _requirementStatusId;
    
        [DataMember]
        public Nullable<int> ComponentId
        {
            get { return _componentId; }
            set
            {
                if (_componentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ComponentId", _componentId);
                    if (!IsDeserializing)
                    {
                        if (Component != null && Component.ComponentId != value)
                        {
                            Component = null;
                        }
                    }
                    _componentId = value;
                    OnPropertyChanged("ComponentId");
                }
            }
        }
        private Nullable<int> _componentId;
    
        [DataMember]
        public Nullable<int> ImportanceId
        {
            get { return _importanceId; }
            set
            {
                if (_importanceId != value)
                {
                    ChangeTracker.RecordOriginalValue("ImportanceId", _importanceId);
                    if (!IsDeserializing)
                    {
                        if (Importance != null && Importance.ImportanceId != value)
                        {
                            Importance = null;
                        }
                    }
                    _importanceId = value;
                    OnPropertyChanged("ImportanceId");
                }
            }
        }
        private Nullable<int> _importanceId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string IndentLevel
        {
            get { return _indentLevel; }
            set
            {
                if (_indentLevel != value)
                {
                    ChangeTracker.RecordOriginalValue("IndentLevel", _indentLevel);
                    _indentLevel = value;
                    OnPropertyChanged("IndentLevel");
                }
            }
        }
        private string _indentLevel;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public bool IsSummary
        {
            get { return _isSummary; }
            set
            {
                if (_isSummary != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSummary", _isSummary);
                    _isSummary = value;
                    OnPropertyChanged("IsSummary");
                }
            }
        }
        private bool _isSummary;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public int CoverageCountTotal
        {
            get { return _coverageCountTotal; }
            internal set
            {
                if (_coverageCountTotal != value)
                {
                    ChangeTracker.RecordOriginalValue("CoverageCountTotal", _coverageCountTotal);
                    _coverageCountTotal = value;
                    OnPropertyChanged("CoverageCountTotal");
                }
            }
        }
        private int _coverageCountTotal;
    
        [DataMember]
        public int CoverageCountPassed
        {
            get { return _coverageCountPassed; }
            internal set
            {
                if (_coverageCountPassed != value)
                {
                    ChangeTracker.RecordOriginalValue("CoverageCountPassed", _coverageCountPassed);
                    _coverageCountPassed = value;
                    OnPropertyChanged("CoverageCountPassed");
                }
            }
        }
        private int _coverageCountPassed;
    
        [DataMember]
        public int CoverageCountFailed
        {
            get { return _coverageCountFailed; }
            internal set
            {
                if (_coverageCountFailed != value)
                {
                    ChangeTracker.RecordOriginalValue("CoverageCountFailed", _coverageCountFailed);
                    _coverageCountFailed = value;
                    OnPropertyChanged("CoverageCountFailed");
                }
            }
        }
        private int _coverageCountFailed;
    
        [DataMember]
        public int CoverageCountCaution
        {
            get { return _coverageCountCaution; }
            internal set
            {
                if (_coverageCountCaution != value)
                {
                    ChangeTracker.RecordOriginalValue("CoverageCountCaution", _coverageCountCaution);
                    _coverageCountCaution = value;
                    OnPropertyChanged("CoverageCountCaution");
                }
            }
        }
        private int _coverageCountCaution;
    
        [DataMember]
        public int CoverageCountBlocked
        {
            get { return _coverageCountBlocked; }
            internal set
            {
                if (_coverageCountBlocked != value)
                {
                    ChangeTracker.RecordOriginalValue("CoverageCountBlocked", _coverageCountBlocked);
                    _coverageCountBlocked = value;
                    OnPropertyChanged("CoverageCountBlocked");
                }
            }
        }
        private int _coverageCountBlocked;
    
        [DataMember]
        public int TaskCount
        {
            get { return _taskCount; }
            internal set
            {
                if (_taskCount != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskCount", _taskCount);
                    _taskCount = value;
                    OnPropertyChanged("TaskCount");
                }
            }
        }
        private int _taskCount;
    
        [DataMember]
        public Nullable<int> TaskEstimatedEffort
        {
            get { return _taskEstimatedEffort; }
            internal set
            {
                if (_taskEstimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskEstimatedEffort", _taskEstimatedEffort);
                    _taskEstimatedEffort = value;
                    OnPropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        private Nullable<int> _taskEstimatedEffort;
    
        [DataMember]
        public Nullable<int> TaskActualEffort
        {
            get { return _taskActualEffort; }
            internal set
            {
                if (_taskActualEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskActualEffort", _taskActualEffort);
                    _taskActualEffort = value;
                    OnPropertyChanged("TaskActualEffort");
                }
            }
        }
        private Nullable<int> _taskActualEffort;
    
        [DataMember]
        public Nullable<int> TaskProjectedEffort
        {
            get { return _taskProjectedEffort; }
            internal set
            {
                if (_taskProjectedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskProjectedEffort", _taskProjectedEffort);
                    _taskProjectedEffort = value;
                    OnPropertyChanged("TaskProjectedEffort");
                }
            }
        }
        private Nullable<int> _taskProjectedEffort;
    
        [DataMember]
        public Nullable<int> TaskRemainingEffort
        {
            get { return _taskRemainingEffort; }
            internal set
            {
                if (_taskRemainingEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskRemainingEffort", _taskRemainingEffort);
                    _taskRemainingEffort = value;
                    OnPropertyChanged("TaskRemainingEffort");
                }
            }
        }
        private Nullable<int> _taskRemainingEffort;
    
        [DataMember]
        public int TaskPercentOnTime
        {
            get { return _taskPercentOnTime; }
            internal set
            {
                if (_taskPercentOnTime != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentOnTime", _taskPercentOnTime);
                    _taskPercentOnTime = value;
                    OnPropertyChanged("TaskPercentOnTime");
                }
            }
        }
        private int _taskPercentOnTime;
    
        [DataMember]
        public int TaskPercentLateFinish
        {
            get { return _taskPercentLateFinish; }
            internal set
            {
                if (_taskPercentLateFinish != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateFinish", _taskPercentLateFinish);
                    _taskPercentLateFinish = value;
                    OnPropertyChanged("TaskPercentLateFinish");
                }
            }
        }
        private int _taskPercentLateFinish;
    
        [DataMember]
        public int TaskPercentNotStart
        {
            get { return _taskPercentNotStart; }
            internal set
            {
                if (_taskPercentNotStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentNotStart", _taskPercentNotStart);
                    _taskPercentNotStart = value;
                    OnPropertyChanged("TaskPercentNotStart");
                }
            }
        }
        private int _taskPercentNotStart;
    
        [DataMember]
        public int TaskPercentLateStart
        {
            get { return _taskPercentLateStart; }
            internal set
            {
                if (_taskPercentLateStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateStart", _taskPercentLateStart);
                    _taskPercentLateStart = value;
                    OnPropertyChanged("TaskPercentLateStart");
                }
            }
        }
        private int _taskPercentLateStart;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<decimal> EstimatePoints
        {
            get { return _estimatePoints; }
            set
            {
                if (_estimatePoints != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatePoints", _estimatePoints);
                    _estimatePoints = value;
                    OnPropertyChanged("EstimatePoints");
                }
            }
        }
        private Nullable<decimal> _estimatePoints;
    
        [DataMember]
        public Nullable<int> EstimatedEffort
        {
            get { return _estimatedEffort; }
            internal set
            {
                if (_estimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedEffort", _estimatedEffort);
                    _estimatedEffort = value;
                    OnPropertyChanged("EstimatedEffort");
                }
            }
        }
        private Nullable<int> _estimatedEffort;
    
        [DataMember]
        public Nullable<int> Rank
        {
            get { return _rank; }
            set
            {
                if (_rank != value)
                {
                    ChangeTracker.RecordOriginalValue("Rank", _rank);
                    _rank = value;
                    OnPropertyChanged("Rank");
                }
            }
        }
        private Nullable<int> _rank;
    
        [DataMember]
        public Nullable<int> ThemeId
        {
            get { return _themeId; }
            set
            {
                if (_themeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ThemeId", _themeId);
                    if (!IsDeserializing)
                    {
                        if (Theme != null && Theme.ThemeId != value)
                        {
                            Theme = null;
                        }
                    }
                    _themeId = value;
                    OnPropertyChanged("ThemeId");
                }
            }
        }
        private Nullable<int> _themeId;
    
        [DataMember]
        public Nullable<int> GoalId
        {
            get { return _goalId; }
            set
            {
                if (_goalId != value)
                {
                    ChangeTracker.RecordOriginalValue("GoalId", _goalId);
                    if (!IsDeserializing)
                    {
                        if (Goal != null && Goal.GoalId != value)
                        {
                            Goal = null;
                        }
                    }
                    _goalId = value;
                    OnPropertyChanged("GoalId");
                }
            }
        }
        private Nullable<int> _goalId;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> PercentComplete
        {
            get { return _percentComplete; }
            set
            {
                if (_percentComplete != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentComplete", _percentComplete);
                    _percentComplete = value;
                    OnPropertyChanged("PercentComplete");
                }
            }
        }
        private Nullable<int> _percentComplete;
    
        [DataMember]
        public bool IsSuspect
        {
            get { return _isSuspect; }
            set
            {
                if (_isSuspect != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSuspect", _isSuspect);
                    _isSuspect = value;
                    OnPropertyChanged("IsSuspect");
                }
            }
        }
        private bool _isSuspect;
    
        [DataMember]
        public string APPROVED_STATUS
        {
            get { return _aPPROVED_STATUS; }
            set
            {
                if (_aPPROVED_STATUS != value)
                {
                    ChangeTracker.RecordOriginalValue("APPROVED_STATUS", _aPPROVED_STATUS);
                    _aPPROVED_STATUS = value;
                    OnPropertyChanged("APPROVED_STATUS");
                }
            }
        }
        private string _aPPROVED_STATUS;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public User Author
        {
            get { return _author; }
            set
            {
                if (!ReferenceEquals(_author, value))
                {
                    var previousValue = _author;
                    _author = value;
                    FixupAuthor(previousValue);
                    OnNavigationPropertyChanged("Author");
                }
            }
        }
        private User _author;
    
        [DataMember]
        public TrackableCollection<TestCase> TestCases
        {
            get
            {
                if (_testCases == null)
                {
                    _testCases = new TrackableCollection<TestCase>();
                    _testCases.CollectionChanged += FixupTestCases;
                }
                return _testCases;
            }
            set
            {
                if (!ReferenceEquals(_testCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged -= FixupTestCases;
                    }
                    _testCases = value;
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged += FixupTestCases;
                    }
                    OnNavigationPropertyChanged("TestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _testCases;
    
        [DataMember]
        public TrackableCollection<RequirementUser> UserViewState
        {
            get
            {
                if (_userViewState == null)
                {
                    _userViewState = new TrackableCollection<RequirementUser>();
                    _userViewState.CollectionChanged += FixupUserViewState;
                }
                return _userViewState;
            }
            set
            {
                if (!ReferenceEquals(_userViewState, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userViewState != null)
                    {
                        _userViewState.CollectionChanged -= FixupUserViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementUser item in _userViewState)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userViewState = value;
                    if (_userViewState != null)
                    {
                        _userViewState.CollectionChanged += FixupUserViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementUser item in _userViewState)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserViewState");
                }
            }
        }
        private TrackableCollection<RequirementUser> _userViewState;
    
        [DataMember]
        public RequirementStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private RequirementStatus _status;
    
        [DataMember]
        public TrackableCollection<RequirementStep> Steps
        {
            get
            {
                if (_steps == null)
                {
                    _steps = new TrackableCollection<RequirementStep>();
                    _steps.CollectionChanged += FixupSteps;
                }
                return _steps;
            }
            set
            {
                if (!ReferenceEquals(_steps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_steps != null)
                    {
                        _steps.CollectionChanged -= FixupSteps;
                    }
                    _steps = value;
                    if (_steps != null)
                    {
                        _steps.CollectionChanged += FixupSteps;
                    }
                    OnNavigationPropertyChanged("Steps");
                }
            }
        }
        private TrackableCollection<RequirementStep> _steps;
    
        [DataMember]
        public RequirementType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private RequirementType _type;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public Component Component
        {
            get { return _component; }
            set
            {
                if (!ReferenceEquals(_component, value))
                {
                    var previousValue = _component;
                    _component = value;
                    FixupComponent(previousValue);
                    OnNavigationPropertyChanged("Component");
                }
            }
        }
        private Component _component;
    
        [DataMember]
        public Importance Importance
        {
            get { return _importance; }
            set
            {
                if (!ReferenceEquals(_importance, value))
                {
                    var previousValue = _importance;
                    _importance = value;
                    FixupImportance(previousValue);
                    OnNavigationPropertyChanged("Importance");
                }
            }
        }
        private Importance _importance;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;
    
        [DataMember]
        public TrackableCollection<RequirementDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<RequirementDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<RequirementDiscussion> _discussions;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public TrackableCollection<TestStep> TestSteps
        {
            get
            {
                if (_testSteps == null)
                {
                    _testSteps = new TrackableCollection<TestStep>();
                    _testSteps.CollectionChanged += FixupTestSteps;
                }
                return _testSteps;
            }
            set
            {
                if (!ReferenceEquals(_testSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged -= FixupTestSteps;
                    }
                    _testSteps = value;
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged += FixupTestSteps;
                    }
                    OnNavigationPropertyChanged("TestSteps");
                }
            }
        }
        private TrackableCollection<TestStep> _testSteps;
    
        [DataMember]
        public ProjectGoal Goal
        {
            get { return _goal; }
            set
            {
                if (!ReferenceEquals(_goal, value))
                {
                    var previousValue = _goal;
                    _goal = value;
                    FixupGoal(previousValue);
                    OnNavigationPropertyChanged("Goal");
                }
            }
        }
        private ProjectGoal _goal;
    
        [DataMember]
        public ProjectGroupTheme Theme
        {
            get { return _theme; }
            set
            {
                if (!ReferenceEquals(_theme, value))
                {
                    var previousValue = _theme;
                    _theme = value;
                    FixupTheme(previousValue);
                    OnNavigationPropertyChanged("Theme");
                }
            }
        }
        private ProjectGroupTheme _theme;
    
        [DataMember]
        public TrackableCollection<TST_REQUIREMENT_SIGNATURE> TST_REQUIREMENT_SIGNATURE
        {
            get
            {
                if (_tST_REQUIREMENT_SIGNATURE == null)
                {
                    _tST_REQUIREMENT_SIGNATURE = new TrackableCollection<TST_REQUIREMENT_SIGNATURE>();
                    _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                }
                return _tST_REQUIREMENT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged -= FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    _tST_REQUIREMENT_SIGNATURE = value;
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_REQUIREMENT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_REQUIREMENT_SIGNATURE> _tST_REQUIREMENT_SIGNATURE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Project = null;
            Author = null;
            TestCases.Clear();
            UserViewState.Clear();
            Status = null;
            Steps.Clear();
            Type = null;
            Owner = null;
            Component = null;
            Importance = null;
            Tasks.Clear();
            Discussions.Clear();
            Release = null;
            TestSteps.Clear();
            Goal = null;
            Theme = null;
            TST_REQUIREMENT_SIGNATURE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Requirements.Contains(this))
                {
                    Project.Requirements.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupAuthor(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuthoredRequirements.Contains(this))
            {
                previousValue.AuthoredRequirements.Remove(this);
            }
    
            if (Author != null)
            {
                if (!Author.AuthoredRequirements.Contains(this))
                {
                    Author.AuthoredRequirements.Add(this);
                }
    
                AuthorId = Author.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Author")
                    && (ChangeTracker.OriginalValues["Author"] == Author))
                {
                    ChangeTracker.OriginalValues.Remove("Author");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Author", previousValue);
                }
                if (Author != null && !Author.ChangeTracker.ChangeTrackingEnabled)
                {
                    Author.StartTracking();
                }
            }
        }
    
        private void FixupStatus(RequirementStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Requirements.Contains(this))
                {
                    Status.Requirements.Add(this);
                }
    
                RequirementStatusId = Status.RequirementStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupType(RequirementType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Requirements.Contains(this))
                {
                    Type.Requirements.Add(this);
                }
    
                RequirementTypeId = Type.RequirementTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedRequirements.Contains(this))
            {
                previousValue.OwnedRequirements.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedRequirements.Contains(this))
                {
                    Owner.OwnedRequirements.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupComponent(Component previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Component != null)
            {
                if (!Component.Requirements.Contains(this))
                {
                    Component.Requirements.Add(this);
                }
    
                ComponentId = Component.ComponentId;
            }
            else if (!skipKeys)
            {
                ComponentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Component")
                    && (ChangeTracker.OriginalValues["Component"] == Component))
                {
                    ChangeTracker.OriginalValues.Remove("Component");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Component", previousValue);
                }
                if (Component != null && !Component.ChangeTracker.ChangeTrackingEnabled)
                {
                    Component.StartTracking();
                }
            }
        }
    
        private void FixupImportance(Importance previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Importance != null)
            {
                if (!Importance.Requirements.Contains(this))
                {
                    Importance.Requirements.Add(this);
                }
    
                ImportanceId = Importance.ImportanceId;
            }
            else if (!skipKeys)
            {
                ImportanceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Importance")
                    && (ChangeTracker.OriginalValues["Importance"] == Importance))
                {
                    ChangeTracker.OriginalValues.Remove("Importance");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Importance", previousValue);
                }
                if (Importance != null && !Importance.ChangeTracker.ChangeTrackingEnabled)
                {
                    Importance.StartTracking();
                }
            }
        }
    
        private void FixupRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.Requirements.Contains(this))
                {
                    Release.Requirements.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            else if (!skipKeys)
            {
                ReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupGoal(ProjectGoal previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Goal != null)
            {
                if (!Goal.Requirements.Contains(this))
                {
                    Goal.Requirements.Add(this);
                }
    
                GoalId = Goal.GoalId;
            }
            else if (!skipKeys)
            {
                GoalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Goal")
                    && (ChangeTracker.OriginalValues["Goal"] == Goal))
                {
                    ChangeTracker.OriginalValues.Remove("Goal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Goal", previousValue);
                }
                if (Goal != null && !Goal.ChangeTracker.ChangeTrackingEnabled)
                {
                    Goal.StartTracking();
                }
            }
        }
    
        private void FixupTheme(ProjectGroupTheme previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requirements.Contains(this))
            {
                previousValue.Requirements.Remove(this);
            }
    
            if (Theme != null)
            {
                if (!Theme.Requirements.Contains(this))
                {
                    Theme.Requirements.Add(this);
                }
    
                ThemeId = Theme.ThemeId;
            }
            else if (!skipKeys)
            {
                ThemeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Theme")
                    && (ChangeTracker.OriginalValues["Theme"] == Theme))
                {
                    ChangeTracker.OriginalValues.Remove("Theme");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Theme", previousValue);
                }
                if (Theme != null && !Theme.ChangeTracker.ChangeTrackingEnabled)
                {
                    Theme.StartTracking();
                }
            }
        }
    
        private void FixupTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    if (!item.Requirements.Contains(this))
                    {
                        item.Requirements.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (item.Requirements.Contains(this))
                    {
                        item.Requirements.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCases", item);
                    }
                }
            }
        }
    
        private void FixupUserViewState(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementUser item in e.NewItems)
                {
                    item.Requirement = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserViewState", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Requirement, this))
                    {
                        item.Requirement = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserViewState", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementStep item in e.NewItems)
                {
                    item.Requirement = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Steps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.Requirement, this))
                    {
                        item.Requirement = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Steps", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Requirement = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Requirement, this))
                    {
                        item.Requirement = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementDiscussion item in e.NewItems)
                {
                    item.Requirement = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Requirement, this))
                    {
                        item.Requirement = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupTestSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStep item in e.NewItems)
                {
                    if (!item.Requirements.Contains(this))
                    {
                        item.Requirements.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStep item in e.OldItems)
                {
                    if (item.Requirements.Contains(this))
                    {
                        item.Requirements.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSteps", item);
                    }
                }
            }
        }
    
        private void FixupTST_REQUIREMENT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.NewItems)
                {
                    item.TST_REQUIREMENT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_REQUIREMENT, this))
                    {
                        item.TST_REQUIREMENT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
