-- ================================================================
-- Author:			Inflectra Corporation
-- Business Object: TestSet
-- Description:		Retrieves the summary info for the project home
-- ================================================================
IF OBJECT_ID ( 'TESTSET_RETRIEVE_SUMMARY_DATA', 'P' ) IS NOT NULL 
    DROP PROCEDURE TESTSET_RETRIEVE_SUMMARY_DATA;
GO
CREATE PROCEDURE TESTSET_RETRIEVE_SUMMARY_DATA
	@ProjectId INT,
	@ReleaseId INT,
	@IncludeDeleted BIT
AS
BEGIN
	--Handle the case where no release is specified separately
	IF @ReleaseId IS NULL
	BEGIN
		SELECT
			EXE.EXECUTION_STATUS_ID AS ExecutionStatusId,
			MIN(EXE.NAME) AS ExecutionStatusName,
			COUNT(TCL2.TEST_CASE_ID) AS StatusCount
		FROM VW_EXECUTION_STATUS_ACTIVE AS EXE
			LEFT JOIN (
				SELECT TCL.TEST_SET_ID,
					TCL.TEST_CASE_ID,
					ISNULL(TRN.EXECUTION_STATUS_ID,3) AS EXECUTION_STATUS_ID 
				FROM VW_TESTSET_TESTCASE_LIST AS TCL
					LEFT JOIN (
						SELECT RUN1.TEST_SET_ID,
							RUN1.TEST_SET_TEST_CASE_ID,
							RUN1.TEST_CASE_ID,
							MIN(RUN1.EXECUTION_STATUS_ID) AS EXECUTION_STATUS_ID
						FROM TST_TEST_RUN AS RUN1
							INNER JOIN (
								SELECT TEST_CASE_ID,
									TEST_SET_ID,
									TEST_SET_TEST_CASE_ID,
									MAX(END_DATE) AS END_DATE 
								FROM TST_TEST_RUN 
								WHERE TEST_SET_ID IS NOT NULL
									AND EXECUTION_STATUS_ID <> 3
									AND EXECUTION_STATUS_ID <> 4 
								GROUP BY TEST_CASE_ID, TEST_SET_ID, TEST_SET_TEST_CASE_ID) AS RUN2 ON RUN1.TEST_CASE_ID = RUN2.TEST_CASE_ID
									AND RUN1.END_DATE = RUN2.END_DATE
						WHERE RUN1.TEST_SET_ID IS NOT NULL AND RUN1.EXECUTION_STATUS_ID <> 3 AND RUN1.EXECUTION_STATUS_ID <> 4
						GROUP BY RUN1.TEST_CASE_ID, RUN1.TEST_SET_ID, RUN1.TEST_SET_TEST_CASE_ID) AS TRN ON TCL.TEST_SET_ID = TRN.TEST_SET_ID AND TCL.TEST_CASE_ID = TRN.TEST_CASE_ID AND TRN.TEST_SET_TEST_CASE_ID = TCL.TEST_SET_TEST_CASE_ID				
				WHERE PROJECT_ID = @ProjectId AND (TCL.IS_TEST_CASE_DELETED = 0 OR @IncludeDeleted = 1) AND (TCL.IS_TEST_SET_DELETED = 0 OR @IncludeDeleted = 1)) AS TCL2 ON EXE.EXECUTION_STATUS_ID = TCL2.EXECUTION_STATUS_ID
		GROUP BY EXE.EXECUTION_STATUS_ID
		ORDER BY ExecutionStatusId
	END
	ELSE
	BEGIN
		--Declare results set
		DECLARE  @ReleaseList TABLE
		(
			RELEASE_ID INT
		)

		--Populate list of child iterations
		INSERT @ReleaseList (RELEASE_ID)
		SELECT RELEASE_ID FROM FN_RELEASE_GET_SELF_AND_ITERATIONS (@ProjectId, @ReleaseId)

		SELECT	EXE.EXECUTION_STATUS_ID AS ExecutionStatusId, MIN(EXE.NAME) AS ExecutionStatusName, COUNT(TCL2.TEST_CASE_ID) AS StatusCount
		FROM VW_EXECUTION_STATUS_ACTIVE EXE LEFT JOIN
			(SELECT TCL.TEST_SET_ID, TCL.TEST_CASE_ID, TCL.TEST_SET_TEST_CASE_ID, ISNULL(TRN.EXECUTION_STATUS_ID,3) AS EXECUTION_STATUS_ID
			FROM VW_TESTSET_TESTCASE_LIST TCL LEFT JOIN 
				(SELECT RUN1.TEST_SET_ID, RUN1.TEST_CASE_ID, RUN1.TEST_SET_TEST_CASE_ID, MIN(RUN1.EXECUTION_STATUS_ID) AS EXECUTION_STATUS_ID
				FROM TST_TEST_RUN RUN1 INNER JOIN
					(SELECT TEST_CASE_ID, TEST_SET_ID, TEST_SET_TEST_CASE_ID, MAX(END_DATE) AS END_DATE
					FROM TST_TEST_RUN
					WHERE TEST_SET_ID IS NOT NULL AND EXECUTION_STATUS_ID <> 3 AND EXECUTION_STATUS_ID <> 4
					AND RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList)
					GROUP BY TEST_CASE_ID, TEST_SET_ID, TEST_SET_TEST_CASE_ID) RUN2
				ON RUN1.TEST_CASE_ID = RUN2.TEST_CASE_ID AND RUN1.END_DATE = RUN2.END_DATE
				WHERE RUN1.TEST_SET_ID IS NOT NULL AND RUN1.EXECUTION_STATUS_ID <> 3 AND RUN1.EXECUTION_STATUS_ID <> 4
				AND RUN1.RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList)
				GROUP BY RUN1.TEST_CASE_ID, RUN1.TEST_SET_ID, RUN1.TEST_SET_TEST_CASE_ID) TRN
				ON TCL.TEST_SET_ID = TRN.TEST_SET_ID AND TCL.TEST_CASE_ID = TRN.TEST_CASE_ID
				AND TCL.TEST_SET_TEST_CASE_ID = TRN.TEST_SET_TEST_CASE_ID
			WHERE PROJECT_ID = @ProjectId AND TCL.RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList) AND (TCL.IS_TEST_CASE_DELETED = 0 OR @IncludeDeleted = 1) AND (TCL.IS_TEST_SET_DELETED = 0 OR @IncludeDeleted = 1)) TCL2
		ON EXE.EXECUTION_STATUS_ID = TCL2.EXECUTION_STATUS_ID
		GROUP BY EXE.EXECUTION_STATUS_ID
		ORDER BY ExecutionStatusId
	END
END
GO
