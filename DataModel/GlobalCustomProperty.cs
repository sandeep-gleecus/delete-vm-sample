//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(CustomPropertyType))]
    [KnownType(typeof(GlobalCustomPropertyList))]
    [KnownType(typeof(GlobalCustomPropertyOptionValue))]
    public partial class GlobalCustomProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomPropertyId
        {
            get { return _customPropertyId; }
            set
            {
                if (_customPropertyId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomPropertyId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customPropertyId = value;
                    OnPropertyChanged("CustomPropertyId");
                }
            }
        }
        private int _customPropertyId;
    
        [DataMember]
        public int CustomPropertyTypeId
        {
            get { return _customPropertyTypeId; }
            set
            {
                if (_customPropertyTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyTypeId", _customPropertyTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.CustomPropertyTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _customPropertyTypeId = value;
                    OnPropertyChanged("CustomPropertyTypeId");
                }
            }
        }
        private int _customPropertyTypeId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int PropertyNumber
        {
            get { return _propertyNumber; }
            set
            {
                if (_propertyNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("PropertyNumber", _propertyNumber);
                    _propertyNumber = value;
                    OnPropertyChanged("PropertyNumber");
                }
            }
        }
        private int _propertyNumber;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> CustomPropertyListId
        {
            get { return _customPropertyListId; }
            set
            {
                if (_customPropertyListId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyListId", _customPropertyListId);
                    if (!IsDeserializing)
                    {
                        if (List != null && List.CustomPropertyListId != value)
                        {
                            List = null;
                        }
                    }
                    _customPropertyListId = value;
                    OnPropertyChanged("CustomPropertyListId");
                }
            }
        }
        private Nullable<int> _customPropertyListId;
    
        [DataMember]
        public Nullable<int> Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private Nullable<int> _position;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public CustomPropertyType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private CustomPropertyType _type;
    
        [DataMember]
        public GlobalCustomPropertyList List
        {
            get { return _list; }
            set
            {
                if (!ReferenceEquals(_list, value))
                {
                    var previousValue = _list;
                    _list = value;
                    FixupList(previousValue);
                    OnNavigationPropertyChanged("List");
                }
            }
        }
        private GlobalCustomPropertyList _list;
    
        [DataMember]
        public TrackableCollection<GlobalCustomPropertyOptionValue> OptionValues
        {
            get
            {
                if (_optionValues == null)
                {
                    _optionValues = new TrackableCollection<GlobalCustomPropertyOptionValue>();
                    _optionValues.CollectionChanged += FixupOptionValues;
                }
                return _optionValues;
            }
            set
            {
                if (!ReferenceEquals(_optionValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_optionValues != null)
                    {
                        _optionValues.CollectionChanged -= FixupOptionValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (GlobalCustomPropertyOptionValue item in _optionValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _optionValues = value;
                    if (_optionValues != null)
                    {
                        _optionValues.CollectionChanged += FixupOptionValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (GlobalCustomPropertyOptionValue item in _optionValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("OptionValues");
                }
            }
        }
        private TrackableCollection<GlobalCustomPropertyOptionValue> _optionValues;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            Type = null;
            List = null;
            OptionValues.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GlobalCustomProperties.Contains(this))
            {
                previousValue.GlobalCustomProperties.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.GlobalCustomProperties.Contains(this))
                {
                    ArtifactType.GlobalCustomProperties.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupType(CustomPropertyType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GlobalCustomProperties.Contains(this))
            {
                previousValue.GlobalCustomProperties.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.GlobalCustomProperties.Contains(this))
                {
                    Type.GlobalCustomProperties.Add(this);
                }
    
                CustomPropertyTypeId = Type.CustomPropertyTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupList(GlobalCustomPropertyList previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomProperties.Contains(this))
            {
                previousValue.CustomProperties.Remove(this);
            }
    
            if (List != null)
            {
                if (!List.CustomProperties.Contains(this))
                {
                    List.CustomProperties.Add(this);
                }
    
                CustomPropertyListId = List.CustomPropertyListId;
            }
            else if (!skipKeys)
            {
                CustomPropertyListId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("List")
                    && (ChangeTracker.OriginalValues["List"] == List))
                {
                    ChangeTracker.OriginalValues.Remove("List");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("List", previousValue);
                }
                if (List != null && !List.ChangeTracker.ChangeTrackingEnabled)
                {
                    List.StartTracking();
                }
            }
        }
    
        private void FixupOptionValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GlobalCustomPropertyOptionValue item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OptionValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GlobalCustomPropertyOptionValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OptionValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
