//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RiskStatus))]
    [KnownType(typeof(RiskWorkflow))]
    [KnownType(typeof(RiskWorkflowTransitionRole))]
    public partial class RiskWorkflowTransition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int WorkflowTransitionId
        {
            get { return _workflowTransitionId; }
            set
            {
                if (_workflowTransitionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkflowTransitionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workflowTransitionId = value;
                    OnPropertyChanged("WorkflowTransitionId");
                }
            }
        }
        private int _workflowTransitionId;
    
        [DataMember]
        public int RiskWorkflowId
        {
            get { return _riskWorkflowId; }
            set
            {
                if (_riskWorkflowId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskWorkflowId", _riskWorkflowId);
                    if (!IsDeserializing)
                    {
                        if (Transition != null && Transition.RiskWorkflowId != value)
                        {
                            Transition = null;
                        }
                    }
                    _riskWorkflowId = value;
                    OnPropertyChanged("RiskWorkflowId");
                }
            }
        }
        private int _riskWorkflowId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsExecuteByCreator
        {
            get { return _isExecuteByCreator; }
            set
            {
                if (_isExecuteByCreator != value)
                {
                    ChangeTracker.RecordOriginalValue("IsExecuteByCreator", _isExecuteByCreator);
                    _isExecuteByCreator = value;
                    OnPropertyChanged("IsExecuteByCreator");
                }
            }
        }
        private bool _isExecuteByCreator;
    
        [DataMember]
        public bool IsExecuteByOwner
        {
            get { return _isExecuteByOwner; }
            set
            {
                if (_isExecuteByOwner != value)
                {
                    ChangeTracker.RecordOriginalValue("IsExecuteByOwner", _isExecuteByOwner);
                    _isExecuteByOwner = value;
                    OnPropertyChanged("IsExecuteByOwner");
                }
            }
        }
        private bool _isExecuteByOwner;
    
        [DataMember]
        public bool IsSignature
        {
            get { return _isSignature; }
            set
            {
                if (_isSignature != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSignature", _isSignature);
                    _isSignature = value;
                    OnPropertyChanged("IsSignature");
                }
            }
        }
        private bool _isSignature;
    
        [DataMember]
        public int InputRiskStatusId
        {
            get { return _inputRiskStatusId; }
            set
            {
                if (_inputRiskStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("InputRiskStatusId", _inputRiskStatusId);
                    if (!IsDeserializing)
                    {
                        if (InputStatus != null && InputStatus.RiskStatusId != value)
                        {
                            InputStatus = null;
                        }
                    }
                    _inputRiskStatusId = value;
                    OnPropertyChanged("InputRiskStatusId");
                }
            }
        }
        private int _inputRiskStatusId;
    
        [DataMember]
        public int OutputRiskStatusId
        {
            get { return _outputRiskStatusId; }
            set
            {
                if (_outputRiskStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("OutputRiskStatusId", _outputRiskStatusId);
                    if (!IsDeserializing)
                    {
                        if (OutputStatus != null && OutputStatus.RiskStatusId != value)
                        {
                            OutputStatus = null;
                        }
                    }
                    _outputRiskStatusId = value;
                    OnPropertyChanged("OutputRiskStatusId");
                }
            }
        }
        private int _outputRiskStatusId;
    
        [DataMember]
        public bool IS_BLANK_OWNER
        {
            get { return _iS_BLANK_OWNER; }
            set
            {
                if (_iS_BLANK_OWNER != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_BLANK_OWNER", _iS_BLANK_OWNER);
                    _iS_BLANK_OWNER = value;
                    OnPropertyChanged("IS_BLANK_OWNER");
                }
            }
        }
        private bool _iS_BLANK_OWNER;
    
        [DataMember]
        public bool IS_NOTIFY_CREATOR
        {
            get { return _iS_NOTIFY_CREATOR; }
            set
            {
                if (_iS_NOTIFY_CREATOR != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_NOTIFY_CREATOR", _iS_NOTIFY_CREATOR);
                    _iS_NOTIFY_CREATOR = value;
                    OnPropertyChanged("IS_NOTIFY_CREATOR");
                }
            }
        }
        private bool _iS_NOTIFY_CREATOR;
    
        [DataMember]
        public bool IS_NOTIFY_OWNER
        {
            get { return _iS_NOTIFY_OWNER; }
            set
            {
                if (_iS_NOTIFY_OWNER != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_NOTIFY_OWNER", _iS_NOTIFY_OWNER);
                    _iS_NOTIFY_OWNER = value;
                    OnPropertyChanged("IS_NOTIFY_OWNER");
                }
            }
        }
        private bool _iS_NOTIFY_OWNER;
    
        [DataMember]
        public string NOTIFY_SUBJECT
        {
            get { return _nOTIFY_SUBJECT; }
            set
            {
                if (_nOTIFY_SUBJECT != value)
                {
                    ChangeTracker.RecordOriginalValue("NOTIFY_SUBJECT", _nOTIFY_SUBJECT);
                    _nOTIFY_SUBJECT = value;
                    OnPropertyChanged("NOTIFY_SUBJECT");
                }
            }
        }
        private string _nOTIFY_SUBJECT;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public RiskStatus InputStatus
        {
            get { return _inputStatus; }
            set
            {
                if (!ReferenceEquals(_inputStatus, value))
                {
                    var previousValue = _inputStatus;
                    _inputStatus = value;
                    FixupInputStatus(previousValue);
                    OnNavigationPropertyChanged("InputStatus");
                }
            }
        }
        private RiskStatus _inputStatus;
    
        [DataMember]
        public RiskStatus OutputStatus
        {
            get { return _outputStatus; }
            set
            {
                if (!ReferenceEquals(_outputStatus, value))
                {
                    var previousValue = _outputStatus;
                    _outputStatus = value;
                    FixupOutputStatus(previousValue);
                    OnNavigationPropertyChanged("OutputStatus");
                }
            }
        }
        private RiskStatus _outputStatus;
    
        [DataMember]
        public RiskWorkflow Transition
        {
            get { return _transition; }
            set
            {
                if (!ReferenceEquals(_transition, value))
                {
                    var previousValue = _transition;
                    _transition = value;
                    FixupTransition(previousValue);
                    OnNavigationPropertyChanged("Transition");
                }
            }
        }
        private RiskWorkflow _transition;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowTransitionRole> TransitionRoles
        {
            get
            {
                if (_transitionRoles == null)
                {
                    _transitionRoles = new TrackableCollection<RiskWorkflowTransitionRole>();
                    _transitionRoles.CollectionChanged += FixupTransitionRoles;
                }
                return _transitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_transitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_transitionRoles != null)
                    {
                        _transitionRoles.CollectionChanged -= FixupTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowTransitionRole item in _transitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _transitionRoles = value;
                    if (_transitionRoles != null)
                    {
                        _transitionRoles.CollectionChanged += FixupTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowTransitionRole item in _transitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TransitionRoles");
                }
            }
        }
        private TrackableCollection<RiskWorkflowTransitionRole> _transitionRoles;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InputStatus = null;
            OutputStatus = null;
            Transition = null;
            TransitionRoles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInputStatus(RiskStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkflowTransitionInput.Contains(this))
            {
                previousValue.WorkflowTransitionInput.Remove(this);
            }
    
            if (InputStatus != null)
            {
                if (!InputStatus.WorkflowTransitionInput.Contains(this))
                {
                    InputStatus.WorkflowTransitionInput.Add(this);
                }
    
                InputRiskStatusId = InputStatus.RiskStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InputStatus")
                    && (ChangeTracker.OriginalValues["InputStatus"] == InputStatus))
                {
                    ChangeTracker.OriginalValues.Remove("InputStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InputStatus", previousValue);
                }
                if (InputStatus != null && !InputStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    InputStatus.StartTracking();
                }
            }
        }
    
        private void FixupOutputStatus(RiskStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkflowTransitionOutput.Contains(this))
            {
                previousValue.WorkflowTransitionOutput.Remove(this);
            }
    
            if (OutputStatus != null)
            {
                if (!OutputStatus.WorkflowTransitionOutput.Contains(this))
                {
                    OutputStatus.WorkflowTransitionOutput.Add(this);
                }
    
                OutputRiskStatusId = OutputStatus.RiskStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OutputStatus")
                    && (ChangeTracker.OriginalValues["OutputStatus"] == OutputStatus))
                {
                    ChangeTracker.OriginalValues.Remove("OutputStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OutputStatus", previousValue);
                }
                if (OutputStatus != null && !OutputStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    OutputStatus.StartTracking();
                }
            }
        }
    
        private void FixupTransition(RiskWorkflow previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Transitions.Contains(this))
            {
                previousValue.Transitions.Remove(this);
            }
    
            if (Transition != null)
            {
                if (!Transition.Transitions.Contains(this))
                {
                    Transition.Transitions.Add(this);
                }
    
                RiskWorkflowId = Transition.RiskWorkflowId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Transition")
                    && (ChangeTracker.OriginalValues["Transition"] == Transition))
                {
                    ChangeTracker.OriginalValues.Remove("Transition");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Transition", previousValue);
                }
                if (Transition != null && !Transition.ChangeTracker.ChangeTrackingEnabled)
                {
                    Transition.StartTracking();
                }
            }
        }
    
        private void FixupTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowTransitionRole item in e.NewItems)
                {
                    item.Transition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transition, this))
                    {
                        item.Transition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
