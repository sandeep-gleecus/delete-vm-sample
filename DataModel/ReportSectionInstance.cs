//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Report))]
    [KnownType(typeof(ReportSection))]
    public partial class ReportSectionInstance: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReportId
        {
            get { return _reportId; }
            set
            {
                if (_reportId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportId", _reportId);
                    if (!IsDeserializing)
                    {
                        if (Report != null && Report.ReportId != value)
                        {
                            Report = null;
                        }
                    }
                    _reportId = value;
                    OnPropertyChanged("ReportId");
                }
            }
        }
        private int _reportId;
    
        [DataMember]
        public int ReportSectionId
        {
            get { return _reportSectionId; }
            set
            {
                if (_reportSectionId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportSectionId", _reportSectionId);
                    if (!IsDeserializing)
                    {
                        if (Section != null && Section.ReportSectionId != value)
                        {
                            Section = null;
                        }
                    }
                    _reportSectionId = value;
                    OnPropertyChanged("ReportSectionId");
                }
            }
        }
        private int _reportSectionId;
    
        [DataMember]
        public string Header
        {
            get { return _header; }
            set
            {
                if (_header != value)
                {
                    ChangeTracker.RecordOriginalValue("Header", _header);
                    _header = value;
                    OnPropertyChanged("Header");
                }
            }
        }
        private string _header;
    
        [DataMember]
        public string Footer
        {
            get { return _footer; }
            set
            {
                if (_footer != value)
                {
                    ChangeTracker.RecordOriginalValue("Footer", _footer);
                    _footer = value;
                    OnPropertyChanged("Footer");
                }
            }
        }
        private string _footer;
    
        [DataMember]
        public string Template
        {
            get { return _template; }
            set
            {
                if (_template != value)
                {
                    ChangeTracker.RecordOriginalValue("Template", _template);
                    _template = value;
                    OnPropertyChanged("Template");
                }
            }
        }
        private string _template;
    
        [DataMember]
        public Nullable<int> Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private Nullable<int> _position;
    
        [DataMember]
        public int ReportAvailableSectionId
        {
            get { return _reportAvailableSectionId; }
            set
            {
                if (_reportAvailableSectionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReportAvailableSectionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportAvailableSectionId = value;
                    OnPropertyChanged("ReportAvailableSectionId");
                }
            }
        }
        private int _reportAvailableSectionId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Report Report
        {
            get { return _report; }
            set
            {
                if (!ReferenceEquals(_report, value))
                {
                    var previousValue = _report;
                    _report = value;
                    FixupReport(previousValue);
                    OnNavigationPropertyChanged("Report");
                }
            }
        }
        private Report _report;
    
        [DataMember]
        public ReportSection Section
        {
            get { return _section; }
            set
            {
                if (!ReferenceEquals(_section, value))
                {
                    var previousValue = _section;
                    _section = value;
                    FixupSection(previousValue);
                    OnNavigationPropertyChanged("Section");
                }
            }
        }
        private ReportSection _section;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Report = null;
            Section = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupReport(Report previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SectionInstances.Contains(this))
            {
                previousValue.SectionInstances.Remove(this);
            }
    
            if (Report != null)
            {
                if (!Report.SectionInstances.Contains(this))
                {
                    Report.SectionInstances.Add(this);
                }
    
                ReportId = Report.ReportId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Report")
                    && (ChangeTracker.OriginalValues["Report"] == Report))
                {
                    ChangeTracker.OriginalValues.Remove("Report");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Report", previousValue);
                }
                if (Report != null && !Report.ChangeTracker.ChangeTrackingEnabled)
                {
                    Report.StartTracking();
                }
            }
        }
    
        private void FixupSection(ReportSection previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Instances.Contains(this))
            {
                previousValue.Instances.Remove(this);
            }
    
            if (Section != null)
            {
                if (!Section.Instances.Contains(this))
                {
                    Section.Instances.Add(this);
                }
    
                ReportSectionId = Section.ReportSectionId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Section")
                    && (ChangeTracker.OriginalValues["Section"] == Section))
                {
                    ChangeTracker.OriginalValues.Remove("Section");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Section", previousValue);
                }
                if (Section != null && !Section.ChangeTracker.ChangeTrackingEnabled)
                {
                    Section.StartTracking();
                }
            }
        }

        #endregion

    }
}
