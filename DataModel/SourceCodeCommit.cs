//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SourceCodeCommitArtifact))]
    [KnownType(typeof(SourceCodeFileEntry))]
    [KnownType(typeof(VersionControlProject))]
    [KnownType(typeof(VersionControlBranch))]
    public partial class SourceCodeCommit: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int VersionControlSystemId
        {
            get { return _versionControlSystemId; }
            set
            {
                if (_versionControlSystemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VersionControlSystemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (VersionControlProject != null && VersionControlProject.VersionControlSystemId != value)
                        {
                            VersionControlProject = null;
                        }
                    }
                    _versionControlSystemId = value;
                    OnPropertyChanged("VersionControlSystemId");
                }
            }
        }
        private int _versionControlSystemId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (VersionControlProject != null && VersionControlProject.ProjectId != value)
                        {
                            VersionControlProject = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int RevisionId
        {
            get { return _revisionId; }
            set
            {
                if (_revisionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RevisionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _revisionId = value;
                    OnPropertyChanged("RevisionId");
                }
            }
        }
        private int _revisionId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Revisionkey
        {
            get { return _revisionkey; }
            set
            {
                if (_revisionkey != value)
                {
                    ChangeTracker.RecordOriginalValue("Revisionkey", _revisionkey);
                    _revisionkey = value;
                    OnPropertyChanged("Revisionkey");
                }
            }
        }
        private string _revisionkey;
    
        [DataMember]
        public string AuthorName
        {
            get { return _authorName; }
            set
            {
                if (_authorName != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorName", _authorName);
                    _authorName = value;
                    OnPropertyChanged("AuthorName");
                }
            }
        }
        private string _authorName;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    ChangeTracker.RecordOriginalValue("Message", _message);
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateDate", _updateDate);
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public bool ContentChanged
        {
            get { return _contentChanged; }
            set
            {
                if (_contentChanged != value)
                {
                    ChangeTracker.RecordOriginalValue("ContentChanged", _contentChanged);
                    _contentChanged = value;
                    OnPropertyChanged("ContentChanged");
                }
            }
        }
        private bool _contentChanged;
    
        [DataMember]
        public bool PropertiesChanged
        {
            get { return _propertiesChanged; }
            set
            {
                if (_propertiesChanged != value)
                {
                    ChangeTracker.RecordOriginalValue("PropertiesChanged", _propertiesChanged);
                    _propertiesChanged = value;
                    OnPropertyChanged("PropertiesChanged");
                }
            }
        }
        private bool _propertiesChanged;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SourceCodeCommitArtifact> AssociatedArtifacts
        {
            get
            {
                if (_associatedArtifacts == null)
                {
                    _associatedArtifacts = new TrackableCollection<SourceCodeCommitArtifact>();
                    _associatedArtifacts.CollectionChanged += FixupAssociatedArtifacts;
                }
                return _associatedArtifacts;
            }
            set
            {
                if (!ReferenceEquals(_associatedArtifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_associatedArtifacts != null)
                    {
                        _associatedArtifacts.CollectionChanged -= FixupAssociatedArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SourceCodeCommitArtifact item in _associatedArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _associatedArtifacts = value;
                    if (_associatedArtifacts != null)
                    {
                        _associatedArtifacts.CollectionChanged += FixupAssociatedArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SourceCodeCommitArtifact item in _associatedArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AssociatedArtifacts");
                }
            }
        }
        private TrackableCollection<SourceCodeCommitArtifact> _associatedArtifacts;
    
        [DataMember]
        public TrackableCollection<SourceCodeFileEntry> Files
        {
            get
            {
                if (_files == null)
                {
                    _files = new TrackableCollection<SourceCodeFileEntry>();
                    _files.CollectionChanged += FixupFiles;
                }
                return _files;
            }
            set
            {
                if (!ReferenceEquals(_files, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_files != null)
                    {
                        _files.CollectionChanged -= FixupFiles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SourceCodeFileEntry item in _files)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _files = value;
                    if (_files != null)
                    {
                        _files.CollectionChanged += FixupFiles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SourceCodeFileEntry item in _files)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Files");
                }
            }
        }
        private TrackableCollection<SourceCodeFileEntry> _files;
    
        [DataMember]
        public VersionControlProject VersionControlProject
        {
            get { return _versionControlProject; }
            set
            {
                if (!ReferenceEquals(_versionControlProject, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (VersionControlSystemId != value.VersionControlSystemId || ProjectId != value.ProjectId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _versionControlProject;
                    _versionControlProject = value;
                    FixupVersionControlProject(previousValue);
                    OnNavigationPropertyChanged("VersionControlProject");
                }
            }
        }
        private VersionControlProject _versionControlProject;
    
        [DataMember]
        public TrackableCollection<VersionControlBranch> Branches
        {
            get
            {
                if (_branches == null)
                {
                    _branches = new TrackableCollection<VersionControlBranch>();
                    _branches.CollectionChanged += FixupBranches;
                }
                return _branches;
            }
            set
            {
                if (!ReferenceEquals(_branches, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_branches != null)
                    {
                        _branches.CollectionChanged -= FixupBranches;
                    }
                    _branches = value;
                    if (_branches != null)
                    {
                        _branches.CollectionChanged += FixupBranches;
                    }
                    OnNavigationPropertyChanged("Branches");
                }
            }
        }
        private TrackableCollection<VersionControlBranch> _branches;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AssociatedArtifacts.Clear();
            Files.Clear();
            VersionControlProject = null;
            Branches.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupVersionControlProject(VersionControlProject previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Commits.Contains(this))
            {
                previousValue.Commits.Remove(this);
            }
    
            if (VersionControlProject != null)
            {
                if (!VersionControlProject.Commits.Contains(this))
                {
                    VersionControlProject.Commits.Add(this);
                }
    
                VersionControlSystemId = VersionControlProject.VersionControlSystemId;
                ProjectId = VersionControlProject.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VersionControlProject")
                    && (ChangeTracker.OriginalValues["VersionControlProject"] == VersionControlProject))
                {
                    ChangeTracker.OriginalValues.Remove("VersionControlProject");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VersionControlProject", previousValue);
                }
                if (VersionControlProject != null && !VersionControlProject.ChangeTracker.ChangeTrackingEnabled)
                {
                    VersionControlProject.StartTracking();
                }
            }
        }
    
        private void FixupAssociatedArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SourceCodeCommitArtifact item in e.NewItems)
                {
                    item.Commit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssociatedArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SourceCodeCommitArtifact item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commit, this))
                    {
                        item.Commit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssociatedArtifacts", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SourceCodeFileEntry item in e.NewItems)
                {
                    item.Commit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Files", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SourceCodeFileEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commit, this))
                    {
                        item.Commit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Files", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupBranches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlBranch item in e.NewItems)
                {
                    if (!item.Commits.Contains(this))
                    {
                        item.Commits.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Branches", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlBranch item in e.OldItems)
                {
                    if (item.Commits.Contains(this))
                    {
                        item.Commits.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Branches", item);
                    }
                }
            }
        }

        #endregion

    }
}
