//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NotificationEventWebHook))]
    [KnownType(typeof(User))]
    public partial class GlobalOAuthProvider: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid OAuthProviderId
        {
            get { return _oAuthProviderId; }
            set
            {
                if (_oAuthProviderId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OAuthProviderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _oAuthProviderId = value;
                    OnPropertyChanged("OAuthProviderId");
                }
            }
        }
        private System.Guid _oAuthProviderId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string ClientId
        {
            get { return _clientId; }
            set
            {
                if (_clientId != value)
                {
                    ChangeTracker.RecordOriginalValue("ClientId", _clientId);
                    _clientId = value;
                    OnPropertyChanged("ClientId");
                }
            }
        }
        private string _clientId;
    
        [DataMember]
        public string ClientSecret
        {
            get { return _clientSecret; }
            set
            {
                if (_clientSecret != value)
                {
                    ChangeTracker.RecordOriginalValue("ClientSecret", _clientSecret);
                    _clientSecret = value;
                    OnPropertyChanged("ClientSecret");
                }
            }
        }
        private string _clientSecret;
    
        [DataMember]
        public string ImageUrl
        {
            get { return _imageUrl; }
            set
            {
                if (_imageUrl != value)
                {
                    ChangeTracker.RecordOriginalValue("ImageUrl", _imageUrl);
                    _imageUrl = value;
                    OnPropertyChanged("ImageUrl");
                }
            }
        }
        private string _imageUrl;
    
        [DataMember]
        public string ImageData
        {
            get { return _imageData; }
            set
            {
                if (_imageData != value)
                {
                    ChangeTracker.RecordOriginalValue("ImageData", _imageData);
                    _imageData = value;
                    OnPropertyChanged("ImageData");
                }
            }
        }
        private string _imageData;
    
        [DataMember]
        public bool IsLoaded
        {
            get { return _isLoaded; }
            set
            {
                if (_isLoaded != value)
                {
                    ChangeTracker.RecordOriginalValue("IsLoaded", _isLoaded);
                    _isLoaded = value;
                    OnPropertyChanged("IsLoaded");
                }
            }
        }
        private bool _isLoaded;
    
        [DataMember]
        public string Custom1
        {
            get { return _custom1; }
            set
            {
                if (_custom1 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom1", _custom1);
                    _custom1 = value;
                    OnPropertyChanged("Custom1");
                }
            }
        }
        private string _custom1;
    
        [DataMember]
        public string Custom2
        {
            get { return _custom2; }
            set
            {
                if (_custom2 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom2", _custom2);
                    _custom2 = value;
                    OnPropertyChanged("Custom2");
                }
            }
        }
        private string _custom2;
    
        [DataMember]
        public string Custom3
        {
            get { return _custom3; }
            set
            {
                if (_custom3 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom3", _custom3);
                    _custom3 = value;
                    OnPropertyChanged("Custom3");
                }
            }
        }
        private string _custom3;
    
        [DataMember]
        public string Custom4
        {
            get { return _custom4; }
            set
            {
                if (_custom4 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom4", _custom4);
                    _custom4 = value;
                    OnPropertyChanged("Custom4");
                }
            }
        }
        private string _custom4;
    
        [DataMember]
        public string Custom5
        {
            get { return _custom5; }
            set
            {
                if (_custom5 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom5", _custom5);
                    _custom5 = value;
                    OnPropertyChanged("Custom5");
                }
            }
        }
        private string _custom5;
    
        [DataMember]
        public string AuthorizationUrl
        {
            get { return _authorizationUrl; }
            set
            {
                if (_authorizationUrl != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorizationUrl", _authorizationUrl);
                    _authorizationUrl = value;
                    OnPropertyChanged("AuthorizationUrl");
                }
            }
        }
        private string _authorizationUrl;
    
        [DataMember]
        public string TokenUrl
        {
            get { return _tokenUrl; }
            set
            {
                if (_tokenUrl != value)
                {
                    ChangeTracker.RecordOriginalValue("TokenUrl", _tokenUrl);
                    _tokenUrl = value;
                    OnPropertyChanged("TokenUrl");
                }
            }
        }
        private string _tokenUrl;
    
        [DataMember]
        public string ProfileUrl
        {
            get { return _profileUrl; }
            set
            {
                if (_profileUrl != value)
                {
                    ChangeTracker.RecordOriginalValue("ProfileUrl", _profileUrl);
                    _profileUrl = value;
                    OnPropertyChanged("ProfileUrl");
                }
            }
        }
        private string _profileUrl;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<NotificationEventWebHook> WebHooks
        {
            get
            {
                if (_webHooks == null)
                {
                    _webHooks = new TrackableCollection<NotificationEventWebHook>();
                    _webHooks.CollectionChanged += FixupWebHooks;
                }
                return _webHooks;
            }
            set
            {
                if (!ReferenceEquals(_webHooks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_webHooks != null)
                    {
                        _webHooks.CollectionChanged -= FixupWebHooks;
                    }
                    _webHooks = value;
                    if (_webHooks != null)
                    {
                        _webHooks.CollectionChanged += FixupWebHooks;
                    }
                    OnNavigationPropertyChanged("WebHooks");
                }
            }
        }
        private TrackableCollection<NotificationEventWebHook> _webHooks;
    
        [DataMember]
        public TrackableCollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    _users = new TrackableCollection<User>();
                    _users.CollectionChanged += FixupUsers;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_users != null)
                    {
                        _users.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    if (_users != null)
                    {
                        _users.CollectionChanged += FixupUsers;
                    }
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private TrackableCollection<User> _users;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WebHooks.Clear();
            Users.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupWebHooks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEventWebHook item in e.NewItems)
                {
                    item.OAuthProvider = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WebHooks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEventWebHook item in e.OldItems)
                {
                    if (ReferenceEquals(item.OAuthProvider, this))
                    {
                        item.OAuthProvider = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WebHooks", item);
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.OAuthProviders = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Users", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.OAuthProviders, this))
                    {
                        item.OAuthProviders = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Users", item);
                    }
                }
            }
        }

        #endregion

    }
}
