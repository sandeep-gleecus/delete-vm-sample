//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(StandardTaskSet))]
    [KnownType(typeof(TaskType))]
    public partial class StandardTask: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int StandardTaskId
        {
            get { return _standardTaskId; }
            set
            {
                if (_standardTaskId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'StandardTaskId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _standardTaskId = value;
                    OnPropertyChanged("StandardTaskId");
                }
            }
        }
        private int _standardTaskId;
    
        [DataMember]
        public int StandardTaskSetId
        {
            get { return _standardTaskSetId; }
            set
            {
                if (_standardTaskSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("StandardTaskSetId", _standardTaskSetId);
                    if (!IsDeserializing)
                    {
                        if (Set != null && Set.StandardTaskSetId != value)
                        {
                            Set = null;
                        }
                    }
                    _standardTaskSetId = value;
                    OnPropertyChanged("StandardTaskSetId");
                }
            }
        }
        private int _standardTaskSetId;
    
        [DataMember]
        public int TastTypeId
        {
            get { return _tastTypeId; }
            set
            {
                if (_tastTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TastTypeId", _tastTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.TaskTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _tastTypeId = value;
                    OnPropertyChanged("TastTypeId");
                }
            }
        }
        private int _tastTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public StandardTaskSet Set
        {
            get { return _set; }
            set
            {
                if (!ReferenceEquals(_set, value))
                {
                    var previousValue = _set;
                    _set = value;
                    FixupSet(previousValue);
                    OnNavigationPropertyChanged("Set");
                }
            }
        }
        private StandardTaskSet _set;
    
        [DataMember]
        public TaskType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private TaskType _type;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Set = null;
            Type = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSet(StandardTaskSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.StandardTasks.Contains(this))
            {
                previousValue.StandardTasks.Remove(this);
            }
    
            if (Set != null)
            {
                if (!Set.StandardTasks.Contains(this))
                {
                    Set.StandardTasks.Add(this);
                }
    
                StandardTaskSetId = Set.StandardTaskSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Set")
                    && (ChangeTracker.OriginalValues["Set"] == Set))
                {
                    ChangeTracker.OriginalValues.Remove("Set");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Set", previousValue);
                }
                if (Set != null && !Set.ChangeTracker.ChangeTrackingEnabled)
                {
                    Set.StartTracking();
                }
            }
        }
    
        private void FixupType(TaskType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_STANDARD_TASK.Contains(this))
            {
                previousValue.TST_STANDARD_TASK.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.TST_STANDARD_TASK.Contains(this))
                {
                    Type.TST_STANDARD_TASK.Add(this);
                }
    
                TastTypeId = Type.TaskTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }

        #endregion

    }
}
