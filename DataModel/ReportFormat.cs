//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SavedReport))]
    [KnownType(typeof(Report))]
    [KnownType(typeof(ReportGenerated))]
    public partial class ReportFormat: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReportFormatId
        {
            get { return _reportFormatId; }
            set
            {
                if (_reportFormatId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReportFormatId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportFormatId = value;
                    OnPropertyChanged("ReportFormatId");
                }
            }
        }
        private int _reportFormatId;
    
        [DataMember]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    ChangeTracker.RecordOriginalValue("Token", _token);
                    _token = value;
                    OnPropertyChanged("Token");
                }
            }
        }
        private string _token;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string IconFilename
        {
            get { return _iconFilename; }
            set
            {
                if (_iconFilename != value)
                {
                    ChangeTracker.RecordOriginalValue("IconFilename", _iconFilename);
                    _iconFilename = value;
                    OnPropertyChanged("IconFilename");
                }
            }
        }
        private string _iconFilename;
    
        [DataMember]
        public string ContentType
        {
            get { return _contentType; }
            set
            {
                if (_contentType != value)
                {
                    ChangeTracker.RecordOriginalValue("ContentType", _contentType);
                    _contentType = value;
                    OnPropertyChanged("ContentType");
                }
            }
        }
        private string _contentType;
    
        [DataMember]
        public string ContentDisposition
        {
            get { return _contentDisposition; }
            set
            {
                if (_contentDisposition != value)
                {
                    ChangeTracker.RecordOriginalValue("ContentDisposition", _contentDisposition);
                    _contentDisposition = value;
                    OnPropertyChanged("ContentDisposition");
                }
            }
        }
        private string _contentDisposition;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SavedReport> SavedReports
        {
            get
            {
                if (_savedReports == null)
                {
                    _savedReports = new TrackableCollection<SavedReport>();
                    _savedReports.CollectionChanged += FixupSavedReports;
                }
                return _savedReports;
            }
            set
            {
                if (!ReferenceEquals(_savedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged -= FixupSavedReports;
                    }
                    _savedReports = value;
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged += FixupSavedReports;
                    }
                    OnNavigationPropertyChanged("SavedReports");
                }
            }
        }
        private TrackableCollection<SavedReport> _savedReports;
    
        [DataMember]
        public TrackableCollection<Report> Reports
        {
            get
            {
                if (_reports == null)
                {
                    _reports = new TrackableCollection<Report>();
                    _reports.CollectionChanged += FixupReports;
                }
                return _reports;
            }
            set
            {
                if (!ReferenceEquals(_reports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reports != null)
                    {
                        _reports.CollectionChanged -= FixupReports;
                    }
                    _reports = value;
                    if (_reports != null)
                    {
                        _reports.CollectionChanged += FixupReports;
                    }
                    OnNavigationPropertyChanged("Reports");
                }
            }
        }
        private TrackableCollection<Report> _reports;
    
        [DataMember]
        public TrackableCollection<ReportGenerated> GeneratedReports
        {
            get
            {
                if (_generatedReports == null)
                {
                    _generatedReports = new TrackableCollection<ReportGenerated>();
                    _generatedReports.CollectionChanged += FixupGeneratedReports;
                }
                return _generatedReports;
            }
            set
            {
                if (!ReferenceEquals(_generatedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged -= FixupGeneratedReports;
                    }
                    _generatedReports = value;
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged += FixupGeneratedReports;
                    }
                    OnNavigationPropertyChanged("GeneratedReports");
                }
            }
        }
        private TrackableCollection<ReportGenerated> _generatedReports;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SavedReports.Clear();
            Reports.Clear();
            GeneratedReports.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupSavedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedReport item in e.NewItems)
                {
                    item.Format = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Format, this))
                    {
                        item.Format = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedReports", item);
                    }
                }
            }
        }
    
        private void FixupReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Report item in e.NewItems)
                {
                    if (!item.Formats.Contains(this))
                    {
                        item.Formats.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Reports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Report item in e.OldItems)
                {
                    if (item.Formats.Contains(this))
                    {
                        item.Formats.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Reports", item);
                    }
                }
            }
        }
    
        private void FixupGeneratedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportGenerated item in e.NewItems)
                {
                    item.Format = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GeneratedReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportGenerated item in e.OldItems)
                {
                    if (ReferenceEquals(item.Format, this))
                    {
                        item.Format = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GeneratedReports", item);
                    }
                }
            }
        }

        #endregion

    }
}
