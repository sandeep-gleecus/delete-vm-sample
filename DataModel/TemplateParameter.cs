//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Template))]
    public partial class TemplateParameter: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ParameterId
        {
            get { return _parameterId; }
            set
            {
                if (_parameterId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ParameterId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _parameterId = value;
                    OnPropertyChanged("ParameterId");
                }
            }
        }
        private int _parameterId;
    
        [DataMember]
        public int TemplateId
        {
            get { return _templateId; }
            set
            {
                if (_templateId != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateId", _templateId);
                    if (!IsDeserializing)
                    {
                        if (TST_TEMPLATE != null && TST_TEMPLATE.TemplateId != value)
                        {
                            TST_TEMPLATE = null;
                        }
                    }
                    _templateId = value;
                    OnPropertyChanged("TemplateId");
                }
            }
        }
        private int _templateId;
    
        [DataMember]
        public string ParameterLabel
        {
            get { return _parameterLabel; }
            set
            {
                if (_parameterLabel != value)
                {
                    ChangeTracker.RecordOriginalValue("ParameterLabel", _parameterLabel);
                    _parameterLabel = value;
                    OnPropertyChanged("ParameterLabel");
                }
            }
        }
        private string _parameterLabel;
    
        [DataMember]
        public string ParameterType
        {
            get { return _parameterType; }
            set
            {
                if (_parameterType != value)
                {
                    ChangeTracker.RecordOriginalValue("ParameterType", _parameterType);
                    _parameterType = value;
                    OnPropertyChanged("ParameterType");
                }
            }
        }
        private string _parameterType;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Template TST_TEMPLATE
        {
            get { return _tST_TEMPLATE; }
            set
            {
                if (!ReferenceEquals(_tST_TEMPLATE, value))
                {
                    var previousValue = _tST_TEMPLATE;
                    _tST_TEMPLATE = value;
                    FixupTST_TEMPLATE(previousValue);
                    OnNavigationPropertyChanged("TST_TEMPLATE");
                }
            }
        }
        private Template _tST_TEMPLATE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_TEMPLATE = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_TEMPLATE(Template previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_TEMPLATE_PARAMETER.Contains(this))
            {
                previousValue.TST_TEMPLATE_PARAMETER.Remove(this);
            }
    
            if (TST_TEMPLATE != null)
            {
                if (!TST_TEMPLATE.TST_TEMPLATE_PARAMETER.Contains(this))
                {
                    TST_TEMPLATE.TST_TEMPLATE_PARAMETER.Add(this);
                }
    
                TemplateId = TST_TEMPLATE.TemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_TEMPLATE")
                    && (ChangeTracker.OriginalValues["TST_TEMPLATE"] == TST_TEMPLATE))
                {
                    ChangeTracker.OriginalValues.Remove("TST_TEMPLATE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_TEMPLATE", previousValue);
                }
                if (TST_TEMPLATE != null && !TST_TEMPLATE.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_TEMPLATE.StartTracking();
                }
            }
        }

        #endregion

    }
}
