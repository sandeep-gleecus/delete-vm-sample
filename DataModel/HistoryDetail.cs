//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactField))]
    [KnownType(typeof(CustomProperty))]
    [KnownType(typeof(HistoryChangeSet))]
    public partial class HistoryDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ArtifactHistoryId
        {
            get { return _artifactHistoryId; }
            set
            {
                if (_artifactHistoryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactHistoryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactHistoryId = value;
                    OnPropertyChanged("ArtifactHistoryId");
                }
            }
        }
        private long _artifactHistoryId;
    
        [DataMember]
        public string FieldName
        {
            get { return _fieldName; }
            set
            {
                if (_fieldName != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldName", _fieldName);
                    _fieldName = value;
                    OnPropertyChanged("FieldName");
                }
            }
        }
        private string _fieldName;
    
        [DataMember]
        public string OldValue
        {
            get { return _oldValue; }
            set
            {
                if (_oldValue != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValue", _oldValue);
                    _oldValue = value;
                    OnPropertyChanged("OldValue");
                }
            }
        }
        private string _oldValue;
    
        [DataMember]
        public string FieldCaption
        {
            get { return _fieldCaption; }
            set
            {
                if (_fieldCaption != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldCaption", _fieldCaption);
                    _fieldCaption = value;
                    OnPropertyChanged("FieldCaption");
                }
            }
        }
        private string _fieldCaption;
    
        [DataMember]
        public string NewValue
        {
            get { return _newValue; }
            set
            {
                if (_newValue != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValue", _newValue);
                    _newValue = value;
                    OnPropertyChanged("NewValue");
                }
            }
        }
        private string _newValue;
    
        [DataMember]
        public Nullable<int> OldValueInt
        {
            get { return _oldValueInt; }
            set
            {
                if (_oldValueInt != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValueInt", _oldValueInt);
                    _oldValueInt = value;
                    OnPropertyChanged("OldValueInt");
                }
            }
        }
        private Nullable<int> _oldValueInt;
    
        [DataMember]
        public Nullable<System.DateTime> OldValueDate
        {
            get { return _oldValueDate; }
            set
            {
                if (_oldValueDate != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValueDate", _oldValueDate);
                    _oldValueDate = value;
                    OnPropertyChanged("OldValueDate");
                }
            }
        }
        private Nullable<System.DateTime> _oldValueDate;
    
        [DataMember]
        public Nullable<int> NewValueInt
        {
            get { return _newValueInt; }
            set
            {
                if (_newValueInt != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValueInt", _newValueInt);
                    _newValueInt = value;
                    OnPropertyChanged("NewValueInt");
                }
            }
        }
        private Nullable<int> _newValueInt;
    
        [DataMember]
        public Nullable<System.DateTime> NewValueDate
        {
            get { return _newValueDate; }
            set
            {
                if (_newValueDate != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValueDate", _newValueDate);
                    _newValueDate = value;
                    OnPropertyChanged("NewValueDate");
                }
            }
        }
        private Nullable<System.DateTime> _newValueDate;
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    if (!IsDeserializing)
                    {
                        if (ChangeSet != null && ChangeSet.ChangeSetId != value)
                        {
                            ChangeSet = null;
                        }
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public Nullable<int> FieldId
        {
            get { return _fieldId; }
            set
            {
                if (_fieldId != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldId", _fieldId);
                    if (!IsDeserializing)
                    {
                        if (Field != null && Field.ArtifactFieldId != value)
                        {
                            Field = null;
                        }
                    }
                    _fieldId = value;
                    OnPropertyChanged("FieldId");
                }
            }
        }
        private Nullable<int> _fieldId;
    
        [DataMember]
        public Nullable<int> CustomPropertyId
        {
            get { return _customPropertyId; }
            set
            {
                if (_customPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyId", _customPropertyId);
                    if (!IsDeserializing)
                    {
                        if (CustomProperty != null && CustomProperty.CustomPropertyId != value)
                        {
                            CustomProperty = null;
                        }
                    }
                    _customPropertyId = value;
                    OnPropertyChanged("CustomPropertyId");
                }
            }
        }
        private Nullable<int> _customPropertyId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactField Field
        {
            get { return _field; }
            set
            {
                if (!ReferenceEquals(_field, value))
                {
                    var previousValue = _field;
                    _field = value;
                    FixupField(previousValue);
                    OnNavigationPropertyChanged("Field");
                }
            }
        }
        private ArtifactField _field;
    
        [DataMember]
        public CustomProperty CustomProperty
        {
            get { return _customProperty; }
            set
            {
                if (!ReferenceEquals(_customProperty, value))
                {
                    var previousValue = _customProperty;
                    _customProperty = value;
                    FixupCustomProperty(previousValue);
                    OnNavigationPropertyChanged("CustomProperty");
                }
            }
        }
        private CustomProperty _customProperty;
    
        [DataMember]
        public HistoryChangeSet ChangeSet
        {
            get { return _changeSet; }
            set
            {
                if (!ReferenceEquals(_changeSet, value))
                {
                    var previousValue = _changeSet;
                    _changeSet = value;
                    FixupChangeSet(previousValue);
                    OnNavigationPropertyChanged("ChangeSet");
                }
            }
        }
        private HistoryChangeSet _changeSet;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Field = null;
            CustomProperty = null;
            ChangeSet = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupField(ArtifactField previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryDetails.Contains(this))
            {
                previousValue.HistoryDetails.Remove(this);
            }
    
            if (Field != null)
            {
                if (!Field.HistoryDetails.Contains(this))
                {
                    Field.HistoryDetails.Add(this);
                }
    
                FieldId = Field.ArtifactFieldId;
            }
            else if (!skipKeys)
            {
                FieldId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Field")
                    && (ChangeTracker.OriginalValues["Field"] == Field))
                {
                    ChangeTracker.OriginalValues.Remove("Field");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Field", previousValue);
                }
                if (Field != null && !Field.ChangeTracker.ChangeTrackingEnabled)
                {
                    Field.StartTracking();
                }
            }
        }
    
        private void FixupCustomProperty(CustomProperty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryDetails.Contains(this))
            {
                previousValue.HistoryDetails.Remove(this);
            }
    
            if (CustomProperty != null)
            {
                if (!CustomProperty.HistoryDetails.Contains(this))
                {
                    CustomProperty.HistoryDetails.Add(this);
                }
    
                CustomPropertyId = CustomProperty.CustomPropertyId;
            }
            else if (!skipKeys)
            {
                CustomPropertyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CustomProperty")
                    && (ChangeTracker.OriginalValues["CustomProperty"] == CustomProperty))
                {
                    ChangeTracker.OriginalValues.Remove("CustomProperty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CustomProperty", previousValue);
                }
                if (CustomProperty != null && !CustomProperty.ChangeTracker.ChangeTrackingEnabled)
                {
                    CustomProperty.StartTracking();
                }
            }
        }
    
        private void FixupChangeSet(HistoryChangeSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Details.Contains(this))
            {
                previousValue.Details.Remove(this);
            }
    
            if (ChangeSet != null)
            {
                if (!ChangeSet.Details.Contains(this))
                {
                    ChangeSet.Details.Add(this);
                }
    
                ChangeSetId = ChangeSet.ChangeSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChangeSet")
                    && (ChangeTracker.OriginalValues["ChangeSet"] == ChangeSet))
                {
                    ChangeTracker.OriginalValues.Remove("ChangeSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChangeSet", previousValue);
                }
                if (ChangeSet != null && !ChangeSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChangeSet.StartTracking();
                }
            }
        }

        #endregion

    }
}
