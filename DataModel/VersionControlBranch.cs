//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(VersionControlPullRequest))]
    [KnownType(typeof(VersionControlProject))]
    [KnownType(typeof(SourceCodeCommit))]
    [KnownType(typeof(Release))]
    public partial class VersionControlBranch: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BranchId
        {
            get { return _branchId; }
            set
            {
                if (_branchId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BranchId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _branchId = value;
                    OnPropertyChanged("BranchId");
                }
            }
        }
        private int _branchId;
    
        [DataMember]
        public int VersionControlSystemId
        {
            get { return _versionControlSystemId; }
            set
            {
                if (_versionControlSystemId != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionControlSystemId", _versionControlSystemId);
                    if (!IsDeserializing)
                    {
                        if (VersionControlProject != null && VersionControlProject.VersionControlSystemId != value)
                        {
                            VersionControlProject = null;
                        }
                    }
                    _versionControlSystemId = value;
                    OnPropertyChanged("VersionControlSystemId");
                }
            }
        }
        private int _versionControlSystemId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (VersionControlProject != null && VersionControlProject.ProjectId != value)
                        {
                            VersionControlProject = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    ChangeTracker.RecordOriginalValue("Path", _path);
                    _path = value;
                    OnPropertyChanged("Path");
                }
            }
        }
        private string _path;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsHead
        {
            get { return _isHead; }
            set
            {
                if (_isHead != value)
                {
                    ChangeTracker.RecordOriginalValue("IsHead", _isHead);
                    _isHead = value;
                    OnPropertyChanged("IsHead");
                }
            }
        }
        private bool _isHead;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<VersionControlPullRequest> PullRequestDestinations
        {
            get
            {
                if (_pullRequestDestinations == null)
                {
                    _pullRequestDestinations = new TrackableCollection<VersionControlPullRequest>();
                    _pullRequestDestinations.CollectionChanged += FixupPullRequestDestinations;
                }
                return _pullRequestDestinations;
            }
            set
            {
                if (!ReferenceEquals(_pullRequestDestinations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pullRequestDestinations != null)
                    {
                        _pullRequestDestinations.CollectionChanged -= FixupPullRequestDestinations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (VersionControlPullRequest item in _pullRequestDestinations)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pullRequestDestinations = value;
                    if (_pullRequestDestinations != null)
                    {
                        _pullRequestDestinations.CollectionChanged += FixupPullRequestDestinations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (VersionControlPullRequest item in _pullRequestDestinations)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PullRequestDestinations");
                }
            }
        }
        private TrackableCollection<VersionControlPullRequest> _pullRequestDestinations;
    
        [DataMember]
        public TrackableCollection<VersionControlPullRequest> PullRequestSources
        {
            get
            {
                if (_pullRequestSources == null)
                {
                    _pullRequestSources = new TrackableCollection<VersionControlPullRequest>();
                    _pullRequestSources.CollectionChanged += FixupPullRequestSources;
                }
                return _pullRequestSources;
            }
            set
            {
                if (!ReferenceEquals(_pullRequestSources, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pullRequestSources != null)
                    {
                        _pullRequestSources.CollectionChanged -= FixupPullRequestSources;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (VersionControlPullRequest item in _pullRequestSources)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pullRequestSources = value;
                    if (_pullRequestSources != null)
                    {
                        _pullRequestSources.CollectionChanged += FixupPullRequestSources;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (VersionControlPullRequest item in _pullRequestSources)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PullRequestSources");
                }
            }
        }
        private TrackableCollection<VersionControlPullRequest> _pullRequestSources;
    
        [DataMember]
        public VersionControlProject VersionControlProject
        {
            get { return _versionControlProject; }
            set
            {
                if (!ReferenceEquals(_versionControlProject, value))
                {
                    var previousValue = _versionControlProject;
                    _versionControlProject = value;
                    FixupVersionControlProject(previousValue);
                    OnNavigationPropertyChanged("VersionControlProject");
                }
            }
        }
        private VersionControlProject _versionControlProject;
    
        [DataMember]
        public TrackableCollection<SourceCodeCommit> Commits
        {
            get
            {
                if (_commits == null)
                {
                    _commits = new TrackableCollection<SourceCodeCommit>();
                    _commits.CollectionChanged += FixupCommits;
                }
                return _commits;
            }
            set
            {
                if (!ReferenceEquals(_commits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commits != null)
                    {
                        _commits.CollectionChanged -= FixupCommits;
                    }
                    _commits = value;
                    if (_commits != null)
                    {
                        _commits.CollectionChanged += FixupCommits;
                    }
                    OnNavigationPropertyChanged("Commits");
                }
            }
        }
        private TrackableCollection<SourceCodeCommit> _commits;
    
        [DataMember]
        public TrackableCollection<Release> Release
        {
            get
            {
                if (_release == null)
                {
                    _release = new TrackableCollection<Release>();
                    _release.CollectionChanged += FixupRelease;
                }
                return _release;
            }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_release != null)
                    {
                        _release.CollectionChanged -= FixupRelease;
                    }
                    _release = value;
                    if (_release != null)
                    {
                        _release.CollectionChanged += FixupRelease;
                    }
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private TrackableCollection<Release> _release;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PullRequestDestinations.Clear();
            PullRequestSources.Clear();
            VersionControlProject = null;
            Commits.Clear();
            Release.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupVersionControlProject(VersionControlProject previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Branches.Contains(this))
            {
                previousValue.Branches.Remove(this);
            }
    
            if (VersionControlProject != null)
            {
                if (!VersionControlProject.Branches.Contains(this))
                {
                    VersionControlProject.Branches.Add(this);
                }
    
                VersionControlSystemId = VersionControlProject.VersionControlSystemId;
                ProjectId = VersionControlProject.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VersionControlProject")
                    && (ChangeTracker.OriginalValues["VersionControlProject"] == VersionControlProject))
                {
                    ChangeTracker.OriginalValues.Remove("VersionControlProject");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VersionControlProject", previousValue);
                }
                if (VersionControlProject != null && !VersionControlProject.ChangeTracker.ChangeTrackingEnabled)
                {
                    VersionControlProject.StartTracking();
                }
            }
        }
    
        private void FixupPullRequestDestinations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlPullRequest item in e.NewItems)
                {
                    item.DestBranch = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PullRequestDestinations", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlPullRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.DestBranch, this))
                    {
                        item.DestBranch = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PullRequestDestinations", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPullRequestSources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlPullRequest item in e.NewItems)
                {
                    item.SourceBranch = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PullRequestSources", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlPullRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceBranch, this))
                    {
                        item.SourceBranch = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PullRequestSources", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCommits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SourceCodeCommit item in e.NewItems)
                {
                    if (!item.Branches.Contains(this))
                    {
                        item.Branches.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Commits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SourceCodeCommit item in e.OldItems)
                {
                    if (item.Branches.Contains(this))
                    {
                        item.Branches.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Commits", item);
                    }
                }
            }
        }
    
        private void FixupRelease(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Release item in e.NewItems)
                {
                    item.SourceCodeBranch = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Release", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Release item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceCodeBranch, this))
                    {
                        item.SourceCodeBranch = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Release", item);
                    }
                }
            }
        }

        #endregion

    }
}
