//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class TASK_RETRIEVE_GROUP_SUMMARY_BY_PROJECT_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PROJECT_GROUP_ID
        {
            get { return _pROJECT_GROUP_ID; }
            set
            {
                if (_pROJECT_GROUP_ID != value)
                {
                    OnComplexPropertyChanging();
                    _pROJECT_GROUP_ID = value;
                    OnPropertyChanged("PROJECT_GROUP_ID");
                }
            }
        }
        private int _pROJECT_GROUP_ID;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    OnComplexPropertyChanging();
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    OnComplexPropertyChanging();
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public string PROJECT_DESCRIPTION
        {
            get { return _pROJECT_DESCRIPTION; }
            set
            {
                if (_pROJECT_DESCRIPTION != value)
                {
                    OnComplexPropertyChanging();
                    _pROJECT_DESCRIPTION = value;
                    OnPropertyChanged("PROJECT_DESCRIPTION");
                }
            }
        }
        private string _pROJECT_DESCRIPTION;
    
        [DataMember]
        public int TASK_COUNT
        {
            get { return _tASK_COUNT; }
            set
            {
                if (_tASK_COUNT != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_COUNT = value;
                    OnPropertyChanged("TASK_COUNT");
                }
            }
        }
        private int _tASK_COUNT;
    
        [DataMember]
        public Nullable<int> TASK_PERCENT_ON_TIME
        {
            get { return _tASK_PERCENT_ON_TIME; }
            set
            {
                if (_tASK_PERCENT_ON_TIME != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_PERCENT_ON_TIME = value;
                    OnPropertyChanged("TASK_PERCENT_ON_TIME");
                }
            }
        }
        private Nullable<int> _tASK_PERCENT_ON_TIME;
    
        [DataMember]
        public Nullable<int> TASK_PERCENT_LATE_FINISH
        {
            get { return _tASK_PERCENT_LATE_FINISH; }
            set
            {
                if (_tASK_PERCENT_LATE_FINISH != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_PERCENT_LATE_FINISH = value;
                    OnPropertyChanged("TASK_PERCENT_LATE_FINISH");
                }
            }
        }
        private Nullable<int> _tASK_PERCENT_LATE_FINISH;
    
        [DataMember]
        public Nullable<int> TASK_PERCENT_NOT_START
        {
            get { return _tASK_PERCENT_NOT_START; }
            set
            {
                if (_tASK_PERCENT_NOT_START != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_PERCENT_NOT_START = value;
                    OnPropertyChanged("TASK_PERCENT_NOT_START");
                }
            }
        }
        private Nullable<int> _tASK_PERCENT_NOT_START;
    
        [DataMember]
        public Nullable<int> TASK_PERCENT_LATE_START
        {
            get { return _tASK_PERCENT_LATE_START; }
            set
            {
                if (_tASK_PERCENT_LATE_START != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_PERCENT_LATE_START = value;
                    OnPropertyChanged("TASK_PERCENT_LATE_START");
                }
            }
        }
        private Nullable<int> _tASK_PERCENT_LATE_START;
    
        [DataMember]
        public Nullable<int> TASK_ESTIMATED_EFFORT
        {
            get { return _tASK_ESTIMATED_EFFORT; }
            set
            {
                if (_tASK_ESTIMATED_EFFORT != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_ESTIMATED_EFFORT = value;
                    OnPropertyChanged("TASK_ESTIMATED_EFFORT");
                }
            }
        }
        private Nullable<int> _tASK_ESTIMATED_EFFORT;
    
        [DataMember]
        public Nullable<int> TASK_ACTUAL_EFFORT
        {
            get { return _tASK_ACTUAL_EFFORT; }
            set
            {
                if (_tASK_ACTUAL_EFFORT != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_ACTUAL_EFFORT = value;
                    OnPropertyChanged("TASK_ACTUAL_EFFORT");
                }
            }
        }
        private Nullable<int> _tASK_ACTUAL_EFFORT;
    
        [DataMember]
        public Nullable<int> TASK_REMAINING_EFFORT
        {
            get { return _tASK_REMAINING_EFFORT; }
            set
            {
                if (_tASK_REMAINING_EFFORT != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_REMAINING_EFFORT = value;
                    OnPropertyChanged("TASK_REMAINING_EFFORT");
                }
            }
        }
        private Nullable<int> _tASK_REMAINING_EFFORT;
    
        [DataMember]
        public Nullable<int> TASK_PROJECTED_EFFORT
        {
            get { return _tASK_PROJECTED_EFFORT; }
            set
            {
                if (_tASK_PROJECTED_EFFORT != value)
                {
                    OnComplexPropertyChanging();
                    _tASK_PROJECTED_EFFORT = value;
                    OnPropertyChanged("TASK_PROJECTED_EFFORT");
                }
            }
        }
        private Nullable<int> _tASK_PROJECTED_EFFORT;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, TASK_RETRIEVE_GROUP_SUMMARY_BY_PROJECT_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PROJECT_GROUP_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.PROJECT_GROUP_ID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PROJECT_ID", parentPropertyName), complexObject == null ? null : (object)complexObject.PROJECT_ID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PROJECT_NAME", parentPropertyName), complexObject == null ? null : (object)complexObject.PROJECT_NAME);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PROJECT_DESCRIPTION", parentPropertyName), complexObject == null ? null : (object)complexObject.PROJECT_DESCRIPTION);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_COUNT", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_COUNT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_PERCENT_ON_TIME", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_PERCENT_ON_TIME);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_PERCENT_LATE_FINISH", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_PERCENT_LATE_FINISH);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_PERCENT_NOT_START", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_PERCENT_NOT_START);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_PERCENT_LATE_START", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_PERCENT_LATE_START);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_ESTIMATED_EFFORT", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_ESTIMATED_EFFORT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_ACTUAL_EFFORT", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_ACTUAL_EFFORT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_REMAINING_EFFORT", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_REMAINING_EFFORT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TASK_PROJECTED_EFFORT", parentPropertyName), complexObject == null ? null : (object)complexObject.TASK_PROJECTED_EFFORT);
        }

        #endregion

    }
}
