//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_HistoryDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ARTIFACT_HISTORY_ID
        {
            get { return _aRTIFACT_HISTORY_ID; }
            set
            {
                if (_aRTIFACT_HISTORY_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_HISTORY_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_HISTORY_ID = value;
                    OnPropertyChanged("ARTIFACT_HISTORY_ID");
                }
            }
        }
        private int _aRTIFACT_HISTORY_ID;
    
        [DataMember]
        public string FIELD_NAME
        {
            get { return _fIELD_NAME; }
            set
            {
                if (_fIELD_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FIELD_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fIELD_NAME = value;
                    OnPropertyChanged("FIELD_NAME");
                }
            }
        }
        private string _fIELD_NAME;
    
        [DataMember]
        public string OLD_VALUE
        {
            get { return _oLD_VALUE; }
            set
            {
                if (_oLD_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE", _oLD_VALUE);
                    _oLD_VALUE = value;
                    OnPropertyChanged("OLD_VALUE");
                }
            }
        }
        private string _oLD_VALUE;
    
        [DataMember]
        public string FIELD_CAPTION
        {
            get { return _fIELD_CAPTION; }
            set
            {
                if (_fIELD_CAPTION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FIELD_CAPTION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fIELD_CAPTION = value;
                    OnPropertyChanged("FIELD_CAPTION");
                }
            }
        }
        private string _fIELD_CAPTION;
    
        [DataMember]
        public string NEW_VALUE
        {
            get { return _nEW_VALUE; }
            set
            {
                if (_nEW_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE", _nEW_VALUE);
                    _nEW_VALUE = value;
                    OnPropertyChanged("NEW_VALUE");
                }
            }
        }
        private string _nEW_VALUE;
    
        [DataMember]
        public Nullable<int> OLD_VALUE_INT
        {
            get { return _oLD_VALUE_INT; }
            set
            {
                if (_oLD_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_INT", _oLD_VALUE_INT);
                    _oLD_VALUE_INT = value;
                    OnPropertyChanged("OLD_VALUE_INT");
                }
            }
        }
        private Nullable<int> _oLD_VALUE_INT;
    
        [DataMember]
        public Nullable<System.DateTime> OLD_VALUE_DATE
        {
            get { return _oLD_VALUE_DATE; }
            set
            {
                if (_oLD_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_DATE", _oLD_VALUE_DATE);
                    _oLD_VALUE_DATE = value;
                    OnPropertyChanged("OLD_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _oLD_VALUE_DATE;
    
        [DataMember]
        public Nullable<int> NEW_VALUE_INT
        {
            get { return _nEW_VALUE_INT; }
            set
            {
                if (_nEW_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_INT", _nEW_VALUE_INT);
                    _nEW_VALUE_INT = value;
                    OnPropertyChanged("NEW_VALUE_INT");
                }
            }
        }
        private Nullable<int> _nEW_VALUE_INT;
    
        [DataMember]
        public Nullable<System.DateTime> NEW_VALUE_DATE
        {
            get { return _nEW_VALUE_DATE; }
            set
            {
                if (_nEW_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_DATE", _nEW_VALUE_DATE);
                    _nEW_VALUE_DATE = value;
                    OnPropertyChanged("NEW_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _nEW_VALUE_DATE;
    
        [DataMember]
        public int CHANGESET_ID
        {
            get { return _cHANGESET_ID; }
            set
            {
                if (_cHANGESET_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_ID = value;
                    OnPropertyChanged("CHANGESET_ID");
                }
            }
        }
        private int _cHANGESET_ID;
    
        [DataMember]
        public Nullable<int> FIELD_ID
        {
            get { return _fIELD_ID; }
            set
            {
                if (_fIELD_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FIELD_ID", _fIELD_ID);
                    _fIELD_ID = value;
                    OnPropertyChanged("FIELD_ID");
                }
            }
        }
        private Nullable<int> _fIELD_ID;
    
        [DataMember]
        public Nullable<int> CUSTOM_PROPERTY_ID
        {
            get { return _cUSTOM_PROPERTY_ID; }
            set
            {
                if (_cUSTOM_PROPERTY_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("CUSTOM_PROPERTY_ID", _cUSTOM_PROPERTY_ID);
                    _cUSTOM_PROPERTY_ID = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_ID");
                }
            }
        }
        private Nullable<int> _cUSTOM_PROPERTY_ID;
    
        [DataMember]
        public int ARTIFACT_ID
        {
            get { return _aRTIFACT_ID; }
            set
            {
                if (_aRTIFACT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_ID = value;
                    OnPropertyChanged("ARTIFACT_ID");
                }
            }
        }
        private int _aRTIFACT_ID;
    
        [DataMember]
        public int USER_ID
        {
            get { return _uSER_ID; }
            set
            {
                if (_uSER_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'USER_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _uSER_ID = value;
                    OnPropertyChanged("USER_ID");
                }
            }
        }
        private int _uSER_ID;
    
        [DataMember]
        public int ARTIFACT_TYPE_ID
        {
            get { return _aRTIFACT_TYPE_ID; }
            set
            {
                if (_aRTIFACT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_TYPE_ID");
                }
            }
        }
        private int _aRTIFACT_TYPE_ID;
    
        [DataMember]
        public System.DateTime CHANGE_DATE
        {
            get { return _cHANGE_DATE; }
            set
            {
                if (_cHANGE_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGE_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGE_DATE = value;
                    OnPropertyChanged("CHANGE_DATE");
                }
            }
        }
        private System.DateTime _cHANGE_DATE;
    
        [DataMember]
        public string CHANGER_NAME
        {
            get { return _cHANGER_NAME; }
            set
            {
                if (_cHANGER_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("CHANGER_NAME", _cHANGER_NAME);
                    _cHANGER_NAME = value;
                    OnPropertyChanged("CHANGER_NAME");
                }
            }
        }
        private string _cHANGER_NAME;
    
        [DataMember]
        public string CHANGE_NAME
        {
            get { return _cHANGE_NAME; }
            set
            {
                if (_cHANGE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGE_NAME = value;
                    OnPropertyChanged("CHANGE_NAME");
                }
            }
        }
        private string _cHANGE_NAME;
    
        [DataMember]
        public int CHANGETYPE_ID
        {
            get { return _cHANGETYPE_ID; }
            set
            {
                if (_cHANGETYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGETYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGETYPE_ID = value;
                    OnPropertyChanged("CHANGETYPE_ID");
                }
            }
        }
        private int _cHANGETYPE_ID;
    
        [DataMember]
        public Nullable<int> ARTIFACT_FIELD_TYPE_ID
        {
            get { return _aRTIFACT_FIELD_TYPE_ID; }
            set
            {
                if (_aRTIFACT_FIELD_TYPE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ARTIFACT_FIELD_TYPE_ID", _aRTIFACT_FIELD_TYPE_ID);
                    _aRTIFACT_FIELD_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_FIELD_TYPE_ID");
                }
            }
        }
        private Nullable<int> _aRTIFACT_FIELD_TYPE_ID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
