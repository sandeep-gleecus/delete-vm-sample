//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(User))]
    [KnownType(typeof(TST_ADMIN_SECTION))]
    [KnownType(typeof(TST_ADMIN_HISTORY_DETAILS))]
    [KnownType(typeof(HistoryChangeSetType))]
    public partial class TST_ADMIN_HISTORY_CHANGESET: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long CHANGESET_ID
        {
            get { return _cHANGESET_ID; }
            set
            {
                if (_cHANGESET_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_ID = value;
                    OnPropertyChanged("CHANGESET_ID");
                }
            }
        }
        private long _cHANGESET_ID;
    
        [DataMember]
        public int ADMIN_USER_ID
        {
            get { return _aDMIN_USER_ID; }
            set
            {
                if (_aDMIN_USER_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_USER_ID", _aDMIN_USER_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_USER != null && TST_USER.UserId != value)
                        {
                            TST_USER = null;
                        }
                    }
                    _aDMIN_USER_ID = value;
                    OnPropertyChanged("ADMIN_USER_ID");
                }
            }
        }
        private int _aDMIN_USER_ID;
    
        [DataMember]
        public System.DateTime CHANGE_DATE
        {
            get { return _cHANGE_DATE; }
            set
            {
                if (_cHANGE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("CHANGE_DATE", _cHANGE_DATE);
                    _cHANGE_DATE = value;
                    OnPropertyChanged("CHANGE_DATE");
                }
            }
        }
        private System.DateTime _cHANGE_DATE;
    
        [DataMember]
        public int ADMIN_SECTION_ID
        {
            get { return _aDMIN_SECTION_ID; }
            set
            {
                if (_aDMIN_SECTION_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ADMIN_SECTION_ID", _aDMIN_SECTION_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_ADMIN_SECTION != null && TST_ADMIN_SECTION.ADMIN_SECTION_ID != value)
                        {
                            TST_ADMIN_SECTION = null;
                        }
                    }
                    _aDMIN_SECTION_ID = value;
                    OnPropertyChanged("ADMIN_SECTION_ID");
                }
            }
        }
        private int _aDMIN_SECTION_ID;
    
        [DataMember]
        public int HISTORY_CHANGESET_TYPE_ID
        {
            get { return _hISTORY_CHANGESET_TYPE_ID; }
            set
            {
                if (_hISTORY_CHANGESET_TYPE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("HISTORY_CHANGESET_TYPE_ID", _hISTORY_CHANGESET_TYPE_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_HISTORY_CHANGESET_TYPE != null && TST_HISTORY_CHANGESET_TYPE.ChangeTypeId != value)
                        {
                            TST_HISTORY_CHANGESET_TYPE = null;
                        }
                    }
                    _hISTORY_CHANGESET_TYPE_ID = value;
                    OnPropertyChanged("HISTORY_CHANGESET_TYPE_ID");
                }
            }
        }
        private int _hISTORY_CHANGESET_TYPE_ID;
    
        [DataMember]
        public string ACTION_DESCRIPTION
        {
            get { return _aCTION_DESCRIPTION; }
            set
            {
                if (_aCTION_DESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("ACTION_DESCRIPTION", _aCTION_DESCRIPTION);
                    _aCTION_DESCRIPTION = value;
                    OnPropertyChanged("ACTION_DESCRIPTION");
                }
            }
        }
        private string _aCTION_DESCRIPTION;
    
        [DataMember]
        public Nullable<int> ARTIFACT_ID
        {
            get { return _aRTIFACT_ID; }
            set
            {
                if (_aRTIFACT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ARTIFACT_ID", _aRTIFACT_ID);
                    _aRTIFACT_ID = value;
                    OnPropertyChanged("ARTIFACT_ID");
                }
            }
        }
        private Nullable<int> _aRTIFACT_ID;
    
        [DataMember]
        public Nullable<System.Guid> ARTIFACT_GUID_ID
        {
            get { return _aRTIFACT_GUID_ID; }
            set
            {
                if (_aRTIFACT_GUID_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ARTIFACT_GUID_ID", _aRTIFACT_GUID_ID);
                    _aRTIFACT_GUID_ID = value;
                    OnPropertyChanged("ARTIFACT_GUID_ID");
                }
            }
        }
        private Nullable<System.Guid> _aRTIFACT_GUID_ID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public User TST_USER
        {
            get { return _tST_USER; }
            set
            {
                if (!ReferenceEquals(_tST_USER, value))
                {
                    var previousValue = _tST_USER;
                    _tST_USER = value;
                    FixupTST_USER(previousValue);
                    OnNavigationPropertyChanged("TST_USER");
                }
            }
        }
        private User _tST_USER;
    
        [DataMember]
        public TST_ADMIN_SECTION TST_ADMIN_SECTION
        {
            get { return _tST_ADMIN_SECTION; }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_SECTION, value))
                {
                    var previousValue = _tST_ADMIN_SECTION;
                    _tST_ADMIN_SECTION = value;
                    FixupTST_ADMIN_SECTION(previousValue);
                    OnNavigationPropertyChanged("TST_ADMIN_SECTION");
                }
            }
        }
        private TST_ADMIN_SECTION _tST_ADMIN_SECTION;
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_DETAILS> TST_ADMIN_HISTORY_DETAILS
        {
            get
            {
                if (_tST_ADMIN_HISTORY_DETAILS == null)
                {
                    _tST_ADMIN_HISTORY_DETAILS = new TrackableCollection<TST_ADMIN_HISTORY_DETAILS>();
                    _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                }
                return _tST_ADMIN_HISTORY_DETAILS;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_DETAILS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged -= FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    _tST_ADMIN_HISTORY_DETAILS = value;
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_DETAILS");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_DETAILS> _tST_ADMIN_HISTORY_DETAILS;
    
        [DataMember]
        public HistoryChangeSetType TST_HISTORY_CHANGESET_TYPE
        {
            get { return _tST_HISTORY_CHANGESET_TYPE; }
            set
            {
                if (!ReferenceEquals(_tST_HISTORY_CHANGESET_TYPE, value))
                {
                    var previousValue = _tST_HISTORY_CHANGESET_TYPE;
                    _tST_HISTORY_CHANGESET_TYPE = value;
                    FixupTST_HISTORY_CHANGESET_TYPE(previousValue);
                    OnNavigationPropertyChanged("TST_HISTORY_CHANGESET_TYPE");
                }
            }
        }
        private HistoryChangeSetType _tST_HISTORY_CHANGESET_TYPE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_USER = null;
            TST_ADMIN_SECTION = null;
            TST_ADMIN_HISTORY_DETAILS.Clear();
            TST_HISTORY_CHANGESET_TYPE = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_USER(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_CHANGESET.Remove(this);
            }
    
            if (TST_USER != null)
            {
                if (!TST_USER.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
                {
                    TST_USER.TST_ADMIN_HISTORY_CHANGESET.Add(this);
                }
    
                ADMIN_USER_ID = TST_USER.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_USER")
                    && (ChangeTracker.OriginalValues["TST_USER"] == TST_USER))
                {
                    ChangeTracker.OriginalValues.Remove("TST_USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_USER", previousValue);
                }
                if (TST_USER != null && !TST_USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_USER.StartTracking();
                }
            }
        }
    
        private void FixupTST_ADMIN_SECTION(TST_ADMIN_SECTION previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_CHANGESET.Remove(this);
            }
    
            if (TST_ADMIN_SECTION != null)
            {
                if (!TST_ADMIN_SECTION.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
                {
                    TST_ADMIN_SECTION.TST_ADMIN_HISTORY_CHANGESET.Add(this);
                }
    
                ADMIN_SECTION_ID = TST_ADMIN_SECTION.ADMIN_SECTION_ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_ADMIN_SECTION")
                    && (ChangeTracker.OriginalValues["TST_ADMIN_SECTION"] == TST_ADMIN_SECTION))
                {
                    ChangeTracker.OriginalValues.Remove("TST_ADMIN_SECTION");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_ADMIN_SECTION", previousValue);
                }
                if (TST_ADMIN_SECTION != null && !TST_ADMIN_SECTION.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_ADMIN_SECTION.StartTracking();
                }
            }
        }
    
        private void FixupTST_HISTORY_CHANGESET_TYPE(HistoryChangeSetType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
            {
                previousValue.TST_ADMIN_HISTORY_CHANGESET.Remove(this);
            }
    
            if (TST_HISTORY_CHANGESET_TYPE != null)
            {
                if (!TST_HISTORY_CHANGESET_TYPE.TST_ADMIN_HISTORY_CHANGESET.Contains(this))
                {
                    TST_HISTORY_CHANGESET_TYPE.TST_ADMIN_HISTORY_CHANGESET.Add(this);
                }
    
                HISTORY_CHANGESET_TYPE_ID = TST_HISTORY_CHANGESET_TYPE.ChangeTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_HISTORY_CHANGESET_TYPE")
                    && (ChangeTracker.OriginalValues["TST_HISTORY_CHANGESET_TYPE"] == TST_HISTORY_CHANGESET_TYPE))
                {
                    ChangeTracker.OriginalValues.Remove("TST_HISTORY_CHANGESET_TYPE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_HISTORY_CHANGESET_TYPE", previousValue);
                }
                if (TST_HISTORY_CHANGESET_TYPE != null && !TST_HISTORY_CHANGESET_TYPE.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_HISTORY_CHANGESET_TYPE.StartTracking();
                }
            }
        }
    
        private void FixupTST_ADMIN_HISTORY_DETAILS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.NewItems)
                {
                    item.TST_ADMIN_HISTORY_CHANGESET = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_ADMIN_HISTORY_CHANGESET, this))
                    {
                        item.TST_ADMIN_HISTORY_CHANGESET = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
        }

        #endregion

    }
}
