//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class ProjectForUserView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectGroupId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private int _projectGroupId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Name' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Website
        {
            get { return _website; }
            set
            {
                if (_website != value)
                {
                    ChangeTracker.RecordOriginalValue("Website", _website);
                    _website = value;
                    OnPropertyChanged("Website");
                }
            }
        }
        private string _website;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreationDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsActive' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public int WorkingHours
        {
            get { return _workingHours; }
            set
            {
                if (_workingHours != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkingHours' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workingHours = value;
                    OnPropertyChanged("WorkingHours");
                }
            }
        }
        private int _workingHours;
    
        [DataMember]
        public int WorkingDays
        {
            get { return _workingDays; }
            set
            {
                if (_workingDays != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkingDays' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workingDays = value;
                    OnPropertyChanged("WorkingDays");
                }
            }
        }
        private int _workingDays;
    
        [DataMember]
        public int NonWorkingHours
        {
            get { return _nonWorkingHours; }
            set
            {
                if (_nonWorkingHours != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NonWorkingHours' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nonWorkingHours = value;
                    OnPropertyChanged("NonWorkingHours");
                }
            }
        }
        private int _nonWorkingHours;
    
        [DataMember]
        public bool IsTimeTrackIncidents
        {
            get { return _isTimeTrackIncidents; }
            set
            {
                if (_isTimeTrackIncidents != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsTimeTrackIncidents' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isTimeTrackIncidents = value;
                    OnPropertyChanged("IsTimeTrackIncidents");
                }
            }
        }
        private bool _isTimeTrackIncidents;
    
        [DataMember]
        public bool IsTimeTrackTasks
        {
            get { return _isTimeTrackTasks; }
            set
            {
                if (_isTimeTrackTasks != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsTimeTrackTasks' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isTimeTrackTasks = value;
                    OnPropertyChanged("IsTimeTrackTasks");
                }
            }
        }
        private bool _isTimeTrackTasks;
    
        [DataMember]
        public bool IsEffortIncidents
        {
            get { return _isEffortIncidents; }
            set
            {
                if (_isEffortIncidents != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsEffortIncidents' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isEffortIncidents = value;
                    OnPropertyChanged("IsEffortIncidents");
                }
            }
        }
        private bool _isEffortIncidents;
    
        [DataMember]
        public bool IsEffortTasks
        {
            get { return _isEffortTasks; }
            set
            {
                if (_isEffortTasks != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsEffortTasks' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isEffortTasks = value;
                    OnPropertyChanged("IsEffortTasks");
                }
            }
        }
        private bool _isEffortTasks;
    
        [DataMember]
        public bool IsTasksAutoCreate
        {
            get { return _isTasksAutoCreate; }
            set
            {
                if (_isTasksAutoCreate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsTasksAutoCreate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isTasksAutoCreate = value;
                    OnPropertyChanged("IsTasksAutoCreate");
                }
            }
        }
        private bool _isTasksAutoCreate;
    
        [DataMember]
        public Nullable<decimal> ReqDefaultEstimate
        {
            get { return _reqDefaultEstimate; }
            set
            {
                if (_reqDefaultEstimate != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqDefaultEstimate", _reqDefaultEstimate);
                    _reqDefaultEstimate = value;
                    OnPropertyChanged("ReqDefaultEstimate");
                }
            }
        }
        private Nullable<decimal> _reqDefaultEstimate;
    
        [DataMember]
        public int ReqPointEffort
        {
            get { return _reqPointEffort; }
            set
            {
                if (_reqPointEffort != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReqPointEffort' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reqPointEffort = value;
                    OnPropertyChanged("ReqPointEffort");
                }
            }
        }
        private int _reqPointEffort;
    
        [DataMember]
        public Nullable<int> TaskDefaultEffort
        {
            get { return _taskDefaultEffort; }
            set
            {
                if (_taskDefaultEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskDefaultEffort", _taskDefaultEffort);
                    _taskDefaultEffort = value;
                    OnPropertyChanged("TaskDefaultEffort");
                }
            }
        }
        private Nullable<int> _taskDefaultEffort;
    
        [DataMember]
        public string ProjectGroupName
        {
            get { return _projectGroupName; }
            set
            {
                if (_projectGroupName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectGroupName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectGroupName = value;
                    OnPropertyChanged("ProjectGroupName");
                }
            }
        }
        private string _projectGroupName;
    
        [DataMember]
        public Nullable<int> PortfolioId
        {
            get { return _portfolioId; }
            set
            {
                if (_portfolioId != value)
                {
                    ChangeTracker.RecordOriginalValue("PortfolioId", _portfolioId);
                    _portfolioId = value;
                    OnPropertyChanged("PortfolioId");
                }
            }
        }
        private Nullable<int> _portfolioId;
    
        [DataMember]
        public string PortfolioName
        {
            get { return _portfolioName; }
            set
            {
                if (_portfolioName != value)
                {
                    ChangeTracker.RecordOriginalValue("PortfolioName", _portfolioName);
                    _portfolioName = value;
                    OnPropertyChanged("PortfolioName");
                }
            }
        }
        private string _portfolioName;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectTemplateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
