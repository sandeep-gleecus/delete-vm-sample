--- TST_PROJECT_TEMPLATE_SETTING & TST_PROJECT_TEMPLATE_SETTING_VALUE tables.
IF (OBJECT_ID('TST_PROJECT_TEMPLATE_SETTING', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PROJECT_TEMPLATE_SETTING] (
			[PROJECT_TEMPLATE_SETTING_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(255) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			CONSTRAINT [PK_TST_PROJECT_TEMPLATE_SETTING] PRIMARY KEY ([PROJECT_TEMPLATE_SETTING_ID])
		)
	END
ELSE
	PRINT N'Skipping "TST_PROJECT_TEMPLATE_SETTING".';
GO
IF (OBJECT_ID('TST_PROJECT_TEMPLATE_SETTING_VALUE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PROJECT_TEMPLATE_SETTING_VALUE] (
			[PROJECT_TEMPLATE_SETTING_ID] INTEGER NOT NULL,
			[PROJECT_TEMPLATE_ID] INTEGER NOT NULL,
			[VALUE] NVARCHAR(255) NOT NULL,
			CONSTRAINT [PK_TST_PROJECT_TEMPLATE_SETTING_VALUE] PRIMARY KEY ([PROJECT_TEMPLATE_SETTING_ID], [PROJECT_TEMPLATE_ID])
		)
		CREATE  INDEX [IDX_TST_PROJECT_TEMPLATE_SETTING_VALUE_1_FK] ON [TST_PROJECT_TEMPLATE_SETTING_VALUE] ([PROJECT_TEMPLATE_SETTING_ID])
		CREATE  INDEX [IDX_TST_PROJECT_TEMPLATE_SETTING_VALUE_2_FK] ON [TST_PROJECT_TEMPLATE_SETTING_VALUE] ([PROJECT_TEMPLATE_ID])
	END
ELSE
	PRINT N'Skipping "TST_PROJECT_TEMPLATE_SETTING_VALUE".';
GO


--- TST_PROJECT_GROUP_SETTING & TST_PROJECT_GROUP_SETTING_VALUE tables.
IF (OBJECT_ID('TST_PROJECT_GROUP_SETTING', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PROJECT_GROUP_SETTING] (
			[PROJECT_GROUP_SETTING_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(255) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			PRIMARY KEY ([PROJECT_GROUP_SETTING_ID])
		)
	END
ELSE
	PRINT N'Skipping "TST_PROJECT_GROUP_SETTING".';
GO
IF (OBJECT_ID('TST_PROJECT_GROUP_SETTING_VALUE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PROJECT_GROUP_SETTING_VALUE] (
			[PROJECT_GROUP_SETTING_ID] INTEGER NOT NULL,
			[PROJECT_GROUP_ID] INTEGER NOT NULL,
			[VALUE] NVARCHAR(255) NOT NULL,
			PRIMARY KEY ([PROJECT_GROUP_SETTING_ID], [PROJECT_GROUP_ID])
		)
		CREATE  INDEX [IDX_TST_PROJECT_GROUP_SETTING_VALUE_1_FK] ON [TST_PROJECT_GROUP_SETTING_VALUE] ([PROJECT_GROUP_SETTING_ID])
		CREATE  INDEX [IDX_TST_PROJECT_GROUP_SETTING_VALUE_2_FK] ON [TST_PROJECT_GROUP_SETTING_VALUE] ([PROJECT_GROUP_ID])
	END
ELSE
	PRINT N'Skipping "TST_PROJECT_GROUP_SETTING_VALUE".';
GO


--- TST_PORTFOLIO_SETTING & TST_PORTFOLIO_SETTING_VALUES tables.
IF (OBJECT_ID('TST_PORTFOLIO_SETTING', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PORTFOLIO_SETTING] (
			[PORTFOLIO_SETTING_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(255) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			PRIMARY KEY ([PORTFOLIO_SETTING_ID])
		)
	END
ELSE
	PRINT N'Skipping "TST_PORTFOLIO_SETTING".';
GO
IF (OBJECT_ID('TST_PORTFOLIO_SETTING_VALUE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_PORTFOLIO_SETTING_VALUE] (
			[PORTFOLIO_SETTING_ID] INTEGER NOT NULL,
			[PORTFOLIO_ID] INTEGER NOT NULL,
			[VALUE] NVARCHAR(255) NOT NULL,
			PRIMARY KEY ([PORTFOLIO_SETTING_ID], [PORTFOLIO_ID])
		)
		CREATE  INDEX [IDX_TST_PORTFOLIO_SETTING_VALUE_1_FK] ON [TST_PORTFOLIO_SETTING_VALUE] ([PORTFOLIO_SETTING_ID])
		CREATE  INDEX [IDX_TST_PORTFOLIO_SETTING_VALUE_2_FK] ON [TST_PORTFOLIO_SETTING_VALUE] ([PORTFOLIO_ID])
	END
ELSE
	PRINT N'Skipping "TST_PORTFOLIO_SETTING_VALUE".';
GO


--- TST_RISK_DETECTABILITY table.
IF (OBJECT_ID('TST_RISK_DETECTABILITY', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_RISK_DETECTABILITY] (
			[RISK_DETECTABILITY_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[PROJECT_TEMPLATE_ID] INTEGER NOT NULL,
			[NAME] NVARCHAR(40) NOT NULL,
			[COLOR] CHAR(6) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			[POSITION] INTEGER NOT NULL,
			[SCORE] INTEGER NOT NULL,
			CONSTRAINT [PK_TST_RISK_DETECTABILITY] PRIMARY KEY ([RISK_DETECTABILITY_ID])
		)
		CREATE INDEX [IDX_TST_RISK_DETECTABILITY_1_FK] ON [TST_RISK_DETECTABILITY] ([PROJECT_TEMPLATE_ID])
	END
ELSE
	PRINT N'Skipping "TST_RISK_DETECTABILITY".';
GO


-- TST_USER_RECENT_PROJECT & TST_USER_RECENT_ARTIFACT tables.
IF (OBJECT_ID('TST_USER_RECENT_PROJECT', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_USER_RECENT_PROJECT] (
			[USER_ID] INTEGER NOT NULL,
			[PROJECT_ID] INTEGER NOT NULL,
			[LAST_ACCESS_DATE] DATETIME NOT NULL,
			CONSTRAINT [PK_TST_USER_RECENT_PROJECT] PRIMARY KEY ([USER_ID], [PROJECT_ID])
		)
		CREATE INDEX [IDX_TST_USER_RECENT_PROJECT_1_FK] ON [TST_USER_RECENT_PROJECT] ([USER_ID])
		CREATE INDEX [IDX_TST_USER_RECENT_PROJECT_2_FK] ON [TST_USER_RECENT_PROJECT] ([PROJECT_ID])
	END
ELSE
	PRINT N'Skipping "[TST_USER_RECENT_PROJECT]".';
GO
IF (OBJECT_ID('TST_USER_RECENT_ARTIFACT', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_USER_RECENT_ARTIFACT] (
			[USER_ID] INTEGER NOT NULL,
			[ARTIFACT_ID] INTEGER NOT NULL,
			[ARTIFACT_TYPE_ID] INTEGER NOT NULL,
			[PROJECT_ID] INTEGER NOT NULL,
			[LAST_ACCESS_DATE] DATETIME NOT NULL,
			CONSTRAINT [PK_TST_USER_RECENT_ARTIFACT] PRIMARY KEY ([USER_ID], [ARTIFACT_ID], [ARTIFACT_TYPE_ID])
		)
		CREATE  INDEX [IDX_TST_USER_RECENT_ARTIFACT_1_FK] ON [TST_USER_RECENT_ARTIFACT] ([USER_ID])
		CREATE  INDEX [IDX_TST_USER_RECENT_ARTIFACT_2_FK] ON [TST_USER_RECENT_ARTIFACT] ([ARTIFACT_TYPE_ID])
		CREATE  INDEX [IDX_TST_USER_RECENT_ARTIFACT_3_FK] ON [TST_USER_RECENT_ARTIFACT] ([PROJECT_ID])
	END
ELSE
	PRINT N'Skipping "TST_USER_RECENT_ARTIFACT".';
GO


-- TST_STANDARD_TASK_SET & TST_STANDARD_TASK tables.
IF (OBJECT_ID('TST_STANDARD_TASK_SET', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_STANDARD_TASK_SET] (
			[STANDARD_TASK_SET_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(128) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			[PROJECT_TEMPLATE_ID] INTEGER NOT NULL,
			CONSTRAINT [PK_TST_STANDARD_TASK_SET] PRIMARY KEY ([STANDARD_TASK_SET_ID])
		)
		CREATE  INDEX [IDX_TST_STANDARD_TASK_SET_1_FK] ON [TST_STANDARD_TASK_SET] ([PROJECT_TEMPLATE_ID])
	END
ELSE
	PRINT N'Skipping "TST_STANDARD_TASK_SET".';
GO
IF (OBJECT_ID('TST_STANDARD_TASK', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_STANDARD_TASK] (
			[STANDARD_TASK_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[STANDARD_TASK_SET_ID] INTEGER NOT NULL,
			[TASK_TYPE_ID] INTEGER NOT NULL,
			[NAME] NVARCHAR(255) NOT NULL,
			[DESCRIPTION] NVARCHAR(max),
			CONSTRAINT [PK_TST_STANDARD_TASK] PRIMARY KEY ([STANDARD_TASK_ID])
		)
		CREATE  INDEX [IDX_TST_STANDARD_TASK_1_FK] ON [TST_STANDARD_TASK] ([STANDARD_TASK_SET_ID])
		CREATE  INDEX [IDX_TST_STANDARD_TASK_2_FK] ON [TST_STANDARD_TASK] ([TASK_TYPE_ID])
	END
ELSE
	PRINT N'Skipping "TST_STANDARD_TASK".';
GO


-- TST_STANDARD_TEST_CASE_SET & TST_STANDARD_TEST_CASE tables.
IF (OBJECT_ID('TST_STANDARD_TEST_CASE_SET', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_STANDARD_TEST_CASE_SET] (
			[STANDARD_TEST_CASE_SET_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(128) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			[PROJECT_TEMPLATE_ID] INTEGER NOT NULL,
			CONSTRAINT [PK_TST_STANDARD_TEST_CASE_SET] PRIMARY KEY ([STANDARD_TEST_CASE_SET_ID])
		)
		CREATE  INDEX [IDX_TST_STANDARD_TEST_CASE_SET_1_FK] ON [TST_STANDARD_TEST_CASE_SET] ([PROJECT_TEMPLATE_ID])
	END
ELSE
	PRINT N'Skipping "TST_STANDARD_TEST_CASE_SET".';
GO
IF (OBJECT_ID('TST_STANDARD_TEST_CASE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_STANDARD_TEST_CASE] (
			[STANDARD_TEST_CASE_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[STANDARD_TEST_CASE_SET_ID] INTEGER NOT NULL,
			[TEST_CASE_TYPE_ID] INTEGER NOT NULL,
			[NAME] NVARCHAR(255) NOT NULL,
			[DESCRIPION] NVARCHAR(max),
			CONSTRAINT [PK_TST_STANDARD_TEST_CASE] PRIMARY KEY ([STANDARD_TEST_CASE_ID])
		)
		CREATE  INDEX [IDX_TST_STANDARD_TEST_CASE_1_FK] ON [TST_STANDARD_TEST_CASE] ([STANDARD_TEST_CASE_SET_ID])
		CREATE  INDEX [IDX_TST_STANDARD_TEST_CASE_2_FK] ON [TST_STANDARD_TEST_CASE] ([TEST_CASE_TYPE_ID])
	END
ELSE
	PRINT N'Skipping "TST_STANDARD_TEST_CASE".';
GO


-- TST_WORKFLOW_TRANSITION_STANDARD_TASK & TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE tables.
IF (OBJECT_ID('TST_WORKFLOW_TRANSITION_STANDARD_TASK', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_WORKFLOW_TRANSITION_STANDARD_TASK] (
			[WORKFLOW_TRANSITION_STANDARD_TASK_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[STANDARD_TASK_SET_ID] INTEGER NOT NULL,
			[ARTIFACT_TYPE_ID] INTEGER NOT NULL,
			[ARTIFACT_ID] INTEGER NOT NULL,
			[WORKFLOW_TRANSITION_ID] INTEGER NOT NULL,
			[IS_INPUT_TRANSITION] BIT NOT NULL,
			CONSTRAINT [PK_TST_WORKFLOW_TRANSITION_STANDARD_TASK] PRIMARY KEY ([WORKFLOW_TRANSITION_STANDARD_TASK_ID])
		)
		CREATE  INDEX [IDX_TST_WORKFLOW_TRANSITION_STANDARD_TASK_1_FK] ON [TST_WORKFLOW_TRANSITION_STANDARD_TASK] ([STANDARD_TASK_SET_ID])
	END
ELSE
	PRINT N'Skipping "TST_WORKFLOW_TRANSITION_STANDARD_TASK".';
GO
IF (OBJECT_ID('TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE] (
			[WORKFLOW_TRANSITION_STANDARD_TEST_CASE_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[STANDARD_TEST_CASE_SET_ID] INTEGER NOT NULL,
			[ARTIFACT_TYPE_ID] INTEGER NOT NULL,
			[ARTIFACT_ID] INTEGER NOT NULL,
			[WORKFLOW_TRANSITION_ID] INTEGER NOT NULL,
			[IS_INPUT_TRANSITION] BIT NOT NULL,
			CONSTRAINT [PK_TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE] PRIMARY KEY ([WORKFLOW_TRANSITION_STANDARD_TEST_CASE_ID])
		)
		CREATE  INDEX [IDX_TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE_1_FK] ON [TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE] ([STANDARD_TEST_CASE_SET_ID])
	END
ELSE
	PRINT N'Skipping "TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE".';
GO


-- TST_TIMECARD_STATUS table.
IF (OBJECT_ID('TST_TIMECARD_STATUS', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_TIMECARD_STATUS] (
			[TIMECARD_STATUS_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(50) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			CONSTRAINT [PK_TST_TIMECARD_STATUS] PRIMARY KEY ([TIMECARD_STATUS_ID])
		)
		SET IDENTITY_INSERT [TST_TIMECARD_STATUS] ON
		INSERT INTO [TST_TIMECARD_STATUS] ([TIMECARD_STATUS_ID], [NAME], [IS_ACTIVE]) VALUES
			(1, 'Draft', 1),
			(2, 'Submitted', 1),
			(3, 'Approved', 1),
			(4, 'Rejected', 1)
		SET IDENTITY_INSERT [TST_TIMECARD_STATUS] OFF
	END
ELSE
	PRINT N'Skipping "TST_TIMECARD_STATUS".';
GO
-- TODO: FK on TST_TIMECARD after changes.


-- TST_WORKSPACE_TYPE table.
IF (OBJECT_ID('TST_WORKSPACE_TYPE', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_WORKSPACE_TYPE] (
			[WORKSPACE_TYPE_ID] INTEGER IDENTITY(1,1) NOT NULL,
			[NAME] NVARCHAR(50) NOT NULL,
			[IS_ACTIVE] BIT NOT NULL,
			CONSTRAINT [PK_TST_WORKSPACE_TYPE] PRIMARY KEY ([WORKSPACE_TYPE_ID])
		)
		SET IDENTITY_INSERT [TST_WORKSPACE_TYPE] ON
		INSERT INTO [TST_WORKSPACE_TYPE] ([WORKSPACE_TYPE_ID], [NAME], [IS_ACTIVE]) VALUES
			(1, 'Product', 1),
			(2, 'Program', 1),
			(3, 'Template', 1),
			(4, 'Portfolio', 1),
			(5, 'Enterprise', 1)
		SET IDENTITY_INSERT [TST_WORKSPACE_TYPE] OFF
	END
ELSE
	PRINT N'Skipping "TST_WORKSPACE_TYPE".';
GO
-- TODO: FKs on Global History & Report Section


-- TST_GLOBAL_HISTORY_CHANGESET & TST_GLOBAL_HISTORY_DETAILS tables.
IF (OBJECT_ID('TST_GLOBAL_HISTORY_CHANGESET', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_GLOBAL_HISTORY_CHANGESET] (
			[CHANGESET_ID] BIGINT IDENTITY(1,1) NOT NULL,
			[USER_ID] INTEGER CONSTRAINT [DEF_TST_GLOBAL_HISTORY_CHANGESET_USER_ID] DEFAULT 1 NOT NULL,
			[WORKSPACE_TYPE_ID] INTEGER CONSTRAINT [DEF_TST_GLOBAL_HISTORY_CHANGESET_WORKSPACE_TYPE_ID] DEFAULT 0 NOT NULL,
			[WORKSPACE_ID] INTEGER NOT NULL,
			[CHANGE_DATE] DATETIME NOT NULL,
			[CHANGETYPE_ID] INTEGER DEFAULT 1 NOT NULL,
			[ARTIFACT_DESC] NVARCHAR(255),
			CONSTRAINT [PK_TST_GLOBAL_HISTORY_CHANGESET] PRIMARY KEY ([CHANGESET_ID])
		)
		CREATE INDEX [AK_TST_GLOBAL_HISTORY_CHANGESET_1] ON [TST_GLOBAL_HISTORY_CHANGESET] ([CHANGESET_ID],[CHANGE_DATE])
		CREATE INDEX [AK_TST_GLOBAL_HISTORY_CHANGESET_2] ON [TST_GLOBAL_HISTORY_CHANGESET] ([CHANGESET_ID],[CHANGETYPE_ID])
		CREATE NONCLUSTERED INDEX [AK_TST_GLOBAL_HISTORY_CHANGESET_3] 
			ON [TST_GLOBAL_HISTORY_CHANGESET] (
				[WORKSPACE_TYPE_ID],
				[WORKSPACE_ID]) 
			INCLUDE (
				[CHANGESET_ID],
				[USER_ID],
				[CHANGETYPE_ID])
	END
ELSE
	PRINT N'Skipping "TST_GLOBAL_HISTORY_CHANGESET".';
GO
IF (OBJECT_ID('TST_GLOBAL_HISTORY_DETAILS', 'U') IS NULL)
	BEGIN
		CREATE TABLE [TST_GLOBAL_HISTORY_DETAILS] (
			[ARTIFACT_HISTORY_ID] BIGINT IDENTITY(1,1) NOT NULL,
			[CHANGESET_ID] BIGINT NOT NULL,
			[FIELD_NAME] NVARCHAR(50) NOT NULL,
			[FIELD_SUMMARY] NVARCHAR(255),
			[OLD_VALUE] NVARCHAR(max),
			[NEW_VALUE] NVARCHAR(max),
			[FIELD_TYPE_ID] INTEGER DEFAULT 1 NOT NULL,
			CONSTRAINT [PK_TST_GLOBAL_HISTORY_DETAILS] PRIMARY KEY ([ARTIFACT_HISTORY_ID])
		)
		CREATE INDEX [AK_TST_GLOBAL_HISTORY_DETAILS_1] ON [TST_GLOBAL_HISTORY_DETAILS] ([CHANGESET_ID])
	END
ELSE
	PRINT N'Skipping "TST_GLOBAL_HISTORY_DETAILS".';
GO





--- Foreign keys for all new tables.
IF (OBJECT_ID('FK_TST_PROJECT_TEMPLATE_SETTING_TST_PROJECT_TEMPLATE_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PROJECT_TEMPLATE_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PROJECT_TEMPLATE_SETTING_TST_PROJECT_TEMPLATE_SETTING_VALUE] 
		FOREIGN KEY ([PROJECT_TEMPLATE_SETTING_ID]) REFERENCES [TST_PROJECT_TEMPLATE_SETTING] ([PROJECT_TEMPLATE_SETTING_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TEMPLATE_SETTING_TST_PROJECT_TEMPLATE_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TEMPLATE_TST_PROJECT_TEMPLATE_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PROJECT_TEMPLATE_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PROJECT_TEMPLATE_TST_PROJECT_TEMPLATE_SETTING_VALUE] 
		FOREIGN KEY ([PROJECT_TEMPLATE_ID]) REFERENCES [TST_PROJECT_TEMPLATE] ([PROJECT_TEMPLATE_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TEMPLATE_TST_PROJECT_TEMPLATE_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_GROUP_SETTING_TST_PROJECT_GROUP_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PROJECT_GROUP_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PROJECT_GROUP_SETTING_TST_PROJECT_GROUP_SETTING_VALUE] 
		FOREIGN KEY ([PROJECT_GROUP_SETTING_ID]) REFERENCES [TST_PROJECT_GROUP_SETTING] ([PROJECT_GROUP_SETTING_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_GROUP_SETTING_TST_PROJECT_GROUP_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_GROUP_TST_PROJECT_GROUP_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PROJECT_GROUP_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PROJECT_GROUP_TST_PROJECT_GROUP_SETTING_VALUE] 
		FOREIGN KEY ([PROJECT_GROUP_ID]) REFERENCES [TST_PROJECT_GROUP] ([PROJECT_GROUP_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_GROUP_TST_PROJECT_GROUP_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PORTFOLIO_SETTING_TST_PORTFOLIO_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PORTFOLIO_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PORTFOLIO_SETTING_TST_PORTFOLIO_SETTING_VALUE] 
		FOREIGN KEY ([PORTFOLIO_SETTING_ID]) REFERENCES [TST_PORTFOLIO_SETTING] ([PORTFOLIO_SETTING_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PORTFOLIO_SETTING_TST_PORTFOLIO_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PORTFOLIO_TST_PORTFOLIO_SETTING_VALUE', 'F') IS NULL)
	ALTER TABLE [TST_PORTFOLIO_SETTING_VALUE] ADD CONSTRAINT [FK_TST_PORTFOLIO_TST_PORTFOLIO_SETTING_VALUE] 
		FOREIGN KEY ([PORTFOLIO_ID]) REFERENCES [TST_PORTFOLIO] ([PORTFOLIO_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PORTFOLIO_TST_PORTFOLIO_SETTING_VALUE".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TEMPLATE_TST_RISK_DETECTABILITY', 'F') IS NULL)
	ALTER TABLE [TST_RISK_DETECTABILITY] ADD CONSTRAINT [FK_TST_PROJECT_TEMPLATE_TST_RISK_DETECTABILITY] 
		FOREIGN KEY ([PROJECT_TEMPLATE_ID]) REFERENCES [TST_PROJECT_TEMPLATE] ([PROJECT_TEMPLATE_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TEMPLATE_TST_RISK_DETECTABILITY".';
GO

IF (OBJECT_ID('FK_TST_USER_TST_USER_RECENT_PROJECT', 'F') IS NULL)
	ALTER TABLE [TST_USER_RECENT_PROJECT] ADD CONSTRAINT [FK_TST_USER_TST_USER_RECENT_PROJECT] 
		FOREIGN KEY ([USER_ID]) REFERENCES [TST_USER] ([USER_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_USER_TST_USER_RECENT_PROJECT".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TST_USER_RECENT_PROJECT', 'F') IS NULL)
	ALTER TABLE [TST_USER_RECENT_PROJECT] ADD CONSTRAINT [FK_TST_PROJECT_TST_USER_RECENT_PROJECT] 
		FOREIGN KEY ([PROJECT_ID]) REFERENCES [TST_PROJECT] ([PROJECT_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TST_USER_RECENT_PROJECT".';
GO

IF (OBJECT_ID('FK_TST_USER_TST_USER_RECENT_ARTIFACT', 'F') IS NULL)
	ALTER TABLE [TST_USER_RECENT_ARTIFACT] ADD CONSTRAINT [FK_TST_USER_TST_USER_RECENT_ARTIFACT] 
		FOREIGN KEY ([USER_ID]) REFERENCES [TST_USER] ([USER_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_USER_TST_USER_RECENT_ARTIFACT".';
GO

IF (OBJECT_ID('FK_TST_ARTIFACT_TYPE_TST_USER_RECENT_ARTIFACT', 'F') IS NULL)
	ALTER TABLE [TST_USER_RECENT_ARTIFACT] ADD CONSTRAINT [FK_TST_ARTIFACT_TYPE_TST_USER_RECENT_ARTIFACT] 
		FOREIGN KEY ([ARTIFACT_TYPE_ID]) REFERENCES [TST_ARTIFACT_TYPE] ([ARTIFACT_TYPE_ID])
ELSE
	PRINT N'Skipping "FK_TST_ARTIFACT_TYPE_TST_USER_RECENT_ARTIFACT".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TST_USER_RECENT_ARTIFACT', 'F') IS NULL)
	ALTER TABLE [TST_USER_RECENT_ARTIFACT] ADD CONSTRAINT [FK_TST_PROJECT_TST_USER_RECENT_ARTIFACT] 
		FOREIGN KEY ([PROJECT_ID]) REFERENCES [TST_PROJECT] ([PROJECT_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TST_USER_RECENT_ARTIFACT".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TASK_SET', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TASK_SET] ADD CONSTRAINT [FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TASK_SET] 
		FOREIGN KEY ([PROJECT_TEMPLATE_ID]) REFERENCES [TST_PROJECT_TEMPLATE] ([PROJECT_TEMPLATE_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TASK_SET".';
GO

IF (OBJECT_ID('FK_TST_STANDARD_TASK_SET_TST_STANDARD_TASK', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TASK] ADD CONSTRAINT [FK_TST_STANDARD_TASK_SET_TST_STANDARD_TASK] 
		FOREIGN KEY ([STANDARD_TASK_SET_ID]) REFERENCES [TST_STANDARD_TASK_SET] ([STANDARD_TASK_SET_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_STANDARD_TASK_SET_TST_STANDARD_TASK".';
GO

IF (OBJECT_ID('FK_TST_TASK_TYPE_TST_STANDARD_TASK', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TASK] ADD CONSTRAINT [FK_TST_TASK_TYPE_TST_STANDARD_TASK] 
		FOREIGN KEY ([TASK_TYPE_ID]) REFERENCES [TST_TASK_TYPE] ([TASK_TYPE_ID])
ELSE
	PRINT N'Skipping "FK_TST_TASK_TYPE_TST_STANDARD_TASK".';
GO

IF (OBJECT_ID('FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TEST_CASE_SET', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TEST_CASE_SET] ADD CONSTRAINT [FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TEST_CASE_SET] 
		FOREIGN KEY ([PROJECT_TEMPLATE_ID]) REFERENCES [TST_PROJECT_TEMPLATE] ([PROJECT_TEMPLATE_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_PROJECT_TEMPLATE_TST_STANDARD_TEST_CASE_SET".';
GO

IF (OBJECT_ID('FK_TST_STANDARD_TEST_CASE_SET_TST_STANDARD_TEST_CASE', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TEST_CASE] ADD CONSTRAINT [FK_TST_STANDARD_TEST_CASE_SET_TST_STANDARD_TEST_CASE] 
		FOREIGN KEY ([STANDARD_TEST_CASE_SET_ID]) REFERENCES [TST_STANDARD_TEST_CASE_SET] ([STANDARD_TEST_CASE_SET_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_STANDARD_TEST_CASE_SET_TST_STANDARD_TEST_CASE".';
GO

IF (OBJECT_ID('FK_TST_TEST_CASE_TYPE_TST_STANDARD_TEST_CASE', 'F') IS NULL)
	ALTER TABLE [TST_STANDARD_TEST_CASE] ADD CONSTRAINT [FK_TST_TEST_CASE_TYPE_TST_STANDARD_TEST_CASE] 
		FOREIGN KEY ([TEST_CASE_TYPE_ID]) REFERENCES [TST_TEST_CASE_TYPE] ([TEST_CASE_TYPE_ID])
ELSE
	PRINT N'Skipping "FK_TST_TEST_CASE_TYPE_TST_STANDARD_TEST_CASE".';
GO

IF (OBJECT_ID('FK_TST_STANDARD_TASK_SET_TST_WORKFLOW_TRANSITION_STANDARD_TASK', 'F') IS NULL)
	ALTER TABLE [TST_WORKFLOW_TRANSITION_STANDARD_TASK] ADD CONSTRAINT [FK_TST_STANDARD_TASK_SET_TST_WORKFLOW_TRANSITION_STANDARD_TASK] 
		FOREIGN KEY ([STANDARD_TASK_SET_ID]) REFERENCES [TST_STANDARD_TASK_SET] ([STANDARD_TASK_SET_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_STANDARD_TASK_SET_TST_WORKFLOW_TRANSITION_STANDARD_TASK".';
GO

IF (OBJECT_ID('FK_TST_STANDARD_TEST_CASE_SET_TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE', 'F') IS NULL)
	ALTER TABLE [TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE] ADD CONSTRAINT [FK_TST_STANDARD_TEST_CASE_SET_TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE] 
		FOREIGN KEY ([STANDARD_TEST_CASE_SET_ID]) REFERENCES [TST_STANDARD_TEST_CASE_SET] ([STANDARD_TEST_CASE_SET_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_STANDARD_TEST_CASE_SET_TST_WORKFLOW_TRANSITION_STANDARD_TEST_CASE".';
GO

IF (OBJECT_ID('FK_TST_WORKSPACE_TYPE_TST_GLOBAL_HISTORY_CHANGESET', 'F') IS NULL)
	ALTER TABLE [TST_GLOBAL_HISTORY_CHANGESET] ADD CONSTRAINT [FK_TST_WORKSPACE_TYPE_TST_GLOBAL_HISTORY_CHANGESET] 
		FOREIGN KEY ([WORKSPACE_TYPE_ID]) REFERENCES [TST_WORKSPACE_TYPE] ([WORKSPACE_TYPE_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_WORKSPACE_TYPE_TST_GLOBAL_HISTORY_CHANGESET".';
GO

IF (OBJECT_ID('FK_TST_USER_TST_GLOBAL_HISTORY_CHANGESET', 'F') IS NULL)
	ALTER TABLE [TST_GLOBAL_HISTORY_CHANGESET] ADD CONSTRAINT [FK_TST_USER_TST_GLOBAL_HISTORY_CHANGESET] 
		FOREIGN KEY ([USER_ID]) REFERENCES [TST_USER] ([USER_ID]) ON DELETE SET DEFAULT
ELSE
	PRINT N'Skipping "FK_TST_USER_TST_GLOBAL_HISTORY_CHANGESET".';
GO

IF (OBJECT_ID('FK_TST_HISTORY_CHANGESET_TYPE_TST_GLOBAL_HISTORY_CHANGESET', 'F') IS NULL)
	ALTER TABLE [TST_GLOBAL_HISTORY_CHANGESET] ADD CONSTRAINT [FK_TST_HISTORY_CHANGESET_TYPE_TST_GLOBAL_HISTORY_CHANGESET] 
		FOREIGN KEY ([CHANGETYPE_ID]) REFERENCES [TST_HISTORY_CHANGESET_TYPE] ([CHANGETYPE_ID]) ON DELETE SET DEFAULT
ELSE
	PRINT N'Skipping "FK_TST_HISTORY_CHANGESET_TYPE_TST_GLOBAL_HISTORY_CHANGESET".';
GO

IF (OBJECT_ID('FK_TST_ARTIFACT_FIELD_TYPE_TST_GLOBAL_HISTORY_DETAILS', 'F') IS NULL)
	ALTER TABLE [TST_GLOBAL_HISTORY_DETAILS] ADD CONSTRAINT [FK_TST_ARTIFACT_FIELD_TYPE_TST_GLOBAL_HISTORY_DETAILS] 
		FOREIGN KEY ([FIELD_TYPE_ID]) REFERENCES [TST_ARTIFACT_FIELD_TYPE] ([ARTIFACT_FIELD_TYPE_ID]) ON DELETE SET DEFAULT
ELSE
	PRINT N'Skipping "FK_TST_ARTIFACT_FIELD_TYPE_TST_GLOBAL_HISTORY_DETAILS".';
GO

IF (OBJECT_ID('FK_TST_GLOBAL_HISTORY_CHANGESET_TST_GLOBAL_HISTORY_DETAILS', 'F') IS NULL)
	ALTER TABLE [TST_GLOBAL_HISTORY_DETAILS] ADD CONSTRAINT [FK_TST_GLOBAL_HISTORY_CHANGESET_TST_GLOBAL_HISTORY_DETAILS] 
		FOREIGN KEY ([CHANGESET_ID]) REFERENCES [TST_GLOBAL_HISTORY_CHANGESET] ([CHANGESET_ID]) ON DELETE CASCADE
ELSE
	PRINT N'Skipping "FK_TST_GLOBAL_HISTORY_CHANGESET_TST_GLOBAL_HISTORY_DETAILS".';
GO


-- Add columns to Workflow tables.
IF (COL_LENGTH('TST_RISK_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_RISK_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_RISK_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RISK_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_RISK_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RISK_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_RISK_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RISK_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_RISK_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_DOCUMENT_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_DOCUMENT_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_DOCUMENT_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_DOCUMENT_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_DOCUMENT_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_DOCUMENT_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_DOCUMENT_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_DOCUMENT_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
END
ELSE
	PRINT N'Skipping Col Add to "TST_DOCUMENT_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_REQUIREMENT_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_REQUIREMENT_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_REQUIREMENT_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_REQUIREMENT_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_REQUIREMENT_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_REQUIREMENT_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_REQUIREMENT_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_REQUIREMENT_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_REQUIREMENT_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_TEST_CASE_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_TEST_CASE_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_TEST_CASE_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TEST_CASE_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_TEST_CASE_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TEST_CASE_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_TEST_CASE_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TEST_CASE_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_TEST_CASE_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_RELEASE_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_RELEASE_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_RELEASE_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RELEASE_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_RELEASE_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RELEASE_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_RELEASE_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_RELEASE_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_RELEASE_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_TASK_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_TASK_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_TASK_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TASK_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_CREATOR] BIT CONSTRAINT [DEF_TST_TASK_WORKFLOW_TRANSITION_IS_NOTIFY_CREATOR] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TASK_WORKFLOW_TRANSITION] 
			ADD [IS_NOTIFY_OWNER] BIT CONSTRAINT [DEF_TST_TASK_WORKFLOW_TRANSITION_IS_NOTIFY_OWNER] DEFAULT (0) NOT NULL
		ALTER TABLE [TST_TASK_WORKFLOW_TRANSITION] 
			ADD [NOTIFY_SUBJECT] NVARCHAR(40) NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_TASK_WORKFLOW_TRANSITION".';
GO

IF (COL_LENGTH('TST_WORKFLOW_TRANSITION','IS_BLANK_OWNER') IS NULL)
	BEGIN
		ALTER TABLE [TST_WORKFLOW_TRANSITION] 
			ADD [IS_BLANK_OWNER] BIT CONSTRAINT [DEF_TST_WORKFLOW_TRANSITION_IS_BLANK_OWNER] DEFAULT (0) NOT NULL
	END
ELSE
	PRINT N'Skipping Col Add to "TST_WORKFLOW_TRANSITION".';
GO


-- Add column to User Profile.
IF (COL_LENGTH('TST_USER_PROFILE','IS_REPORT_ADMIN') IS NULL)
	ALTER TABLE [TST_USER_PROFILE] 
		ADD [IS_REPORT_ADMIN] BIT CONSTRAINT [DEF_TST_USER_PROFILE_IS_REPORT_ADMIN] DEFAULT (0) NOT NULL
ELSE
	PRINT N'Skipping Col Add to "TST_USER_PROFILE".';
GO


-- Update the Timecard tables.
IF (COL_LENGTH('TST_TIMECARD_ENTRY_TYPE','DESCRIPTION') IS NULL)
	ALTER TABLE [TST_TIMECARD_ENTRY_TYPE] 
		ADD [DESCRIPTION] NVARCHAR(max) CONSTRAINT [DEF_TST_TIMECARD_ENTRY_TYPE_DESCRIPTION] DEFAULT ('') NOT NULL
ELSE
	PRINT N'Skipping Col Add to "TST_TIMECARD_ENTRY_TYPE".';
GO

IF (COL_LENGTH('TST_TIMECARD_ENTRY','DESCRIPTION') IS NULL)
	ALTER TABLE [TST_TIMECARD_ENTRY] 
		ADD [DESCRIPTION] NVARCHAR(max) CONSTRAINT [DEF_TST_TIMECARD_ENTRY_DESCRIPTION] DEFAULT ('') NOT NULL
ELSE
	PRINT N'Skipping Col Add to "TST_TIMECARD_ENTRY".';
GO

IF (COL_LENGTH('TST_TIMECARD','IS_APPROVED') IS NOT NULL)
	ALTER TABLE [TST_TIMECARD]
		DROP COLUMN [IS_APPROVED]
ELSE
	PRINT N'Skipping Col Drop to "TST_TIMECARD".';
GO

IF (COL_LENGTH('TST_TIMECARD','APPROVER_USER_ID') IS NULL)
	BEGIN
		ALTER TABLE [TST_TIMECARD] ADD
			[APPROVER_USER_ID] INTEGER  NULL,
			[TIMECARD_STATUS_ID] INTEGER  NULL,
			[APPROVER_COMMENTS] NVARCHAR(max) CONSTRAINT [DEF_TST_TIMECARD_APPROVER_COMMENTS] DEFAULT ('') NOT NULL
		ALTER TABLE [TST_TIMECARD] 
			ALTER COLUMN [COMMENTS] NVARCHAR(max)
		CREATE NONCLUSTERED INDEX [IDX_TST_TIMECARD_2_FK] ON [TST_TIMECARD] ([TIMECARD_STATUS_ID] ASC)
		CREATE NONCLUSTERED INDEX [IDX_TST_TIMECARD_3_FK] ON [TST_TIMECARD] ([APPROVER_USER_ID] ASC)
		ALTER TABLE [TST_TIMECARD]
			ADD CONSTRAINT [FK_TST_TIMECARD_STATUS_TST_TIMECARD] 
				FOREIGN KEY ([TIMECARD_STATUS_ID]) REFERENCES [TST_TIMECARD_STATUS] ([TIMECARD_STATUS_ID])
		ALTER TABLE [TST_TIMECARD]
			ADD CONSTRAINT [FK_TST_USER_TST_TIMECARD_APPROVER] 
				FOREIGN KEY ([APPROVER_USER_ID]) REFERENCES [TST_USER] ([USER_ID])
	END
ELSE
	PRINT N'Skipping Col Add to "TST_TIMECARD".';
GO

IF (COL_LENGTH('TST_TIMECARD','SUBMITTER_USER_ID') IS NULL)
	exec sp_rename 'TST_TIMECARD.USER_ID', 'SUBMITTER_USER_ID', 'COLUMN'
ELSE
	PRINT N'Skipping Col Ren to "TST_TIMECARD".';
GO


-- Custom Properties
IF (COL_LENGTH('TST_ARTIFACT_CUSTOM_PROPERTY','CUST_31') IS NULL)
	ALTER TABLE [TST_ARTIFACT_CUSTOM_PROPERTY] ADD 
		[CUST_31] NVARCHAR(max), 
		[CUST_32] NVARCHAR(max), 
		[CUST_33] NVARCHAR(max), 
		[CUST_34] NVARCHAR(max), 
		[CUST_35] NVARCHAR(max),
		[CUST_36] NVARCHAR(max), 
		[CUST_37] NVARCHAR(max), 
		[CUST_38] NVARCHAR(max), 
		[CUST_39] NVARCHAR(max), 
		[CUST_40] NVARCHAR(max), 
		[CUST_41] NVARCHAR(max), 
		[CUST_42] NVARCHAR(max), 
		[CUST_43] NVARCHAR(max), 
		[CUST_44] NVARCHAR(max), 
		[CUST_45] NVARCHAR(max), 
		[CUST_46] NVARCHAR(max), 
		[CUST_47] NVARCHAR(max), 
		[CUST_48] NVARCHAR(max), 
		[CUST_49] NVARCHAR(max), 
		[CUST_50] NVARCHAR(max), 
		[CUST_51] NVARCHAR(max),
		[CUST_52] NVARCHAR(max), 
		[CUST_53] NVARCHAR(max), 
		[CUST_54] NVARCHAR(max), 
		[CUST_55] NVARCHAR(max), 
		[CUST_56] NVARCHAR(max), 
		[CUST_57] NVARCHAR(max), 
		[CUST_58] NVARCHAR(max), 
		[CUST_59] NVARCHAR(max), 
		[CUST_60] NVARCHAR(max), 
		[CUST_61] NVARCHAR(max), 
		[CUST_62] NVARCHAR(max), 
		[CUST_63] NVARCHAR(max),
		[CUST_64] NVARCHAR(max),
		[CUST_65] NVARCHAR(max), 
		[CUST_66] NVARCHAR(max), 
		[CUST_67] NVARCHAR(max),
		[CUST_68] NVARCHAR(max), 
		[CUST_69] NVARCHAR(max), 
		[CUST_70] NVARCHAR(max), 
		[CUST_71] NVARCHAR(max), 
		[CUST_72] NVARCHAR(max), 
		[CUST_73] NVARCHAR(max),
		[CUST_74] NVARCHAR(max), 
		[CUST_75] NVARCHAR(max), 
		[CUST_76] NVARCHAR(max), 
		[CUST_77] NVARCHAR(max),
		[CUST_78] NVARCHAR(max),
		[CUST_79] NVARCHAR(max),
		[CUST_80] NVARCHAR(max),
		[CUST_81] NVARCHAR(max),
		[CUST_82] NVARCHAR(max),
		[CUST_83] NVARCHAR(max),
		[CUST_84] NVARCHAR(max),
		[CUST_85] NVARCHAR(max),
		[CUST_86] NVARCHAR(max),
		[CUST_87] NVARCHAR(max), 
		[CUST_88] NVARCHAR(max), 
		[CUST_89] NVARCHAR(max),
		[CUST_90] NVARCHAR(max),
		[CUST_91] NVARCHAR(max),
		[CUST_92] NVARCHAR(max),
		[CUST_93] NVARCHAR(max),
		[CUST_94] NVARCHAR(max),
		[CUST_95] NVARCHAR(max),
		[CUST_96] NVARCHAR(max),
		[CUST_97] NVARCHAR(max),
		[CUST_98] NVARCHAR(max),
		[CUST_99] NVARCHAR(max);
ELSE
	PRINT N'Skipping Col Add to "TST_ARTIFACT_CUSTOM_PROPERTY".';
GO


-- Update icon for couple entries in Global Filetypes. No IF needed here.
UPDATE [TST_GLOBAL_FILETYPES] SET [FILETYPE_ICON] = 'Markdown.svg' WHERE [FILETYPE_MIME] = 'text/markdown';
UPDATE [TST_GLOBAL_FILETYPES] SET [FILETYPE_ICON] = 'Feature.svg' WHERE [FILETYPE_MIME] = 'text/x-feature';


-- Add column to TST_GLOBAL_CUSTOM_PROPERTY
IF (COL_LENGTH('TST_GLOBAL_CUSTOM_PROPERTY','POSITION') IS NULL)
	ALTER TABLE [TST_GLOBAL_CUSTOM_PROPERTY] 
		ADD [POSITION] INTEGER  NULL
ELSE
	PRINT N'Skipping Col Add to "TST_GLOBAL_CUSTOM_PROPERTY".';
GO

-- Add column to TST_CUSTOM_PROPERTY
IF (COL_LENGTH('TST_CUSTOM_PROPERTY','POSITION') IS NULL)
	ALTER TABLE [TST_CUSTOM_PROPERTY] 
		ADD [POSITION] INTEGER  NULL
ELSE
	PRINT N'Skipping Col Add to "TST_CUSTOM_PROPERTY".';
GO


-- Add column to TST_REQUIREMENT
IF (COL_LENGTH('TST_REQUIREMENT','IS_SUSPECT') IS NULL)
	ALTER TABLE [TST_REQUIREMENT] 
		ADD [IS_SUSPECT] BIT CONSTRAINT [DEF_TST_REQUIREMENT_IS_SUSPECT] DEFAULT (0) NOT NULL
ELSE
	PRINT N'Skipping Col Add to "TST_REQUIREMENT".';
GO


-- Update Report Tables.
IF (COL_LENGTH('TST_REPORT_AVAILABLE_SECTION','REPORT_AVAILABLE_SECTION_ID') IS NULL)
	BEGIN
		ALTER TABLE [TST_REPORT_AVAILABLE_SECTION] 
			ADD [REPORT_AVAILABLE_SECTION_ID] INTEGER IDENTITY(1,1) NOT NULL;
		ALTER TABLE [TST_REPORT_AVAILABLE_SECTION] 
			DROP CONSTRAINT [PK_TST_REPORT_AVAILABLE_SECTION];
		ALTER TABLE [TST_REPORT_AVAILABLE_SECTION] 
			ADD CONSTRAINT[PK_TST_REPORT_AVAILABLE_SECTION] 
				PRIMARY KEY CLUSTERED([REPORT_AVAILABLE_SECTION_ID]);
	END
ELSE
	PRINT N'Skipping Col Chngs to "TST_REPORT_AVAILABLE_SECTION".';
GO

IF (COL_LENGTH('TST_REPORT_CATEGORY','WORKSPACE_TYPE_ID') IS NULL)
	BEGIN
		ALTER TABLE [TST_REPORT_CATEGORY] 
			ADD [WORKSPACE_TYPE_ID] INTEGER CONSTRAINT [DEF_TST_REPORT_CATEGORY_WORKSPACE_TYPE_ID] DEFAULT (1) NOT NULL
		ALTER TABLE [TST_REPORT_CATEGORY] 
			ADD CONSTRAINT [FK_TST_WORKSPACE_TYPE_TST_REPORT_CATEGORY] 
				FOREIGN KEY ([WORKSPACE_TYPE_ID]) REFERENCES [TST_WORKSPACE_TYPE] ([WORKSPACE_TYPE_ID]) ;
	END
ELSE
	PRINT N'Skipping Col Add to "TST_REPORT_CATEGORY".';
GO


-- Update the TST_RISK table.
IF (COL_LENGTH('TST_RISK','RISK_DETECTABILITY_ID') IS NULL)
	BEGIN
		ALTER TABLE [TST_RISK] 
			ADD [RISK_DETECTABILITY_ID] INTEGER  NULL
		ALTER TABLE [TST_RISK] 
			ADD CONSTRAINT [FK_TST_RISK_DETECTABILITY_TST_RISK] 
				FOREIGN KEY ([RISK_DETECTABILITY_ID]) REFERENCES [TST_RISK_DETECTABILITY] ([RISK_DETECTABILITY_ID])
	END
ELSE
	PRINT N'Skipping Identity Add to "TST_RISK".';
GO


-- Update INdexes on TST_BUILD.
If (INDEXPROPERTY(Object_Id('TST_BUILD'), 'AK_TST_BUILD_3', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_BUILD].[AK_TST_BUILD_3]
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_BUILD_3".';
GO
If (INDEXPROPERTY(Object_Id('TST_BUILD'), 'AK_TST_BUILD_2', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_BUILD].[AK_TST_BUILD_2]
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_BUILD_2".';
GO
If (INDEXPROPERTY(Object_Id('TST_BUILD'), 'AK_TST_BUILD_1', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_BUILD].[AK_TST_BUILD_1]
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_BUILD_1".';
GO
CREATE NONCLUSTERED INDEX [AK_TST_BUILD_1] ON [TST_BUILD] 
	([RELEASE_ID] ASC, [BUILD_STATUS_ID] ASC, [PROJECT_ID] ASC, [CREATION_DATE] DESC)
GO


-- Test run indexes.
If (INDEXPROPERTY(Object_Id('TST_TEST_RUN'), 'AK_TST_TEST_RUN_3', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_TEST_RUN].[AK_TST_TEST_RUN_3]
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_TEST_RUN_3".';
GO
If (INDEXPROPERTY(Object_Id('TST_TEST_RUN'), 'AK_TST_TEST_RUN_5', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_TEST_RUN].[AK_TST_TEST_RUN_5]
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_TEST_RUN_5".';
GO
CREATE NONCLUSTERED INDEX [AK_TST_TEST_RUN_3] ON [TST_TEST_RUN] ([TEST_CASE_ID] ASC, [END_DATE] DESC)
GO
CREATE NONCLUSTERED INDEX [AK_TST_TEST_RUN_5] ON [TST_TEST_RUN] ([TEST_CASE_ID] ASC, [END_DATE] DESC, [RELEASE_ID] ASC)
GO

-- Pending Test Run Index.
If (INDEXPROPERTY(Object_Id('TST_TEST_RUNS_PENDING'), 'AK_TST_TEST_RUNS_PENDING_2', 'IndexID') IS NOT NULL)
	DROP INDEX [TST_TEST_RUNS_PENDING].[AK_TST_TEST_RUNS_PENDING_2];
ELSE
	PRINT N'Skipping Idx Drop on "AK_TST_TEST_RUNS_PENDING_2".';
GO
CREATE NONCLUSTERED INDEX [AK_TST_TEST_RUNS_PENDING_2] ON [TST_TEST_RUNS_PENDING] ([TESTER_ID] ASC, [CREATION_DATE] DESC)
GO

-- Fix issue with TST_HISTORY_POSITION missing identity
IF (OBJECTPROPERTY(OBJECT_ID('TST_HISTORY_POSITION'), 'TableHasIdentity') = 0)
BEGIN
	ALTER TABLE [TST_HISTORY_POSITION] DROP CONSTRAINT [PK_TST_HISTORY_POSITION];
	ALTER TABLE [TST_HISTORY_POSITION] ADD [HISTORY_POSITION_ID_TEMP] BIGINT IDENTITY(1,1) NOT NULL;
	ALTER TABLE [TST_HISTORY_POSITION] DROP COLUMN [HISTORY_POSITION_ID];
	EXEC sp_rename 'TST_HISTORY_POSITION.HISTORY_POSITION_ID_TEMP', 'HISTORY_POSITION_ID', 'COLUMN';
	ALTER TABLE [TST_HISTORY_POSITION] ADD CONSTRAINT [PK_TST_HISTORY_POSITION] PRIMARY KEY ([HISTORY_POSITION_ID]);
END
GO
