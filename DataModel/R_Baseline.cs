//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_Baseline: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BASELINE_ID
        {
            get { return _bASELINE_ID; }
            set
            {
                if (_bASELINE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BASELINE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bASELINE_ID = value;
                    OnPropertyChanged("BASELINE_ID");
                }
            }
        }
        private int _bASELINE_ID;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public int CREATOR_USER_ID
        {
            get { return _cREATOR_USER_ID; }
            set
            {
                if (_cREATOR_USER_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATOR_USER_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATOR_USER_ID = value;
                    OnPropertyChanged("CREATOR_USER_ID");
                }
            }
        }
        private int _cREATOR_USER_ID;
    
        [DataMember]
        public long CHANGESET_ID
        {
            get { return _cHANGESET_ID; }
            set
            {
                if (_cHANGESET_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_ID = value;
                    OnPropertyChanged("CHANGESET_ID");
                }
            }
        }
        private long _cHANGESET_ID;
    
        [DataMember]
        public Nullable<int> RELEASE_ID
        {
            get { return _rELEASE_ID; }
            set
            {
                if (_rELEASE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("RELEASE_ID", _rELEASE_ID);
                    _rELEASE_ID = value;
                    OnPropertyChanged("RELEASE_ID");
                }
            }
        }
        private Nullable<int> _rELEASE_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public bool IS_APPROVED
        {
            get { return _iS_APPROVED; }
            set
            {
                if (_iS_APPROVED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_APPROVED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_APPROVED = value;
                    OnPropertyChanged("IS_APPROVED");
                }
            }
        }
        private bool _iS_APPROVED;
    
        [DataMember]
        public bool IS_DELETED
        {
            get { return _iS_DELETED; }
            set
            {
                if (_iS_DELETED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_DELETED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_DELETED = value;
                    OnPropertyChanged("IS_DELETED");
                }
            }
        }
        private bool _iS_DELETED;
    
        [DataMember]
        public System.DateTime CREATION_DATE
        {
            get { return _cREATION_DATE; }
            set
            {
                if (_cREATION_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATION_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATION_DATE = value;
                    OnPropertyChanged("CREATION_DATE");
                }
            }
        }
        private System.DateTime _cREATION_DATE;
    
        [DataMember]
        public System.DateTime LAST_UPDATE_DATE
        {
            get { return _lAST_UPDATE_DATE; }
            set
            {
                if (_lAST_UPDATE_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LAST_UPDATE_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lAST_UPDATE_DATE = value;
                    OnPropertyChanged("LAST_UPDATE_DATE");
                }
            }
        }
        private System.DateTime _lAST_UPDATE_DATE;
    
        [DataMember]
        public System.DateTime CONCURRENCY_DATE
        {
            get { return _cONCURRENCY_DATE; }
            set
            {
                if (_cONCURRENCY_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CONCURRENCY_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cONCURRENCY_DATE = value;
                    OnPropertyChanged("CONCURRENCY_DATE");
                }
            }
        }
        private System.DateTime _cONCURRENCY_DATE;
    
        [DataMember]
        public string BASELINE_CREATOR_LOGIN
        {
            get { return _bASELINE_CREATOR_LOGIN; }
            set
            {
                if (_bASELINE_CREATOR_LOGIN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BASELINE_CREATOR_LOGIN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bASELINE_CREATOR_LOGIN = value;
                    OnPropertyChanged("BASELINE_CREATOR_LOGIN");
                }
            }
        }
        private string _bASELINE_CREATOR_LOGIN;
    
        [DataMember]
        public int CHANGESET_CREATOR_ID
        {
            get { return _cHANGESET_CREATOR_ID; }
            set
            {
                if (_cHANGESET_CREATOR_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_CREATOR_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_CREATOR_ID = value;
                    OnPropertyChanged("CHANGESET_CREATOR_ID");
                }
            }
        }
        private int _cHANGESET_CREATOR_ID;
    
        [DataMember]
        public string CHANGESET_CREATOR_LOGIN
        {
            get { return _cHANGESET_CREATOR_LOGIN; }
            set
            {
                if (_cHANGESET_CREATOR_LOGIN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_CREATOR_LOGIN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_CREATOR_LOGIN = value;
                    OnPropertyChanged("CHANGESET_CREATOR_LOGIN");
                }
            }
        }
        private string _cHANGESET_CREATOR_LOGIN;
    
        [DataMember]
        public int ARTIFACT_TYPE_ID
        {
            get { return _aRTIFACT_TYPE_ID; }
            set
            {
                if (_aRTIFACT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_TYPE_ID");
                }
            }
        }
        private int _aRTIFACT_TYPE_ID;
    
        [DataMember]
        public string ARTIFACT_TYPE_NAME
        {
            get { return _aRTIFACT_TYPE_NAME; }
            set
            {
                if (_aRTIFACT_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_TYPE_NAME = value;
                    OnPropertyChanged("ARTIFACT_TYPE_NAME");
                }
            }
        }
        private string _aRTIFACT_TYPE_NAME;
    
        [DataMember]
        public System.DateTime CHANGESET_DATE
        {
            get { return _cHANGESET_DATE; }
            set
            {
                if (_cHANGESET_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_DATE = value;
                    OnPropertyChanged("CHANGESET_DATE");
                }
            }
        }
        private System.DateTime _cHANGESET_DATE;
    
        [DataMember]
        public int CHANGESET_TYPE_ID
        {
            get { return _cHANGESET_TYPE_ID; }
            set
            {
                if (_cHANGESET_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_TYPE_ID = value;
                    OnPropertyChanged("CHANGESET_TYPE_ID");
                }
            }
        }
        private int _cHANGESET_TYPE_ID;
    
        [DataMember]
        public string CHANGESET_TYPE_NAME
        {
            get { return _cHANGESET_TYPE_NAME; }
            set
            {
                if (_cHANGESET_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CHANGESET_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cHANGESET_TYPE_NAME = value;
                    OnPropertyChanged("CHANGESET_TYPE_NAME");
                }
            }
        }
        private string _cHANGESET_TYPE_NAME;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
