//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Inflectra.SpiraTest.ApiTestSuite.SpiraImport152 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImportSoap", Namespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/")]
    public partial class Import : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRequirementTestCoverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRequirementTestCoverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRequirement2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestSetFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestSetTestCaseMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebServerUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTestCaseParameterTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTestCaseParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomListValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentSeverityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentResolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveServerDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveProjectListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Import() {
            this.Url = "http://localhost/Spira/Services/v1_5_2/Import.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateProjectCompletedEventHandler CreateProjectCompleted;
        
        /// <remarks/>
        public event AddUserCompletedEventHandler AddUserCompleted;
        
        /// <remarks/>
        public event AddRequirementTestCoverageCompletedEventHandler AddRequirementTestCoverageCompleted;
        
        /// <remarks/>
        public event RemoveRequirementTestCoverageCompletedEventHandler RemoveRequirementTestCoverageCompleted;
        
        /// <remarks/>
        public event AddRequirementCompletedEventHandler AddRequirementCompleted;
        
        /// <remarks/>
        public event UpdateRequirementCompletedEventHandler UpdateRequirementCompleted;
        
        /// <remarks/>
        public event UpdateTestCaseCompletedEventHandler UpdateTestCaseCompleted;
        
        /// <remarks/>
        public event AddRequirement2CompletedEventHandler AddRequirement2Completed;
        
        /// <remarks/>
        public event AddTestFolderCompletedEventHandler AddTestFolderCompleted;
        
        /// <remarks/>
        public event AddAttachmentCompletedEventHandler AddAttachmentCompleted;
        
        /// <remarks/>
        public event AddTestSetFolderCompletedEventHandler AddTestSetFolderCompleted;
        
        /// <remarks/>
        public event AddTestSetCompletedEventHandler AddTestSetCompleted;
        
        /// <remarks/>
        public event AddTestSetTestCaseMappingCompletedEventHandler AddTestSetTestCaseMappingCompleted;
        
        /// <remarks/>
        public event AddTestCaseCompletedEventHandler AddTestCaseCompleted;
        
        /// <remarks/>
        public event AddTestStepCompletedEventHandler AddTestStepCompleted;
        
        /// <remarks/>
        public event GetWebServerUrlCompletedEventHandler GetWebServerUrlCompleted;
        
        /// <remarks/>
        public event CreateTestCaseParameterTokenCompletedEventHandler CreateTestCaseParameterTokenCompleted;
        
        /// <remarks/>
        public event AddTestCaseParameterCompletedEventHandler AddTestCaseParameterCompleted;
        
        /// <remarks/>
        public event AddCustomListCompletedEventHandler AddCustomListCompleted;
        
        /// <remarks/>
        public event AddCustomListValueCompletedEventHandler AddCustomListValueCompleted;
        
        /// <remarks/>
        public event AddCustomPropertiesCompletedEventHandler AddCustomPropertiesCompleted;
        
        /// <remarks/>
        public event AddIncidentSeverityCompletedEventHandler AddIncidentSeverityCompleted;
        
        /// <remarks/>
        public event AddIncidentTypeCompletedEventHandler AddIncidentTypeCompleted;
        
        /// <remarks/>
        public event AddIncidentStatusCompletedEventHandler AddIncidentStatusCompleted;
        
        /// <remarks/>
        public event AddIncidentPriorityCompletedEventHandler AddIncidentPriorityCompleted;
        
        /// <remarks/>
        public event AddIncidentResolutionCompletedEventHandler AddIncidentResolutionCompleted;
        
        /// <remarks/>
        public event AddIncidentCompletedEventHandler AddIncidentCompleted;
        
        /// <remarks/>
        public event AddTaskCompletedEventHandler AddTaskCompleted;
        
        /// <remarks/>
        public event ConnectToProjectCompletedEventHandler ConnectToProjectCompleted;
        
        /// <remarks/>
        public event RetrieveServerDateTimeCompletedEventHandler RetrieveServerDateTimeCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event DisconnectCompletedEventHandler DisconnectCompleted;
        
        /// <remarks/>
        public event RetrieveProjectListCompletedEventHandler RetrieveProjectListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/CreateProject", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateProject(string name, string description, string url) {
            object[] results = this.Invoke("CreateProject", new object[] {
                        name,
                        description,
                        url});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProjectAsync(string name, string description, string url) {
            this.CreateProjectAsync(name, description, url, null);
        }
        
        /// <remarks/>
        public void CreateProjectAsync(string name, string description, string url, object userState) {
            if ((this.CreateProjectOperationCompleted == null)) {
                this.CreateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectOperationCompleted);
            }
            this.InvokeAsync("CreateProject", new object[] {
                        name,
                        description,
                        url}, this.CreateProjectOperationCompleted, userState);
        }
        
        private void OnCreateProjectOperationCompleted(object arg) {
            if ((this.CreateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProjectCompleted(this, new CreateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddUser", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddUser(string firstName, string middleInitial, string lastName, string userName, string emailAddress, string password, bool isAdmin, bool isActive, int projectRoleId) {
            object[] results = this.Invoke("AddUser", new object[] {
                        firstName,
                        middleInitial,
                        lastName,
                        userName,
                        emailAddress,
                        password,
                        isAdmin,
                        isActive,
                        projectRoleId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddUserAsync(string firstName, string middleInitial, string lastName, string userName, string emailAddress, string password, bool isAdmin, bool isActive, int projectRoleId) {
            this.AddUserAsync(firstName, middleInitial, lastName, userName, emailAddress, password, isAdmin, isActive, projectRoleId, null);
        }
        
        /// <remarks/>
        public void AddUserAsync(string firstName, string middleInitial, string lastName, string userName, string emailAddress, string password, bool isAdmin, bool isActive, int projectRoleId, object userState) {
            if ((this.AddUserOperationCompleted == null)) {
                this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
            }
            this.InvokeAsync("AddUser", new object[] {
                        firstName,
                        middleInitial,
                        lastName,
                        userName,
                        emailAddress,
                        password,
                        isAdmin,
                        isActive,
                        projectRoleId}, this.AddUserOperationCompleted, userState);
        }
        
        private void OnAddUserOperationCompleted(object arg) {
            if ((this.AddUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddRequirementTestCoverage", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddRequirementTestCoverage(int requirementId, int testCaseId) {
            this.Invoke("AddRequirementTestCoverage", new object[] {
                        requirementId,
                        testCaseId});
        }
        
        /// <remarks/>
        public void AddRequirementTestCoverageAsync(int requirementId, int testCaseId) {
            this.AddRequirementTestCoverageAsync(requirementId, testCaseId, null);
        }
        
        /// <remarks/>
        public void AddRequirementTestCoverageAsync(int requirementId, int testCaseId, object userState) {
            if ((this.AddRequirementTestCoverageOperationCompleted == null)) {
                this.AddRequirementTestCoverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRequirementTestCoverageOperationCompleted);
            }
            this.InvokeAsync("AddRequirementTestCoverage", new object[] {
                        requirementId,
                        testCaseId}, this.AddRequirementTestCoverageOperationCompleted, userState);
        }
        
        private void OnAddRequirementTestCoverageOperationCompleted(object arg) {
            if ((this.AddRequirementTestCoverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRequirementTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/RemoveRequirementTestCoverage", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRequirementTestCoverage(int requirementId, int testCaseId) {
            this.Invoke("RemoveRequirementTestCoverage", new object[] {
                        requirementId,
                        testCaseId});
        }
        
        /// <remarks/>
        public void RemoveRequirementTestCoverageAsync(int requirementId, int testCaseId) {
            this.RemoveRequirementTestCoverageAsync(requirementId, testCaseId, null);
        }
        
        /// <remarks/>
        public void RemoveRequirementTestCoverageAsync(int requirementId, int testCaseId, object userState) {
            if ((this.RemoveRequirementTestCoverageOperationCompleted == null)) {
                this.RemoveRequirementTestCoverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRequirementTestCoverageOperationCompleted);
            }
            this.InvokeAsync("RemoveRequirementTestCoverage", new object[] {
                        requirementId,
                        testCaseId}, this.RemoveRequirementTestCoverageOperationCompleted, userState);
        }
        
        private void OnRemoveRequirementTestCoverageOperationCompleted(object arg) {
            if ((this.RemoveRequirementTestCoverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRequirementTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddRequirement", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRequirement(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int indentPosition, int authorUserId) {
            object[] results = this.Invoke("AddRequirement", new object[] {
                        releaseId,
                        statusId,
                        importanceId,
                        requirementName,
                        requirementDescription,
                        indentPosition,
                        authorUserId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRequirementAsync(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int indentPosition, int authorUserId) {
            this.AddRequirementAsync(releaseId, statusId, importanceId, requirementName, requirementDescription, indentPosition, authorUserId, null);
        }
        
        /// <remarks/>
        public void AddRequirementAsync(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int indentPosition, int authorUserId, object userState) {
            if ((this.AddRequirementOperationCompleted == null)) {
                this.AddRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRequirementOperationCompleted);
            }
            this.InvokeAsync("AddRequirement", new object[] {
                        releaseId,
                        statusId,
                        importanceId,
                        requirementName,
                        requirementDescription,
                        indentPosition,
                        authorUserId}, this.AddRequirementOperationCompleted, userState);
        }
        
        private void OnAddRequirementOperationCompleted(object arg) {
            if ((this.AddRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRequirementCompleted(this, new AddRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/UpdateRequirement", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRequirement(int requirementId, int statusId, int importanceId, string requirementName, int authorUserId) {
            this.Invoke("UpdateRequirement", new object[] {
                        requirementId,
                        statusId,
                        importanceId,
                        requirementName,
                        authorUserId});
        }
        
        /// <remarks/>
        public void UpdateRequirementAsync(int requirementId, int statusId, int importanceId, string requirementName, int authorUserId) {
            this.UpdateRequirementAsync(requirementId, statusId, importanceId, requirementName, authorUserId, null);
        }
        
        /// <remarks/>
        public void UpdateRequirementAsync(int requirementId, int statusId, int importanceId, string requirementName, int authorUserId, object userState) {
            if ((this.UpdateRequirementOperationCompleted == null)) {
                this.UpdateRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRequirementOperationCompleted);
            }
            this.InvokeAsync("UpdateRequirement", new object[] {
                        requirementId,
                        statusId,
                        importanceId,
                        requirementName,
                        authorUserId}, this.UpdateRequirementOperationCompleted, userState);
        }
        
        private void OnUpdateRequirementOperationCompleted(object arg) {
            if ((this.UpdateRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRequirementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/UpdateTestCase", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTestCase(int testCaseId, string testCaseName, int authorUserId, int ownerUserId) {
            this.Invoke("UpdateTestCase", new object[] {
                        testCaseId,
                        testCaseName,
                        authorUserId,
                        ownerUserId});
        }
        
        /// <remarks/>
        public void UpdateTestCaseAsync(int testCaseId, string testCaseName, int authorUserId, int ownerUserId) {
            this.UpdateTestCaseAsync(testCaseId, testCaseName, authorUserId, ownerUserId, null);
        }
        
        /// <remarks/>
        public void UpdateTestCaseAsync(int testCaseId, string testCaseName, int authorUserId, int ownerUserId, object userState) {
            if ((this.UpdateTestCaseOperationCompleted == null)) {
                this.UpdateTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTestCaseOperationCompleted);
            }
            this.InvokeAsync("UpdateTestCase", new object[] {
                        testCaseId,
                        testCaseName,
                        authorUserId,
                        ownerUserId}, this.UpdateTestCaseOperationCompleted, userState);
        }
        
        private void OnUpdateTestCaseOperationCompleted(object arg) {
            if ((this.UpdateTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTestCaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddRequirement2", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRequirement2(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int parentRequirementId, int authorUserId) {
            object[] results = this.Invoke("AddRequirement2", new object[] {
                        releaseId,
                        statusId,
                        importanceId,
                        requirementName,
                        requirementDescription,
                        parentRequirementId,
                        authorUserId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRequirement2Async(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int parentRequirementId, int authorUserId) {
            this.AddRequirement2Async(releaseId, statusId, importanceId, requirementName, requirementDescription, parentRequirementId, authorUserId, null);
        }
        
        /// <remarks/>
        public void AddRequirement2Async(int releaseId, int statusId, int importanceId, string requirementName, string requirementDescription, int parentRequirementId, int authorUserId, object userState) {
            if ((this.AddRequirement2OperationCompleted == null)) {
                this.AddRequirement2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRequirement2OperationCompleted);
            }
            this.InvokeAsync("AddRequirement2", new object[] {
                        releaseId,
                        statusId,
                        importanceId,
                        requirementName,
                        requirementDescription,
                        parentRequirementId,
                        authorUserId}, this.AddRequirement2OperationCompleted, userState);
        }
        
        private void OnAddRequirement2OperationCompleted(object arg) {
            if ((this.AddRequirement2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRequirement2Completed(this, new AddRequirement2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestFolder", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestFolder(string folderName, string folderDescription, int parentTestFolderId, int authorUserId, int ownerUserId, int priorityId) {
            object[] results = this.Invoke("AddTestFolder", new object[] {
                        folderName,
                        folderDescription,
                        parentTestFolderId,
                        authorUserId,
                        ownerUserId,
                        priorityId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestFolderAsync(string folderName, string folderDescription, int parentTestFolderId, int authorUserId, int ownerUserId, int priorityId) {
            this.AddTestFolderAsync(folderName, folderDescription, parentTestFolderId, authorUserId, ownerUserId, priorityId, null);
        }
        
        /// <remarks/>
        public void AddTestFolderAsync(string folderName, string folderDescription, int parentTestFolderId, int authorUserId, int ownerUserId, int priorityId, object userState) {
            if ((this.AddTestFolderOperationCompleted == null)) {
                this.AddTestFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestFolderOperationCompleted);
            }
            this.InvokeAsync("AddTestFolder", new object[] {
                        folderName,
                        folderDescription,
                        parentTestFolderId,
                        authorUserId,
                        ownerUserId,
                        priorityId}, this.AddTestFolderOperationCompleted, userState);
        }
        
        private void OnAddTestFolderOperationCompleted(object arg) {
            if ((this.AddTestFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestFolderCompleted(this, new AddTestFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddAttachment", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAttachment(string filename, string description, int authorId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] binaryData, int artifactId, int artifactTypeId) {
            object[] results = this.Invoke("AddAttachment", new object[] {
                        filename,
                        description,
                        authorId,
                        binaryData,
                        artifactId,
                        artifactTypeId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(string filename, string description, int authorId, byte[] binaryData, int artifactId, int artifactTypeId) {
            this.AddAttachmentAsync(filename, description, authorId, binaryData, artifactId, artifactTypeId, null);
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(string filename, string description, int authorId, byte[] binaryData, int artifactId, int artifactTypeId, object userState) {
            if ((this.AddAttachmentOperationCompleted == null)) {
                this.AddAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentOperationCompleted);
            }
            this.InvokeAsync("AddAttachment", new object[] {
                        filename,
                        description,
                        authorId,
                        binaryData,
                        artifactId,
                        artifactTypeId}, this.AddAttachmentOperationCompleted, userState);
        }
        
        private void OnAddAttachmentOperationCompleted(object arg) {
            if ((this.AddAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentCompleted(this, new AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestSetFolder", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestSetFolder(int parentTestSetFolderId, int creatorId, string name, string description) {
            object[] results = this.Invoke("AddTestSetFolder", new object[] {
                        parentTestSetFolderId,
                        creatorId,
                        name,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestSetFolderAsync(int parentTestSetFolderId, int creatorId, string name, string description) {
            this.AddTestSetFolderAsync(parentTestSetFolderId, creatorId, name, description, null);
        }
        
        /// <remarks/>
        public void AddTestSetFolderAsync(int parentTestSetFolderId, int creatorId, string name, string description, object userState) {
            if ((this.AddTestSetFolderOperationCompleted == null)) {
                this.AddTestSetFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestSetFolderOperationCompleted);
            }
            this.InvokeAsync("AddTestSetFolder", new object[] {
                        parentTestSetFolderId,
                        creatorId,
                        name,
                        description}, this.AddTestSetFolderOperationCompleted, userState);
        }
        
        private void OnAddTestSetFolderOperationCompleted(object arg) {
            if ((this.AddTestSetFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestSetFolderCompleted(this, new AddTestSetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestSet", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestSet(int parentTestSetFolderId, int releaseId, int creatorId, int ownerId, int testSetStatusId, string name, string description, System.DateTime plannedDate, bool isPlannedDateNull) {
            object[] results = this.Invoke("AddTestSet", new object[] {
                        parentTestSetFolderId,
                        releaseId,
                        creatorId,
                        ownerId,
                        testSetStatusId,
                        name,
                        description,
                        plannedDate,
                        isPlannedDateNull});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestSetAsync(int parentTestSetFolderId, int releaseId, int creatorId, int ownerId, int testSetStatusId, string name, string description, System.DateTime plannedDate, bool isPlannedDateNull) {
            this.AddTestSetAsync(parentTestSetFolderId, releaseId, creatorId, ownerId, testSetStatusId, name, description, plannedDate, isPlannedDateNull, null);
        }
        
        /// <remarks/>
        public void AddTestSetAsync(int parentTestSetFolderId, int releaseId, int creatorId, int ownerId, int testSetStatusId, string name, string description, System.DateTime plannedDate, bool isPlannedDateNull, object userState) {
            if ((this.AddTestSetOperationCompleted == null)) {
                this.AddTestSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestSetOperationCompleted);
            }
            this.InvokeAsync("AddTestSet", new object[] {
                        parentTestSetFolderId,
                        releaseId,
                        creatorId,
                        ownerId,
                        testSetStatusId,
                        name,
                        description,
                        plannedDate,
                        isPlannedDateNull}, this.AddTestSetOperationCompleted, userState);
        }
        
        private void OnAddTestSetOperationCompleted(object arg) {
            if ((this.AddTestSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestSetCompleted(this, new AddTestSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestSetTestCaseMapping", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddTestSetTestCaseMapping(int testSetId, int testCaseId) {
            this.Invoke("AddTestSetTestCaseMapping", new object[] {
                        testSetId,
                        testCaseId});
        }
        
        /// <remarks/>
        public void AddTestSetTestCaseMappingAsync(int testSetId, int testCaseId) {
            this.AddTestSetTestCaseMappingAsync(testSetId, testCaseId, null);
        }
        
        /// <remarks/>
        public void AddTestSetTestCaseMappingAsync(int testSetId, int testCaseId, object userState) {
            if ((this.AddTestSetTestCaseMappingOperationCompleted == null)) {
                this.AddTestSetTestCaseMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestSetTestCaseMappingOperationCompleted);
            }
            this.InvokeAsync("AddTestSetTestCaseMapping", new object[] {
                        testSetId,
                        testCaseId}, this.AddTestSetTestCaseMappingOperationCompleted, userState);
        }
        
        private void OnAddTestSetTestCaseMappingOperationCompleted(object arg) {
            if ((this.AddTestSetTestCaseMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestSetTestCaseMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestCase", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestCase(string testCaseName, string testCaseDescription, int parentTestFolderId, int authorUserId, int ownerUserId, bool activeTestCase, int priorityId, int estimatedDuration) {
            object[] results = this.Invoke("AddTestCase", new object[] {
                        testCaseName,
                        testCaseDescription,
                        parentTestFolderId,
                        authorUserId,
                        ownerUserId,
                        activeTestCase,
                        priorityId,
                        estimatedDuration});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestCaseAsync(string testCaseName, string testCaseDescription, int parentTestFolderId, int authorUserId, int ownerUserId, bool activeTestCase, int priorityId, int estimatedDuration) {
            this.AddTestCaseAsync(testCaseName, testCaseDescription, parentTestFolderId, authorUserId, ownerUserId, activeTestCase, priorityId, estimatedDuration, null);
        }
        
        /// <remarks/>
        public void AddTestCaseAsync(string testCaseName, string testCaseDescription, int parentTestFolderId, int authorUserId, int ownerUserId, bool activeTestCase, int priorityId, int estimatedDuration, object userState) {
            if ((this.AddTestCaseOperationCompleted == null)) {
                this.AddTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestCaseOperationCompleted);
            }
            this.InvokeAsync("AddTestCase", new object[] {
                        testCaseName,
                        testCaseDescription,
                        parentTestFolderId,
                        authorUserId,
                        ownerUserId,
                        activeTestCase,
                        priorityId,
                        estimatedDuration}, this.AddTestCaseOperationCompleted, userState);
        }
        
        private void OnAddTestCaseOperationCompleted(object arg) {
            if ((this.AddTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestCaseCompleted(this, new AddTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestStep", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestStep(int testCaseId, int position, string description, string expectedResult, string sampleData) {
            object[] results = this.Invoke("AddTestStep", new object[] {
                        testCaseId,
                        position,
                        description,
                        expectedResult,
                        sampleData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestStepAsync(int testCaseId, int position, string description, string expectedResult, string sampleData) {
            this.AddTestStepAsync(testCaseId, position, description, expectedResult, sampleData, null);
        }
        
        /// <remarks/>
        public void AddTestStepAsync(int testCaseId, int position, string description, string expectedResult, string sampleData, object userState) {
            if ((this.AddTestStepOperationCompleted == null)) {
                this.AddTestStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestStepOperationCompleted);
            }
            this.InvokeAsync("AddTestStep", new object[] {
                        testCaseId,
                        position,
                        description,
                        expectedResult,
                        sampleData}, this.AddTestStepOperationCompleted, userState);
        }
        
        private void OnAddTestStepOperationCompleted(object arg) {
            if ((this.AddTestStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestStepCompleted(this, new AddTestStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/GetWebServerUrl", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebServerUrl() {
            object[] results = this.Invoke("GetWebServerUrl", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServerUrlAsync() {
            this.GetWebServerUrlAsync(null);
        }
        
        /// <remarks/>
        public void GetWebServerUrlAsync(object userState) {
            if ((this.GetWebServerUrlOperationCompleted == null)) {
                this.GetWebServerUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServerUrlOperationCompleted);
            }
            this.InvokeAsync("GetWebServerUrl", new object[0], this.GetWebServerUrlOperationCompleted, userState);
        }
        
        private void OnGetWebServerUrlOperationCompleted(object arg) {
            if ((this.GetWebServerUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServerUrlCompleted(this, new GetWebServerUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/CreateTestCaseParameterToken", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateTestCaseParameterToken(string parameterName) {
            object[] results = this.Invoke("CreateTestCaseParameterToken", new object[] {
                        parameterName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTestCaseParameterTokenAsync(string parameterName) {
            this.CreateTestCaseParameterTokenAsync(parameterName, null);
        }
        
        /// <remarks/>
        public void CreateTestCaseParameterTokenAsync(string parameterName, object userState) {
            if ((this.CreateTestCaseParameterTokenOperationCompleted == null)) {
                this.CreateTestCaseParameterTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTestCaseParameterTokenOperationCompleted);
            }
            this.InvokeAsync("CreateTestCaseParameterToken", new object[] {
                        parameterName}, this.CreateTestCaseParameterTokenOperationCompleted, userState);
        }
        
        private void OnCreateTestCaseParameterTokenOperationCompleted(object arg) {
            if ((this.CreateTestCaseParameterTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTestCaseParameterTokenCompleted(this, new CreateTestCaseParameterTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTestCaseParameter", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTestCaseParameter(int testCaseId, string name, string defaultValue) {
            object[] results = this.Invoke("AddTestCaseParameter", new object[] {
                        testCaseId,
                        name,
                        defaultValue});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTestCaseParameterAsync(int testCaseId, string name, string defaultValue) {
            this.AddTestCaseParameterAsync(testCaseId, name, defaultValue, null);
        }
        
        /// <remarks/>
        public void AddTestCaseParameterAsync(int testCaseId, string name, string defaultValue, object userState) {
            if ((this.AddTestCaseParameterOperationCompleted == null)) {
                this.AddTestCaseParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTestCaseParameterOperationCompleted);
            }
            this.InvokeAsync("AddTestCaseParameter", new object[] {
                        testCaseId,
                        name,
                        defaultValue}, this.AddTestCaseParameterOperationCompleted, userState);
        }
        
        private void OnAddTestCaseParameterOperationCompleted(object arg) {
            if ((this.AddTestCaseParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTestCaseParameterCompleted(this, new AddTestCaseParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddCustomList", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCustomList(string name, bool active) {
            object[] results = this.Invoke("AddCustomList", new object[] {
                        name,
                        active});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomListAsync(string name, bool active) {
            this.AddCustomListAsync(name, active, null);
        }
        
        /// <remarks/>
        public void AddCustomListAsync(string name, bool active, object userState) {
            if ((this.AddCustomListOperationCompleted == null)) {
                this.AddCustomListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomListOperationCompleted);
            }
            this.InvokeAsync("AddCustomList", new object[] {
                        name,
                        active}, this.AddCustomListOperationCompleted, userState);
        }
        
        private void OnAddCustomListOperationCompleted(object arg) {
            if ((this.AddCustomListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomListCompleted(this, new AddCustomListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddCustomListValue", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCustomListValue(int customPropertyListId, string name, bool active) {
            object[] results = this.Invoke("AddCustomListValue", new object[] {
                        customPropertyListId,
                        name,
                        active});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomListValueAsync(int customPropertyListId, string name, bool active) {
            this.AddCustomListValueAsync(customPropertyListId, name, active, null);
        }
        
        /// <remarks/>
        public void AddCustomListValueAsync(int customPropertyListId, string name, bool active, object userState) {
            if ((this.AddCustomListValueOperationCompleted == null)) {
                this.AddCustomListValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomListValueOperationCompleted);
            }
            this.InvokeAsync("AddCustomListValue", new object[] {
                        customPropertyListId,
                        name,
                        active}, this.AddCustomListValueOperationCompleted, userState);
        }
        
        private void OnAddCustomListValueOperationCompleted(object arg) {
            if ((this.AddCustomListValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomListValueCompleted(this, new AddCustomListValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddCustomProperties", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCustomProperties(
                    int artifactId, 
                    int artifactTypeId, 
                    string text01, 
                    string text02, 
                    string text03, 
                    string text04, 
                    string text05, 
                    string text06, 
                    string text07, 
                    string text08, 
                    string text09, 
                    string text10, 
                    int list01, 
                    int list02, 
                    int list03, 
                    int list04, 
                    int list05, 
                    int list06, 
                    int list07, 
                    int list08, 
                    int list09, 
                    int list10) {
            this.Invoke("AddCustomProperties", new object[] {
                        artifactId,
                        artifactTypeId,
                        text01,
                        text02,
                        text03,
                        text04,
                        text05,
                        text06,
                        text07,
                        text08,
                        text09,
                        text10,
                        list01,
                        list02,
                        list03,
                        list04,
                        list05,
                        list06,
                        list07,
                        list08,
                        list09,
                        list10});
        }
        
        /// <remarks/>
        public void AddCustomPropertiesAsync(
                    int artifactId, 
                    int artifactTypeId, 
                    string text01, 
                    string text02, 
                    string text03, 
                    string text04, 
                    string text05, 
                    string text06, 
                    string text07, 
                    string text08, 
                    string text09, 
                    string text10, 
                    int list01, 
                    int list02, 
                    int list03, 
                    int list04, 
                    int list05, 
                    int list06, 
                    int list07, 
                    int list08, 
                    int list09, 
                    int list10) {
            this.AddCustomPropertiesAsync(artifactId, artifactTypeId, text01, text02, text03, text04, text05, text06, text07, text08, text09, text10, list01, list02, list03, list04, list05, list06, list07, list08, list09, list10, null);
        }
        
        /// <remarks/>
        public void AddCustomPropertiesAsync(
                    int artifactId, 
                    int artifactTypeId, 
                    string text01, 
                    string text02, 
                    string text03, 
                    string text04, 
                    string text05, 
                    string text06, 
                    string text07, 
                    string text08, 
                    string text09, 
                    string text10, 
                    int list01, 
                    int list02, 
                    int list03, 
                    int list04, 
                    int list05, 
                    int list06, 
                    int list07, 
                    int list08, 
                    int list09, 
                    int list10, 
                    object userState) {
            if ((this.AddCustomPropertiesOperationCompleted == null)) {
                this.AddCustomPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomPropertiesOperationCompleted);
            }
            this.InvokeAsync("AddCustomProperties", new object[] {
                        artifactId,
                        artifactTypeId,
                        text01,
                        text02,
                        text03,
                        text04,
                        text05,
                        text06,
                        text07,
                        text08,
                        text09,
                        text10,
                        list01,
                        list02,
                        list03,
                        list04,
                        list05,
                        list06,
                        list07,
                        list08,
                        list09,
                        list10}, this.AddCustomPropertiesOperationCompleted, userState);
        }
        
        private void OnAddCustomPropertiesOperationCompleted(object arg) {
            if ((this.AddCustomPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncidentSeverity", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentSeverity(string name, string colorCode) {
            object[] results = this.Invoke("AddIncidentSeverity", new object[] {
                        name,
                        colorCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentSeverityAsync(string name, string colorCode) {
            this.AddIncidentSeverityAsync(name, colorCode, null);
        }
        
        /// <remarks/>
        public void AddIncidentSeverityAsync(string name, string colorCode, object userState) {
            if ((this.AddIncidentSeverityOperationCompleted == null)) {
                this.AddIncidentSeverityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentSeverityOperationCompleted);
            }
            this.InvokeAsync("AddIncidentSeverity", new object[] {
                        name,
                        colorCode}, this.AddIncidentSeverityOperationCompleted, userState);
        }
        
        private void OnAddIncidentSeverityOperationCompleted(object arg) {
            if ((this.AddIncidentSeverityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentSeverityCompleted(this, new AddIncidentSeverityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncidentType", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentType(string name) {
            object[] results = this.Invoke("AddIncidentType", new object[] {
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentTypeAsync(string name) {
            this.AddIncidentTypeAsync(name, null);
        }
        
        /// <remarks/>
        public void AddIncidentTypeAsync(string name, object userState) {
            if ((this.AddIncidentTypeOperationCompleted == null)) {
                this.AddIncidentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentTypeOperationCompleted);
            }
            this.InvokeAsync("AddIncidentType", new object[] {
                        name}, this.AddIncidentTypeOperationCompleted, userState);
        }
        
        private void OnAddIncidentTypeOperationCompleted(object arg) {
            if ((this.AddIncidentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentTypeCompleted(this, new AddIncidentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncidentStatus", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentStatus(string name) {
            object[] results = this.Invoke("AddIncidentStatus", new object[] {
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentStatusAsync(string name) {
            this.AddIncidentStatusAsync(name, null);
        }
        
        /// <remarks/>
        public void AddIncidentStatusAsync(string name, object userState) {
            if ((this.AddIncidentStatusOperationCompleted == null)) {
                this.AddIncidentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentStatusOperationCompleted);
            }
            this.InvokeAsync("AddIncidentStatus", new object[] {
                        name}, this.AddIncidentStatusOperationCompleted, userState);
        }
        
        private void OnAddIncidentStatusOperationCompleted(object arg) {
            if ((this.AddIncidentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentStatusCompleted(this, new AddIncidentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncidentPriority", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentPriority(string name, string colorCode) {
            object[] results = this.Invoke("AddIncidentPriority", new object[] {
                        name,
                        colorCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentPriorityAsync(string name, string colorCode) {
            this.AddIncidentPriorityAsync(name, colorCode, null);
        }
        
        /// <remarks/>
        public void AddIncidentPriorityAsync(string name, string colorCode, object userState) {
            if ((this.AddIncidentPriorityOperationCompleted == null)) {
                this.AddIncidentPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentPriorityOperationCompleted);
            }
            this.InvokeAsync("AddIncidentPriority", new object[] {
                        name,
                        colorCode}, this.AddIncidentPriorityOperationCompleted, userState);
        }
        
        private void OnAddIncidentPriorityOperationCompleted(object arg) {
            if ((this.AddIncidentPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentPriorityCompleted(this, new AddIncidentPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncidentResolution", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentResolution(int incidentId, string resolution, System.DateTime creationDate, int creatorId) {
            object[] results = this.Invoke("AddIncidentResolution", new object[] {
                        incidentId,
                        resolution,
                        creationDate,
                        creatorId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentResolutionAsync(int incidentId, string resolution, System.DateTime creationDate, int creatorId) {
            this.AddIncidentResolutionAsync(incidentId, resolution, creationDate, creatorId, null);
        }
        
        /// <remarks/>
        public void AddIncidentResolutionAsync(int incidentId, string resolution, System.DateTime creationDate, int creatorId, object userState) {
            if ((this.AddIncidentResolutionOperationCompleted == null)) {
                this.AddIncidentResolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentResolutionOperationCompleted);
            }
            this.InvokeAsync("AddIncidentResolution", new object[] {
                        incidentId,
                        resolution,
                        creationDate,
                        creatorId}, this.AddIncidentResolutionOperationCompleted, userState);
        }
        
        private void OnAddIncidentResolutionOperationCompleted(object arg) {
            if ((this.AddIncidentResolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentResolutionCompleted(this, new AddIncidentResolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddIncident", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncident(int typeId, int priorityId, int severityId, int statusId, string name, string description, int testRunStepId, int detectedByUserId, int ownerUserId, System.DateTime closedDate, bool isClosed) {
            object[] results = this.Invoke("AddIncident", new object[] {
                        typeId,
                        priorityId,
                        severityId,
                        statusId,
                        name,
                        description,
                        testRunStepId,
                        detectedByUserId,
                        ownerUserId,
                        closedDate,
                        isClosed});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentAsync(int typeId, int priorityId, int severityId, int statusId, string name, string description, int testRunStepId, int detectedByUserId, int ownerUserId, System.DateTime closedDate, bool isClosed) {
            this.AddIncidentAsync(typeId, priorityId, severityId, statusId, name, description, testRunStepId, detectedByUserId, ownerUserId, closedDate, isClosed, null);
        }
        
        /// <remarks/>
        public void AddIncidentAsync(int typeId, int priorityId, int severityId, int statusId, string name, string description, int testRunStepId, int detectedByUserId, int ownerUserId, System.DateTime closedDate, bool isClosed, object userState) {
            if ((this.AddIncidentOperationCompleted == null)) {
                this.AddIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentOperationCompleted);
            }
            this.InvokeAsync("AddIncident", new object[] {
                        typeId,
                        priorityId,
                        severityId,
                        statusId,
                        name,
                        description,
                        testRunStepId,
                        detectedByUserId,
                        ownerUserId,
                        closedDate,
                        isClosed}, this.AddIncidentOperationCompleted, userState);
        }
        
        private void OnAddIncidentOperationCompleted(object arg) {
            if ((this.AddIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentCompleted(this, new AddIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/AddTask", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTask(string name, string description, int taskStatusId, int taskPriorityId, int requirementId, int releaseId, int ownerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> endDate, int completionPercentage, int estimatedEffort, int actualEffort) {
            object[] results = this.Invoke("AddTask", new object[] {
                        name,
                        description,
                        taskStatusId,
                        taskPriorityId,
                        requirementId,
                        releaseId,
                        ownerId,
                        startDate,
                        endDate,
                        completionPercentage,
                        estimatedEffort,
                        actualEffort});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTaskAsync(string name, string description, int taskStatusId, int taskPriorityId, int requirementId, int releaseId, int ownerId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, int completionPercentage, int estimatedEffort, int actualEffort) {
            this.AddTaskAsync(name, description, taskStatusId, taskPriorityId, requirementId, releaseId, ownerId, startDate, endDate, completionPercentage, estimatedEffort, actualEffort, null);
        }
        
        /// <remarks/>
        public void AddTaskAsync(string name, string description, int taskStatusId, int taskPriorityId, int requirementId, int releaseId, int ownerId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, int completionPercentage, int estimatedEffort, int actualEffort, object userState) {
            if ((this.AddTaskOperationCompleted == null)) {
                this.AddTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTaskOperationCompleted);
            }
            this.InvokeAsync("AddTask", new object[] {
                        name,
                        description,
                        taskStatusId,
                        taskPriorityId,
                        requirementId,
                        releaseId,
                        ownerId,
                        startDate,
                        endDate,
                        completionPercentage,
                        estimatedEffort,
                        actualEffort}, this.AddTaskOperationCompleted, userState);
        }
        
        private void OnAddTaskOperationCompleted(object arg) {
            if ((this.AddTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTaskCompleted(this, new AddTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/ConnectToProject", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectToProject(int projectId) {
            object[] results = this.Invoke("ConnectToProject", new object[] {
                        projectId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId) {
            this.ConnectToProjectAsync(projectId, null);
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId, object userState) {
            if ((this.ConnectToProjectOperationCompleted == null)) {
                this.ConnectToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectToProjectOperationCompleted);
            }
            this.InvokeAsync("ConnectToProject", new object[] {
                        projectId}, this.ConnectToProjectOperationCompleted, userState);
        }
        
        private void OnConnectToProjectOperationCompleted(object arg) {
            if ((this.ConnectToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectToProjectCompleted(this, new ConnectToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/RetrieveServerDateTime", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime RetrieveServerDateTime() {
            object[] results = this.Invoke("RetrieveServerDateTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveServerDateTimeAsync() {
            this.RetrieveServerDateTimeAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveServerDateTimeAsync(object userState) {
            if ((this.RetrieveServerDateTimeOperationCompleted == null)) {
                this.RetrieveServerDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveServerDateTimeOperationCompleted);
            }
            this.InvokeAsync("RetrieveServerDateTime", new object[0], this.RetrieveServerDateTimeOperationCompleted, userState);
        }
        
        private void OnRetrieveServerDateTimeOperationCompleted(object arg) {
            if ((this.RetrieveServerDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveServerDateTimeCompleted(this, new RetrieveServerDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/Authenticate", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userName,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/Disconnect", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Disconnect() {
            this.Invoke("Disconnect", new object[0]);
        }
        
        /// <remarks/>
        public void DisconnectAsync() {
            this.DisconnectAsync(null);
        }
        
        /// <remarks/>
        public void DisconnectAsync(object userState) {
            if ((this.DisconnectOperationCompleted == null)) {
                this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
            }
            this.InvokeAsync("Disconnect", new object[0], this.DisconnectOperationCompleted, userState);
        }
        
        private void OnDisconnectOperationCompleted(object arg) {
            if ((this.DisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.5.2/RetrieveProjectList", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProjectData RetrieveProjectList() {
            object[] results = this.Invoke("RetrieveProjectList", new object[0]);
            return ((ProjectData)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveProjectListAsync() {
            this.RetrieveProjectListAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveProjectListAsync(object userState) {
            if ((this.RetrieveProjectListOperationCompleted == null)) {
                this.RetrieveProjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveProjectListOperationCompleted);
            }
            this.InvokeAsync("RetrieveProjectList", new object[0], this.RetrieveProjectListOperationCompleted, userState);
        }
        
        private void OnRetrieveProjectListOperationCompleted(object arg) {
            if ((this.RetrieveProjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveProjectListCompleted(this, new RetrieveProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/")]
    public partial class ProjectData {
        
        private ProjectRow[] projectField;
        
        /// <remarks/>
        public ProjectRow[] Project {
            get {
                return this.projectField;
            }
            set {
                this.projectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.inflectra.com/SpiraTest/Services/v1.5.2/")]
    public partial class ProjectRow {
        
        private int projectIdField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string websiteField;
        
        private int projectGroupIdField;
        
        private string projectGroupNameField;
        
        private string activeYnField;
        
        private System.DateTime creationDateField;
        
        /// <remarks/>
        public int ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Website {
            get {
                return this.websiteField;
            }
            set {
                this.websiteField = value;
            }
        }
        
        /// <remarks/>
        public int ProjectGroupId {
            get {
                return this.projectGroupIdField;
            }
            set {
                this.projectGroupIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectGroupName {
            get {
                return this.projectGroupNameField;
            }
            set {
                this.projectGroupNameField = value;
            }
        }
        
        /// <remarks/>
        public string ActiveYn {
            get {
                return this.activeYnField;
            }
            set {
                this.activeYnField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateProjectCompletedEventHandler(object sender, CreateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRequirementTestCoverageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemoveRequirementTestCoverageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRequirementCompletedEventHandler(object sender, AddRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateRequirementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateTestCaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddRequirement2CompletedEventHandler(object sender, AddRequirement2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRequirement2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRequirement2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestFolderCompletedEventHandler(object sender, AddTestFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddAttachmentCompletedEventHandler(object sender, AddAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestSetFolderCompletedEventHandler(object sender, AddTestSetFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestSetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestSetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestSetCompletedEventHandler(object sender, AddTestSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestSetTestCaseMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestCaseCompletedEventHandler(object sender, AddTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestStepCompletedEventHandler(object sender, AddTestStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetWebServerUrlCompletedEventHandler(object sender, GetWebServerUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServerUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServerUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateTestCaseParameterTokenCompletedEventHandler(object sender, CreateTestCaseParameterTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTestCaseParameterTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTestCaseParameterTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTestCaseParameterCompletedEventHandler(object sender, AddTestCaseParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTestCaseParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTestCaseParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddCustomListCompletedEventHandler(object sender, AddCustomListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddCustomListValueCompletedEventHandler(object sender, AddCustomListValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomListValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomListValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddCustomPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentSeverityCompletedEventHandler(object sender, AddIncidentSeverityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentSeverityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentSeverityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentTypeCompletedEventHandler(object sender, AddIncidentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentStatusCompletedEventHandler(object sender, AddIncidentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentPriorityCompletedEventHandler(object sender, AddIncidentPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentResolutionCompletedEventHandler(object sender, AddIncidentResolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentResolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentResolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddIncidentCompletedEventHandler(object sender, AddIncidentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddTaskCompletedEventHandler(object sender, AddTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ConnectToProjectCompletedEventHandler(object sender, ConnectToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RetrieveServerDateTimeCompletedEventHandler(object sender, RetrieveServerDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveServerDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveServerDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DisconnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RetrieveProjectListCompletedEventHandler(object sender, RetrieveProjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveProjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveProjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectData)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591