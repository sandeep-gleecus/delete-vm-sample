//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Build))]
    [KnownType(typeof(Incident))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(User))]
    [KnownType(typeof(ReleaseUser))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(ReleaseStatus))]
    [KnownType(typeof(ReleaseDiscussion))]
    [KnownType(typeof(ReleaseType))]
    [KnownType(typeof(ReleaseTestCaseFolder))]
    [KnownType(typeof(ReleaseTestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(ReleaseTestSet))]
    [KnownType(typeof(ReleaseTestSetFolder))]
    [KnownType(typeof(TestSet))]
    [KnownType(typeof(AllocationPlanned))]
    [KnownType(typeof(ProjectBaseline))]
    [KnownType(typeof(ProjectGroupMilestone))]
    [KnownType(typeof(Risk))]
    [KnownType(typeof(VersionControlBranch))]
    [KnownType(typeof(PeriodicReviewAlertType))]
    public partial class Release: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReleaseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private int _releaseId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorId", _creatorId);
                    if (!IsDeserializing)
                    {
                        if (Creator != null && Creator.UserId != value)
                        {
                            Creator = null;
                        }
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public int ReleaseTypeId
        {
            get { return _releaseTypeId; }
            set
            {
                if (_releaseTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseTypeId", _releaseTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.ReleaseTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _releaseTypeId = value;
                    OnPropertyChanged("ReleaseTypeId");
                }
            }
        }
        private int _releaseTypeId;
    
        [DataMember]
        public int ReleaseStatusId
        {
            get { return _releaseStatusId; }
            set
            {
                if (_releaseStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseStatusId", _releaseStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.ReleaseStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _releaseStatusId = value;
                    OnPropertyChanged("ReleaseStatusId");
                }
            }
        }
        private int _releaseStatusId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string VersionNumber
        {
            get { return _versionNumber; }
            set
            {
                if (_versionNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionNumber", _versionNumber);
                    _versionNumber = value;
                    OnPropertyChanged("VersionNumber");
                }
            }
        }
        private string _versionNumber;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string IndentLevel
        {
            get { return _indentLevel; }
            set
            {
                if (_indentLevel != value)
                {
                    ChangeTracker.RecordOriginalValue("IndentLevel", _indentLevel);
                    _indentLevel = value;
                    OnPropertyChanged("IndentLevel");
                }
            }
        }
        private string _indentLevel;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public bool IsSummary
        {
            get { return _isSummary; }
            set
            {
                if (_isSummary != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSummary", _isSummary);
                    _isSummary = value;
                    OnPropertyChanged("IsSummary");
                }
            }
        }
        private bool _isSummary;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public System.DateTime EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private System.DateTime _endDate;
    
        [DataMember]
        public decimal ResourceCount
        {
            get { return _resourceCount; }
            set
            {
                if (_resourceCount != value)
                {
                    ChangeTracker.RecordOriginalValue("ResourceCount", _resourceCount);
                    _resourceCount = value;
                    OnPropertyChanged("ResourceCount");
                }
            }
        }
        private decimal _resourceCount;
    
        [DataMember]
        public decimal DaysNonWorking
        {
            get { return _daysNonWorking; }
            set
            {
                if (_daysNonWorking != value)
                {
                    ChangeTracker.RecordOriginalValue("DaysNonWorking", _daysNonWorking);
                    _daysNonWorking = value;
                    OnPropertyChanged("DaysNonWorking");
                }
            }
        }
        private decimal _daysNonWorking;
    
        [DataMember]
        public int PlannedEffort
        {
            get { return _plannedEffort; }
            set
            {
                if (_plannedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("PlannedEffort", _plannedEffort);
                    _plannedEffort = value;
                    OnPropertyChanged("PlannedEffort");
                }
            }
        }
        private int _plannedEffort;
    
        [DataMember]
        public int AvailableEffort
        {
            get { return _availableEffort; }
            set
            {
                if (_availableEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("AvailableEffort", _availableEffort);
                    _availableEffort = value;
                    OnPropertyChanged("AvailableEffort");
                }
            }
        }
        private int _availableEffort;
    
        [DataMember]
        public int CountBlocked
        {
            get { return _countBlocked; }
            set
            {
                if (_countBlocked != value)
                {
                    ChangeTracker.RecordOriginalValue("CountBlocked", _countBlocked);
                    _countBlocked = value;
                    OnPropertyChanged("CountBlocked");
                }
            }
        }
        private int _countBlocked;
    
        [DataMember]
        public int CountCaution
        {
            get { return _countCaution; }
            set
            {
                if (_countCaution != value)
                {
                    ChangeTracker.RecordOriginalValue("CountCaution", _countCaution);
                    _countCaution = value;
                    OnPropertyChanged("CountCaution");
                }
            }
        }
        private int _countCaution;
    
        [DataMember]
        public int CountFailed
        {
            get { return _countFailed; }
            set
            {
                if (_countFailed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountFailed", _countFailed);
                    _countFailed = value;
                    OnPropertyChanged("CountFailed");
                }
            }
        }
        private int _countFailed;
    
        [DataMember]
        public int CountNotApplicable
        {
            get { return _countNotApplicable; }
            set
            {
                if (_countNotApplicable != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotApplicable", _countNotApplicable);
                    _countNotApplicable = value;
                    OnPropertyChanged("CountNotApplicable");
                }
            }
        }
        private int _countNotApplicable;
    
        [DataMember]
        public int CountNotRun
        {
            get { return _countNotRun; }
            set
            {
                if (_countNotRun != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotRun", _countNotRun);
                    _countNotRun = value;
                    OnPropertyChanged("CountNotRun");
                }
            }
        }
        private int _countNotRun;
    
        [DataMember]
        public int CountPassed
        {
            get { return _countPassed; }
            set
            {
                if (_countPassed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountPassed", _countPassed);
                    _countPassed = value;
                    OnPropertyChanged("CountPassed");
                }
            }
        }
        private int _countPassed;
    
        [DataMember]
        public int TaskCount
        {
            get { return _taskCount; }
            set
            {
                if (_taskCount != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskCount", _taskCount);
                    _taskCount = value;
                    OnPropertyChanged("TaskCount");
                }
            }
        }
        private int _taskCount;
    
        [DataMember]
        public int TaskPercentOnTime
        {
            get { return _taskPercentOnTime; }
            set
            {
                if (_taskPercentOnTime != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentOnTime", _taskPercentOnTime);
                    _taskPercentOnTime = value;
                    OnPropertyChanged("TaskPercentOnTime");
                }
            }
        }
        private int _taskPercentOnTime;
    
        [DataMember]
        public int TaskPercentLateFinish
        {
            get { return _taskPercentLateFinish; }
            set
            {
                if (_taskPercentLateFinish != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateFinish", _taskPercentLateFinish);
                    _taskPercentLateFinish = value;
                    OnPropertyChanged("TaskPercentLateFinish");
                }
            }
        }
        private int _taskPercentLateFinish;
    
        [DataMember]
        public int TaskPercentNotStart
        {
            get { return _taskPercentNotStart; }
            set
            {
                if (_taskPercentNotStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentNotStart", _taskPercentNotStart);
                    _taskPercentNotStart = value;
                    OnPropertyChanged("TaskPercentNotStart");
                }
            }
        }
        private int _taskPercentNotStart;
    
        [DataMember]
        public int TaskPercentLateStart
        {
            get { return _taskPercentLateStart; }
            set
            {
                if (_taskPercentLateStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateStart", _taskPercentLateStart);
                    _taskPercentLateStart = value;
                    OnPropertyChanged("TaskPercentLateStart");
                }
            }
        }
        private int _taskPercentLateStart;
    
        [DataMember]
        public Nullable<int> TaskEstimatedEffort
        {
            get { return _taskEstimatedEffort; }
            set
            {
                if (_taskEstimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskEstimatedEffort", _taskEstimatedEffort);
                    _taskEstimatedEffort = value;
                    OnPropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        private Nullable<int> _taskEstimatedEffort;
    
        [DataMember]
        public Nullable<int> TaskActualEffort
        {
            get { return _taskActualEffort; }
            set
            {
                if (_taskActualEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskActualEffort", _taskActualEffort);
                    _taskActualEffort = value;
                    OnPropertyChanged("TaskActualEffort");
                }
            }
        }
        private Nullable<int> _taskActualEffort;
    
        [DataMember]
        public Nullable<int> TaskProjectedEffort
        {
            get { return _taskProjectedEffort; }
            set
            {
                if (_taskProjectedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskProjectedEffort", _taskProjectedEffort);
                    _taskProjectedEffort = value;
                    OnPropertyChanged("TaskProjectedEffort");
                }
            }
        }
        private Nullable<int> _taskProjectedEffort;
    
        [DataMember]
        public Nullable<int> TaskRemainingEffort
        {
            get { return _taskRemainingEffort; }
            set
            {
                if (_taskRemainingEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskRemainingEffort", _taskRemainingEffort);
                    _taskRemainingEffort = value;
                    OnPropertyChanged("TaskRemainingEffort");
                }
            }
        }
        private Nullable<int> _taskRemainingEffort;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<int> MilestoneId
        {
            get { return _milestoneId; }
            set
            {
                if (_milestoneId != value)
                {
                    ChangeTracker.RecordOriginalValue("MilestoneId", _milestoneId);
                    if (!IsDeserializing)
                    {
                        if (GroupMilestone != null && GroupMilestone.MilestoneId != value)
                        {
                            GroupMilestone = null;
                        }
                    }
                    _milestoneId = value;
                    OnPropertyChanged("MilestoneId");
                }
            }
        }
        private Nullable<int> _milestoneId;
    
        [DataMember]
        public int PercentComplete
        {
            get { return _percentComplete; }
            set
            {
                if (_percentComplete != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentComplete", _percentComplete);
                    _percentComplete = value;
                    OnPropertyChanged("PercentComplete");
                }
            }
        }
        private int _percentComplete;
    
        [DataMember]
        public Nullable<decimal> PlannedPoints
        {
            get { return _plannedPoints; }
            set
            {
                if (_plannedPoints != value)
                {
                    ChangeTracker.RecordOriginalValue("PlannedPoints", _plannedPoints);
                    _plannedPoints = value;
                    OnPropertyChanged("PlannedPoints");
                }
            }
        }
        private Nullable<decimal> _plannedPoints;
    
        [DataMember]
        public Nullable<decimal> RequirementPoints
        {
            get { return _requirementPoints; }
            set
            {
                if (_requirementPoints != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementPoints", _requirementPoints);
                    _requirementPoints = value;
                    OnPropertyChanged("RequirementPoints");
                }
            }
        }
        private Nullable<decimal> _requirementPoints;
    
        [DataMember]
        public int RequirementCount
        {
            get { return _requirementCount; }
            set
            {
                if (_requirementCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementCount", _requirementCount);
                    _requirementCount = value;
                    OnPropertyChanged("RequirementCount");
                }
            }
        }
        private int _requirementCount;
    
        [DataMember]
        public Nullable<int> BranchId
        {
            get { return _branchId; }
            set
            {
                if (_branchId != value)
                {
                    ChangeTracker.RecordOriginalValue("BranchId", _branchId);
                    if (!IsDeserializing)
                    {
                        if (SourceCodeBranch != null && SourceCodeBranch.BranchId != value)
                        {
                            SourceCodeBranch = null;
                        }
                    }
                    _branchId = value;
                    OnPropertyChanged("BranchId");
                }
            }
        }
        private Nullable<int> _branchId;
    
        [DataMember]
        public Nullable<System.DateTime> PeriodicReviewDate
        {
            get { return _periodicReviewDate; }
            set
            {
                if (_periodicReviewDate != value)
                {
                    ChangeTracker.RecordOriginalValue("PeriodicReviewDate", _periodicReviewDate);
                    _periodicReviewDate = value;
                    OnPropertyChanged("PeriodicReviewDate");
                }
            }
        }
        private Nullable<System.DateTime> _periodicReviewDate;
    
        [DataMember]
        public Nullable<int> PeriodicReviewAlertId
        {
            get { return _periodicReviewAlertId; }
            set
            {
                if (_periodicReviewAlertId != value)
                {
                    ChangeTracker.RecordOriginalValue("PeriodicReviewAlertId", _periodicReviewAlertId);
                    if (!IsDeserializing)
                    {
                        if (PeriodicReviewAlert != null && PeriodicReviewAlert.PeriodicReviewAlertId != value)
                        {
                            PeriodicReviewAlert = null;
                        }
                    }
                    _periodicReviewAlertId = value;
                    OnPropertyChanged("PeriodicReviewAlertId");
                }
            }
        }
        private Nullable<int> _periodicReviewAlertId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Build> Builds
        {
            get
            {
                if (_builds == null)
                {
                    _builds = new TrackableCollection<Build>();
                    _builds.CollectionChanged += FixupBuilds;
                }
                return _builds;
            }
            set
            {
                if (!ReferenceEquals(_builds, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_builds != null)
                    {
                        _builds.CollectionChanged -= FixupBuilds;
                    }
                    _builds = value;
                    if (_builds != null)
                    {
                        _builds.CollectionChanged += FixupBuilds;
                    }
                    OnNavigationPropertyChanged("Builds");
                }
            }
        }
        private TrackableCollection<Build> _builds;
    
        [DataMember]
        public TrackableCollection<Incident> DetectedIncidents
        {
            get
            {
                if (_detectedIncidents == null)
                {
                    _detectedIncidents = new TrackableCollection<Incident>();
                    _detectedIncidents.CollectionChanged += FixupDetectedIncidents;
                }
                return _detectedIncidents;
            }
            set
            {
                if (!ReferenceEquals(_detectedIncidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detectedIncidents != null)
                    {
                        _detectedIncidents.CollectionChanged -= FixupDetectedIncidents;
                    }
                    _detectedIncidents = value;
                    if (_detectedIncidents != null)
                    {
                        _detectedIncidents.CollectionChanged += FixupDetectedIncidents;
                    }
                    OnNavigationPropertyChanged("DetectedIncidents");
                }
            }
        }
        private TrackableCollection<Incident> _detectedIncidents;
    
        [DataMember]
        public TrackableCollection<Incident> ResolvedIncidents
        {
            get
            {
                if (_resolvedIncidents == null)
                {
                    _resolvedIncidents = new TrackableCollection<Incident>();
                    _resolvedIncidents.CollectionChanged += FixupResolvedIncidents;
                }
                return _resolvedIncidents;
            }
            set
            {
                if (!ReferenceEquals(_resolvedIncidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_resolvedIncidents != null)
                    {
                        _resolvedIncidents.CollectionChanged -= FixupResolvedIncidents;
                    }
                    _resolvedIncidents = value;
                    if (_resolvedIncidents != null)
                    {
                        _resolvedIncidents.CollectionChanged += FixupResolvedIncidents;
                    }
                    OnNavigationPropertyChanged("ResolvedIncidents");
                }
            }
        }
        private TrackableCollection<Incident> _resolvedIncidents;
    
        [DataMember]
        public TrackableCollection<Incident> VerifiedIncidents
        {
            get
            {
                if (_verifiedIncidents == null)
                {
                    _verifiedIncidents = new TrackableCollection<Incident>();
                    _verifiedIncidents.CollectionChanged += FixupVerifiedIncidents;
                }
                return _verifiedIncidents;
            }
            set
            {
                if (!ReferenceEquals(_verifiedIncidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_verifiedIncidents != null)
                    {
                        _verifiedIncidents.CollectionChanged -= FixupVerifiedIncidents;
                    }
                    _verifiedIncidents = value;
                    if (_verifiedIncidents != null)
                    {
                        _verifiedIncidents.CollectionChanged += FixupVerifiedIncidents;
                    }
                    OnNavigationPropertyChanged("VerifiedIncidents");
                }
            }
        }
        private TrackableCollection<Incident> _verifiedIncidents;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                    OnNavigationPropertyChanged("Creator");
                }
            }
        }
        private User _creator;
    
        [DataMember]
        public TrackableCollection<ReleaseUser> UserViewState
        {
            get
            {
                if (_userViewState == null)
                {
                    _userViewState = new TrackableCollection<ReleaseUser>();
                    _userViewState.CollectionChanged += FixupUserViewState;
                }
                return _userViewState;
            }
            set
            {
                if (!ReferenceEquals(_userViewState, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userViewState != null)
                    {
                        _userViewState.CollectionChanged -= FixupUserViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseUser item in _userViewState)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userViewState = value;
                    if (_userViewState != null)
                    {
                        _userViewState.CollectionChanged += FixupUserViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseUser item in _userViewState)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserViewState");
                }
            }
        }
        private TrackableCollection<ReleaseUser> _userViewState;
    
        [DataMember]
        public TrackableCollection<Requirement> Requirements
        {
            get
            {
                if (_requirements == null)
                {
                    _requirements = new TrackableCollection<Requirement>();
                    _requirements.CollectionChanged += FixupRequirements;
                }
                return _requirements;
            }
            set
            {
                if (!ReferenceEquals(_requirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged -= FixupRequirements;
                    }
                    _requirements = value;
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged += FixupRequirements;
                    }
                    OnNavigationPropertyChanged("Requirements");
                }
            }
        }
        private TrackableCollection<Requirement> _requirements;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;
    
        [DataMember]
        public ReleaseStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private ReleaseStatus _status;
    
        [DataMember]
        public TrackableCollection<ReleaseDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<ReleaseDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<ReleaseDiscussion> _discussions;
    
        [DataMember]
        public ReleaseType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private ReleaseType _type;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public TrackableCollection<ReleaseTestCaseFolder> TestCaseFolders
        {
            get
            {
                if (_testCaseFolders == null)
                {
                    _testCaseFolders = new TrackableCollection<ReleaseTestCaseFolder>();
                    _testCaseFolders.CollectionChanged += FixupTestCaseFolders;
                }
                return _testCaseFolders;
            }
            set
            {
                if (!ReferenceEquals(_testCaseFolders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseFolders != null)
                    {
                        _testCaseFolders.CollectionChanged -= FixupTestCaseFolders;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestCaseFolder item in _testCaseFolders)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseFolders = value;
                    if (_testCaseFolders != null)
                    {
                        _testCaseFolders.CollectionChanged += FixupTestCaseFolders;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestCaseFolder item in _testCaseFolders)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseFolders");
                }
            }
        }
        private TrackableCollection<ReleaseTestCaseFolder> _testCaseFolders;
    
        [DataMember]
        public TrackableCollection<ReleaseTestCase> TestCases
        {
            get
            {
                if (_testCases == null)
                {
                    _testCases = new TrackableCollection<ReleaseTestCase>();
                    _testCases.CollectionChanged += FixupTestCases;
                }
                return _testCases;
            }
            set
            {
                if (!ReferenceEquals(_testCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged -= FixupTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestCase item in _testCases)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCases = value;
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged += FixupTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestCase item in _testCases)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCases");
                }
            }
        }
        private TrackableCollection<ReleaseTestCase> _testCases;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TrackableCollection<ReleaseTestSet> TestSetExecutionData
        {
            get
            {
                if (_testSetExecutionData == null)
                {
                    _testSetExecutionData = new TrackableCollection<ReleaseTestSet>();
                    _testSetExecutionData.CollectionChanged += FixupTestSetExecutionData;
                }
                return _testSetExecutionData;
            }
            set
            {
                if (!ReferenceEquals(_testSetExecutionData, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetExecutionData != null)
                    {
                        _testSetExecutionData.CollectionChanged -= FixupTestSetExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestSet item in _testSetExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetExecutionData = value;
                    if (_testSetExecutionData != null)
                    {
                        _testSetExecutionData.CollectionChanged += FixupTestSetExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestSet item in _testSetExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetExecutionData");
                }
            }
        }
        private TrackableCollection<ReleaseTestSet> _testSetExecutionData;
    
        [DataMember]
        public TrackableCollection<ReleaseTestSetFolder> TestSetFolderExecutionData
        {
            get
            {
                if (_testSetFolderExecutionData == null)
                {
                    _testSetFolderExecutionData = new TrackableCollection<ReleaseTestSetFolder>();
                    _testSetFolderExecutionData.CollectionChanged += FixupTestSetFolderExecutionData;
                }
                return _testSetFolderExecutionData;
            }
            set
            {
                if (!ReferenceEquals(_testSetFolderExecutionData, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetFolderExecutionData != null)
                    {
                        _testSetFolderExecutionData.CollectionChanged -= FixupTestSetFolderExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestSetFolder item in _testSetFolderExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetFolderExecutionData = value;
                    if (_testSetFolderExecutionData != null)
                    {
                        _testSetFolderExecutionData.CollectionChanged += FixupTestSetFolderExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestSetFolder item in _testSetFolderExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetFolderExecutionData");
                }
            }
        }
        private TrackableCollection<ReleaseTestSetFolder> _testSetFolderExecutionData;
    
        [DataMember]
        public TrackableCollection<TestSet> TestSets
        {
            get
            {
                if (_testSets == null)
                {
                    _testSets = new TrackableCollection<TestSet>();
                    _testSets.CollectionChanged += FixupTestSets;
                }
                return _testSets;
            }
            set
            {
                if (!ReferenceEquals(_testSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSets != null)
                    {
                        _testSets.CollectionChanged -= FixupTestSets;
                    }
                    _testSets = value;
                    if (_testSets != null)
                    {
                        _testSets.CollectionChanged += FixupTestSets;
                    }
                    OnNavigationPropertyChanged("TestSets");
                }
            }
        }
        private TrackableCollection<TestSet> _testSets;
    
        [DataMember]
        public TrackableCollection<AllocationPlanned> PlannedAllocations
        {
            get
            {
                if (_plannedAllocations == null)
                {
                    _plannedAllocations = new TrackableCollection<AllocationPlanned>();
                    _plannedAllocations.CollectionChanged += FixupPlannedAllocations;
                }
                return _plannedAllocations;
            }
            set
            {
                if (!ReferenceEquals(_plannedAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_plannedAllocations != null)
                    {
                        _plannedAllocations.CollectionChanged -= FixupPlannedAllocations;
                    }
                    _plannedAllocations = value;
                    if (_plannedAllocations != null)
                    {
                        _plannedAllocations.CollectionChanged += FixupPlannedAllocations;
                    }
                    OnNavigationPropertyChanged("PlannedAllocations");
                }
            }
        }
        private TrackableCollection<AllocationPlanned> _plannedAllocations;
    
        [DataMember]
        public TrackableCollection<ProjectBaseline> Baselines
        {
            get
            {
                if (_baselines == null)
                {
                    _baselines = new TrackableCollection<ProjectBaseline>();
                    _baselines.CollectionChanged += FixupBaselines;
                }
                return _baselines;
            }
            set
            {
                if (!ReferenceEquals(_baselines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged -= FixupBaselines;
                    }
                    _baselines = value;
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged += FixupBaselines;
                    }
                    OnNavigationPropertyChanged("Baselines");
                }
            }
        }
        private TrackableCollection<ProjectBaseline> _baselines;
    
        [DataMember]
        public ProjectGroupMilestone GroupMilestone
        {
            get { return _groupMilestone; }
            set
            {
                if (!ReferenceEquals(_groupMilestone, value))
                {
                    var previousValue = _groupMilestone;
                    _groupMilestone = value;
                    FixupGroupMilestone(previousValue);
                    OnNavigationPropertyChanged("GroupMilestone");
                }
            }
        }
        private ProjectGroupMilestone _groupMilestone;
    
        [DataMember]
        public TrackableCollection<Risk> Risks
        {
            get
            {
                if (_risks == null)
                {
                    _risks = new TrackableCollection<Risk>();
                    _risks.CollectionChanged += FixupRisks;
                }
                return _risks;
            }
            set
            {
                if (!ReferenceEquals(_risks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_risks != null)
                    {
                        _risks.CollectionChanged -= FixupRisks;
                    }
                    _risks = value;
                    if (_risks != null)
                    {
                        _risks.CollectionChanged += FixupRisks;
                    }
                    OnNavigationPropertyChanged("Risks");
                }
            }
        }
        private TrackableCollection<Risk> _risks;
    
        [DataMember]
        public VersionControlBranch SourceCodeBranch
        {
            get { return _sourceCodeBranch; }
            set
            {
                if (!ReferenceEquals(_sourceCodeBranch, value))
                {
                    var previousValue = _sourceCodeBranch;
                    _sourceCodeBranch = value;
                    FixupSourceCodeBranch(previousValue);
                    OnNavigationPropertyChanged("SourceCodeBranch");
                }
            }
        }
        private VersionControlBranch _sourceCodeBranch;
    
        [DataMember]
        public PeriodicReviewAlertType PeriodicReviewAlert
        {
            get { return _periodicReviewAlert; }
            set
            {
                if (!ReferenceEquals(_periodicReviewAlert, value))
                {
                    var previousValue = _periodicReviewAlert;
                    _periodicReviewAlert = value;
                    FixupPeriodicReviewAlert(previousValue);
                    OnNavigationPropertyChanged("PeriodicReviewAlert");
                }
            }
        }
        private PeriodicReviewAlertType _periodicReviewAlert;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Builds.Clear();
            DetectedIncidents.Clear();
            ResolvedIncidents.Clear();
            VerifiedIncidents.Clear();
            Project = null;
            Creator = null;
            UserViewState.Clear();
            Requirements.Clear();
            Tasks.Clear();
            Status = null;
            Discussions.Clear();
            Type = null;
            Owner = null;
            TestCaseFolders.Clear();
            TestCases.Clear();
            TestRuns.Clear();
            TestSetExecutionData.Clear();
            TestSetFolderExecutionData.Clear();
            TestSets.Clear();
            PlannedAllocations.Clear();
            Baselines.Clear();
            GroupMilestone = null;
            Risks.Clear();
            SourceCodeBranch = null;
            PeriodicReviewAlert = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Releases.Contains(this))
            {
                previousValue.Releases.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Releases.Contains(this))
                {
                    Project.Releases.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CreatedReleases.Contains(this))
            {
                previousValue.CreatedReleases.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.CreatedReleases.Contains(this))
                {
                    Creator.CreatedReleases.Add(this);
                }
    
                CreatorId = Creator.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Creator")
                    && (ChangeTracker.OriginalValues["Creator"] == Creator))
                {
                    ChangeTracker.OriginalValues.Remove("Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Creator", previousValue);
                }
                if (Creator != null && !Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Creator.StartTracking();
                }
            }
        }
    
        private void FixupStatus(ReleaseStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Releases.Contains(this))
            {
                previousValue.Releases.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Releases.Contains(this))
                {
                    Status.Releases.Add(this);
                }
    
                ReleaseStatusId = Status.ReleaseStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupType(ReleaseType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Releases.Contains(this))
            {
                previousValue.Releases.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Releases.Contains(this))
                {
                    Type.Releases.Add(this);
                }
    
                ReleaseTypeId = Type.ReleaseTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedReleases.Contains(this))
            {
                previousValue.OwnedReleases.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedReleases.Contains(this))
                {
                    Owner.OwnedReleases.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupGroupMilestone(ProjectGroupMilestone previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Releases.Contains(this))
            {
                previousValue.Releases.Remove(this);
            }
    
            if (GroupMilestone != null)
            {
                if (!GroupMilestone.Releases.Contains(this))
                {
                    GroupMilestone.Releases.Add(this);
                }
    
                MilestoneId = GroupMilestone.MilestoneId;
            }
            else if (!skipKeys)
            {
                MilestoneId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("GroupMilestone")
                    && (ChangeTracker.OriginalValues["GroupMilestone"] == GroupMilestone))
                {
                    ChangeTracker.OriginalValues.Remove("GroupMilestone");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("GroupMilestone", previousValue);
                }
                if (GroupMilestone != null && !GroupMilestone.ChangeTracker.ChangeTrackingEnabled)
                {
                    GroupMilestone.StartTracking();
                }
            }
        }
    
        private void FixupSourceCodeBranch(VersionControlBranch previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Release.Contains(this))
            {
                previousValue.Release.Remove(this);
            }
    
            if (SourceCodeBranch != null)
            {
                if (!SourceCodeBranch.Release.Contains(this))
                {
                    SourceCodeBranch.Release.Add(this);
                }
    
                BranchId = SourceCodeBranch.BranchId;
            }
            else if (!skipKeys)
            {
                BranchId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SourceCodeBranch")
                    && (ChangeTracker.OriginalValues["SourceCodeBranch"] == SourceCodeBranch))
                {
                    ChangeTracker.OriginalValues.Remove("SourceCodeBranch");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SourceCodeBranch", previousValue);
                }
                if (SourceCodeBranch != null && !SourceCodeBranch.ChangeTracker.ChangeTrackingEnabled)
                {
                    SourceCodeBranch.StartTracking();
                }
            }
        }
    
        private void FixupPeriodicReviewAlert(PeriodicReviewAlertType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_RELEASE.Contains(this))
            {
                previousValue.TST_RELEASE.Remove(this);
            }
    
            if (PeriodicReviewAlert != null)
            {
                if (!PeriodicReviewAlert.TST_RELEASE.Contains(this))
                {
                    PeriodicReviewAlert.TST_RELEASE.Add(this);
                }
    
                PeriodicReviewAlertId = PeriodicReviewAlert.PeriodicReviewAlertId;
            }
            else if (!skipKeys)
            {
                PeriodicReviewAlertId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PeriodicReviewAlert")
                    && (ChangeTracker.OriginalValues["PeriodicReviewAlert"] == PeriodicReviewAlert))
                {
                    ChangeTracker.OriginalValues.Remove("PeriodicReviewAlert");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PeriodicReviewAlert", previousValue);
                }
                if (PeriodicReviewAlert != null && !PeriodicReviewAlert.ChangeTracker.ChangeTrackingEnabled)
                {
                    PeriodicReviewAlert.StartTracking();
                }
            }
        }
    
        private void FixupBuilds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Build item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Builds", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Build item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Builds", item);
                    }
                }
            }
        }
    
        private void FixupDetectedIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.DetectedRelease = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetectedIncidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.DetectedRelease, this))
                    {
                        item.DetectedRelease = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetectedIncidents", item);
                    }
                }
            }
        }
    
        private void FixupResolvedIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.ResolvedRelease = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ResolvedIncidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.ResolvedRelease, this))
                    {
                        item.ResolvedRelease = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ResolvedIncidents", item);
                    }
                }
            }
        }
    
        private void FixupVerifiedIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.VerifiedRelease = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VerifiedIncidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.VerifiedRelease, this))
                    {
                        item.VerifiedRelease = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VerifiedIncidents", item);
                    }
                }
            }
        }
    
        private void FixupUserViewState(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseUser item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserViewState", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserViewState", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseDiscussion item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupTestCaseFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestCaseFolder item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseFolders", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestCaseFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseFolders", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestCase item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCases", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupTestSetExecutionData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestSet item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetExecutionData", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetExecutionData", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetFolderExecutionData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestSetFolder item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetFolderExecutionData", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestSetFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetFolderExecutionData", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSet item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSets", item);
                    }
                }
            }
        }
    
        private void FixupPlannedAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AllocationPlanned item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PlannedAllocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AllocationPlanned item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PlannedAllocations", item);
                    }
                }
            }
        }
    
        private void FixupBaselines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectBaseline item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Baselines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectBaseline item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Baselines", item);
                    }
                }
            }
        }
    
        private void FixupRisks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Risk item in e.NewItems)
                {
                    item.Release = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Risks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Risk item in e.OldItems)
                {
                    if (ReferenceEquals(item.Release, this))
                    {
                        item.Release = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Risks", item);
                    }
                }
            }
        }

        #endregion

    }
}
