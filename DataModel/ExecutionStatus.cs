//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestStep))]
    [KnownType(typeof(ReleaseTestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestRunStep))]
    public partial class ExecutionStatus: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExecutionStatusId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TestCase> TestCases
        {
            get
            {
                if (_testCases == null)
                {
                    _testCases = new TrackableCollection<TestCase>();
                    _testCases.CollectionChanged += FixupTestCases;
                }
                return _testCases;
            }
            set
            {
                if (!ReferenceEquals(_testCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged -= FixupTestCases;
                    }
                    _testCases = value;
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged += FixupTestCases;
                    }
                    OnNavigationPropertyChanged("TestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _testCases;
    
        [DataMember]
        public TrackableCollection<TestStep> TestSteps
        {
            get
            {
                if (_testSteps == null)
                {
                    _testSteps = new TrackableCollection<TestStep>();
                    _testSteps.CollectionChanged += FixupTestSteps;
                }
                return _testSteps;
            }
            set
            {
                if (!ReferenceEquals(_testSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged -= FixupTestSteps;
                    }
                    _testSteps = value;
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged += FixupTestSteps;
                    }
                    OnNavigationPropertyChanged("TestSteps");
                }
            }
        }
        private TrackableCollection<TestStep> _testSteps;
    
        [DataMember]
        public TrackableCollection<ReleaseTestCase> ReleaseTestCases
        {
            get
            {
                if (_releaseTestCases == null)
                {
                    _releaseTestCases = new TrackableCollection<ReleaseTestCase>();
                    _releaseTestCases.CollectionChanged += FixupReleaseTestCases;
                }
                return _releaseTestCases;
            }
            set
            {
                if (!ReferenceEquals(_releaseTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseTestCases != null)
                    {
                        _releaseTestCases.CollectionChanged -= FixupReleaseTestCases;
                    }
                    _releaseTestCases = value;
                    if (_releaseTestCases != null)
                    {
                        _releaseTestCases.CollectionChanged += FixupReleaseTestCases;
                    }
                    OnNavigationPropertyChanged("ReleaseTestCases");
                }
            }
        }
        private TrackableCollection<ReleaseTestCase> _releaseTestCases;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TrackableCollection<TestRunStep> TestRunSteps
        {
            get
            {
                if (_testRunSteps == null)
                {
                    _testRunSteps = new TrackableCollection<TestRunStep>();
                    _testRunSteps.CollectionChanged += FixupTestRunSteps;
                }
                return _testRunSteps;
            }
            set
            {
                if (!ReferenceEquals(_testRunSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged -= FixupTestRunSteps;
                    }
                    _testRunSteps = value;
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged += FixupTestRunSteps;
                    }
                    OnNavigationPropertyChanged("TestRunSteps");
                }
            }
        }
        private TrackableCollection<TestRunStep> _testRunSteps;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TestCases.Clear();
            TestSteps.Clear();
            ReleaseTestCases.Clear();
            TestRuns.Clear();
            TestRunSteps.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    item.ExecutionStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExecutionStatus, this))
                    {
                        item.ExecutionStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCases", item);
                    }
                }
            }
        }
    
        private void FixupTestSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStep item in e.NewItems)
                {
                    item.ExecutionStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExecutionStatus, this))
                    {
                        item.ExecutionStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSteps", item);
                    }
                }
            }
        }
    
        private void FixupReleaseTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestCase item in e.NewItems)
                {
                    item.ExecutionStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseTestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExecutionStatus, this))
                    {
                        item.ExecutionStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseTestCases", item);
                    }
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.ExecutionStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExecutionStatus, this))
                    {
                        item.ExecutionStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupTestRunSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunStep item in e.NewItems)
                {
                    item.ExecutionStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRunSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExecutionStatus, this))
                    {
                        item.ExecutionStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRunSteps", item);
                    }
                }
            }
        }

        #endregion

    }
}
