//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_RequirementType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int REQUIREMENT_TYPE_ID
        {
            get { return _rEQUIREMENT_TYPE_ID; }
            set
            {
                if (_rEQUIREMENT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'REQUIREMENT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rEQUIREMENT_TYPE_ID = value;
                    OnPropertyChanged("REQUIREMENT_TYPE_ID");
                }
            }
        }
        private int _rEQUIREMENT_TYPE_ID;
    
        [DataMember]
        public Nullable<int> REQUIREMENT_WORKFLOW_ID
        {
            get { return _rEQUIREMENT_WORKFLOW_ID; }
            set
            {
                if (_rEQUIREMENT_WORKFLOW_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUIREMENT_WORKFLOW_ID", _rEQUIREMENT_WORKFLOW_ID);
                    _rEQUIREMENT_WORKFLOW_ID = value;
                    OnPropertyChanged("REQUIREMENT_WORKFLOW_ID");
                }
            }
        }
        private Nullable<int> _rEQUIREMENT_WORKFLOW_ID;
    
        [DataMember]
        public Nullable<int> PROJECT_TEMPLATE_ID
        {
            get { return _pROJECT_TEMPLATE_ID; }
            set
            {
                if (_pROJECT_TEMPLATE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("PROJECT_TEMPLATE_ID", _pROJECT_TEMPLATE_ID);
                    _pROJECT_TEMPLATE_ID = value;
                    OnPropertyChanged("PROJECT_TEMPLATE_ID");
                }
            }
        }
        private Nullable<int> _pROJECT_TEMPLATE_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public string ICON
        {
            get { return _iCON; }
            set
            {
                if (_iCON != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ICON' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iCON = value;
                    OnPropertyChanged("ICON");
                }
            }
        }
        private string _iCON;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public bool IS_STEPS
        {
            get { return _iS_STEPS; }
            set
            {
                if (_iS_STEPS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_STEPS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_STEPS = value;
                    OnPropertyChanged("IS_STEPS");
                }
            }
        }
        private bool _iS_STEPS;
    
        [DataMember]
        public bool IS_DEFAULT
        {
            get { return _iS_DEFAULT; }
            set
            {
                if (_iS_DEFAULT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_DEFAULT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_DEFAULT = value;
                    OnPropertyChanged("IS_DEFAULT");
                }
            }
        }
        private bool _iS_DEFAULT;
    
        [DataMember]
        public bool IS_KEY_TYPE
        {
            get { return _iS_KEY_TYPE; }
            set
            {
                if (_iS_KEY_TYPE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_KEY_TYPE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_KEY_TYPE = value;
                    OnPropertyChanged("IS_KEY_TYPE");
                }
            }
        }
        private bool _iS_KEY_TYPE;
    
        [DataMember]
        public string PROJECT_TEMPLATE_NAME
        {
            get { return _pROJECT_TEMPLATE_NAME; }
            set
            {
                if (_pROJECT_TEMPLATE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_TEMPLATE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_TEMPLATE_NAME = value;
                    OnPropertyChanged("PROJECT_TEMPLATE_NAME");
                }
            }
        }
        private string _pROJECT_TEMPLATE_NAME;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
