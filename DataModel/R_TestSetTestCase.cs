//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_TestSetTestCase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TEST_SET_TEST_CASE_ID
        {
            get { return _tEST_SET_TEST_CASE_ID; }
            set
            {
                if (_tEST_SET_TEST_CASE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_SET_TEST_CASE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_SET_TEST_CASE_ID = value;
                    OnPropertyChanged("TEST_SET_TEST_CASE_ID");
                }
            }
        }
        private int _tEST_SET_TEST_CASE_ID;
    
        [DataMember]
        public int TEST_SET_ID
        {
            get { return _tEST_SET_ID; }
            set
            {
                if (_tEST_SET_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_SET_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_SET_ID = value;
                    OnPropertyChanged("TEST_SET_ID");
                }
            }
        }
        private int _tEST_SET_ID;
    
        [DataMember]
        public int TEST_CASE_ID
        {
            get { return _tEST_CASE_ID; }
            set
            {
                if (_tEST_CASE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_ID = value;
                    OnPropertyChanged("TEST_CASE_ID");
                }
            }
        }
        private int _tEST_CASE_ID;
    
        [DataMember]
        public Nullable<int> OWNER_ID
        {
            get { return _oWNER_ID; }
            set
            {
                if (_oWNER_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("OWNER_ID", _oWNER_ID);
                    _oWNER_ID = value;
                    OnPropertyChanged("OWNER_ID");
                }
            }
        }
        private Nullable<int> _oWNER_ID;
    
        [DataMember]
        public int POSITION
        {
            get { return _pOSITION; }
            set
            {
                if (_pOSITION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'POSITION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pOSITION = value;
                    OnPropertyChanged("POSITION");
                }
            }
        }
        private int _pOSITION;
    
        [DataMember]
        public string TEST_SET_NAME
        {
            get { return _tEST_SET_NAME; }
            set
            {
                if (_tEST_SET_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_SET_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_SET_NAME = value;
                    OnPropertyChanged("TEST_SET_NAME");
                }
            }
        }
        private string _tEST_SET_NAME;
    
        [DataMember]
        public string TEST_CASE_NAME
        {
            get { return _tEST_CASE_NAME; }
            set
            {
                if (_tEST_CASE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_NAME = value;
                    OnPropertyChanged("TEST_CASE_NAME");
                }
            }
        }
        private string _tEST_CASE_NAME;
    
        [DataMember]
        public string OWNER_NAME
        {
            get { return _oWNER_NAME; }
            set
            {
                if (_oWNER_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("OWNER_NAME", _oWNER_NAME);
                    _oWNER_NAME = value;
                    OnPropertyChanged("OWNER_NAME");
                }
            }
        }
        private string _oWNER_NAME;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public Nullable<System.DateTime> PLANNED_DATE
        {
            get { return _pLANNED_DATE; }
            set
            {
                if (_pLANNED_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("PLANNED_DATE", _pLANNED_DATE);
                    _pLANNED_DATE = value;
                    OnPropertyChanged("PLANNED_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _pLANNED_DATE;
    
        [DataMember]
        public bool IS_SETUP_TEARDOWN
        {
            get { return _iS_SETUP_TEARDOWN; }
            set
            {
                if (_iS_SETUP_TEARDOWN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_SETUP_TEARDOWN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_SETUP_TEARDOWN = value;
                    OnPropertyChanged("IS_SETUP_TEARDOWN");
                }
            }
        }
        private bool _iS_SETUP_TEARDOWN;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
