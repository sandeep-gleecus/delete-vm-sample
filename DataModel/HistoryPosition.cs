//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(HistoryChangeSet))]
    public partial class HistoryPosition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long HistoryPositionId
        {
            get { return _historyPositionId; }
            set
            {
                if (_historyPositionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'HistoryPositionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _historyPositionId = value;
                    OnPropertyChanged("HistoryPositionId");
                }
            }
        }
        private long _historyPositionId;
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    if (!IsDeserializing)
                    {
                        if (ChangeSet != null && ChangeSet.ChangeSetId != value)
                        {
                            ChangeSet = null;
                        }
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public int ChildArtifactId
        {
            get { return _childArtifactId; }
            set
            {
                if (_childArtifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChildArtifactId", _childArtifactId);
                    _childArtifactId = value;
                    OnPropertyChanged("ChildArtifactId");
                }
            }
        }
        private int _childArtifactId;
    
        [DataMember]
        public int ChildArtifactTypeId
        {
            get { return _childArtifactTypeId; }
            set
            {
                if (_childArtifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChildArtifactTypeId", _childArtifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ChildArtifactType != null && ChildArtifactType.ArtifactTypeId != value)
                        {
                            ChildArtifactType = null;
                        }
                    }
                    _childArtifactTypeId = value;
                    OnPropertyChanged("ChildArtifactTypeId");
                }
            }
        }
        private int _childArtifactTypeId;
    
        [DataMember]
        public int OldPosition
        {
            get { return _oldPosition; }
            set
            {
                if (_oldPosition != value)
                {
                    ChangeTracker.RecordOriginalValue("OldPosition", _oldPosition);
                    _oldPosition = value;
                    OnPropertyChanged("OldPosition");
                }
            }
        }
        private int _oldPosition;
    
        [DataMember]
        public int NewPosition
        {
            get { return _newPosition; }
            set
            {
                if (_newPosition != value)
                {
                    ChangeTracker.RecordOriginalValue("NewPosition", _newPosition);
                    _newPosition = value;
                    OnPropertyChanged("NewPosition");
                }
            }
        }
        private int _newPosition;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ChildArtifactType
        {
            get { return _childArtifactType; }
            set
            {
                if (!ReferenceEquals(_childArtifactType, value))
                {
                    var previousValue = _childArtifactType;
                    _childArtifactType = value;
                    FixupChildArtifactType(previousValue);
                    OnNavigationPropertyChanged("ChildArtifactType");
                }
            }
        }
        private ArtifactType _childArtifactType;
    
        [DataMember]
        public HistoryChangeSet ChangeSet
        {
            get { return _changeSet; }
            set
            {
                if (!ReferenceEquals(_changeSet, value))
                {
                    var previousValue = _changeSet;
                    _changeSet = value;
                    FixupChangeSet(previousValue);
                    OnNavigationPropertyChanged("ChangeSet");
                }
            }
        }
        private HistoryChangeSet _changeSet;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ChildArtifactType = null;
            ChangeSet = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupChildArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PositionHistoryEntriesChild.Contains(this))
            {
                previousValue.PositionHistoryEntriesChild.Remove(this);
            }
    
            if (ChildArtifactType != null)
            {
                if (!ChildArtifactType.PositionHistoryEntriesChild.Contains(this))
                {
                    ChildArtifactType.PositionHistoryEntriesChild.Add(this);
                }
    
                ChildArtifactTypeId = ChildArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChildArtifactType")
                    && (ChangeTracker.OriginalValues["ChildArtifactType"] == ChildArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ChildArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChildArtifactType", previousValue);
                }
                if (ChildArtifactType != null && !ChildArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChildArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupChangeSet(HistoryChangeSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PositionChanges.Contains(this))
            {
                previousValue.PositionChanges.Remove(this);
            }
    
            if (ChangeSet != null)
            {
                if (!ChangeSet.PositionChanges.Contains(this))
                {
                    ChangeSet.PositionChanges.Add(this);
                }
    
                ChangeSetId = ChangeSet.ChangeSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChangeSet")
                    && (ChangeTracker.OriginalValues["ChangeSet"] == ChangeSet))
                {
                    ChangeTracker.OriginalValues.Remove("ChangeSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChangeSet", previousValue);
                }
                if (ChangeSet != null && !ChangeSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChangeSet.StartTracking();
                }
            }
        }

        #endregion

    }
}
