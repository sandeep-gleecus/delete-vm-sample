//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EventType))]
    public partial class Event: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string EventId
        {
            get { return _eventId; }
            set
            {
                if (_eventId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EventId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eventId = value;
                    OnPropertyChanged("EventId");
                }
            }
        }
        private string _eventId;
    
        [DataMember]
        public System.DateTime EventTimeUtc
        {
            get { return _eventTimeUtc; }
            set
            {
                if (_eventTimeUtc != value)
                {
                    ChangeTracker.RecordOriginalValue("EventTimeUtc", _eventTimeUtc);
                    _eventTimeUtc = value;
                    OnPropertyChanged("EventTimeUtc");
                }
            }
        }
        private System.DateTime _eventTimeUtc;
    
        [DataMember]
        public System.DateTime EventTime
        {
            get { return _eventTime; }
            set
            {
                if (_eventTime != value)
                {
                    ChangeTracker.RecordOriginalValue("EventTime", _eventTime);
                    _eventTime = value;
                    OnPropertyChanged("EventTime");
                }
            }
        }
        private System.DateTime _eventTime;
    
        [DataMember]
        public decimal EventSequence
        {
            get { return _eventSequence; }
            set
            {
                if (_eventSequence != value)
                {
                    ChangeTracker.RecordOriginalValue("EventSequence", _eventSequence);
                    _eventSequence = value;
                    OnPropertyChanged("EventSequence");
                }
            }
        }
        private decimal _eventSequence;
    
        [DataMember]
        public decimal EventOccurrence
        {
            get { return _eventOccurrence; }
            set
            {
                if (_eventOccurrence != value)
                {
                    ChangeTracker.RecordOriginalValue("EventOccurrence", _eventOccurrence);
                    _eventOccurrence = value;
                    OnPropertyChanged("EventOccurrence");
                }
            }
        }
        private decimal _eventOccurrence;
    
        [DataMember]
        public int EventCode
        {
            get { return _eventCode; }
            set
            {
                if (_eventCode != value)
                {
                    ChangeTracker.RecordOriginalValue("EventCode", _eventCode);
                    _eventCode = value;
                    OnPropertyChanged("EventCode");
                }
            }
        }
        private int _eventCode;
    
        [DataMember]
        public int EventDetail
        {
            get { return _eventDetail; }
            set
            {
                if (_eventDetail != value)
                {
                    ChangeTracker.RecordOriginalValue("EventDetail", _eventDetail);
                    _eventDetail = value;
                    OnPropertyChanged("EventDetail");
                }
            }
        }
        private int _eventDetail;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    ChangeTracker.RecordOriginalValue("Message", _message);
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        public string ApplicationPath
        {
            get { return _applicationPath; }
            set
            {
                if (_applicationPath != value)
                {
                    ChangeTracker.RecordOriginalValue("ApplicationPath", _applicationPath);
                    _applicationPath = value;
                    OnPropertyChanged("ApplicationPath");
                }
            }
        }
        private string _applicationPath;
    
        [DataMember]
        public string ApplicationVirtualPath
        {
            get { return _applicationVirtualPath; }
            set
            {
                if (_applicationVirtualPath != value)
                {
                    ChangeTracker.RecordOriginalValue("ApplicationVirtualPath", _applicationVirtualPath);
                    _applicationVirtualPath = value;
                    OnPropertyChanged("ApplicationVirtualPath");
                }
            }
        }
        private string _applicationVirtualPath;
    
        [DataMember]
        public string MachineName
        {
            get { return _machineName; }
            set
            {
                if (_machineName != value)
                {
                    ChangeTracker.RecordOriginalValue("MachineName", _machineName);
                    _machineName = value;
                    OnPropertyChanged("MachineName");
                }
            }
        }
        private string _machineName;
    
        [DataMember]
        public string RequestUrl
        {
            get { return _requestUrl; }
            set
            {
                if (_requestUrl != value)
                {
                    ChangeTracker.RecordOriginalValue("RequestUrl", _requestUrl);
                    _requestUrl = value;
                    OnPropertyChanged("RequestUrl");
                }
            }
        }
        private string _requestUrl;
    
        [DataMember]
        public string ExceptionType
        {
            get { return _exceptionType; }
            set
            {
                if (_exceptionType != value)
                {
                    ChangeTracker.RecordOriginalValue("ExceptionType", _exceptionType);
                    _exceptionType = value;
                    OnPropertyChanged("ExceptionType");
                }
            }
        }
        private string _exceptionType;
    
        [DataMember]
        public string Details
        {
            get { return _details; }
            set
            {
                if (_details != value)
                {
                    ChangeTracker.RecordOriginalValue("Details", _details);
                    _details = value;
                    OnPropertyChanged("Details");
                }
            }
        }
        private string _details;
    
        [DataMember]
        public int EventTypeId
        {
            get { return _eventTypeId; }
            set
            {
                if (_eventTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("EventTypeId", _eventTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.EventTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _eventTypeId = value;
                    OnPropertyChanged("EventTypeId");
                }
            }
        }
        private int _eventTypeId;
    
        [DataMember]
        public string EventCategory
        {
            get { return _eventCategory; }
            set
            {
                if (_eventCategory != value)
                {
                    ChangeTracker.RecordOriginalValue("EventCategory", _eventCategory);
                    _eventCategory = value;
                    OnPropertyChanged("EventCategory");
                }
            }
        }
        private string _eventCategory;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public EventType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private EventType _type;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Type = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupType(EventType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Event.Contains(this))
            {
                previousValue.Event.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Event.Contains(this))
                {
                    Type.Event.Add(this);
                }
    
                EventTypeId = Type.EventTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }

        #endregion

    }
}
