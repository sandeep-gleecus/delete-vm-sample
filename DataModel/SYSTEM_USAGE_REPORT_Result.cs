//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class SYSTEM_USAGE_REPORT_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string MonthName
        {
            get { return _monthName; }
            set
            {
                if (_monthName != value)
                {
                    OnComplexPropertyChanging();
                    _monthName = value;
                    OnPropertyChanged("MonthName");
                }
            }
        }
        private string _monthName;
    
        [DataMember]
        public Nullable<int> NumberOfActiveAccount
        {
            get { return _numberOfActiveAccount; }
            set
            {
                if (_numberOfActiveAccount != value)
                {
                    OnComplexPropertyChanging();
                    _numberOfActiveAccount = value;
                    OnPropertyChanged("NumberOfActiveAccount");
                }
            }
        }
        private Nullable<int> _numberOfActiveAccount;
    
        [DataMember]
        public Nullable<decimal> ActiveUserPercentage
        {
            get { return _activeUserPercentage; }
            set
            {
                if (_activeUserPercentage != value)
                {
                    OnComplexPropertyChanging();
                    _activeUserPercentage = value;
                    OnPropertyChanged("ActiveUserPercentage");
                }
            }
        }
        private Nullable<decimal> _activeUserPercentage;
    
        [DataMember]
        public Nullable<int> PerDay
        {
            get { return _perDay; }
            set
            {
                if (_perDay != value)
                {
                    OnComplexPropertyChanging();
                    _perDay = value;
                    OnPropertyChanged("PerDay");
                }
            }
        }
        private Nullable<int> _perDay;
    
        [DataMember]
        public Nullable<double> PerWeek
        {
            get { return _perWeek; }
            set
            {
                if (_perWeek != value)
                {
                    OnComplexPropertyChanging();
                    _perWeek = value;
                    OnPropertyChanged("PerWeek");
                }
            }
        }
        private Nullable<double> _perWeek;
    
        [DataMember]
        public Nullable<int> PerMonth
        {
            get { return _perMonth; }
            set
            {
                if (_perMonth != value)
                {
                    OnComplexPropertyChanging();
                    _perMonth = value;
                    OnPropertyChanged("PerMonth");
                }
            }
        }
        private Nullable<int> _perMonth;
    
        [DataMember]
        public string TimePerDay
        {
            get { return _timePerDay; }
            set
            {
                if (_timePerDay != value)
                {
                    OnComplexPropertyChanging();
                    _timePerDay = value;
                    OnPropertyChanged("TimePerDay");
                }
            }
        }
        private string _timePerDay;
    
        [DataMember]
        public string TimePerWeek
        {
            get { return _timePerWeek; }
            set
            {
                if (_timePerWeek != value)
                {
                    OnComplexPropertyChanging();
                    _timePerWeek = value;
                    OnPropertyChanged("TimePerWeek");
                }
            }
        }
        private string _timePerWeek;
    
        [DataMember]
        public string TimePerMonth
        {
            get { return _timePerMonth; }
            set
            {
                if (_timePerMonth != value)
                {
                    OnComplexPropertyChanging();
                    _timePerMonth = value;
                    OnPropertyChanged("TimePerMonth");
                }
            }
        }
        private string _timePerMonth;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SYSTEM_USAGE_REPORT_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.MonthName", parentPropertyName), complexObject == null ? null : (object)complexObject.MonthName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NumberOfActiveAccount", parentPropertyName), complexObject == null ? null : (object)complexObject.NumberOfActiveAccount);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ActiveUserPercentage", parentPropertyName), complexObject == null ? null : (object)complexObject.ActiveUserPercentage);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PerDay", parentPropertyName), complexObject == null ? null : (object)complexObject.PerDay);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PerWeek", parentPropertyName), complexObject == null ? null : (object)complexObject.PerWeek);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PerMonth", parentPropertyName), complexObject == null ? null : (object)complexObject.PerMonth);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimePerDay", parentPropertyName), complexObject == null ? null : (object)complexObject.TimePerDay);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimePerWeek", parentPropertyName), complexObject == null ? null : (object)complexObject.TimePerWeek);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TimePerMonth", parentPropertyName), complexObject == null ? null : (object)complexObject.TimePerMonth);
        }

        #endregion

    }
}
