-- =======================================================
-- Author:			Inflectra Corporation
-- Business Object: TestSet
-- Description:		Refreshes the execution status and last-run date of a folder based on its child folders and child test sets
-- Remarks:			Does not update parents itself, would need to be called for each parent folder
-- =======================================================
IF OBJECT_ID ( 'TESTSET_REFRESH_FOLDER_EXECUTION_STATUS', 'P' ) IS NOT NULL 
    DROP PROCEDURE [TESTSET_REFRESH_FOLDER_EXECUTION_STATUS];
GO
CREATE PROCEDURE [TESTSET_REFRESH_FOLDER_EXECUTION_STATUS]
	@ProjectId INT,
	@TestSetFolderId INT
AS
BEGIN
	SET ANSI_WARNINGS OFF	--We want to SUM/AVG values that have NULLs
	SET NOCOUNT ON

	--First update the test set folders for all releases
	MERGE TST_TEST_SET_FOLDER AS TARGET
	USING (
		SELECT
			TEST_SET_FOLDER_ID,
			ISNULL(SUM(COUNT_FAILED),0) AS COUNT_FAILED,
			ISNULL(SUM(COUNT_PASSED),0) AS COUNT_PASSED,
			ISNULL(SUM(COUNT_NOT_RUN),0) AS COUNT_NOT_RUN,
			ISNULL(SUM(COUNT_NOT_APPLICABLE),0) AS COUNT_NOT_APPLICABLE,
			ISNULL(SUM(COUNT_BLOCKED),0) AS COUNT_BLOCKED,
			ISNULL(SUM(COUNT_CAUTION),0) AS COUNT_CAUTION,
			MIN(EXECUTION_DATE) AS EXECUTION_DATE,
			SUM(ACTUAL_DURATION) AS ACTUAL_DURATION,
			SUM(ESTIMATED_DURATION) AS ESTIMATED_DURATION
		FROM
		(
			SELECT
				@TestSetFolderId AS TEST_SET_FOLDER_ID,
				SUM(TSE.COUNT_FAILED) AS COUNT_FAILED,
				SUM(TSE.COUNT_PASSED) AS COUNT_PASSED,
				SUM(TSE.COUNT_NOT_RUN) AS COUNT_NOT_RUN,
				SUM(TSE.COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
				SUM(TSE.COUNT_BLOCKED) AS COUNT_BLOCKED,
				SUM(TSE.COUNT_CAUTION) AS COUNT_CAUTION,				
				MIN(TSE.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(TSE.ACTUAL_DURATION) AS ACTUAL_DURATION,
				SUM(TSE.ESTIMATED_DURATION) AS ESTIMATED_DURATION
			FROM
				TST_TEST_SET TSE
			WHERE
				TSE.TEST_SET_FOLDER_ID = @TestSetFolderId
				AND TSE.IS_DELETED = 0
			UNION
			SELECT
				@TestSetFolderId AS TEST_SET_FOLDER_ID,
				SUM(TSF.COUNT_FAILED) AS COUNT_FAILED,
				SUM(TSF.COUNT_PASSED) AS COUNT_PASSED,
				SUM(TSF.COUNT_NOT_RUN) AS COUNT_NOT_RUN,
				SUM(TSF.COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
				SUM(TSF.COUNT_BLOCKED) AS COUNT_BLOCKED,
				SUM(TSF.COUNT_CAUTION) AS COUNT_CAUTION,				
				MIN(TSF.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(TSF.ACTUAL_DURATION) AS ACTUAL_DURATION,
				SUM(TSF.ESTIMATED_DURATION) AS ESTIMATED_DURATION
			FROM
				TST_TEST_SET_FOLDER TSF
			WHERE
				TSF.PARENT_TEST_SET_FOLDER_ID = @TestSetFolderId
		) AS GRP
		GROUP BY TEST_SET_FOLDER_ID
	) AS SOURCE
	ON
		TARGET.TEST_SET_FOLDER_ID = SOURCE.TEST_SET_FOLDER_ID
	WHEN MATCHED THEN
		UPDATE
			SET
				TARGET.COUNT_PASSED = SOURCE.COUNT_PASSED,
				TARGET.COUNT_FAILED = SOURCE.COUNT_FAILED,
				TARGET.COUNT_CAUTION = SOURCE.COUNT_CAUTION,
				TARGET.COUNT_BLOCKED = SOURCE.COUNT_BLOCKED,
				TARGET.COUNT_NOT_RUN = SOURCE.COUNT_NOT_RUN,
				TARGET.COUNT_NOT_APPLICABLE = SOURCE.COUNT_NOT_APPLICABLE,
				TARGET.ESTIMATED_DURATION = SOURCE.ESTIMATED_DURATION,
				TARGET.ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
				TARGET.EXECUTION_DATE = SOURCE.EXECUTION_DATE;

	--Now we need to do the same thing for the release folder execution data as well
	MERGE TST_RELEASE_TEST_SET_FOLDER AS TARGET
	USING (
		SELECT
			RELEASE_ID,
			TEST_SET_FOLDER_ID,
			SUM(COUNT_FAILED) AS COUNT_FAILED,
			SUM(COUNT_PASSED) AS COUNT_PASSED,
			SUM(COUNT_NOT_RUN) AS COUNT_NOT_RUN,
			SUM(COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
			SUM(COUNT_BLOCKED) AS COUNT_BLOCKED,
			SUM(COUNT_CAUTION) AS COUNT_CAUTION,
			MIN(EXECUTION_DATE) AS EXECUTION_DATE,
			SUM(ACTUAL_DURATION) AS ACTUAL_DURATION
		FROM
		(
			SELECT
				RTC.RELEASE_ID,
				@TestSetFolderId AS TEST_SET_FOLDER_ID,
				SUM(RTC.COUNT_FAILED) AS COUNT_FAILED,
				SUM(RTC.COUNT_PASSED) AS COUNT_PASSED,
				SUM(RTC.COUNT_NOT_RUN) AS COUNT_NOT_RUN,
				SUM(RTC.COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
				SUM(RTC.COUNT_BLOCKED) AS COUNT_BLOCKED,
				SUM(RTC.COUNT_CAUTION) AS COUNT_CAUTION,				
				MIN(RTC.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(RTC.ACTUAL_DURATION) AS ACTUAL_DURATION
			FROM
				TST_RELEASE_TEST_SET RTC
			INNER JOIN
				TST_TEST_SET TSE ON RTC.TEST_SET_ID = TSE.TEST_SET_ID
			WHERE
				TSE.TEST_SET_FOLDER_ID = @TestSetFolderId
				AND TSE.IS_DELETED = 0
			GROUP BY RTC.RELEASE_ID
			UNION
			SELECT
				RTF.RELEASE_ID,
				@TestSetFolderId AS TEST_SET_FOLDER_ID,
				SUM(RTF.COUNT_FAILED) AS COUNT_FAILED,
				SUM(RTF.COUNT_PASSED) AS COUNT_PASSED,
				SUM(RTF.COUNT_NOT_RUN) AS COUNT_NOT_RUN,
				SUM(RTF.COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
				SUM(RTF.COUNT_BLOCKED) AS COUNT_BLOCKED,
				SUM(RTF.COUNT_CAUTION) AS COUNT_CAUTION,				
				MIN(RTF.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(RTF.ACTUAL_DURATION) AS ACTUAL_DURATION
			FROM
				TST_RELEASE_TEST_SET_FOLDER RTF
			INNER JOIN
				TST_TEST_SET_FOLDER TSF ON RTF.TEST_SET_FOLDER_ID = TSF.TEST_SET_FOLDER_ID
			WHERE
				TSF.PARENT_TEST_SET_FOLDER_ID = @TestSetFolderId
			GROUP BY RELEASE_ID
		) AS GRP
		GROUP BY RELEASE_ID, TEST_SET_FOLDER_ID
	) AS SOURCE
	ON
		TARGET.RELEASE_ID = SOURCE.RELEASE_ID AND
		TARGET.TEST_SET_FOLDER_ID = SOURCE.TEST_SET_FOLDER_ID
	WHEN MATCHED THEN
		UPDATE
			SET
				TARGET.COUNT_PASSED = SOURCE.COUNT_PASSED,
				TARGET.COUNT_FAILED = SOURCE.COUNT_FAILED,
				TARGET.COUNT_CAUTION = SOURCE.COUNT_CAUTION,
				TARGET.COUNT_BLOCKED = SOURCE.COUNT_BLOCKED,
				TARGET.COUNT_NOT_RUN = SOURCE.COUNT_NOT_RUN,
				TARGET.COUNT_NOT_APPLICABLE = SOURCE.COUNT_NOT_APPLICABLE,
				TARGET.ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
				TARGET.EXECUTION_DATE = SOURCE.EXECUTION_DATE
	WHEN NOT MATCHED BY TARGET THEN 
		INSERT (RELEASE_ID, TEST_SET_FOLDER_ID,
			COUNT_PASSED, COUNT_FAILED, COUNT_CAUTION, COUNT_BLOCKED, COUNT_NOT_RUN, COUNT_NOT_APPLICABLE,
			ACTUAL_DURATION, EXECUTION_DATE) 
		VALUES (SOURCE.RELEASE_ID, SOURCE.TEST_SET_FOLDER_ID,
			SOURCE.COUNT_PASSED, SOURCE.COUNT_FAILED, SOURCE.COUNT_CAUTION, SOURCE.COUNT_BLOCKED, SOURCE.COUNT_NOT_RUN,
			SOURCE.COUNT_NOT_APPLICABLE, SOURCE.ACTUAL_DURATION, SOURCE.EXECUTION_DATE);
END
GO
