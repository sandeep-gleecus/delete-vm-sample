//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class UsageLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int LogId
        {
            get { return _logId; }
            set
            {
                if (_logId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LogId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _logId = value;
                    OnPropertyChanged("LogId");
                }
            }
        }
        private int _logId;
    
        [DataMember]
        public int ScheduleId
        {
            get { return _scheduleId; }
            set
            {
                if (_scheduleId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScheduleId", _scheduleId);
                    _scheduleId = value;
                    OnPropertyChanged("ScheduleId");
                }
            }
        }
        private int _scheduleId;
    
        [DataMember]
        public int TemplateId
        {
            get { return _templateId; }
            set
            {
                if (_templateId != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateId", _templateId);
                    _templateId = value;
                    OnPropertyChanged("TemplateId");
                }
            }
        }
        private int _templateId;
    
        [DataMember]
        public string TemplateName
        {
            get { return _templateName; }
            set
            {
                if (_templateName != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateName", _templateName);
                    _templateName = value;
                    OnPropertyChanged("TemplateName");
                }
            }
        }
        private string _templateName;
    
        [DataMember]
        public string LookupKeys
        {
            get { return _lookupKeys; }
            set
            {
                if (_lookupKeys != value)
                {
                    ChangeTracker.RecordOriginalValue("LookupKeys", _lookupKeys);
                    _lookupKeys = value;
                    OnPropertyChanged("LookupKeys");
                }
            }
        }
        private string _lookupKeys;
    
        [DataMember]
        public Nullable<System.Guid> ScheduleGroupId
        {
            get { return _scheduleGroupId; }
            set
            {
                if (_scheduleGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScheduleGroupId", _scheduleGroupId);
                    _scheduleGroupId = value;
                    OnPropertyChanged("ScheduleGroupId");
                }
            }
        }
        private Nullable<System.Guid> _scheduleGroupId;
    
        [DataMember]
        public System.DateTime ScheduleDateTime
        {
            get { return _scheduleDateTime; }
            set
            {
                if (_scheduleDateTime != value)
                {
                    ChangeTracker.RecordOriginalValue("ScheduleDateTime", _scheduleDateTime);
                    _scheduleDateTime = value;
                    OnPropertyChanged("ScheduleDateTime");
                }
            }
        }
        private System.DateTime _scheduleDateTime;
    
        [DataMember]
        public string LogAction
        {
            get { return _logAction; }
            set
            {
                if (_logAction != value)
                {
                    ChangeTracker.RecordOriginalValue("LogAction", _logAction);
                    _logAction = value;
                    OnPropertyChanged("LogAction");
                }
            }
        }
        private string _logAction;
    
        [DataMember]
        public string ActionResult
        {
            get { return _actionResult; }
            set
            {
                if (_actionResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ActionResult", _actionResult);
                    _actionResult = value;
                    OnPropertyChanged("ActionResult");
                }
            }
        }
        private string _actionResult;
    
        [DataMember]
        public System.DateTime CreatedDateTime
        {
            get { return _createdDateTime; }
            set
            {
                if (_createdDateTime != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedDateTime", _createdDateTime);
                    _createdDateTime = value;
                    OnPropertyChanged("CreatedDateTime");
                }
            }
        }
        private System.DateTime _createdDateTime;
    
        [DataMember]
        public string User
        {
            get { return _user; }
            set
            {
                if (_user != value)
                {
                    ChangeTracker.RecordOriginalValue("User", _user);
                    _user = value;
                    OnPropertyChanged("User");
                }
            }
        }
        private string _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
