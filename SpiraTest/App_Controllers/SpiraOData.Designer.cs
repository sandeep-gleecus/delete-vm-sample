






using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Query;

using Inflectra.SpiraTest.Business;
using Inflectra.SpiraTest.DataModel;
using Inflectra.SpiraTest.Common;

namespace Inflectra.SpiraTest.Web.App_Controllers
{

	/// <summary>
	/// Autogenerated ODATA Get methods from the .EDMX XML
	/// </summary>
	public partial class SpiraODataController
	{

		/// <summary>
		/// Queries the ArtifactAssociations reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ArtifactAssociations</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ArtifactAssociation> GetArtifactAssociations()
		{
			const string METHOD_NAME = "GetArtifactAssociations";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ArtifactAssociation> queryable = reportManager.QueryReportableEntity<R_ArtifactAssociation>("R_ArtifactAssociations");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ArtifactAttachments reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ArtifactAttachments</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ArtifactAttachment> GetArtifactAttachments()
		{
			const string METHOD_NAME = "GetArtifactAttachments";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ArtifactAttachment> queryable = reportManager.QueryReportableEntity<R_ArtifactAttachment>("R_ArtifactAttachments");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ArtifactTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ArtifactTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ArtifactType> GetArtifactTypes()
		{
			const string METHOD_NAME = "GetArtifactTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ArtifactType> queryable = reportManager.QueryReportableEntity<R_ArtifactType>("R_ArtifactTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Attachments reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Attachments</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Attachment> GetAttachments()
		{
			const string METHOD_NAME = "GetAttachments";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Attachment> queryable = reportManager.QueryReportableEntity<R_Attachment>("R_Attachments");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the AttachmentFolders reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of AttachmentFolders</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_AttachmentFolder> GetAttachmentFolders()
		{
			const string METHOD_NAME = "GetAttachmentFolders";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_AttachmentFolder> queryable = reportManager.QueryReportableEntity<R_AttachmentFolder>("R_AttachmentFolders");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the AutomationHosts reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of AutomationHosts</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_AutomationHost> GetAutomationHosts()
		{
			const string METHOD_NAME = "GetAutomationHosts";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_AutomationHost> queryable = reportManager.QueryReportableEntity<R_AutomationHost>("R_AutomationHosts");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Baselines reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Baselines</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Baseline> GetBaselines()
		{
			const string METHOD_NAME = "GetBaselines";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Baseline> queryable = reportManager.QueryReportableEntity<R_Baseline>("R_Baselines");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Builds reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Builds</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Build> GetBuilds()
		{
			const string METHOD_NAME = "GetBuilds";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Build> queryable = reportManager.QueryReportableEntity<R_Build>("R_Builds");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Comments reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Comments</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Comment> GetComments()
		{
			const string METHOD_NAME = "GetComments";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Comment> queryable = reportManager.QueryReportableEntity<R_Comment>("R_Comments");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Components reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Components</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Component> GetComponents()
		{
			const string METHOD_NAME = "GetComponents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Component> queryable = reportManager.QueryReportableEntity<R_Component>("R_Components");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the CustomLists reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of CustomLists</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_CustomList> GetCustomLists()
		{
			const string METHOD_NAME = "GetCustomLists";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_CustomList> queryable = reportManager.QueryReportableEntity<R_CustomList>("R_CustomLists");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the CustomListValues reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of CustomListValues</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_CustomListValue> GetCustomListValues()
		{
			const string METHOD_NAME = "GetCustomListValues";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_CustomListValue> queryable = reportManager.QueryReportableEntity<R_CustomListValue>("R_CustomListValues");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the CustomPropertyDefinitions reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of CustomPropertyDefinitions</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_CustomPropertyDefinition> GetCustomPropertyDefinitions()
		{
			const string METHOD_NAME = "GetCustomPropertyDefinitions";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_CustomPropertyDefinition> queryable = reportManager.QueryReportableEntity<R_CustomPropertyDefinition>("R_CustomPropertyDefinitions");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the DocumentStatuses reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of DocumentStatuses</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_DocumentStatus> GetDocumentStatuses()
		{
			const string METHOD_NAME = "GetDocumentStatuses";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_DocumentStatus> queryable = reportManager.QueryReportableEntity<R_DocumentStatus>("R_DocumentStatuses");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the DocumentTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of DocumentTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_DocumentType> GetDocumentTypes()
		{
			const string METHOD_NAME = "GetDocumentTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_DocumentType> queryable = reportManager.QueryReportableEntity<R_DocumentType>("R_DocumentTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Events reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Events</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Event> GetEvents()
		{
			const string METHOD_NAME = "GetEvents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Event> queryable = reportManager.QueryReportableEntity<R_Event>("R_Events");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the HistoryChangeSets reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of HistoryChangeSets</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_HistoryChangeSet> GetHistoryChangeSets()
		{
			const string METHOD_NAME = "GetHistoryChangeSets";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_HistoryChangeSet> queryable = reportManager.QueryReportableEntity<R_HistoryChangeSet>("R_HistoryChangeSets");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the HistoryDetails reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of HistoryDetails</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_HistoryDetail> GetHistoryDetails()
		{
			const string METHOD_NAME = "GetHistoryDetails";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_HistoryDetail> queryable = reportManager.QueryReportableEntity<R_HistoryDetail>("R_HistoryDetails");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Incidents reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Incidents</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Incident> GetIncidents()
		{
			const string METHOD_NAME = "GetIncidents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Incident> queryable = reportManager.QueryReportableEntity<R_Incident>("R_Incidents");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the IncidentPriorities reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of IncidentPriorities</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_IncidentPriority> GetIncidentPriorities()
		{
			const string METHOD_NAME = "GetIncidentPriorities";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_IncidentPriority> queryable = reportManager.QueryReportableEntity<R_IncidentPriority>("R_IncidentPriorities");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the IncidentSeverities reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of IncidentSeverities</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_IncidentSeverity> GetIncidentSeverities()
		{
			const string METHOD_NAME = "GetIncidentSeverities";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_IncidentSeverity> queryable = reportManager.QueryReportableEntity<R_IncidentSeverity>("R_IncidentSeverities");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the IncidentStatuses reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of IncidentStatuses</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_IncidentStatus> GetIncidentStatuses()
		{
			const string METHOD_NAME = "GetIncidentStatuses";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_IncidentStatus> queryable = reportManager.QueryReportableEntity<R_IncidentStatus>("R_IncidentStatuses");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the IncidentTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of IncidentTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_IncidentType> GetIncidentTypes()
		{
			const string METHOD_NAME = "GetIncidentTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_IncidentType> queryable = reportManager.QueryReportableEntity<R_IncidentType>("R_IncidentTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Portfolios reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Portfolios</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Portfolio> GetPortfolios()
		{
			const string METHOD_NAME = "GetPortfolios";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Portfolio> queryable = reportManager.QueryReportableEntity<R_Portfolio>("R_Portfolios");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Projects reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Projects</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Project> GetProjects()
		{
			const string METHOD_NAME = "GetProjects";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Project> queryable = reportManager.QueryReportableEntity<R_Project>("R_Projects");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ProjectGroups reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ProjectGroups</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ProjectGroup> GetProjectGroups()
		{
			const string METHOD_NAME = "GetProjectGroups";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ProjectGroup> queryable = reportManager.QueryReportableEntity<R_ProjectGroup>("R_ProjectGroups");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ProjectMembership reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ProjectMembership</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ProjectMembership> GetProjectMembership()
		{
			const string METHOD_NAME = "GetProjectMembership";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ProjectMembership> queryable = reportManager.QueryReportableEntity<R_ProjectMembership>("R_ProjectMembership");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ProjectReleaseResources reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ProjectReleaseResources</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ProjectReleaseResource> GetProjectReleaseResources()
		{
			const string METHOD_NAME = "GetProjectReleaseResources";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ProjectReleaseResource> queryable = reportManager.QueryReportableEntity<R_ProjectReleaseResource>("R_ProjectReleaseResources");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ProjectRoles reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ProjectRoles</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ProjectRole> GetProjectRoles()
		{
			const string METHOD_NAME = "GetProjectRoles";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ProjectRole> queryable = reportManager.QueryReportableEntity<R_ProjectRole>("R_ProjectRoles");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ProjectTemplates reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ProjectTemplates</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ProjectTemplate> GetProjectTemplates()
		{
			const string METHOD_NAME = "GetProjectTemplates";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ProjectTemplate> queryable = reportManager.QueryReportableEntity<R_ProjectTemplate>("R_ProjectTemplates");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Releases reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Releases</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Release> GetReleases()
		{
			const string METHOD_NAME = "GetReleases";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Release> queryable = reportManager.QueryReportableEntity<R_Release>("R_Releases");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the ReleaseTestCaseMapping reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of ReleaseTestCaseMapping</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_ReleaseTestCase> GetReleaseTestCaseMapping()
		{
			const string METHOD_NAME = "GetReleaseTestCaseMapping";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_ReleaseTestCase> queryable = reportManager.QueryReportableEntity<R_ReleaseTestCase>("R_ReleaseTestCases");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Requirements reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Requirements</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Requirement> GetRequirements()
		{
			const string METHOD_NAME = "GetRequirements";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Requirement> queryable = reportManager.QueryReportableEntity<R_Requirement>("R_Requirements");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RequirementIncidents reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RequirementIncidents</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RequirementIncident> GetRequirementIncidents()
		{
			const string METHOD_NAME = "GetRequirementIncidents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RequirementIncident> queryable = reportManager.QueryReportableEntity<R_RequirementIncident>("R_RequirementIncidents");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RequirementSteps reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RequirementSteps</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RequirementStep> GetRequirementSteps()
		{
			const string METHOD_NAME = "GetRequirementSteps";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RequirementStep> queryable = reportManager.QueryReportableEntity<R_RequirementStep>("R_RequirementSteps");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RequirementTestCaseCoverage reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RequirementTestCaseCoverage</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RequirementTestCase> GetRequirementTestCaseCoverage()
		{
			const string METHOD_NAME = "GetRequirementTestCaseCoverage";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RequirementTestCase> queryable = reportManager.QueryReportableEntity<R_RequirementTestCase>("R_RequirementTestCases");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RequirementTestStepCoverage reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RequirementTestStepCoverage</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RequirementTestStep> GetRequirementTestStepCoverage()
		{
			const string METHOD_NAME = "GetRequirementTestStepCoverage";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RequirementTestStep> queryable = reportManager.QueryReportableEntity<R_RequirementTestStep>("R_RequirementTestSteps");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RequirementTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RequirementTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RequirementType> GetRequirementTypes()
		{
			const string METHOD_NAME = "GetRequirementTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RequirementType> queryable = reportManager.QueryReportableEntity<R_RequirementType>("R_RequirementTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Risks reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Risks</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Risk> GetRisks()
		{
			const string METHOD_NAME = "GetRisks";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Risk> queryable = reportManager.QueryReportableEntity<R_Risk>("R_Risks");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RiskImpacts reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RiskImpacts</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RiskImpact> GetRiskImpacts()
		{
			const string METHOD_NAME = "GetRiskImpacts";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RiskImpact> queryable = reportManager.QueryReportableEntity<R_RiskImpact>("R_RiskImpacts");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RiskMitigations reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RiskMitigations</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RiskMitigation> GetRiskMitigations()
		{
			const string METHOD_NAME = "GetRiskMitigations";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RiskMitigation> queryable = reportManager.QueryReportableEntity<R_RiskMitigation>("R_RiskMitigations");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RiskProbabilities reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RiskProbabilities</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RiskProbability> GetRiskProbabilities()
		{
			const string METHOD_NAME = "GetRiskProbabilities";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RiskProbability> queryable = reportManager.QueryReportableEntity<R_RiskProbability>("R_RiskProbabilities");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RiskStatuses reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RiskStatuses</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RiskStatus> GetRiskStatuses()
		{
			const string METHOD_NAME = "GetRiskStatuses";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RiskStatus> queryable = reportManager.QueryReportableEntity<R_RiskStatus>("R_RiskStatuses");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the RiskTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of RiskTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_RiskType> GetRiskTypes()
		{
			const string METHOD_NAME = "GetRiskTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_RiskType> queryable = reportManager.QueryReportableEntity<R_RiskType>("R_RiskTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Tasks reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Tasks</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_Task> GetTasks()
		{
			const string METHOD_NAME = "GetTasks";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_Task> queryable = reportManager.QueryReportableEntity<R_Task>("R_Tasks");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TaskPriorities reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TaskPriorities</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TaskPriority> GetTaskPriorities()
		{
			const string METHOD_NAME = "GetTaskPriorities";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TaskPriority> queryable = reportManager.QueryReportableEntity<R_TaskPriority>("R_TaskPriorities");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TaskTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TaskTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TaskType> GetTaskTypes()
		{
			const string METHOD_NAME = "GetTaskTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TaskType> queryable = reportManager.QueryReportableEntity<R_TaskType>("R_TaskTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestCases reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestCases</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestCase> GetTestCases()
		{
			const string METHOD_NAME = "GetTestCases";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestCase> queryable = reportManager.QueryReportableEntity<R_TestCase>("R_TestCases");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestCaseFolders reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestCaseFolders</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestCaseFolder> GetTestCaseFolders()
		{
			const string METHOD_NAME = "GetTestCaseFolders";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestCaseFolder> queryable = reportManager.QueryReportableEntity<R_TestCaseFolder>("R_TestCaseFolders");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestCaseIncidents reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestCaseIncidents</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestCaseIncident> GetTestCaseIncidents()
		{
			const string METHOD_NAME = "GetTestCaseIncidents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestCaseIncident> queryable = reportManager.QueryReportableEntity<R_TestCaseIncident>("R_TestCaseIncidents");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestCaseTypes reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestCaseTypes</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestCaseType> GetTestCaseTypes()
		{
			const string METHOD_NAME = "GetTestCaseTypes";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestCaseType> queryable = reportManager.QueryReportableEntity<R_TestCaseType>("R_TestCaseTypes");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestConfigurationEntries reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestConfigurationEntries</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestConfigurationEntry> GetTestConfigurationEntries()
		{
			const string METHOD_NAME = "GetTestConfigurationEntries";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestConfigurationEntry> queryable = reportManager.QueryReportableEntity<R_TestConfigurationEntry>("R_TestConfigurationEntries");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestConfigurationSets reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestConfigurationSets</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestConfigurationSet> GetTestConfigurationSets()
		{
			const string METHOD_NAME = "GetTestConfigurationSets";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestConfigurationSet> queryable = reportManager.QueryReportableEntity<R_TestConfigurationSet>("R_TestConfigurationSets");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestRuns reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestRuns</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestRun> GetTestRuns()
		{
			const string METHOD_NAME = "GetTestRuns";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestRun> queryable = reportManager.QueryReportableEntity<R_TestRun>("R_TestRuns");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestRunIncidents reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestRunIncidents</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestRunIncident> GetTestRunIncidents()
		{
			const string METHOD_NAME = "GetTestRunIncidents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestRunIncident> queryable = reportManager.QueryReportableEntity<R_TestRunIncident>("R_TestRunIncidents");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestRunSteps reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestRunSteps</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestRunStep> GetTestRunSteps()
		{
			const string METHOD_NAME = "GetTestRunSteps";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestRunStep> queryable = reportManager.QueryReportableEntity<R_TestRunStep>("R_TestRunSteps");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestSets reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestSets</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestSet> GetTestSets()
		{
			const string METHOD_NAME = "GetTestSets";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestSet> queryable = reportManager.QueryReportableEntity<R_TestSet>("R_TestSets");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestSetFolders reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestSetFolders</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestSetFolder> GetTestSetFolders()
		{
			const string METHOD_NAME = "GetTestSetFolders";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestSetFolder> queryable = reportManager.QueryReportableEntity<R_TestSetFolder>("R_TestSetFolders");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestSetIncidents reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestSetIncidents</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestSetIncident> GetTestSetIncidents()
		{
			const string METHOD_NAME = "GetTestSetIncidents";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestSetIncident> queryable = reportManager.QueryReportableEntity<R_TestSetIncident>("R_TestSetIncidents");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestSetTestCases reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestSetTestCases</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestSetTestCase> GetTestSetTestCases()
		{
			const string METHOD_NAME = "GetTestSetTestCases";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestSetTestCase> queryable = reportManager.QueryReportableEntity<R_TestSetTestCase>("R_TestSetTestCases");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the TestSteps reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of TestSteps</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_TestStep> GetTestSteps()
		{
			const string METHOD_NAME = "GetTestSteps";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_TestStep> queryable = reportManager.QueryReportableEntity<R_TestStep>("R_TestSteps");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

		/// <summary>
		/// Queries the Users reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of Users</returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<R_User> GetUsers()
		{
			const string METHOD_NAME = "GetUsers";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<R_User> queryable = reportManager.QueryReportableEntity<R_User>("R_Users");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}

	}
}
