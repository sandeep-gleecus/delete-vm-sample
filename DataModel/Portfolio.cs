//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(PortfolioSettingValue))]
    public partial class Portfolio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PortfolioId
        {
            get { return _portfolioId; }
            set
            {
                if (_portfolioId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PortfolioId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _portfolioId = value;
                    OnPropertyChanged("PortfolioId");
                }
            }
        }
        private int _portfolioId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public int PercentComplete
        {
            get { return _percentComplete; }
            set
            {
                if (_percentComplete != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentComplete", _percentComplete);
                    _percentComplete = value;
                    OnPropertyChanged("PercentComplete");
                }
            }
        }
        private int _percentComplete;
    
        [DataMember]
        public int RequirementCount
        {
            get { return _requirementCount; }
            set
            {
                if (_requirementCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementCount", _requirementCount);
                    _requirementCount = value;
                    OnPropertyChanged("RequirementCount");
                }
            }
        }
        private int _requirementCount;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ProjectGroup> ProjectGroups
        {
            get
            {
                if (_projectGroups == null)
                {
                    _projectGroups = new TrackableCollection<ProjectGroup>();
                    _projectGroups.CollectionChanged += FixupProjectGroups;
                }
                return _projectGroups;
            }
            set
            {
                if (!ReferenceEquals(_projectGroups, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged -= FixupProjectGroups;
                    }
                    _projectGroups = value;
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged += FixupProjectGroups;
                    }
                    OnNavigationPropertyChanged("ProjectGroups");
                }
            }
        }
        private TrackableCollection<ProjectGroup> _projectGroups;
    
        [DataMember]
        public TrackableCollection<PortfolioSettingValue> TST_PORTFOLIO_SETTING_VALUE
        {
            get
            {
                if (_tST_PORTFOLIO_SETTING_VALUE == null)
                {
                    _tST_PORTFOLIO_SETTING_VALUE = new TrackableCollection<PortfolioSettingValue>();
                    _tST_PORTFOLIO_SETTING_VALUE.CollectionChanged += FixupTST_PORTFOLIO_SETTING_VALUE;
                }
                return _tST_PORTFOLIO_SETTING_VALUE;
            }
            set
            {
                if (!ReferenceEquals(_tST_PORTFOLIO_SETTING_VALUE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_PORTFOLIO_SETTING_VALUE != null)
                    {
                        _tST_PORTFOLIO_SETTING_VALUE.CollectionChanged -= FixupTST_PORTFOLIO_SETTING_VALUE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (PortfolioSettingValue item in _tST_PORTFOLIO_SETTING_VALUE)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tST_PORTFOLIO_SETTING_VALUE = value;
                    if (_tST_PORTFOLIO_SETTING_VALUE != null)
                    {
                        _tST_PORTFOLIO_SETTING_VALUE.CollectionChanged += FixupTST_PORTFOLIO_SETTING_VALUE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (PortfolioSettingValue item in _tST_PORTFOLIO_SETTING_VALUE)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TST_PORTFOLIO_SETTING_VALUE");
                }
            }
        }
        private TrackableCollection<PortfolioSettingValue> _tST_PORTFOLIO_SETTING_VALUE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProjectGroups.Clear();
            TST_PORTFOLIO_SETTING_VALUE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProjectGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroup item in e.NewItems)
                {
                    item.Portfolio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectGroups", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Portfolio, this))
                    {
                        item.Portfolio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectGroups", item);
                    }
                }
            }
        }
    
        private void FixupTST_PORTFOLIO_SETTING_VALUE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PortfolioSettingValue item in e.NewItems)
                {
                    item.Portfolio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_PORTFOLIO_SETTING_VALUE", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PortfolioSettingValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.Portfolio, this))
                    {
                        item.Portfolio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_PORTFOLIO_SETTING_VALUE", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
