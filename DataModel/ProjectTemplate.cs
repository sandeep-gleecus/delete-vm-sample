//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomProperty))]
    [KnownType(typeof(CustomPropertyList))]
    [KnownType(typeof(DocumentStatus))]
    [KnownType(typeof(DocumentType))]
    [KnownType(typeof(DocumentWorkflow))]
    [KnownType(typeof(Importance))]
    [KnownType(typeof(IncidentPriority))]
    [KnownType(typeof(IncidentSeverity))]
    [KnownType(typeof(IncidentStatus))]
    [KnownType(typeof(IncidentType))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ReleaseTypeWorkflow))]
    [KnownType(typeof(ReleaseWorkflow))]
    [KnownType(typeof(RequirementType))]
    [KnownType(typeof(RequirementWorkflow))]
    [KnownType(typeof(RiskProbability))]
    [KnownType(typeof(TaskPriority))]
    [KnownType(typeof(TaskType))]
    [KnownType(typeof(TaskWorkflow))]
    [KnownType(typeof(TestCasePriority))]
    [KnownType(typeof(TestCaseType))]
    [KnownType(typeof(TestCaseWorkflow))]
    [KnownType(typeof(Workflow))]
    [KnownType(typeof(NotificationArtifactTemplate))]
    [KnownType(typeof(NotificationEvent))]
    [KnownType(typeof(RiskImpact))]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(UserProfile))]
    [KnownType(typeof(ResourceCategory))]
    [KnownType(typeof(ResourceTrack))]
    [KnownType(typeof(RiskStatus))]
    [KnownType(typeof(RiskType))]
    [KnownType(typeof(TimecardEntryType))]
    [KnownType(typeof(ProjectTemplateArtifactDefault))]
    [KnownType(typeof(RiskWorkflow))]
    [KnownType(typeof(User))]
    [KnownType(typeof(ProjectTemplateSettingValue))]
    [KnownType(typeof(RiskDetectability))]
    [KnownType(typeof(StandardTaskSet))]
    [KnownType(typeof(StandardTestCaseSet))]
    public partial class ProjectTemplate: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectTemplateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CustomProperty> CustomProperties
        {
            get
            {
                if (_customProperties == null)
                {
                    _customProperties = new TrackableCollection<CustomProperty>();
                    _customProperties.CollectionChanged += FixupCustomProperties;
                }
                return _customProperties;
            }
            set
            {
                if (!ReferenceEquals(_customProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged -= FixupCustomProperties;
                    }
                    _customProperties = value;
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged += FixupCustomProperties;
                    }
                    OnNavigationPropertyChanged("CustomProperties");
                }
            }
        }
        private TrackableCollection<CustomProperty> _customProperties;
    
        [DataMember]
        public TrackableCollection<CustomPropertyList> CustomPropertyLists
        {
            get
            {
                if (_customPropertyLists == null)
                {
                    _customPropertyLists = new TrackableCollection<CustomPropertyList>();
                    _customPropertyLists.CollectionChanged += FixupCustomPropertyLists;
                }
                return _customPropertyLists;
            }
            set
            {
                if (!ReferenceEquals(_customPropertyLists, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customPropertyLists != null)
                    {
                        _customPropertyLists.CollectionChanged -= FixupCustomPropertyLists;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CustomPropertyList item in _customPropertyLists)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _customPropertyLists = value;
                    if (_customPropertyLists != null)
                    {
                        _customPropertyLists.CollectionChanged += FixupCustomPropertyLists;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CustomPropertyList item in _customPropertyLists)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CustomPropertyLists");
                }
            }
        }
        private TrackableCollection<CustomPropertyList> _customPropertyLists;
    
        [DataMember]
        public TrackableCollection<DocumentStatus> DocumentStati
        {
            get
            {
                if (_documentStati == null)
                {
                    _documentStati = new TrackableCollection<DocumentStatus>();
                    _documentStati.CollectionChanged += FixupDocumentStati;
                }
                return _documentStati;
            }
            set
            {
                if (!ReferenceEquals(_documentStati, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentStati != null)
                    {
                        _documentStati.CollectionChanged -= FixupDocumentStati;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentStatus item in _documentStati)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentStati = value;
                    if (_documentStati != null)
                    {
                        _documentStati.CollectionChanged += FixupDocumentStati;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentStatus item in _documentStati)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentStati");
                }
            }
        }
        private TrackableCollection<DocumentStatus> _documentStati;
    
        [DataMember]
        public TrackableCollection<DocumentType> DocumentTypes
        {
            get
            {
                if (_documentTypes == null)
                {
                    _documentTypes = new TrackableCollection<DocumentType>();
                    _documentTypes.CollectionChanged += FixupDocumentTypes;
                }
                return _documentTypes;
            }
            set
            {
                if (!ReferenceEquals(_documentTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentTypes != null)
                    {
                        _documentTypes.CollectionChanged -= FixupDocumentTypes;
                    }
                    _documentTypes = value;
                    if (_documentTypes != null)
                    {
                        _documentTypes.CollectionChanged += FixupDocumentTypes;
                    }
                    OnNavigationPropertyChanged("DocumentTypes");
                }
            }
        }
        private TrackableCollection<DocumentType> _documentTypes;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflow> DocumentWorkflows
        {
            get
            {
                if (_documentWorkflows == null)
                {
                    _documentWorkflows = new TrackableCollection<DocumentWorkflow>();
                    _documentWorkflows.CollectionChanged += FixupDocumentWorkflows;
                }
                return _documentWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_documentWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentWorkflows != null)
                    {
                        _documentWorkflows.CollectionChanged -= FixupDocumentWorkflows;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflow item in _documentWorkflows)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentWorkflows = value;
                    if (_documentWorkflows != null)
                    {
                        _documentWorkflows.CollectionChanged += FixupDocumentWorkflows;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflow item in _documentWorkflows)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentWorkflows");
                }
            }
        }
        private TrackableCollection<DocumentWorkflow> _documentWorkflows;
    
        [DataMember]
        public TrackableCollection<Importance> Importances
        {
            get
            {
                if (_importances == null)
                {
                    _importances = new TrackableCollection<Importance>();
                    _importances.CollectionChanged += FixupImportances;
                }
                return _importances;
            }
            set
            {
                if (!ReferenceEquals(_importances, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_importances != null)
                    {
                        _importances.CollectionChanged -= FixupImportances;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Importance item in _importances)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _importances = value;
                    if (_importances != null)
                    {
                        _importances.CollectionChanged += FixupImportances;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Importance item in _importances)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Importances");
                }
            }
        }
        private TrackableCollection<Importance> _importances;
    
        [DataMember]
        public TrackableCollection<IncidentPriority> IncidentPriorities
        {
            get
            {
                if (_incidentPriorities == null)
                {
                    _incidentPriorities = new TrackableCollection<IncidentPriority>();
                    _incidentPriorities.CollectionChanged += FixupIncidentPriorities;
                }
                return _incidentPriorities;
            }
            set
            {
                if (!ReferenceEquals(_incidentPriorities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentPriorities != null)
                    {
                        _incidentPriorities.CollectionChanged -= FixupIncidentPriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncidentPriority item in _incidentPriorities)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentPriorities = value;
                    if (_incidentPriorities != null)
                    {
                        _incidentPriorities.CollectionChanged += FixupIncidentPriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncidentPriority item in _incidentPriorities)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentPriorities");
                }
            }
        }
        private TrackableCollection<IncidentPriority> _incidentPriorities;
    
        [DataMember]
        public TrackableCollection<IncidentSeverity> IncidentSeverities
        {
            get
            {
                if (_incidentSeverities == null)
                {
                    _incidentSeverities = new TrackableCollection<IncidentSeverity>();
                    _incidentSeverities.CollectionChanged += FixupIncidentSeverities;
                }
                return _incidentSeverities;
            }
            set
            {
                if (!ReferenceEquals(_incidentSeverities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentSeverities != null)
                    {
                        _incidentSeverities.CollectionChanged -= FixupIncidentSeverities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncidentSeverity item in _incidentSeverities)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentSeverities = value;
                    if (_incidentSeverities != null)
                    {
                        _incidentSeverities.CollectionChanged += FixupIncidentSeverities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncidentSeverity item in _incidentSeverities)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentSeverities");
                }
            }
        }
        private TrackableCollection<IncidentSeverity> _incidentSeverities;
    
        [DataMember]
        public TrackableCollection<IncidentStatus> IncidentStati
        {
            get
            {
                if (_incidentStati == null)
                {
                    _incidentStati = new TrackableCollection<IncidentStatus>();
                    _incidentStati.CollectionChanged += FixupIncidentStati;
                }
                return _incidentStati;
            }
            set
            {
                if (!ReferenceEquals(_incidentStati, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentStati != null)
                    {
                        _incidentStati.CollectionChanged -= FixupIncidentStati;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncidentStatus item in _incidentStati)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentStati = value;
                    if (_incidentStati != null)
                    {
                        _incidentStati.CollectionChanged += FixupIncidentStati;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncidentStatus item in _incidentStati)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentStati");
                }
            }
        }
        private TrackableCollection<IncidentStatus> _incidentStati;
    
        [DataMember]
        public TrackableCollection<IncidentType> IncidentTypes
        {
            get
            {
                if (_incidentTypes == null)
                {
                    _incidentTypes = new TrackableCollection<IncidentType>();
                    _incidentTypes.CollectionChanged += FixupIncidentTypes;
                }
                return _incidentTypes;
            }
            set
            {
                if (!ReferenceEquals(_incidentTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentTypes != null)
                    {
                        _incidentTypes.CollectionChanged -= FixupIncidentTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncidentType item in _incidentTypes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentTypes = value;
                    if (_incidentTypes != null)
                    {
                        _incidentTypes.CollectionChanged += FixupIncidentTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncidentType item in _incidentTypes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentTypes");
                }
            }
        }
        private TrackableCollection<IncidentType> _incidentTypes;
    
        [DataMember]
        public TrackableCollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<Project>();
                    _projects.CollectionChanged += FixupProjects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += FixupProjects;
                    }
                    OnNavigationPropertyChanged("Projects");
                }
            }
        }
        private TrackableCollection<Project> _projects;
    
        [DataMember]
        public TrackableCollection<ReleaseTypeWorkflow> ReleaseTypeWorkflows
        {
            get
            {
                if (_releaseTypeWorkflows == null)
                {
                    _releaseTypeWorkflows = new TrackableCollection<ReleaseTypeWorkflow>();
                    _releaseTypeWorkflows.CollectionChanged += FixupReleaseTypeWorkflows;
                }
                return _releaseTypeWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_releaseTypeWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseTypeWorkflows != null)
                    {
                        _releaseTypeWorkflows.CollectionChanged -= FixupReleaseTypeWorkflows;
                    }
                    _releaseTypeWorkflows = value;
                    if (_releaseTypeWorkflows != null)
                    {
                        _releaseTypeWorkflows.CollectionChanged += FixupReleaseTypeWorkflows;
                    }
                    OnNavigationPropertyChanged("ReleaseTypeWorkflows");
                }
            }
        }
        private TrackableCollection<ReleaseTypeWorkflow> _releaseTypeWorkflows;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflow> ReleaseWorkflows
        {
            get
            {
                if (_releaseWorkflows == null)
                {
                    _releaseWorkflows = new TrackableCollection<ReleaseWorkflow>();
                    _releaseWorkflows.CollectionChanged += FixupReleaseWorkflows;
                }
                return _releaseWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_releaseWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseWorkflows != null)
                    {
                        _releaseWorkflows.CollectionChanged -= FixupReleaseWorkflows;
                    }
                    _releaseWorkflows = value;
                    if (_releaseWorkflows != null)
                    {
                        _releaseWorkflows.CollectionChanged += FixupReleaseWorkflows;
                    }
                    OnNavigationPropertyChanged("ReleaseWorkflows");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflow> _releaseWorkflows;
    
        [DataMember]
        public TrackableCollection<RequirementType> RequirementTypes
        {
            get
            {
                if (_requirementTypes == null)
                {
                    _requirementTypes = new TrackableCollection<RequirementType>();
                    _requirementTypes.CollectionChanged += FixupRequirementTypes;
                }
                return _requirementTypes;
            }
            set
            {
                if (!ReferenceEquals(_requirementTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementTypes != null)
                    {
                        _requirementTypes.CollectionChanged -= FixupRequirementTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementType item in _requirementTypes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementTypes = value;
                    if (_requirementTypes != null)
                    {
                        _requirementTypes.CollectionChanged += FixupRequirementTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementType item in _requirementTypes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementTypes");
                }
            }
        }
        private TrackableCollection<RequirementType> _requirementTypes;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflow> RequirementWorkflows
        {
            get
            {
                if (_requirementWorkflows == null)
                {
                    _requirementWorkflows = new TrackableCollection<RequirementWorkflow>();
                    _requirementWorkflows.CollectionChanged += FixupRequirementWorkflows;
                }
                return _requirementWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_requirementWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementWorkflows != null)
                    {
                        _requirementWorkflows.CollectionChanged -= FixupRequirementWorkflows;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflow item in _requirementWorkflows)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementWorkflows = value;
                    if (_requirementWorkflows != null)
                    {
                        _requirementWorkflows.CollectionChanged += FixupRequirementWorkflows;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflow item in _requirementWorkflows)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementWorkflows");
                }
            }
        }
        private TrackableCollection<RequirementWorkflow> _requirementWorkflows;
    
        [DataMember]
        public TrackableCollection<RiskProbability> RiskProbabilities
        {
            get
            {
                if (_riskProbabilities == null)
                {
                    _riskProbabilities = new TrackableCollection<RiskProbability>();
                    _riskProbabilities.CollectionChanged += FixupRiskProbabilities;
                }
                return _riskProbabilities;
            }
            set
            {
                if (!ReferenceEquals(_riskProbabilities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskProbabilities != null)
                    {
                        _riskProbabilities.CollectionChanged -= FixupRiskProbabilities;
                    }
                    _riskProbabilities = value;
                    if (_riskProbabilities != null)
                    {
                        _riskProbabilities.CollectionChanged += FixupRiskProbabilities;
                    }
                    OnNavigationPropertyChanged("RiskProbabilities");
                }
            }
        }
        private TrackableCollection<RiskProbability> _riskProbabilities;
    
        [DataMember]
        public TrackableCollection<TaskPriority> TaskPriorities
        {
            get
            {
                if (_taskPriorities == null)
                {
                    _taskPriorities = new TrackableCollection<TaskPriority>();
                    _taskPriorities.CollectionChanged += FixupTaskPriorities;
                }
                return _taskPriorities;
            }
            set
            {
                if (!ReferenceEquals(_taskPriorities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskPriorities != null)
                    {
                        _taskPriorities.CollectionChanged -= FixupTaskPriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskPriority item in _taskPriorities)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskPriorities = value;
                    if (_taskPriorities != null)
                    {
                        _taskPriorities.CollectionChanged += FixupTaskPriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskPriority item in _taskPriorities)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskPriorities");
                }
            }
        }
        private TrackableCollection<TaskPriority> _taskPriorities;
    
        [DataMember]
        public TrackableCollection<TaskType> TaskTypes
        {
            get
            {
                if (_taskTypes == null)
                {
                    _taskTypes = new TrackableCollection<TaskType>();
                    _taskTypes.CollectionChanged += FixupTaskTypes;
                }
                return _taskTypes;
            }
            set
            {
                if (!ReferenceEquals(_taskTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskTypes != null)
                    {
                        _taskTypes.CollectionChanged -= FixupTaskTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskType item in _taskTypes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskTypes = value;
                    if (_taskTypes != null)
                    {
                        _taskTypes.CollectionChanged += FixupTaskTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskType item in _taskTypes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskTypes");
                }
            }
        }
        private TrackableCollection<TaskType> _taskTypes;
    
        [DataMember]
        public TrackableCollection<TaskWorkflow> TaskWorkflows
        {
            get
            {
                if (_taskWorkflows == null)
                {
                    _taskWorkflows = new TrackableCollection<TaskWorkflow>();
                    _taskWorkflows.CollectionChanged += FixupTaskWorkflows;
                }
                return _taskWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_taskWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskWorkflows != null)
                    {
                        _taskWorkflows.CollectionChanged -= FixupTaskWorkflows;
                    }
                    _taskWorkflows = value;
                    if (_taskWorkflows != null)
                    {
                        _taskWorkflows.CollectionChanged += FixupTaskWorkflows;
                    }
                    OnNavigationPropertyChanged("TaskWorkflows");
                }
            }
        }
        private TrackableCollection<TaskWorkflow> _taskWorkflows;
    
        [DataMember]
        public TrackableCollection<TestCasePriority> TestCasePriorities
        {
            get
            {
                if (_testCasePriorities == null)
                {
                    _testCasePriorities = new TrackableCollection<TestCasePriority>();
                    _testCasePriorities.CollectionChanged += FixupTestCasePriorities;
                }
                return _testCasePriorities;
            }
            set
            {
                if (!ReferenceEquals(_testCasePriorities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCasePriorities != null)
                    {
                        _testCasePriorities.CollectionChanged -= FixupTestCasePriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCasePriority item in _testCasePriorities)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCasePriorities = value;
                    if (_testCasePriorities != null)
                    {
                        _testCasePriorities.CollectionChanged += FixupTestCasePriorities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCasePriority item in _testCasePriorities)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCasePriorities");
                }
            }
        }
        private TrackableCollection<TestCasePriority> _testCasePriorities;
    
        [DataMember]
        public TrackableCollection<TestCaseType> TestCaseTypes
        {
            get
            {
                if (_testCaseTypes == null)
                {
                    _testCaseTypes = new TrackableCollection<TestCaseType>();
                    _testCaseTypes.CollectionChanged += FixupTestCaseTypes;
                }
                return _testCaseTypes;
            }
            set
            {
                if (!ReferenceEquals(_testCaseTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseTypes != null)
                    {
                        _testCaseTypes.CollectionChanged -= FixupTestCaseTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseType item in _testCaseTypes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseTypes = value;
                    if (_testCaseTypes != null)
                    {
                        _testCaseTypes.CollectionChanged += FixupTestCaseTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseType item in _testCaseTypes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseTypes");
                }
            }
        }
        private TrackableCollection<TestCaseType> _testCaseTypes;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflow> TestCaseWorkflows
        {
            get
            {
                if (_testCaseWorkflows == null)
                {
                    _testCaseWorkflows = new TrackableCollection<TestCaseWorkflow>();
                    _testCaseWorkflows.CollectionChanged += FixupTestCaseWorkflows;
                }
                return _testCaseWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_testCaseWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseWorkflows != null)
                    {
                        _testCaseWorkflows.CollectionChanged -= FixupTestCaseWorkflows;
                    }
                    _testCaseWorkflows = value;
                    if (_testCaseWorkflows != null)
                    {
                        _testCaseWorkflows.CollectionChanged += FixupTestCaseWorkflows;
                    }
                    OnNavigationPropertyChanged("TestCaseWorkflows");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflow> _testCaseWorkflows;
    
        [DataMember]
        public TrackableCollection<Workflow> IncidentWorkflows
        {
            get
            {
                if (_incidentWorkflows == null)
                {
                    _incidentWorkflows = new TrackableCollection<Workflow>();
                    _incidentWorkflows.CollectionChanged += FixupIncidentWorkflows;
                }
                return _incidentWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_incidentWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentWorkflows != null)
                    {
                        _incidentWorkflows.CollectionChanged -= FixupIncidentWorkflows;
                    }
                    _incidentWorkflows = value;
                    if (_incidentWorkflows != null)
                    {
                        _incidentWorkflows.CollectionChanged += FixupIncidentWorkflows;
                    }
                    OnNavigationPropertyChanged("IncidentWorkflows");
                }
            }
        }
        private TrackableCollection<Workflow> _incidentWorkflows;
    
        [DataMember]
        public TrackableCollection<NotificationArtifactTemplate> NotificationTemplates
        {
            get
            {
                if (_notificationTemplates == null)
                {
                    _notificationTemplates = new TrackableCollection<NotificationArtifactTemplate>();
                    _notificationTemplates.CollectionChanged += FixupNotificationTemplates;
                }
                return _notificationTemplates;
            }
            set
            {
                if (!ReferenceEquals(_notificationTemplates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationTemplates != null)
                    {
                        _notificationTemplates.CollectionChanged -= FixupNotificationTemplates;
                    }
                    _notificationTemplates = value;
                    if (_notificationTemplates != null)
                    {
                        _notificationTemplates.CollectionChanged += FixupNotificationTemplates;
                    }
                    OnNavigationPropertyChanged("NotificationTemplates");
                }
            }
        }
        private TrackableCollection<NotificationArtifactTemplate> _notificationTemplates;
    
        [DataMember]
        public TrackableCollection<NotificationEvent> NotificationEvents
        {
            get
            {
                if (_notificationEvents == null)
                {
                    _notificationEvents = new TrackableCollection<NotificationEvent>();
                    _notificationEvents.CollectionChanged += FixupNotificationEvents;
                }
                return _notificationEvents;
            }
            set
            {
                if (!ReferenceEquals(_notificationEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged -= FixupNotificationEvents;
                    }
                    _notificationEvents = value;
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged += FixupNotificationEvents;
                    }
                    OnNavigationPropertyChanged("NotificationEvents");
                }
            }
        }
        private TrackableCollection<NotificationEvent> _notificationEvents;
    
        [DataMember]
        public TrackableCollection<RiskImpact> RiskImpacts
        {
            get
            {
                if (_riskImpacts == null)
                {
                    _riskImpacts = new TrackableCollection<RiskImpact>();
                    _riskImpacts.CollectionChanged += FixupRiskImpacts;
                }
                return _riskImpacts;
            }
            set
            {
                if (!ReferenceEquals(_riskImpacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskImpacts != null)
                    {
                        _riskImpacts.CollectionChanged -= FixupRiskImpacts;
                    }
                    _riskImpacts = value;
                    if (_riskImpacts != null)
                    {
                        _riskImpacts.CollectionChanged += FixupRiskImpacts;
                    }
                    OnNavigationPropertyChanged("RiskImpacts");
                }
            }
        }
        private TrackableCollection<RiskImpact> _riskImpacts;
    
        [DataMember]
        public TrackableCollection<ProjectGroup> ProjectGroups
        {
            get
            {
                if (_projectGroups == null)
                {
                    _projectGroups = new TrackableCollection<ProjectGroup>();
                    _projectGroups.CollectionChanged += FixupProjectGroups;
                }
                return _projectGroups;
            }
            set
            {
                if (!ReferenceEquals(_projectGroups, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged -= FixupProjectGroups;
                    }
                    _projectGroups = value;
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged += FixupProjectGroups;
                    }
                    OnNavigationPropertyChanged("ProjectGroups");
                }
            }
        }
        private TrackableCollection<ProjectGroup> _projectGroups;
    
        [DataMember]
        public TrackableCollection<UserProfile> UsersLastOpened
        {
            get
            {
                if (_usersLastOpened == null)
                {
                    _usersLastOpened = new TrackableCollection<UserProfile>();
                    _usersLastOpened.CollectionChanged += FixupUsersLastOpened;
                }
                return _usersLastOpened;
            }
            set
            {
                if (!ReferenceEquals(_usersLastOpened, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_usersLastOpened != null)
                    {
                        _usersLastOpened.CollectionChanged -= FixupUsersLastOpened;
                    }
                    _usersLastOpened = value;
                    if (_usersLastOpened != null)
                    {
                        _usersLastOpened.CollectionChanged += FixupUsersLastOpened;
                    }
                    OnNavigationPropertyChanged("UsersLastOpened");
                }
            }
        }
        private TrackableCollection<UserProfile> _usersLastOpened;
    
        [DataMember]
        public TrackableCollection<ResourceCategory> ResourceCategories
        {
            get
            {
                if (_resourceCategories == null)
                {
                    _resourceCategories = new TrackableCollection<ResourceCategory>();
                    _resourceCategories.CollectionChanged += FixupResourceCategories;
                }
                return _resourceCategories;
            }
            set
            {
                if (!ReferenceEquals(_resourceCategories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_resourceCategories != null)
                    {
                        _resourceCategories.CollectionChanged -= FixupResourceCategories;
                    }
                    _resourceCategories = value;
                    if (_resourceCategories != null)
                    {
                        _resourceCategories.CollectionChanged += FixupResourceCategories;
                    }
                    OnNavigationPropertyChanged("ResourceCategories");
                }
            }
        }
        private TrackableCollection<ResourceCategory> _resourceCategories;
    
        [DataMember]
        public TrackableCollection<ResourceTrack> ResourceTracks
        {
            get
            {
                if (_resourceTracks == null)
                {
                    _resourceTracks = new TrackableCollection<ResourceTrack>();
                    _resourceTracks.CollectionChanged += FixupResourceTracks;
                }
                return _resourceTracks;
            }
            set
            {
                if (!ReferenceEquals(_resourceTracks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_resourceTracks != null)
                    {
                        _resourceTracks.CollectionChanged -= FixupResourceTracks;
                    }
                    _resourceTracks = value;
                    if (_resourceTracks != null)
                    {
                        _resourceTracks.CollectionChanged += FixupResourceTracks;
                    }
                    OnNavigationPropertyChanged("ResourceTracks");
                }
            }
        }
        private TrackableCollection<ResourceTrack> _resourceTracks;
    
        [DataMember]
        public TrackableCollection<RiskStatus> RiskStati
        {
            get
            {
                if (_riskStati == null)
                {
                    _riskStati = new TrackableCollection<RiskStatus>();
                    _riskStati.CollectionChanged += FixupRiskStati;
                }
                return _riskStati;
            }
            set
            {
                if (!ReferenceEquals(_riskStati, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskStati != null)
                    {
                        _riskStati.CollectionChanged -= FixupRiskStati;
                    }
                    _riskStati = value;
                    if (_riskStati != null)
                    {
                        _riskStati.CollectionChanged += FixupRiskStati;
                    }
                    OnNavigationPropertyChanged("RiskStati");
                }
            }
        }
        private TrackableCollection<RiskStatus> _riskStati;
    
        [DataMember]
        public TrackableCollection<RiskType> RiskTypes
        {
            get
            {
                if (_riskTypes == null)
                {
                    _riskTypes = new TrackableCollection<RiskType>();
                    _riskTypes.CollectionChanged += FixupRiskTypes;
                }
                return _riskTypes;
            }
            set
            {
                if (!ReferenceEquals(_riskTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskTypes != null)
                    {
                        _riskTypes.CollectionChanged -= FixupRiskTypes;
                    }
                    _riskTypes = value;
                    if (_riskTypes != null)
                    {
                        _riskTypes.CollectionChanged += FixupRiskTypes;
                    }
                    OnNavigationPropertyChanged("RiskTypes");
                }
            }
        }
        private TrackableCollection<RiskType> _riskTypes;
    
        [DataMember]
        public TrackableCollection<TimecardEntryType> TimecardEntryTypes
        {
            get
            {
                if (_timecardEntryTypes == null)
                {
                    _timecardEntryTypes = new TrackableCollection<TimecardEntryType>();
                    _timecardEntryTypes.CollectionChanged += FixupTimecardEntryTypes;
                }
                return _timecardEntryTypes;
            }
            set
            {
                if (!ReferenceEquals(_timecardEntryTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timecardEntryTypes != null)
                    {
                        _timecardEntryTypes.CollectionChanged -= FixupTimecardEntryTypes;
                    }
                    _timecardEntryTypes = value;
                    if (_timecardEntryTypes != null)
                    {
                        _timecardEntryTypes.CollectionChanged += FixupTimecardEntryTypes;
                    }
                    OnNavigationPropertyChanged("TimecardEntryTypes");
                }
            }
        }
        private TrackableCollection<TimecardEntryType> _timecardEntryTypes;
    
        [DataMember]
        public TrackableCollection<ProjectTemplateArtifactDefault> ArtifactDefaults
        {
            get
            {
                if (_artifactDefaults == null)
                {
                    _artifactDefaults = new TrackableCollection<ProjectTemplateArtifactDefault>();
                    _artifactDefaults.CollectionChanged += FixupArtifactDefaults;
                }
                return _artifactDefaults;
            }
            set
            {
                if (!ReferenceEquals(_artifactDefaults, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactDefaults != null)
                    {
                        _artifactDefaults.CollectionChanged -= FixupArtifactDefaults;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectTemplateArtifactDefault item in _artifactDefaults)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactDefaults = value;
                    if (_artifactDefaults != null)
                    {
                        _artifactDefaults.CollectionChanged += FixupArtifactDefaults;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectTemplateArtifactDefault item in _artifactDefaults)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactDefaults");
                }
            }
        }
        private TrackableCollection<ProjectTemplateArtifactDefault> _artifactDefaults;
    
        [DataMember]
        public TrackableCollection<RiskWorkflow> RiskWorkflows
        {
            get
            {
                if (_riskWorkflows == null)
                {
                    _riskWorkflows = new TrackableCollection<RiskWorkflow>();
                    _riskWorkflows.CollectionChanged += FixupRiskWorkflows;
                }
                return _riskWorkflows;
            }
            set
            {
                if (!ReferenceEquals(_riskWorkflows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskWorkflows != null)
                    {
                        _riskWorkflows.CollectionChanged -= FixupRiskWorkflows;
                    }
                    _riskWorkflows = value;
                    if (_riskWorkflows != null)
                    {
                        _riskWorkflows.CollectionChanged += FixupRiskWorkflows;
                    }
                    OnNavigationPropertyChanged("RiskWorkflows");
                }
            }
        }
        private TrackableCollection<RiskWorkflow> _riskWorkflows;
    
        [DataMember]
        public TrackableCollection<User> Owners
        {
            get
            {
                if (_owners == null)
                {
                    _owners = new TrackableCollection<User>();
                    _owners.CollectionChanged += FixupOwners;
                }
                return _owners;
            }
            set
            {
                if (!ReferenceEquals(_owners, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_owners != null)
                    {
                        _owners.CollectionChanged -= FixupOwners;
                    }
                    _owners = value;
                    if (_owners != null)
                    {
                        _owners.CollectionChanged += FixupOwners;
                    }
                    OnNavigationPropertyChanged("Owners");
                }
            }
        }
        private TrackableCollection<User> _owners;
    
        [DataMember]
        public TrackableCollection<ProjectTemplateSettingValue> Settings
        {
            get
            {
                if (_settings == null)
                {
                    _settings = new TrackableCollection<ProjectTemplateSettingValue>();
                    _settings.CollectionChanged += FixupSettings;
                }
                return _settings;
            }
            set
            {
                if (!ReferenceEquals(_settings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_settings != null)
                    {
                        _settings.CollectionChanged -= FixupSettings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectTemplateSettingValue item in _settings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _settings = value;
                    if (_settings != null)
                    {
                        _settings.CollectionChanged += FixupSettings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectTemplateSettingValue item in _settings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Settings");
                }
            }
        }
        private TrackableCollection<ProjectTemplateSettingValue> _settings;
    
        [DataMember]
        public TrackableCollection<RiskDetectability> RiskDetectabilities
        {
            get
            {
                if (_riskDetectabilities == null)
                {
                    _riskDetectabilities = new TrackableCollection<RiskDetectability>();
                    _riskDetectabilities.CollectionChanged += FixupRiskDetectabilities;
                }
                return _riskDetectabilities;
            }
            set
            {
                if (!ReferenceEquals(_riskDetectabilities, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskDetectabilities != null)
                    {
                        _riskDetectabilities.CollectionChanged -= FixupRiskDetectabilities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskDetectability item in _riskDetectabilities)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskDetectabilities = value;
                    if (_riskDetectabilities != null)
                    {
                        _riskDetectabilities.CollectionChanged += FixupRiskDetectabilities;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskDetectability item in _riskDetectabilities)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskDetectabilities");
                }
            }
        }
        private TrackableCollection<RiskDetectability> _riskDetectabilities;
    
        [DataMember]
        public TrackableCollection<StandardTaskSet> StandardTaskSets
        {
            get
            {
                if (_standardTaskSets == null)
                {
                    _standardTaskSets = new TrackableCollection<StandardTaskSet>();
                    _standardTaskSets.CollectionChanged += FixupStandardTaskSets;
                }
                return _standardTaskSets;
            }
            set
            {
                if (!ReferenceEquals(_standardTaskSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_standardTaskSets != null)
                    {
                        _standardTaskSets.CollectionChanged -= FixupStandardTaskSets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (StandardTaskSet item in _standardTaskSets)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _standardTaskSets = value;
                    if (_standardTaskSets != null)
                    {
                        _standardTaskSets.CollectionChanged += FixupStandardTaskSets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (StandardTaskSet item in _standardTaskSets)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("StandardTaskSets");
                }
            }
        }
        private TrackableCollection<StandardTaskSet> _standardTaskSets;
    
        [DataMember]
        public TrackableCollection<StandardTestCaseSet> StandardTestCaseSets
        {
            get
            {
                if (_standardTestCaseSets == null)
                {
                    _standardTestCaseSets = new TrackableCollection<StandardTestCaseSet>();
                    _standardTestCaseSets.CollectionChanged += FixupStandardTestCaseSets;
                }
                return _standardTestCaseSets;
            }
            set
            {
                if (!ReferenceEquals(_standardTestCaseSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_standardTestCaseSets != null)
                    {
                        _standardTestCaseSets.CollectionChanged -= FixupStandardTestCaseSets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (StandardTestCaseSet item in _standardTestCaseSets)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _standardTestCaseSets = value;
                    if (_standardTestCaseSets != null)
                    {
                        _standardTestCaseSets.CollectionChanged += FixupStandardTestCaseSets;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (StandardTestCaseSet item in _standardTestCaseSets)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("StandardTestCaseSets");
                }
            }
        }
        private TrackableCollection<StandardTestCaseSet> _standardTestCaseSets;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomProperties.Clear();
            CustomPropertyLists.Clear();
            DocumentStati.Clear();
            DocumentTypes.Clear();
            DocumentWorkflows.Clear();
            Importances.Clear();
            IncidentPriorities.Clear();
            IncidentSeverities.Clear();
            IncidentStati.Clear();
            IncidentTypes.Clear();
            Projects.Clear();
            ReleaseTypeWorkflows.Clear();
            ReleaseWorkflows.Clear();
            RequirementTypes.Clear();
            RequirementWorkflows.Clear();
            RiskProbabilities.Clear();
            TaskPriorities.Clear();
            TaskTypes.Clear();
            TaskWorkflows.Clear();
            TestCasePriorities.Clear();
            TestCaseTypes.Clear();
            TestCaseWorkflows.Clear();
            IncidentWorkflows.Clear();
            NotificationTemplates.Clear();
            NotificationEvents.Clear();
            RiskImpacts.Clear();
            ProjectGroups.Clear();
            UsersLastOpened.Clear();
            ResourceCategories.Clear();
            ResourceTracks.Clear();
            RiskStati.Clear();
            RiskTypes.Clear();
            TimecardEntryTypes.Clear();
            ArtifactDefaults.Clear();
            RiskWorkflows.Clear();
            Owners.Clear();
            Settings.Clear();
            RiskDetectabilities.Clear();
            StandardTaskSets.Clear();
            StandardTestCaseSets.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomProperty item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomProperties", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomProperties", item);
                    }
                }
            }
        }
    
        private void FixupCustomPropertyLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomPropertyList item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomPropertyLists", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomPropertyList item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomPropertyLists", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDocumentStati(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentStatus item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentStati", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentStatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentStati", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDocumentTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentTypes", item);
                    }
                }
            }
        }
    
        private void FixupDocumentWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentWorkflows", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentWorkflows", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupImportances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Importance item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Importances", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Importance item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Importances", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentPriorities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentPriority item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentPriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentPriority item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentPriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentSeverities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentSeverity item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentSeverities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentSeverity item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentSeverities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentStati(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentStatus item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentStati", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentStatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentStati", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.Template = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.Template, this))
                    {
                        item.Template = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects", item);
                    }
                }
            }
        }
    
        private void FixupReleaseTypeWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTypeWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseTypeWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTypeWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseTypeWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupReleaseWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupRequirementTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementWorkflows", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementWorkflows", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskProbabilities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskProbability item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskProbabilities", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskProbability item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskProbabilities", item);
                    }
                }
            }
        }
    
        private void FixupTaskPriorities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskPriority item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskPriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskPriority item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskPriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupTestCasePriorities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCasePriority item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCasePriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCasePriority item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCasePriorities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupIncidentWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Workflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Workflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupNotificationTemplates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationArtifactTemplate item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationTemplates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationArtifactTemplate item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationTemplates", item);
                    }
                }
            }
        }
    
        private void FixupNotificationEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEvent item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationEvents", item);
                    }
                }
            }
        }
    
        private void FixupRiskImpacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskImpact item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskImpacts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskImpact item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskImpacts", item);
                    }
                }
            }
        }
    
        private void FixupProjectGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroup item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectGroups", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectGroups", item);
                    }
                }
            }
        }
    
        private void FixupUsersLastOpened(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserProfile item in e.NewItems)
                {
                    item.LastOpenedProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UsersLastOpened", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserProfile item in e.OldItems)
                {
                    if (ReferenceEquals(item.LastOpenedProjectTemplate, this))
                    {
                        item.LastOpenedProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UsersLastOpened", item);
                    }
                }
            }
        }
    
        private void FixupResourceCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ResourceCategory item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ResourceCategories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ResourceCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ResourceCategories", item);
                    }
                }
            }
        }
    
        private void FixupResourceTracks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ResourceTrack item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ResourceTracks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ResourceTrack item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ResourceTracks", item);
                    }
                }
            }
        }
    
        private void FixupRiskStati(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskStatus item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskStati", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskStatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskStati", item);
                    }
                }
            }
        }
    
        private void FixupRiskTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskTypes", item);
                    }
                }
            }
        }
    
        private void FixupTimecardEntryTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntryType item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimecardEntryTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntryType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimecardEntryTypes", item);
                    }
                }
            }
        }
    
        private void FixupArtifactDefaults(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectTemplateArtifactDefault item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactDefaults", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectTemplateArtifactDefault item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactDefaults", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskWorkflows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflow item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskWorkflows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflow item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskWorkflows", item);
                    }
                }
            }
        }
    
        private void FixupOwners(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.OwnedProjectTemplates.Contains(this))
                    {
                        item.OwnedProjectTemplates.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Owners", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.OwnedProjectTemplates.Contains(this))
                    {
                        item.OwnedProjectTemplates.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Owners", item);
                    }
                }
            }
        }
    
        private void FixupSettings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectTemplateSettingValue item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Settings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectTemplateSettingValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Settings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskDetectabilities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskDetectability item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskDetectabilities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskDetectability item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskDetectabilities", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupStandardTaskSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (StandardTaskSet item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("StandardTaskSets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StandardTaskSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("StandardTaskSets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupStandardTestCaseSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (StandardTestCaseSet item in e.NewItems)
                {
                    item.ProjectTemplate = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("StandardTestCaseSets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StandardTestCaseSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectTemplate, this))
                    {
                        item.ProjectTemplate = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("StandardTestCaseSets", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
