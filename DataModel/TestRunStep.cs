//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ExecutionStatus))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestStep))]
    [KnownType(typeof(Incident))]
    public partial class TestRunStep: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestRunStepId
        {
            get { return _testRunStepId; }
            set
            {
                if (_testRunStepId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestRunStepId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testRunStepId = value;
                    OnPropertyChanged("TestRunStepId");
                }
            }
        }
        private int _testRunStepId;
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatusId", _executionStatusId);
                    if (!IsDeserializing)
                    {
                        if (ExecutionStatus != null && ExecutionStatus.ExecutionStatusId != value)
                        {
                            ExecutionStatus = null;
                        }
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public Nullable<int> TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private Nullable<int> _testCaseId;
    
        [DataMember]
        public Nullable<int> TestStepId
        {
            get { return _testStepId; }
            set
            {
                if (_testStepId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestStepId", _testStepId);
                    if (!IsDeserializing)
                    {
                        if (TestStep != null && TestStep.TestStepId != value)
                        {
                            TestStep = null;
                        }
                    }
                    _testStepId = value;
                    OnPropertyChanged("TestStepId");
                }
            }
        }
        private Nullable<int> _testStepId;
    
        [DataMember]
        public int TestRunId
        {
            get { return _testRunId; }
            set
            {
                if (_testRunId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestRunId", _testRunId);
                    if (!IsDeserializing)
                    {
                        if (TestRun != null && TestRun.TestRunId != value)
                        {
                            TestRun = null;
                        }
                    }
                    _testRunId = value;
                    OnPropertyChanged("TestRunId");
                }
            }
        }
        private int _testRunId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public string ExpectedResult
        {
            get { return _expectedResult; }
            set
            {
                if (_expectedResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ExpectedResult", _expectedResult);
                    _expectedResult = value;
                    OnPropertyChanged("ExpectedResult");
                }
            }
        }
        private string _expectedResult;
    
        [DataMember]
        public string SampleData
        {
            get { return _sampleData; }
            set
            {
                if (_sampleData != value)
                {
                    ChangeTracker.RecordOriginalValue("SampleData", _sampleData);
                    _sampleData = value;
                    OnPropertyChanged("SampleData");
                }
            }
        }
        private string _sampleData;
    
        [DataMember]
        public string ActualResult
        {
            get { return _actualResult; }
            set
            {
                if (_actualResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualResult", _actualResult);
                    _actualResult = value;
                    OnPropertyChanged("ActualResult");
                }
            }
        }
        private string _actualResult;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ExecutionStatus ExecutionStatus
        {
            get { return _executionStatus; }
            set
            {
                if (!ReferenceEquals(_executionStatus, value))
                {
                    var previousValue = _executionStatus;
                    _executionStatus = value;
                    FixupExecutionStatus(previousValue);
                    OnNavigationPropertyChanged("ExecutionStatus");
                }
            }
        }
        private ExecutionStatus _executionStatus;
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public TestRun TestRun
        {
            get { return _testRun; }
            set
            {
                if (!ReferenceEquals(_testRun, value))
                {
                    var previousValue = _testRun;
                    _testRun = value;
                    FixupTestRun(previousValue);
                    OnNavigationPropertyChanged("TestRun");
                }
            }
        }
        private TestRun _testRun;
    
        [DataMember]
        public TestStep TestStep
        {
            get { return _testStep; }
            set
            {
                if (!ReferenceEquals(_testStep, value))
                {
                    var previousValue = _testStep;
                    _testStep = value;
                    FixupTestStep(previousValue);
                    OnNavigationPropertyChanged("TestStep");
                }
            }
        }
        private TestStep _testStep;
    
        [DataMember]
        public TrackableCollection<Incident> Incidents
        {
            get
            {
                if (_incidents == null)
                {
                    _incidents = new TrackableCollection<Incident>();
                    _incidents.CollectionChanged += FixupIncidents;
                }
                return _incidents;
            }
            set
            {
                if (!ReferenceEquals(_incidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged -= FixupIncidents;
                    }
                    _incidents = value;
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged += FixupIncidents;
                    }
                    OnNavigationPropertyChanged("Incidents");
                }
            }
        }
        private TrackableCollection<Incident> _incidents;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ExecutionStatus = null;
            TestCase = null;
            TestRun = null;
            TestStep = null;
            Incidents.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupExecutionStatus(ExecutionStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRunSteps.Contains(this))
            {
                previousValue.TestRunSteps.Remove(this);
            }
    
            if (ExecutionStatus != null)
            {
                if (!ExecutionStatus.TestRunSteps.Contains(this))
                {
                    ExecutionStatus.TestRunSteps.Add(this);
                }
    
                ExecutionStatusId = ExecutionStatus.ExecutionStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExecutionStatus")
                    && (ChangeTracker.OriginalValues["ExecutionStatus"] == ExecutionStatus))
                {
                    ChangeTracker.OriginalValues.Remove("ExecutionStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatus", previousValue);
                }
                if (ExecutionStatus != null && !ExecutionStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExecutionStatus.StartTracking();
                }
            }
        }
    
        private void FixupTestCase(TestCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRunSteps.Contains(this))
            {
                previousValue.TestRunSteps.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.TestRunSteps.Contains(this))
                {
                    TestCase.TestRunSteps.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            else if (!skipKeys)
            {
                TestCaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupTestRun(TestRun previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRunSteps.Contains(this))
            {
                previousValue.TestRunSteps.Remove(this);
            }
    
            if (TestRun != null)
            {
                if (!TestRun.TestRunSteps.Contains(this))
                {
                    TestRun.TestRunSteps.Add(this);
                }
    
                TestRunId = TestRun.TestRunId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestRun")
                    && (ChangeTracker.OriginalValues["TestRun"] == TestRun))
                {
                    ChangeTracker.OriginalValues.Remove("TestRun");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestRun", previousValue);
                }
                if (TestRun != null && !TestRun.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestRun.StartTracking();
                }
            }
        }
    
        private void FixupTestStep(TestStep previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRunSteps.Contains(this))
            {
                previousValue.TestRunSteps.Remove(this);
            }
    
            if (TestStep != null)
            {
                if (!TestStep.TestRunSteps.Contains(this))
                {
                    TestStep.TestRunSteps.Add(this);
                }
    
                TestStepId = TestStep.TestStepId;
            }
            else if (!skipKeys)
            {
                TestStepId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestStep")
                    && (ChangeTracker.OriginalValues["TestStep"] == TestStep))
                {
                    ChangeTracker.OriginalValues.Remove("TestStep");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestStep", previousValue);
                }
                if (TestStep != null && !TestStep.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestStep.StartTracking();
                }
            }
        }
    
        private void FixupIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    if (!item.TestRunSteps.Contains(this))
                    {
                        item.TestRunSteps.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Incidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (item.TestRunSteps.Contains(this))
                    {
                        item.TestRunSteps.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Incidents", item);
                    }
                }
            }
        }

        #endregion

    }
}
