//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int USER_ID
        {
            get { return _uSER_ID; }
            set
            {
                if (_uSER_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'USER_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _uSER_ID = value;
                    OnPropertyChanged("USER_ID");
                }
            }
        }
        private int _uSER_ID;
    
        [DataMember]
        public string USER_NAME
        {
            get { return _uSER_NAME; }
            set
            {
                if (_uSER_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'USER_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _uSER_NAME = value;
                    OnPropertyChanged("USER_NAME");
                }
            }
        }
        private string _uSER_NAME;
    
        [DataMember]
        public string EMAIL_ADDRESS
        {
            get { return _eMAIL_ADDRESS; }
            set
            {
                if (_eMAIL_ADDRESS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EMAIL_ADDRESS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eMAIL_ADDRESS = value;
                    OnPropertyChanged("EMAIL_ADDRESS");
                }
            }
        }
        private string _eMAIL_ADDRESS;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public System.DateTime CREATION_DATE
        {
            get { return _cREATION_DATE; }
            set
            {
                if (_cREATION_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATION_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATION_DATE = value;
                    OnPropertyChanged("CREATION_DATE");
                }
            }
        }
        private System.DateTime _cREATION_DATE;
    
        [DataMember]
        public string LDAP_DN
        {
            get { return _lDAP_DN; }
            set
            {
                if (_lDAP_DN != value)
                {
                    ChangeTracker.RecordOriginalValue("LDAP_DN", _lDAP_DN);
                    _lDAP_DN = value;
                    OnPropertyChanged("LDAP_DN");
                }
            }
        }
        private string _lDAP_DN;
    
        [DataMember]
        public string FIRST_NAME
        {
            get { return _fIRST_NAME; }
            set
            {
                if (_fIRST_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FIRST_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fIRST_NAME = value;
                    OnPropertyChanged("FIRST_NAME");
                }
            }
        }
        private string _fIRST_NAME;
    
        [DataMember]
        public string LAST_NAME
        {
            get { return _lAST_NAME; }
            set
            {
                if (_lAST_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LAST_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lAST_NAME = value;
                    OnPropertyChanged("LAST_NAME");
                }
            }
        }
        private string _lAST_NAME;
    
        [DataMember]
        public string MIDDLE_INITIAL
        {
            get { return _mIDDLE_INITIAL; }
            set
            {
                if (_mIDDLE_INITIAL != value)
                {
                    ChangeTracker.RecordOriginalValue("MIDDLE_INITIAL", _mIDDLE_INITIAL);
                    _mIDDLE_INITIAL = value;
                    OnPropertyChanged("MIDDLE_INITIAL");
                }
            }
        }
        private string _mIDDLE_INITIAL;
    
        [DataMember]
        public string DEPARTMENT
        {
            get { return _dEPARTMENT; }
            set
            {
                if (_dEPARTMENT != value)
                {
                    ChangeTracker.RecordOriginalValue("DEPARTMENT", _dEPARTMENT);
                    _dEPARTMENT = value;
                    OnPropertyChanged("DEPARTMENT");
                }
            }
        }
        private string _dEPARTMENT;
    
        [DataMember]
        public System.DateTime LAST_UPDATE_DATE
        {
            get { return _lAST_UPDATE_DATE; }
            set
            {
                if (_lAST_UPDATE_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LAST_UPDATE_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lAST_UPDATE_DATE = value;
                    OnPropertyChanged("LAST_UPDATE_DATE");
                }
            }
        }
        private System.DateTime _lAST_UPDATE_DATE;
    
        [DataMember]
        public string TIMEZONE
        {
            get { return _tIMEZONE; }
            set
            {
                if (_tIMEZONE != value)
                {
                    ChangeTracker.RecordOriginalValue("TIMEZONE", _tIMEZONE);
                    _tIMEZONE = value;
                    OnPropertyChanged("TIMEZONE");
                }
            }
        }
        private string _tIMEZONE;
    
        [DataMember]
        public Nullable<int> LAST_OPENED_PROJECT_ID
        {
            get { return _lAST_OPENED_PROJECT_ID; }
            set
            {
                if (_lAST_OPENED_PROJECT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("LAST_OPENED_PROJECT_ID", _lAST_OPENED_PROJECT_ID);
                    _lAST_OPENED_PROJECT_ID = value;
                    OnPropertyChanged("LAST_OPENED_PROJECT_ID");
                }
            }
        }
        private Nullable<int> _lAST_OPENED_PROJECT_ID;
    
        [DataMember]
        public bool IS_APPROVED
        {
            get { return _iS_APPROVED; }
            set
            {
                if (_iS_APPROVED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_APPROVED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_APPROVED = value;
                    OnPropertyChanged("IS_APPROVED");
                }
            }
        }
        private bool _iS_APPROVED;
    
        [DataMember]
        public Nullable<System.DateTime> LAST_LOGIN_DATE
        {
            get { return _lAST_LOGIN_DATE; }
            set
            {
                if (_lAST_LOGIN_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("LAST_LOGIN_DATE", _lAST_LOGIN_DATE);
                    _lAST_LOGIN_DATE = value;
                    OnPropertyChanged("LAST_LOGIN_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _lAST_LOGIN_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> LAST_ACTIVITY_DATE
        {
            get { return _lAST_ACTIVITY_DATE; }
            set
            {
                if (_lAST_ACTIVITY_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("LAST_ACTIVITY_DATE", _lAST_ACTIVITY_DATE);
                    _lAST_ACTIVITY_DATE = value;
                    OnPropertyChanged("LAST_ACTIVITY_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _lAST_ACTIVITY_DATE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
