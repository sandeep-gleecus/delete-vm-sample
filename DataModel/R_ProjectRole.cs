//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_ProjectRole: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PROJECT_ROLE_ID
        {
            get { return _pROJECT_ROLE_ID; }
            set
            {
                if (_pROJECT_ROLE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ROLE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ROLE_ID = value;
                    OnPropertyChanged("PROJECT_ROLE_ID");
                }
            }
        }
        private int _pROJECT_ROLE_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public bool IS_ADMIN
        {
            get { return _iS_ADMIN; }
            set
            {
                if (_iS_ADMIN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ADMIN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ADMIN = value;
                    OnPropertyChanged("IS_ADMIN");
                }
            }
        }
        private bool _iS_ADMIN;
    
        [DataMember]
        public bool IS_DISCUSSIONS_ADD
        {
            get { return _iS_DISCUSSIONS_ADD; }
            set
            {
                if (_iS_DISCUSSIONS_ADD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_DISCUSSIONS_ADD' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_DISCUSSIONS_ADD = value;
                    OnPropertyChanged("IS_DISCUSSIONS_ADD");
                }
            }
        }
        private bool _iS_DISCUSSIONS_ADD;
    
        [DataMember]
        public bool IS_SOURCE_CODE_VIEW
        {
            get { return _iS_SOURCE_CODE_VIEW; }
            set
            {
                if (_iS_SOURCE_CODE_VIEW != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_SOURCE_CODE_VIEW' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_SOURCE_CODE_VIEW = value;
                    OnPropertyChanged("IS_SOURCE_CODE_VIEW");
                }
            }
        }
        private bool _iS_SOURCE_CODE_VIEW;
    
        [DataMember]
        public bool IS_SOURCE_CODE_EDIT
        {
            get { return _iS_SOURCE_CODE_EDIT; }
            set
            {
                if (_iS_SOURCE_CODE_EDIT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_SOURCE_CODE_EDIT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_SOURCE_CODE_EDIT = value;
                    OnPropertyChanged("IS_SOURCE_CODE_EDIT");
                }
            }
        }
        private bool _iS_SOURCE_CODE_EDIT;
    
        [DataMember]
        public bool IS_DOCUMENT_FOLDERS_EDIT
        {
            get { return _iS_DOCUMENT_FOLDERS_EDIT; }
            set
            {
                if (_iS_DOCUMENT_FOLDERS_EDIT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_DOCUMENT_FOLDERS_EDIT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_DOCUMENT_FOLDERS_EDIT = value;
                    OnPropertyChanged("IS_DOCUMENT_FOLDERS_EDIT");
                }
            }
        }
        private bool _iS_DOCUMENT_FOLDERS_EDIT;
    
        [DataMember]
        public bool IS_LIMITED_VIEW
        {
            get { return _iS_LIMITED_VIEW; }
            set
            {
                if (_iS_LIMITED_VIEW != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_LIMITED_VIEW' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_LIMITED_VIEW = value;
                    OnPropertyChanged("IS_LIMITED_VIEW");
                }
            }
        }
        private bool _iS_LIMITED_VIEW;
    
        [DataMember]
        public bool IS_TEMPLATE_ADMIN
        {
            get { return _iS_TEMPLATE_ADMIN; }
            set
            {
                if (_iS_TEMPLATE_ADMIN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_TEMPLATE_ADMIN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_TEMPLATE_ADMIN = value;
                    OnPropertyChanged("IS_TEMPLATE_ADMIN");
                }
            }
        }
        private bool _iS_TEMPLATE_ADMIN;
    
        [DataMember]
        public Nullable<int> ARTIFACT_TYPE_ID
        {
            get { return _aRTIFACT_TYPE_ID; }
            set
            {
                if (_aRTIFACT_TYPE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("ARTIFACT_TYPE_ID", _aRTIFACT_TYPE_ID);
                    _aRTIFACT_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_TYPE_ID");
                }
            }
        }
        private Nullable<int> _aRTIFACT_TYPE_ID;
    
        [DataMember]
        public string ARTIFACT
        {
            get { return _aRTIFACT; }
            set
            {
                if (_aRTIFACT != value)
                {
                    ChangeTracker.RecordOriginalValue("ARTIFACT", _aRTIFACT);
                    _aRTIFACT = value;
                    OnPropertyChanged("ARTIFACT");
                }
            }
        }
        private string _aRTIFACT;
    
        [DataMember]
        public string PERMISSION
        {
            get { return _pERMISSION; }
            set
            {
                if (_pERMISSION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PERMISSION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pERMISSION = value;
                    OnPropertyChanged("PERMISSION");
                }
            }
        }
        private string _pERMISSION;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
