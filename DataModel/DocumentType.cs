//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProjectAttachment))]
    [KnownType(typeof(DocumentWorkflow))]
    [KnownType(typeof(ProjectTemplate))]
    public partial class DocumentType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DocumentTypeId
        {
            get { return _documentTypeId; }
            set
            {
                if (_documentTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DocumentTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _documentTypeId = value;
                    OnPropertyChanged("DocumentTypeId");
                }
            }
        }
        private int _documentTypeId;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (ProjectTemplate != null && ProjectTemplate.ProjectTemplateId != value)
                        {
                            ProjectTemplate = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public int DocumentWorkflowId
        {
            get { return _documentWorkflowId; }
            set
            {
                if (_documentWorkflowId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentWorkflowId", _documentWorkflowId);
                    if (!IsDeserializing)
                    {
                        if (Workflow != null && Workflow.DocumentWorkflowId != value)
                        {
                            Workflow = null;
                        }
                    }
                    _documentWorkflowId = value;
                    OnPropertyChanged("DocumentWorkflowId");
                }
            }
        }
        private int _documentWorkflowId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDefault", _isDefault);
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _isDefault;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ProjectAttachment> ProjectDocuments
        {
            get
            {
                if (_projectDocuments == null)
                {
                    _projectDocuments = new TrackableCollection<ProjectAttachment>();
                    _projectDocuments.CollectionChanged += FixupProjectDocuments;
                }
                return _projectDocuments;
            }
            set
            {
                if (!ReferenceEquals(_projectDocuments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectDocuments != null)
                    {
                        _projectDocuments.CollectionChanged -= FixupProjectDocuments;
                    }
                    _projectDocuments = value;
                    if (_projectDocuments != null)
                    {
                        _projectDocuments.CollectionChanged += FixupProjectDocuments;
                    }
                    OnNavigationPropertyChanged("ProjectDocuments");
                }
            }
        }
        private TrackableCollection<ProjectAttachment> _projectDocuments;
    
        [DataMember]
        public DocumentWorkflow Workflow
        {
            get { return _workflow; }
            set
            {
                if (!ReferenceEquals(_workflow, value))
                {
                    var previousValue = _workflow;
                    _workflow = value;
                    FixupWorkflow(previousValue);
                    OnNavigationPropertyChanged("Workflow");
                }
            }
        }
        private DocumentWorkflow _workflow;
    
        [DataMember]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set
            {
                if (!ReferenceEquals(_projectTemplate, value))
                {
                    var previousValue = _projectTemplate;
                    _projectTemplate = value;
                    FixupProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("ProjectTemplate");
                }
            }
        }
        private ProjectTemplate _projectTemplate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProjectDocuments.Clear();
            Workflow = null;
            ProjectTemplate = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupWorkflow(DocumentWorkflow previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DocumentTypes.Contains(this))
            {
                previousValue.DocumentTypes.Remove(this);
            }
    
            if (Workflow != null)
            {
                if (!Workflow.DocumentTypes.Contains(this))
                {
                    Workflow.DocumentTypes.Add(this);
                }
    
                DocumentWorkflowId = Workflow.DocumentWorkflowId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Workflow")
                    && (ChangeTracker.OriginalValues["Workflow"] == Workflow))
                {
                    ChangeTracker.OriginalValues.Remove("Workflow");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Workflow", previousValue);
                }
                if (Workflow != null && !Workflow.ChangeTracker.ChangeTrackingEnabled)
                {
                    Workflow.StartTracking();
                }
            }
        }
    
        private void FixupProjectTemplate(ProjectTemplate previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DocumentTypes.Contains(this))
            {
                previousValue.DocumentTypes.Remove(this);
            }
    
            if (ProjectTemplate != null)
            {
                if (!ProjectTemplate.DocumentTypes.Contains(this))
                {
                    ProjectTemplate.DocumentTypes.Add(this);
                }
    
                ProjectTemplateId = ProjectTemplate.ProjectTemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectTemplate")
                    && (ChangeTracker.OriginalValues["ProjectTemplate"] == ProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplate", previousValue);
                }
                if (ProjectTemplate != null && !ProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectTemplate.StartTracking();
                }
            }
        }
    
        private void FixupProjectDocuments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectAttachment item in e.NewItems)
                {
                    item.DocumentType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectDocuments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.DocumentType, this))
                    {
                        item.DocumentType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectDocuments", item);
                    }
                }
            }
        }

        #endregion

    }
}
