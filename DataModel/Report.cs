//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ReportCategory))]
    [KnownType(typeof(ReportCustomSection))]
    [KnownType(typeof(SavedReport))]
    [KnownType(typeof(ReportFormat))]
    [KnownType(typeof(ReportSectionInstance))]
    [KnownType(typeof(ReportGenerated))]
    public partial class Report: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReportId
        {
            get { return _reportId; }
            set
            {
                if (_reportId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReportId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportId = value;
                    OnPropertyChanged("ReportId");
                }
            }
        }
        private int _reportId;
    
        [DataMember]
        public int ReportCategoryId
        {
            get { return _reportCategoryId; }
            set
            {
                if (_reportCategoryId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportCategoryId", _reportCategoryId);
                    if (!IsDeserializing)
                    {
                        if (Category != null && Category.ReportCategoryId != value)
                        {
                            Category = null;
                        }
                    }
                    _reportCategoryId = value;
                    OnPropertyChanged("ReportCategoryId");
                }
            }
        }
        private int _reportCategoryId;
    
        [DataMember]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    ChangeTracker.RecordOriginalValue("Token", _token);
                    _token = value;
                    OnPropertyChanged("Token");
                }
            }
        }
        private string _token;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Header
        {
            get { return _header; }
            set
            {
                if (_header != value)
                {
                    ChangeTracker.RecordOriginalValue("Header", _header);
                    _header = value;
                    OnPropertyChanged("Header");
                }
            }
        }
        private string _header;
    
        [DataMember]
        public string Footer
        {
            get { return _footer; }
            set
            {
                if (_footer != value)
                {
                    ChangeTracker.RecordOriginalValue("Footer", _footer);
                    _footer = value;
                    OnPropertyChanged("Footer");
                }
            }
        }
        private string _footer;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ReportCategory Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                    OnNavigationPropertyChanged("Category");
                }
            }
        }
        private ReportCategory _category;
    
        [DataMember]
        public TrackableCollection<ReportCustomSection> CustomSections
        {
            get
            {
                if (_customSections == null)
                {
                    _customSections = new TrackableCollection<ReportCustomSection>();
                    _customSections.CollectionChanged += FixupCustomSections;
                }
                return _customSections;
            }
            set
            {
                if (!ReferenceEquals(_customSections, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customSections != null)
                    {
                        _customSections.CollectionChanged -= FixupCustomSections;
                    }
                    _customSections = value;
                    if (_customSections != null)
                    {
                        _customSections.CollectionChanged += FixupCustomSections;
                    }
                    OnNavigationPropertyChanged("CustomSections");
                }
            }
        }
        private TrackableCollection<ReportCustomSection> _customSections;
    
        [DataMember]
        public TrackableCollection<SavedReport> SavedReport
        {
            get
            {
                if (_savedReport == null)
                {
                    _savedReport = new TrackableCollection<SavedReport>();
                    _savedReport.CollectionChanged += FixupSavedReport;
                }
                return _savedReport;
            }
            set
            {
                if (!ReferenceEquals(_savedReport, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedReport != null)
                    {
                        _savedReport.CollectionChanged -= FixupSavedReport;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SavedReport item in _savedReport)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _savedReport = value;
                    if (_savedReport != null)
                    {
                        _savedReport.CollectionChanged += FixupSavedReport;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SavedReport item in _savedReport)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SavedReport");
                }
            }
        }
        private TrackableCollection<SavedReport> _savedReport;
    
        [DataMember]
        public TrackableCollection<ReportFormat> Formats
        {
            get
            {
                if (_formats == null)
                {
                    _formats = new TrackableCollection<ReportFormat>();
                    _formats.CollectionChanged += FixupFormats;
                }
                return _formats;
            }
            set
            {
                if (!ReferenceEquals(_formats, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_formats != null)
                    {
                        _formats.CollectionChanged -= FixupFormats;
                    }
                    _formats = value;
                    if (_formats != null)
                    {
                        _formats.CollectionChanged += FixupFormats;
                    }
                    OnNavigationPropertyChanged("Formats");
                }
            }
        }
        private TrackableCollection<ReportFormat> _formats;
    
        [DataMember]
        public TrackableCollection<ReportSectionInstance> SectionInstances
        {
            get
            {
                if (_sectionInstances == null)
                {
                    _sectionInstances = new TrackableCollection<ReportSectionInstance>();
                    _sectionInstances.CollectionChanged += FixupSectionInstances;
                }
                return _sectionInstances;
            }
            set
            {
                if (!ReferenceEquals(_sectionInstances, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sectionInstances != null)
                    {
                        _sectionInstances.CollectionChanged -= FixupSectionInstances;
                    }
                    _sectionInstances = value;
                    if (_sectionInstances != null)
                    {
                        _sectionInstances.CollectionChanged += FixupSectionInstances;
                    }
                    OnNavigationPropertyChanged("SectionInstances");
                }
            }
        }
        private TrackableCollection<ReportSectionInstance> _sectionInstances;
    
        [DataMember]
        public TrackableCollection<ReportGenerated> GeneratedReports
        {
            get
            {
                if (_generatedReports == null)
                {
                    _generatedReports = new TrackableCollection<ReportGenerated>();
                    _generatedReports.CollectionChanged += FixupGeneratedReports;
                }
                return _generatedReports;
            }
            set
            {
                if (!ReferenceEquals(_generatedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged -= FixupGeneratedReports;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReportGenerated item in _generatedReports)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _generatedReports = value;
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged += FixupGeneratedReports;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReportGenerated item in _generatedReports)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("GeneratedReports");
                }
            }
        }
        private TrackableCollection<ReportGenerated> _generatedReports;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Category = null;
            CustomSections.Clear();
            SavedReport.Clear();
            Formats.Clear();
            SectionInstances.Clear();
            GeneratedReports.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCategory(ReportCategory previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reports.Contains(this))
            {
                previousValue.Reports.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.Reports.Contains(this))
                {
                    Category.Reports.Add(this);
                }
    
                ReportCategoryId = Category.ReportCategoryId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Category")
                    && (ChangeTracker.OriginalValues["Category"] == Category))
                {
                    ChangeTracker.OriginalValues.Remove("Category");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Category", previousValue);
                }
                if (Category != null && !Category.ChangeTracker.ChangeTrackingEnabled)
                {
                    Category.StartTracking();
                }
            }
        }
    
        private void FixupCustomSections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportCustomSection item in e.NewItems)
                {
                    item.Report = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomSections", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportCustomSection item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomSections", item);
                    }
                }
            }
        }
    
        private void FixupSavedReport(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedReport item in e.NewItems)
                {
                    item.Report = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedReport", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedReport", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupFormats(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportFormat item in e.NewItems)
                {
                    if (!item.Reports.Contains(this))
                    {
                        item.Reports.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Formats", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportFormat item in e.OldItems)
                {
                    if (item.Reports.Contains(this))
                    {
                        item.Reports.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Formats", item);
                    }
                }
            }
        }
    
        private void FixupSectionInstances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportSectionInstance item in e.NewItems)
                {
                    item.Report = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SectionInstances", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportSectionInstance item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SectionInstances", item);
                    }
                }
            }
        }
    
        private void FixupGeneratedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportGenerated item in e.NewItems)
                {
                    item.Report = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GeneratedReports", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportGenerated item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GeneratedReports", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
