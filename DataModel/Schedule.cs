//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class Schedule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ScheduleId
        {
            get { return _scheduleId; }
            set
            {
                if (_scheduleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ScheduleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _scheduleId = value;
                    OnPropertyChanged("ScheduleId");
                }
            }
        }
        private int _scheduleId;
    
        [DataMember]
        public Nullable<int> TemplateId
        {
            get { return _templateId; }
            set
            {
                if (_templateId != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateId", _templateId);
                    _templateId = value;
                    OnPropertyChanged("TemplateId");
                }
            }
        }
        private Nullable<int> _templateId;
    
        [DataMember]
        public string DeliveryType
        {
            get { return _deliveryType; }
            set
            {
                if (_deliveryType != value)
                {
                    ChangeTracker.RecordOriginalValue("DeliveryType", _deliveryType);
                    _deliveryType = value;
                    OnPropertyChanged("DeliveryType");
                }
            }
        }
        private string _deliveryType;
    
        [DataMember]
        public string OutputType
        {
            get { return _outputType; }
            set
            {
                if (_outputType != value)
                {
                    ChangeTracker.RecordOriginalValue("OutputType", _outputType);
                    _outputType = value;
                    OnPropertyChanged("OutputType");
                }
            }
        }
        private string _outputType;
    
        [DataMember]
        public string Parameters
        {
            get { return _parameters; }
            set
            {
                if (_parameters != value)
                {
                    ChangeTracker.RecordOriginalValue("Parameters", _parameters);
                    _parameters = value;
                    OnPropertyChanged("Parameters");
                }
            }
        }
        private string _parameters;
    
        [DataMember]
        public System.Guid ScheduleGroupId
        {
            get { return _scheduleGroupId; }
            set
            {
                if (_scheduleGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScheduleGroupId", _scheduleGroupId);
                    _scheduleGroupId = value;
                    OnPropertyChanged("ScheduleGroupId");
                }
            }
        }
        private System.Guid _scheduleGroupId;
    
        [DataMember]
        public System.DateTime ScheduledTime
        {
            get { return _scheduledTime; }
            set
            {
                if (_scheduledTime != value)
                {
                    ChangeTracker.RecordOriginalValue("ScheduledTime", _scheduledTime);
                    _scheduledTime = value;
                    OnPropertyChanged("ScheduledTime");
                }
            }
        }
        private System.DateTime _scheduledTime;
    
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("Status", _status);
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private string _status;
    
        [DataMember]
        public string TemplateName
        {
            get { return _templateName; }
            set
            {
                if (_templateName != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateName", _templateName);
                    _templateName = value;
                    OnPropertyChanged("TemplateName");
                }
            }
        }
        private string _templateName;
    
        [DataMember]
        public string User
        {
            get { return _user; }
            set
            {
                if (_user != value)
                {
                    ChangeTracker.RecordOriginalValue("User", _user);
                    _user = value;
                    OnPropertyChanged("User");
                }
            }
        }
        private string _user;
    
        [DataMember]
        public System.Guid SeriesId
        {
            get { return _seriesId; }
            set
            {
                if (_seriesId != value)
                {
                    ChangeTracker.RecordOriginalValue("SeriesId", _seriesId);
                    _seriesId = value;
                    OnPropertyChanged("SeriesId");
                }
            }
        }
        private System.Guid _seriesId;
    
        [DataMember]
        public string TemplateUNID
        {
            get { return _templateUNID; }
            set
            {
                if (_templateUNID != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateUNID", _templateUNID);
                    _templateUNID = value;
                    OnPropertyChanged("TemplateUNID");
                }
            }
        }
        private string _templateUNID;
    
        [DataMember]
        public string EmployeeNumber
        {
            get { return _employeeNumber; }
            set
            {
                if (_employeeNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("EmployeeNumber", _employeeNumber);
                    _employeeNumber = value;
                    OnPropertyChanged("EmployeeNumber");
                }
            }
        }
        private string _employeeNumber;
    
        [DataMember]
        public string CallingApp
        {
            get { return _callingApp; }
            set
            {
                if (_callingApp != value)
                {
                    ChangeTracker.RecordOriginalValue("CallingApp", _callingApp);
                    _callingApp = value;
                    OnPropertyChanged("CallingApp");
                }
            }
        }
        private string _callingApp;
    
        [DataMember]
        public string DeliveryLocation
        {
            get { return _deliveryLocation; }
            set
            {
                if (_deliveryLocation != value)
                {
                    ChangeTracker.RecordOriginalValue("DeliveryLocation", _deliveryLocation);
                    _deliveryLocation = value;
                    OnPropertyChanged("DeliveryLocation");
                }
            }
        }
        private string _deliveryLocation;
    
        [DataMember]
        public System.Guid DocumentationSetId
        {
            get { return _documentationSetId; }
            set
            {
                if (_documentationSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentationSetId", _documentationSetId);
                    _documentationSetId = value;
                    OnPropertyChanged("DocumentationSetId");
                }
            }
        }
        private System.Guid _documentationSetId;
    
        [DataMember]
        public System.DateTime CreatedDate
        {
            get { return _createdDate; }
            set
            {
                if (_createdDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedDate", _createdDate);
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate");
                }
            }
        }
        private System.DateTime _createdDate;
    
        [DataMember]
        public string OutputFileName
        {
            get { return _outputFileName; }
            set
            {
                if (_outputFileName != value)
                {
                    ChangeTracker.RecordOriginalValue("OutputFileName", _outputFileName);
                    _outputFileName = value;
                    OnPropertyChanged("OutputFileName");
                }
            }
        }
        private string _outputFileName;
    
        [DataMember]
        public string UserFolder
        {
            get { return _userFolder; }
            set
            {
                if (_userFolder != value)
                {
                    ChangeTracker.RecordOriginalValue("UserFolder", _userFolder);
                    _userFolder = value;
                    OnPropertyChanged("UserFolder");
                }
            }
        }
        private string _userFolder;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
