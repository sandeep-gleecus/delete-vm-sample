//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(UserArtifactField))]
    [KnownType(typeof(ArtifactFieldType))]
    [KnownType(typeof(WorkflowField))]
    [KnownType(typeof(RequirementWorkflowField))]
    [KnownType(typeof(TaskWorkflowField))]
    [KnownType(typeof(HistoryDetail))]
    [KnownType(typeof(ReleaseWorkflowField))]
    [KnownType(typeof(TestCaseWorkflowField))]
    [KnownType(typeof(DataSyncArtifactFieldValueMapping))]
    [KnownType(typeof(NotificationEvent))]
    [KnownType(typeof(DocumentWorkflowField))]
    [KnownType(typeof(RiskWorkflowField))]
    [KnownType(typeof(TST_ADMIN_HISTORY_DETAILS))]
    public partial class ArtifactField: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ArtifactFieldId
        {
            get { return _artifactFieldId; }
            set
            {
                if (_artifactFieldId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactFieldId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactFieldId = value;
                    OnPropertyChanged("ArtifactFieldId");
                }
            }
        }
        private int _artifactFieldId;
    
        [DataMember]
        public int ArtifactFieldTypeId
        {
            get { return _artifactFieldTypeId; }
            set
            {
                if (_artifactFieldTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactFieldTypeId", _artifactFieldTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.ArtifactFieldTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _artifactFieldTypeId = value;
                    OnPropertyChanged("ArtifactFieldTypeId");
                }
            }
        }
        private int _artifactFieldTypeId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (_caption != value)
                {
                    ChangeTracker.RecordOriginalValue("Caption", _caption);
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        private string _caption;
    
        [DataMember]
        public Nullable<int> ListDefaultPosition
        {
            get { return _listDefaultPosition; }
            set
            {
                if (_listDefaultPosition != value)
                {
                    ChangeTracker.RecordOriginalValue("ListDefaultPosition", _listDefaultPosition);
                    _listDefaultPosition = value;
                    OnPropertyChanged("ListDefaultPosition");
                }
            }
        }
        private Nullable<int> _listDefaultPosition;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string LookupProperty
        {
            get { return _lookupProperty; }
            set
            {
                if (_lookupProperty != value)
                {
                    ChangeTracker.RecordOriginalValue("LookupProperty", _lookupProperty);
                    _lookupProperty = value;
                    OnPropertyChanged("LookupProperty");
                }
            }
        }
        private string _lookupProperty;
    
        [DataMember]
        public bool IsHistoryRecorded
        {
            get { return _isHistoryRecorded; }
            set
            {
                if (_isHistoryRecorded != value)
                {
                    ChangeTracker.RecordOriginalValue("IsHistoryRecorded", _isHistoryRecorded);
                    _isHistoryRecorded = value;
                    OnPropertyChanged("IsHistoryRecorded");
                }
            }
        }
        private bool _isHistoryRecorded;
    
        [DataMember]
        public bool IsWorkflowConfig
        {
            get { return _isWorkflowConfig; }
            set
            {
                if (_isWorkflowConfig != value)
                {
                    ChangeTracker.RecordOriginalValue("IsWorkflowConfig", _isWorkflowConfig);
                    _isWorkflowConfig = value;
                    OnPropertyChanged("IsWorkflowConfig");
                }
            }
        }
        private bool _isWorkflowConfig;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsListConfig
        {
            get { return _isListConfig; }
            set
            {
                if (_isListConfig != value)
                {
                    ChangeTracker.RecordOriginalValue("IsListConfig", _isListConfig);
                    _isListConfig = value;
                    OnPropertyChanged("IsListConfig");
                }
            }
        }
        private bool _isListConfig;
    
        [DataMember]
        public bool IsListDefault
        {
            get { return _isListDefault; }
            set
            {
                if (_isListDefault != value)
                {
                    ChangeTracker.RecordOriginalValue("IsListDefault", _isListDefault);
                    _isListDefault = value;
                    OnPropertyChanged("IsListDefault");
                }
            }
        }
        private bool _isListDefault;
    
        [DataMember]
        public bool IsDataMapping
        {
            get { return _isDataMapping; }
            set
            {
                if (_isDataMapping != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDataMapping", _isDataMapping);
                    _isDataMapping = value;
                    OnPropertyChanged("IsDataMapping");
                }
            }
        }
        private bool _isDataMapping;
    
        [DataMember]
        public bool IsReport
        {
            get { return _isReport; }
            set
            {
                if (_isReport != value)
                {
                    ChangeTracker.RecordOriginalValue("IsReport", _isReport);
                    _isReport = value;
                    OnPropertyChanged("IsReport");
                }
            }
        }
        private bool _isReport;
    
        [DataMember]
        public bool IsNotify
        {
            get { return _isNotify; }
            set
            {
                if (_isNotify != value)
                {
                    ChangeTracker.RecordOriginalValue("IsNotify", _isNotify);
                    _isNotify = value;
                    OnPropertyChanged("IsNotify");
                }
            }
        }
        private bool _isNotify;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<UserArtifactField> UserFields
        {
            get
            {
                if (_userFields == null)
                {
                    _userFields = new TrackableCollection<UserArtifactField>();
                    _userFields.CollectionChanged += FixupUserFields;
                }
                return _userFields;
            }
            set
            {
                if (!ReferenceEquals(_userFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged -= FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserArtifactField item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userFields = value;
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged += FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserArtifactField item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserFields");
                }
            }
        }
        private TrackableCollection<UserArtifactField> _userFields;
    
        [DataMember]
        public ArtifactFieldType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private ArtifactFieldType _type;
    
        [DataMember]
        public TrackableCollection<WorkflowField> IncidentWorkflowFields
        {
            get
            {
                if (_incidentWorkflowFields == null)
                {
                    _incidentWorkflowFields = new TrackableCollection<WorkflowField>();
                    _incidentWorkflowFields.CollectionChanged += FixupIncidentWorkflowFields;
                }
                return _incidentWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_incidentWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentWorkflowFields != null)
                    {
                        _incidentWorkflowFields.CollectionChanged -= FixupIncidentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowField item in _incidentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentWorkflowFields = value;
                    if (_incidentWorkflowFields != null)
                    {
                        _incidentWorkflowFields.CollectionChanged += FixupIncidentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowField item in _incidentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentWorkflowFields");
                }
            }
        }
        private TrackableCollection<WorkflowField> _incidentWorkflowFields;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflowField> RequirementWorkflowFields
        {
            get
            {
                if (_requirementWorkflowFields == null)
                {
                    _requirementWorkflowFields = new TrackableCollection<RequirementWorkflowField>();
                    _requirementWorkflowFields.CollectionChanged += FixupRequirementWorkflowFields;
                }
                return _requirementWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_requirementWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementWorkflowFields != null)
                    {
                        _requirementWorkflowFields.CollectionChanged -= FixupRequirementWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflowField item in _requirementWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementWorkflowFields = value;
                    if (_requirementWorkflowFields != null)
                    {
                        _requirementWorkflowFields.CollectionChanged += FixupRequirementWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflowField item in _requirementWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementWorkflowFields");
                }
            }
        }
        private TrackableCollection<RequirementWorkflowField> _requirementWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TaskWorkflowField> TaskWorkflowFields
        {
            get
            {
                if (_taskWorkflowFields == null)
                {
                    _taskWorkflowFields = new TrackableCollection<TaskWorkflowField>();
                    _taskWorkflowFields.CollectionChanged += FixupTaskWorkflowFields;
                }
                return _taskWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_taskWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskWorkflowFields != null)
                    {
                        _taskWorkflowFields.CollectionChanged -= FixupTaskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskWorkflowField item in _taskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskWorkflowFields = value;
                    if (_taskWorkflowFields != null)
                    {
                        _taskWorkflowFields.CollectionChanged += FixupTaskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskWorkflowField item in _taskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskWorkflowFields");
                }
            }
        }
        private TrackableCollection<TaskWorkflowField> _taskWorkflowFields;
    
        [DataMember]
        public TrackableCollection<HistoryDetail> HistoryDetails
        {
            get
            {
                if (_historyDetails == null)
                {
                    _historyDetails = new TrackableCollection<HistoryDetail>();
                    _historyDetails.CollectionChanged += FixupHistoryDetails;
                }
                return _historyDetails;
            }
            set
            {
                if (!ReferenceEquals(_historyDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyDetails != null)
                    {
                        _historyDetails.CollectionChanged -= FixupHistoryDetails;
                    }
                    _historyDetails = value;
                    if (_historyDetails != null)
                    {
                        _historyDetails.CollectionChanged += FixupHistoryDetails;
                    }
                    OnNavigationPropertyChanged("HistoryDetails");
                }
            }
        }
        private TrackableCollection<HistoryDetail> _historyDetails;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflowField> ReleaseWorkflowFields
        {
            get
            {
                if (_releaseWorkflowFields == null)
                {
                    _releaseWorkflowFields = new TrackableCollection<ReleaseWorkflowField>();
                    _releaseWorkflowFields.CollectionChanged += FixupReleaseWorkflowFields;
                }
                return _releaseWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_releaseWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseWorkflowFields != null)
                    {
                        _releaseWorkflowFields.CollectionChanged -= FixupReleaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseWorkflowField item in _releaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseWorkflowFields = value;
                    if (_releaseWorkflowFields != null)
                    {
                        _releaseWorkflowFields.CollectionChanged += FixupReleaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseWorkflowField item in _releaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseWorkflowFields");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflowField> _releaseWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflowField> TestCaseWorkflowFields
        {
            get
            {
                if (_testCaseWorkflowFields == null)
                {
                    _testCaseWorkflowFields = new TrackableCollection<TestCaseWorkflowField>();
                    _testCaseWorkflowFields.CollectionChanged += FixupTestCaseWorkflowFields;
                }
                return _testCaseWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_testCaseWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseWorkflowFields != null)
                    {
                        _testCaseWorkflowFields.CollectionChanged -= FixupTestCaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseWorkflowField item in _testCaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseWorkflowFields = value;
                    if (_testCaseWorkflowFields != null)
                    {
                        _testCaseWorkflowFields.CollectionChanged += FixupTestCaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseWorkflowField item in _testCaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseWorkflowFields");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflowField> _testCaseWorkflowFields;
    
        [DataMember]
        public TrackableCollection<DataSyncArtifactFieldValueMapping> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncArtifactFieldValueMapping>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncArtifactFieldValueMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncArtifactFieldValueMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncArtifactFieldValueMapping> _dataSyncMappings;
    
        [DataMember]
        public TrackableCollection<NotificationEvent> NotificationEvents
        {
            get
            {
                if (_notificationEvents == null)
                {
                    _notificationEvents = new TrackableCollection<NotificationEvent>();
                    _notificationEvents.CollectionChanged += FixupNotificationEvents;
                }
                return _notificationEvents;
            }
            set
            {
                if (!ReferenceEquals(_notificationEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged -= FixupNotificationEvents;
                    }
                    _notificationEvents = value;
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged += FixupNotificationEvents;
                    }
                    OnNavigationPropertyChanged("NotificationEvents");
                }
            }
        }
        private TrackableCollection<NotificationEvent> _notificationEvents;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowField> DocumentWorkflowFields
        {
            get
            {
                if (_documentWorkflowFields == null)
                {
                    _documentWorkflowFields = new TrackableCollection<DocumentWorkflowField>();
                    _documentWorkflowFields.CollectionChanged += FixupDocumentWorkflowFields;
                }
                return _documentWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_documentWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentWorkflowFields != null)
                    {
                        _documentWorkflowFields.CollectionChanged -= FixupDocumentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowField item in _documentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentWorkflowFields = value;
                    if (_documentWorkflowFields != null)
                    {
                        _documentWorkflowFields.CollectionChanged += FixupDocumentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowField item in _documentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentWorkflowFields");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowField> _documentWorkflowFields;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowField> RiskWorkflowFields
        {
            get
            {
                if (_riskWorkflowFields == null)
                {
                    _riskWorkflowFields = new TrackableCollection<RiskWorkflowField>();
                    _riskWorkflowFields.CollectionChanged += FixupRiskWorkflowFields;
                }
                return _riskWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_riskWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskWorkflowFields != null)
                    {
                        _riskWorkflowFields.CollectionChanged -= FixupRiskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowField item in _riskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskWorkflowFields = value;
                    if (_riskWorkflowFields != null)
                    {
                        _riskWorkflowFields.CollectionChanged += FixupRiskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowField item in _riskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskWorkflowFields");
                }
            }
        }
        private TrackableCollection<RiskWorkflowField> _riskWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_DETAILS> TST_ADMIN_HISTORY_DETAILS
        {
            get
            {
                if (_tST_ADMIN_HISTORY_DETAILS == null)
                {
                    _tST_ADMIN_HISTORY_DETAILS = new TrackableCollection<TST_ADMIN_HISTORY_DETAILS>();
                    _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                }
                return _tST_ADMIN_HISTORY_DETAILS;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_DETAILS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged -= FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    _tST_ADMIN_HISTORY_DETAILS = value;
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_DETAILS");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_DETAILS> _tST_ADMIN_HISTORY_DETAILS;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            UserFields.Clear();
            Type = null;
            IncidentWorkflowFields.Clear();
            RequirementWorkflowFields.Clear();
            TaskWorkflowFields.Clear();
            HistoryDetails.Clear();
            ReleaseWorkflowFields.Clear();
            TestCaseWorkflowFields.Clear();
            DataSyncMappings.Clear();
            NotificationEvents.Clear();
            DocumentWorkflowFields.Clear();
            RiskWorkflowFields.Clear();
            TST_ADMIN_HISTORY_DETAILS.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Fields.Contains(this))
            {
                previousValue.Fields.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.Fields.Contains(this))
                {
                    ArtifactType.Fields.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupType(ArtifactFieldType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Fields.Contains(this))
            {
                previousValue.Fields.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Fields.Contains(this))
                {
                    Type.Fields.Add(this);
                }
    
                ArtifactFieldTypeId = Type.ArtifactFieldTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupUserFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserArtifactField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserArtifactField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowField item in e.NewItems)
                {
                    item.Field = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.Field, this))
                    {
                        item.Field = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupHistoryDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryDetail item in e.NewItems)
                {
                    item.Field = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Field, this))
                    {
                        item.Field = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryDetails", item);
                    }
                }
            }
        }
    
        private void FixupReleaseWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncArtifactFieldValueMapping item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncArtifactFieldValueMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupNotificationEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEvent item in e.NewItems)
                {
                    if (!item.ArtifactFields.Contains(this))
                    {
                        item.ArtifactFields.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEvent item in e.OldItems)
                {
                    if (item.ArtifactFields.Contains(this))
                    {
                        item.ArtifactFields.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationEvents", item);
                    }
                }
            }
        }
    
        private void FixupDocumentWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowField item in e.NewItems)
                {
                    item.ArtifactField = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactField, this))
                    {
                        item.ArtifactField = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_ADMIN_HISTORY_DETAILS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.NewItems)
                {
                    item.TST_ARTIFACT_FIELD = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_ARTIFACT_FIELD, this))
                    {
                        item.TST_ARTIFACT_FIELD = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
        }

        #endregion

    }
}
