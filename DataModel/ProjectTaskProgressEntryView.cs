//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class ProjectTaskProgressEntryView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectGroupId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private int _projectGroupId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public string ProjectName
        {
            get { return _projectName; }
            set
            {
                if (_projectName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectName = value;
                    OnPropertyChanged("ProjectName");
                }
            }
        }
        private string _projectName;
    
        [DataMember]
        public string ProjectDescription
        {
            get { return _projectDescription; }
            set
            {
                if (_projectDescription != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectDescription", _projectDescription);
                    _projectDescription = value;
                    OnPropertyChanged("ProjectDescription");
                }
            }
        }
        private string _projectDescription;
    
        [DataMember]
        public int TaskCount
        {
            get { return _taskCount; }
            set
            {
                if (_taskCount != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskCount' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskCount = value;
                    OnPropertyChanged("TaskCount");
                }
            }
        }
        private int _taskCount;
    
        [DataMember]
        public Nullable<int> TaskPercentOnTime
        {
            get { return _taskPercentOnTime; }
            set
            {
                if (_taskPercentOnTime != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentOnTime", _taskPercentOnTime);
                    _taskPercentOnTime = value;
                    OnPropertyChanged("TaskPercentOnTime");
                }
            }
        }
        private Nullable<int> _taskPercentOnTime;
    
        [DataMember]
        public Nullable<int> TaskPercentLateFinish
        {
            get { return _taskPercentLateFinish; }
            set
            {
                if (_taskPercentLateFinish != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateFinish", _taskPercentLateFinish);
                    _taskPercentLateFinish = value;
                    OnPropertyChanged("TaskPercentLateFinish");
                }
            }
        }
        private Nullable<int> _taskPercentLateFinish;
    
        [DataMember]
        public Nullable<int> TaskPercentNotStart
        {
            get { return _taskPercentNotStart; }
            set
            {
                if (_taskPercentNotStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentNotStart", _taskPercentNotStart);
                    _taskPercentNotStart = value;
                    OnPropertyChanged("TaskPercentNotStart");
                }
            }
        }
        private Nullable<int> _taskPercentNotStart;
    
        [DataMember]
        public Nullable<int> TaskPercentLateStart
        {
            get { return _taskPercentLateStart; }
            set
            {
                if (_taskPercentLateStart != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPercentLateStart", _taskPercentLateStart);
                    _taskPercentLateStart = value;
                    OnPropertyChanged("TaskPercentLateStart");
                }
            }
        }
        private Nullable<int> _taskPercentLateStart;
    
        [DataMember]
        public Nullable<int> TaskEstimatedEffort
        {
            get { return _taskEstimatedEffort; }
            set
            {
                if (_taskEstimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskEstimatedEffort", _taskEstimatedEffort);
                    _taskEstimatedEffort = value;
                    OnPropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        private Nullable<int> _taskEstimatedEffort;
    
        [DataMember]
        public Nullable<int> TaskActualEffort
        {
            get { return _taskActualEffort; }
            set
            {
                if (_taskActualEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskActualEffort", _taskActualEffort);
                    _taskActualEffort = value;
                    OnPropertyChanged("TaskActualEffort");
                }
            }
        }
        private Nullable<int> _taskActualEffort;
    
        [DataMember]
        public Nullable<int> TaskRemainingEffort
        {
            get { return _taskRemainingEffort; }
            set
            {
                if (_taskRemainingEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskRemainingEffort", _taskRemainingEffort);
                    _taskRemainingEffort = value;
                    OnPropertyChanged("TaskRemainingEffort");
                }
            }
        }
        private Nullable<int> _taskRemainingEffort;
    
        [DataMember]
        public Nullable<int> TaskProjectedEffort
        {
            get { return _taskProjectedEffort; }
            set
            {
                if (_taskProjectedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskProjectedEffort", _taskProjectedEffort);
                    _taskProjectedEffort = value;
                    OnPropertyChanged("TaskProjectedEffort");
                }
            }
        }
        private Nullable<int> _taskProjectedEffort;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public Nullable<int> RELEASE_ID
        {
            get { return _rELEASE_ID; }
            set
            {
                if (_rELEASE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("RELEASE_ID", _rELEASE_ID);
                    _rELEASE_ID = value;
                    OnPropertyChanged("RELEASE_ID");
                }
            }
        }
        private Nullable<int> _rELEASE_ID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
