//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(NotificationArtifactUserType))]
    [KnownType(typeof(ArtifactField))]
    [KnownType(typeof(ProjectRole))]
    [KnownType(typeof(ProjectTemplate))]
    [KnownType(typeof(CustomProperty))]
    [KnownType(typeof(NotificationEventWebHook))]
    public partial class NotificationEvent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NotificationEventId
        {
            get { return _notificationEventId; }
            set
            {
                if (_notificationEventId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NotificationEventId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _notificationEventId = value;
                    OnPropertyChanged("NotificationEventId");
                }
            }
        }
        private int _notificationEventId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string EmailSubject
        {
            get { return _emailSubject; }
            set
            {
                if (_emailSubject != value)
                {
                    ChangeTracker.RecordOriginalValue("EmailSubject", _emailSubject);
                    _emailSubject = value;
                    OnPropertyChanged("EmailSubject");
                }
            }
        }
        private string _emailSubject;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (ProjectTemplate != null && ProjectTemplate.ProjectTemplateId != value)
                        {
                            ProjectTemplate = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public bool IsArtifactCreation
        {
            get { return _isArtifactCreation; }
            set
            {
                if (_isArtifactCreation != value)
                {
                    ChangeTracker.RecordOriginalValue("IsArtifactCreation", _isArtifactCreation);
                    _isArtifactCreation = value;
                    OnPropertyChanged("IsArtifactCreation");
                }
            }
        }
        private bool _isArtifactCreation;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<NotificationArtifactUserType> NotificationArtifactUserTypes
        {
            get
            {
                if (_notificationArtifactUserTypes == null)
                {
                    _notificationArtifactUserTypes = new TrackableCollection<NotificationArtifactUserType>();
                    _notificationArtifactUserTypes.CollectionChanged += FixupNotificationArtifactUserTypes;
                }
                return _notificationArtifactUserTypes;
            }
            set
            {
                if (!ReferenceEquals(_notificationArtifactUserTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationArtifactUserTypes != null)
                    {
                        _notificationArtifactUserTypes.CollectionChanged -= FixupNotificationArtifactUserTypes;
                    }
                    _notificationArtifactUserTypes = value;
                    if (_notificationArtifactUserTypes != null)
                    {
                        _notificationArtifactUserTypes.CollectionChanged += FixupNotificationArtifactUserTypes;
                    }
                    OnNavigationPropertyChanged("NotificationArtifactUserTypes");
                }
            }
        }
        private TrackableCollection<NotificationArtifactUserType> _notificationArtifactUserTypes;
    
        [DataMember]
        public TrackableCollection<ArtifactField> ArtifactFields
        {
            get
            {
                if (_artifactFields == null)
                {
                    _artifactFields = new TrackableCollection<ArtifactField>();
                    _artifactFields.CollectionChanged += FixupArtifactFields;
                }
                return _artifactFields;
            }
            set
            {
                if (!ReferenceEquals(_artifactFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactFields != null)
                    {
                        _artifactFields.CollectionChanged -= FixupArtifactFields;
                    }
                    _artifactFields = value;
                    if (_artifactFields != null)
                    {
                        _artifactFields.CollectionChanged += FixupArtifactFields;
                    }
                    OnNavigationPropertyChanged("ArtifactFields");
                }
            }
        }
        private TrackableCollection<ArtifactField> _artifactFields;
    
        [DataMember]
        public TrackableCollection<ProjectRole> ProjectRoles
        {
            get
            {
                if (_projectRoles == null)
                {
                    _projectRoles = new TrackableCollection<ProjectRole>();
                    _projectRoles.CollectionChanged += FixupProjectRoles;
                }
                return _projectRoles;
            }
            set
            {
                if (!ReferenceEquals(_projectRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectRoles != null)
                    {
                        _projectRoles.CollectionChanged -= FixupProjectRoles;
                    }
                    _projectRoles = value;
                    if (_projectRoles != null)
                    {
                        _projectRoles.CollectionChanged += FixupProjectRoles;
                    }
                    OnNavigationPropertyChanged("ProjectRoles");
                }
            }
        }
        private TrackableCollection<ProjectRole> _projectRoles;
    
        [DataMember]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set
            {
                if (!ReferenceEquals(_projectTemplate, value))
                {
                    var previousValue = _projectTemplate;
                    _projectTemplate = value;
                    FixupProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("ProjectTemplate");
                }
            }
        }
        private ProjectTemplate _projectTemplate;
    
        [DataMember]
        public TrackableCollection<CustomProperty> CustomProperties
        {
            get
            {
                if (_customProperties == null)
                {
                    _customProperties = new TrackableCollection<CustomProperty>();
                    _customProperties.CollectionChanged += FixupCustomProperties;
                }
                return _customProperties;
            }
            set
            {
                if (!ReferenceEquals(_customProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged -= FixupCustomProperties;
                    }
                    _customProperties = value;
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged += FixupCustomProperties;
                    }
                    OnNavigationPropertyChanged("CustomProperties");
                }
            }
        }
        private TrackableCollection<CustomProperty> _customProperties;
    
        [DataMember]
        public TrackableCollection<NotificationEventWebHook> WebHooks
        {
            get
            {
                if (_webHooks == null)
                {
                    _webHooks = new TrackableCollection<NotificationEventWebHook>();
                    _webHooks.CollectionChanged += FixupWebHooks;
                }
                return _webHooks;
            }
            set
            {
                if (!ReferenceEquals(_webHooks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_webHooks != null)
                    {
                        _webHooks.CollectionChanged -= FixupWebHooks;
                    }
                    _webHooks = value;
                    if (_webHooks != null)
                    {
                        _webHooks.CollectionChanged += FixupWebHooks;
                    }
                    OnNavigationPropertyChanged("WebHooks");
                }
            }
        }
        private TrackableCollection<NotificationEventWebHook> _webHooks;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            NotificationArtifactUserTypes.Clear();
            ArtifactFields.Clear();
            ProjectRoles.Clear();
            ProjectTemplate = null;
            CustomProperties.Clear();
            WebHooks.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NotificationEvents.Contains(this))
            {
                previousValue.NotificationEvents.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.NotificationEvents.Contains(this))
                {
                    ArtifactType.NotificationEvents.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupProjectTemplate(ProjectTemplate previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NotificationEvents.Contains(this))
            {
                previousValue.NotificationEvents.Remove(this);
            }
    
            if (ProjectTemplate != null)
            {
                if (!ProjectTemplate.NotificationEvents.Contains(this))
                {
                    ProjectTemplate.NotificationEvents.Add(this);
                }
    
                ProjectTemplateId = ProjectTemplate.ProjectTemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectTemplate")
                    && (ChangeTracker.OriginalValues["ProjectTemplate"] == ProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplate", previousValue);
                }
                if (ProjectTemplate != null && !ProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectTemplate.StartTracking();
                }
            }
        }
    
        private void FixupNotificationArtifactUserTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationArtifactUserType item in e.NewItems)
                {
                    if (!item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationArtifactUserTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationArtifactUserType item in e.OldItems)
                {
                    if (item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationArtifactUserTypes", item);
                    }
                }
            }
        }
    
        private void FixupArtifactFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactField item in e.NewItems)
                {
                    if (!item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactFields", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactField item in e.OldItems)
                {
                    if (item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactFields", item);
                    }
                }
            }
        }
    
        private void FixupProjectRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectRole item in e.NewItems)
                {
                    if (!item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectRoles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectRole item in e.OldItems)
                {
                    if (item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectRoles", item);
                    }
                }
            }
        }
    
        private void FixupCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomProperty item in e.NewItems)
                {
                    if (!item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomProperties", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomProperty item in e.OldItems)
                {
                    if (item.NotificationEvents.Contains(this))
                    {
                        item.NotificationEvents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomProperties", item);
                    }
                }
            }
        }
    
        private void FixupWebHooks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEventWebHook item in e.NewItems)
                {
                    item.NotificationEvent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WebHooks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEventWebHook item in e.OldItems)
                {
                    if (ReferenceEquals(item.NotificationEvent, this))
                    {
                        item.NotificationEvent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WebHooks", item);
                    }
                }
            }
        }

        #endregion

    }
}
