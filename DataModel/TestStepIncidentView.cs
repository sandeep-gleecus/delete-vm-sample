//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class TestStepIncidentView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> TestStepId
        {
            get { return _testStepId; }
            set
            {
                if (_testStepId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestStepId", _testStepId);
                    _testStepId = value;
                    OnPropertyChanged("TestStepId");
                }
            }
        }
        private Nullable<int> _testStepId;
    
        [DataMember]
        public int IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IncidentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private int _incidentId;
    
        [DataMember]
        public Nullable<int> DetectedReleaseId
        {
            get { return _detectedReleaseId; }
            set
            {
                if (_detectedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("DetectedReleaseId", _detectedReleaseId);
                    _detectedReleaseId = value;
                    OnPropertyChanged("DetectedReleaseId");
                }
            }
        }
        private Nullable<int> _detectedReleaseId;
    
        [DataMember]
        public Nullable<int> ResolvedReleaseId
        {
            get { return _resolvedReleaseId; }
            set
            {
                if (_resolvedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResolvedReleaseId", _resolvedReleaseId);
                    _resolvedReleaseId = value;
                    OnPropertyChanged("ResolvedReleaseId");
                }
            }
        }
        private Nullable<int> _resolvedReleaseId;
    
        [DataMember]
        public Nullable<int> VerifiedReleaseId
        {
            get { return _verifiedReleaseId; }
            set
            {
                if (_verifiedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("VerifiedReleaseId", _verifiedReleaseId);
                    _verifiedReleaseId = value;
                    OnPropertyChanged("VerifiedReleaseId");
                }
            }
        }
        private Nullable<int> _verifiedReleaseId;
    
        [DataMember]
        public bool IsOpenStatus
        {
            get { return _isOpenStatus; }
            set
            {
                if (_isOpenStatus != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsOpenStatus' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isOpenStatus = value;
                    OnPropertyChanged("IsOpenStatus");
                }
            }
        }
        private bool _isOpenStatus;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
