//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_TestCaseFolder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TEST_CASE_FOLDER_ID
        {
            get { return _tEST_CASE_FOLDER_ID; }
            set
            {
                if (_tEST_CASE_FOLDER_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_FOLDER_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_FOLDER_ID = value;
                    OnPropertyChanged("TEST_CASE_FOLDER_ID");
                }
            }
        }
        private int _tEST_CASE_FOLDER_ID;
    
        [DataMember]
        public Nullable<int> PARENT_TEST_CASE_FOLDER_ID
        {
            get { return _pARENT_TEST_CASE_FOLDER_ID; }
            set
            {
                if (_pARENT_TEST_CASE_FOLDER_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("PARENT_TEST_CASE_FOLDER_ID", _pARENT_TEST_CASE_FOLDER_ID);
                    _pARENT_TEST_CASE_FOLDER_ID = value;
                    OnPropertyChanged("PARENT_TEST_CASE_FOLDER_ID");
                }
            }
        }
        private Nullable<int> _pARENT_TEST_CASE_FOLDER_ID;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public Nullable<System.DateTime> EXECUTION_DATE
        {
            get { return _eXECUTION_DATE; }
            set
            {
                if (_eXECUTION_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("EXECUTION_DATE", _eXECUTION_DATE);
                    _eXECUTION_DATE = value;
                    OnPropertyChanged("EXECUTION_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _eXECUTION_DATE;
    
        [DataMember]
        public System.DateTime LAST_UPDATE_DATE
        {
            get { return _lAST_UPDATE_DATE; }
            set
            {
                if (_lAST_UPDATE_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LAST_UPDATE_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lAST_UPDATE_DATE = value;
                    OnPropertyChanged("LAST_UPDATE_DATE");
                }
            }
        }
        private System.DateTime _lAST_UPDATE_DATE;
    
        [DataMember]
        public Nullable<int> ESTIMATED_DURATION
        {
            get { return _eSTIMATED_DURATION; }
            set
            {
                if (_eSTIMATED_DURATION != value)
                {
                    ChangeTracker.RecordOriginalValue("ESTIMATED_DURATION", _eSTIMATED_DURATION);
                    _eSTIMATED_DURATION = value;
                    OnPropertyChanged("ESTIMATED_DURATION");
                }
            }
        }
        private Nullable<int> _eSTIMATED_DURATION;
    
        [DataMember]
        public Nullable<int> ACTUAL_DURATION
        {
            get { return _aCTUAL_DURATION; }
            set
            {
                if (_aCTUAL_DURATION != value)
                {
                    ChangeTracker.RecordOriginalValue("ACTUAL_DURATION", _aCTUAL_DURATION);
                    _aCTUAL_DURATION = value;
                    OnPropertyChanged("ACTUAL_DURATION");
                }
            }
        }
        private Nullable<int> _aCTUAL_DURATION;
    
        [DataMember]
        public int COUNT_PASSED
        {
            get { return _cOUNT_PASSED; }
            set
            {
                if (_cOUNT_PASSED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_PASSED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_PASSED = value;
                    OnPropertyChanged("COUNT_PASSED");
                }
            }
        }
        private int _cOUNT_PASSED;
    
        [DataMember]
        public int COUNT_FAILED
        {
            get { return _cOUNT_FAILED; }
            set
            {
                if (_cOUNT_FAILED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_FAILED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_FAILED = value;
                    OnPropertyChanged("COUNT_FAILED");
                }
            }
        }
        private int _cOUNT_FAILED;
    
        [DataMember]
        public int COUNT_BLOCKED
        {
            get { return _cOUNT_BLOCKED; }
            set
            {
                if (_cOUNT_BLOCKED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_BLOCKED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_BLOCKED = value;
                    OnPropertyChanged("COUNT_BLOCKED");
                }
            }
        }
        private int _cOUNT_BLOCKED;
    
        [DataMember]
        public int COUNT_CAUTION
        {
            get { return _cOUNT_CAUTION; }
            set
            {
                if (_cOUNT_CAUTION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_CAUTION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_CAUTION = value;
                    OnPropertyChanged("COUNT_CAUTION");
                }
            }
        }
        private int _cOUNT_CAUTION;
    
        [DataMember]
        public int COUNT_NOT_RUN
        {
            get { return _cOUNT_NOT_RUN; }
            set
            {
                if (_cOUNT_NOT_RUN != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_NOT_RUN' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_NOT_RUN = value;
                    OnPropertyChanged("COUNT_NOT_RUN");
                }
            }
        }
        private int _cOUNT_NOT_RUN;
    
        [DataMember]
        public int COUNT_NOT_APPLICABLE
        {
            get { return _cOUNT_NOT_APPLICABLE; }
            set
            {
                if (_cOUNT_NOT_APPLICABLE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'COUNT_NOT_APPLICABLE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cOUNT_NOT_APPLICABLE = value;
                    OnPropertyChanged("COUNT_NOT_APPLICABLE");
                }
            }
        }
        private int _cOUNT_NOT_APPLICABLE;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public int PROJECT_GROUP_ID
        {
            get { return _pROJECT_GROUP_ID; }
            set
            {
                if (_pROJECT_GROUP_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_GROUP_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_GROUP_ID = value;
                    OnPropertyChanged("PROJECT_GROUP_ID");
                }
            }
        }
        private int _pROJECT_GROUP_ID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
