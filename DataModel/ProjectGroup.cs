//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ProjectGroupUser))]
    [KnownType(typeof(UserProfile))]
    [KnownType(typeof(ProjectTemplate))]
    [KnownType(typeof(ProjectGroupGoal))]
    [KnownType(typeof(ProjectGroupRoadmap))]
    [KnownType(typeof(Risk))]
    [KnownType(typeof(TimecardEntry))]
    [KnownType(typeof(Attachment))]
    [KnownType(typeof(Portfolio))]
    [KnownType(typeof(ProjectGroupSettingValue))]
    public partial class ProjectGroup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectGroupId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private int _projectGroupId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Website
        {
            get { return _website; }
            set
            {
                if (_website != value)
                {
                    ChangeTracker.RecordOriginalValue("Website", _website);
                    _website = value;
                    OnPropertyChanged("Website");
                }
            }
        }
        private string _website;
    
        [DataMember]
        public Nullable<int> ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (ProjectTemplate != null && ProjectTemplate.ProjectTemplateId != value)
                        {
                            ProjectTemplate = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private Nullable<int> _projectTemplateId;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDefault", _isDefault);
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _isDefault;
    
        [DataMember]
        public int PercentComplete
        {
            get { return _percentComplete; }
            set
            {
                if (_percentComplete != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentComplete", _percentComplete);
                    _percentComplete = value;
                    OnPropertyChanged("PercentComplete");
                }
            }
        }
        private int _percentComplete;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> PortfolioId
        {
            get { return _portfolioId; }
            set
            {
                if (_portfolioId != value)
                {
                    ChangeTracker.RecordOriginalValue("PortfolioId", _portfolioId);
                    if (!IsDeserializing)
                    {
                        if (Portfolio != null && Portfolio.PortfolioId != value)
                        {
                            Portfolio = null;
                        }
                    }
                    _portfolioId = value;
                    OnPropertyChanged("PortfolioId");
                }
            }
        }
        private Nullable<int> _portfolioId;
    
        [DataMember]
        public int RequirementCount
        {
            get { return _requirementCount; }
            set
            {
                if (_requirementCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementCount", _requirementCount);
                    _requirementCount = value;
                    OnPropertyChanged("RequirementCount");
                }
            }
        }
        private int _requirementCount;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    _projects = new TrackableCollection<Project>();
                    _projects.CollectionChanged += FixupProjects;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projects != null)
                    {
                        _projects.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    if (_projects != null)
                    {
                        _projects.CollectionChanged += FixupProjects;
                    }
                    OnNavigationPropertyChanged("Projects");
                }
            }
        }
        private TrackableCollection<Project> _projects;
    
        [DataMember]
        public TrackableCollection<ProjectGroupUser> Users
        {
            get
            {
                if (_users == null)
                {
                    _users = new TrackableCollection<ProjectGroupUser>();
                    _users.CollectionChanged += FixupUsers;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_users != null)
                    {
                        _users.CollectionChanged -= FixupUsers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectGroupUser item in _users)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _users = value;
                    if (_users != null)
                    {
                        _users.CollectionChanged += FixupUsers;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectGroupUser item in _users)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private TrackableCollection<ProjectGroupUser> _users;
    
        [DataMember]
        public TrackableCollection<UserProfile> UsersLastOpened
        {
            get
            {
                if (_usersLastOpened == null)
                {
                    _usersLastOpened = new TrackableCollection<UserProfile>();
                    _usersLastOpened.CollectionChanged += FixupUsersLastOpened;
                }
                return _usersLastOpened;
            }
            set
            {
                if (!ReferenceEquals(_usersLastOpened, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_usersLastOpened != null)
                    {
                        _usersLastOpened.CollectionChanged -= FixupUsersLastOpened;
                    }
                    _usersLastOpened = value;
                    if (_usersLastOpened != null)
                    {
                        _usersLastOpened.CollectionChanged += FixupUsersLastOpened;
                    }
                    OnNavigationPropertyChanged("UsersLastOpened");
                }
            }
        }
        private TrackableCollection<UserProfile> _usersLastOpened;
    
        [DataMember]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set
            {
                if (!ReferenceEquals(_projectTemplate, value))
                {
                    var previousValue = _projectTemplate;
                    _projectTemplate = value;
                    FixupProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("ProjectTemplate");
                }
            }
        }
        private ProjectTemplate _projectTemplate;
    
        [DataMember]
        public TrackableCollection<ProjectGroupGoal> Goals
        {
            get
            {
                if (_goals == null)
                {
                    _goals = new TrackableCollection<ProjectGroupGoal>();
                    _goals.CollectionChanged += FixupGoals;
                }
                return _goals;
            }
            set
            {
                if (!ReferenceEquals(_goals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_goals != null)
                    {
                        _goals.CollectionChanged -= FixupGoals;
                    }
                    _goals = value;
                    if (_goals != null)
                    {
                        _goals.CollectionChanged += FixupGoals;
                    }
                    OnNavigationPropertyChanged("Goals");
                }
            }
        }
        private TrackableCollection<ProjectGroupGoal> _goals;
    
        [DataMember]
        public TrackableCollection<ProjectGroupRoadmap> Roadmaps
        {
            get
            {
                if (_roadmaps == null)
                {
                    _roadmaps = new TrackableCollection<ProjectGroupRoadmap>();
                    _roadmaps.CollectionChanged += FixupRoadmaps;
                }
                return _roadmaps;
            }
            set
            {
                if (!ReferenceEquals(_roadmaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_roadmaps != null)
                    {
                        _roadmaps.CollectionChanged -= FixupRoadmaps;
                    }
                    _roadmaps = value;
                    if (_roadmaps != null)
                    {
                        _roadmaps.CollectionChanged += FixupRoadmaps;
                    }
                    OnNavigationPropertyChanged("Roadmaps");
                }
            }
        }
        private TrackableCollection<ProjectGroupRoadmap> _roadmaps;
    
        [DataMember]
        public TrackableCollection<Risk> Risk
        {
            get
            {
                if (_risk == null)
                {
                    _risk = new TrackableCollection<Risk>();
                    _risk.CollectionChanged += FixupRisk;
                }
                return _risk;
            }
            set
            {
                if (!ReferenceEquals(_risk, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_risk != null)
                    {
                        _risk.CollectionChanged -= FixupRisk;
                    }
                    _risk = value;
                    if (_risk != null)
                    {
                        _risk.CollectionChanged += FixupRisk;
                    }
                    OnNavigationPropertyChanged("Risk");
                }
            }
        }
        private TrackableCollection<Risk> _risk;
    
        [DataMember]
        public TrackableCollection<TimecardEntry> TimecardEntries
        {
            get
            {
                if (_timecardEntries == null)
                {
                    _timecardEntries = new TrackableCollection<TimecardEntry>();
                    _timecardEntries.CollectionChanged += FixupTimecardEntries;
                }
                return _timecardEntries;
            }
            set
            {
                if (!ReferenceEquals(_timecardEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged -= FixupTimecardEntries;
                    }
                    _timecardEntries = value;
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged += FixupTimecardEntries;
                    }
                    OnNavigationPropertyChanged("TimecardEntries");
                }
            }
        }
        private TrackableCollection<TimecardEntry> _timecardEntries;
    
        [DataMember]
        public TrackableCollection<Attachment> Documents
        {
            get
            {
                if (_documents == null)
                {
                    _documents = new TrackableCollection<Attachment>();
                    _documents.CollectionChanged += FixupDocuments;
                }
                return _documents;
            }
            set
            {
                if (!ReferenceEquals(_documents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documents != null)
                    {
                        _documents.CollectionChanged -= FixupDocuments;
                    }
                    _documents = value;
                    if (_documents != null)
                    {
                        _documents.CollectionChanged += FixupDocuments;
                    }
                    OnNavigationPropertyChanged("Documents");
                }
            }
        }
        private TrackableCollection<Attachment> _documents;
    
        [DataMember]
        public Portfolio Portfolio
        {
            get { return _portfolio; }
            set
            {
                if (!ReferenceEquals(_portfolio, value))
                {
                    var previousValue = _portfolio;
                    _portfolio = value;
                    FixupPortfolio(previousValue);
                    OnNavigationPropertyChanged("Portfolio");
                }
            }
        }
        private Portfolio _portfolio;
    
        [DataMember]
        public TrackableCollection<ProjectGroupSettingValue> TST_PROJECT_GROUP_SETTING_VALUE
        {
            get
            {
                if (_tST_PROJECT_GROUP_SETTING_VALUE == null)
                {
                    _tST_PROJECT_GROUP_SETTING_VALUE = new TrackableCollection<ProjectGroupSettingValue>();
                    _tST_PROJECT_GROUP_SETTING_VALUE.CollectionChanged += FixupTST_PROJECT_GROUP_SETTING_VALUE;
                }
                return _tST_PROJECT_GROUP_SETTING_VALUE;
            }
            set
            {
                if (!ReferenceEquals(_tST_PROJECT_GROUP_SETTING_VALUE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_PROJECT_GROUP_SETTING_VALUE != null)
                    {
                        _tST_PROJECT_GROUP_SETTING_VALUE.CollectionChanged -= FixupTST_PROJECT_GROUP_SETTING_VALUE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectGroupSettingValue item in _tST_PROJECT_GROUP_SETTING_VALUE)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tST_PROJECT_GROUP_SETTING_VALUE = value;
                    if (_tST_PROJECT_GROUP_SETTING_VALUE != null)
                    {
                        _tST_PROJECT_GROUP_SETTING_VALUE.CollectionChanged += FixupTST_PROJECT_GROUP_SETTING_VALUE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectGroupSettingValue item in _tST_PROJECT_GROUP_SETTING_VALUE)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TST_PROJECT_GROUP_SETTING_VALUE");
                }
            }
        }
        private TrackableCollection<ProjectGroupSettingValue> _tST_PROJECT_GROUP_SETTING_VALUE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Projects.Clear();
            Users.Clear();
            UsersLastOpened.Clear();
            ProjectTemplate = null;
            Goals.Clear();
            Roadmaps.Clear();
            Risk.Clear();
            TimecardEntries.Clear();
            Documents.Clear();
            Portfolio = null;
            TST_PROJECT_GROUP_SETTING_VALUE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProjectTemplate(ProjectTemplate previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProjectGroups.Contains(this))
            {
                previousValue.ProjectGroups.Remove(this);
            }
    
            if (ProjectTemplate != null)
            {
                if (!ProjectTemplate.ProjectGroups.Contains(this))
                {
                    ProjectTemplate.ProjectGroups.Add(this);
                }
    
                ProjectTemplateId = ProjectTemplate.ProjectTemplateId;
            }
            else if (!skipKeys)
            {
                ProjectTemplateId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectTemplate")
                    && (ChangeTracker.OriginalValues["ProjectTemplate"] == ProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplate", previousValue);
                }
                if (ProjectTemplate != null && !ProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectTemplate.StartTracking();
                }
            }
        }
    
        private void FixupPortfolio(Portfolio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProjectGroups.Contains(this))
            {
                previousValue.ProjectGroups.Remove(this);
            }
    
            if (Portfolio != null)
            {
                if (!Portfolio.ProjectGroups.Contains(this))
                {
                    Portfolio.ProjectGroups.Add(this);
                }
    
                PortfolioId = Portfolio.PortfolioId;
            }
            else if (!skipKeys)
            {
                PortfolioId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Portfolio")
                    && (ChangeTracker.OriginalValues["Portfolio"] == Portfolio))
                {
                    ChangeTracker.OriginalValues.Remove("Portfolio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Portfolio", previousValue);
                }
                if (Portfolio != null && !Portfolio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Portfolio.StartTracking();
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    item.Group = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Projects", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Projects", item);
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupUser item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Users", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Users", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupUsersLastOpened(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserProfile item in e.NewItems)
                {
                    item.LastOpenedProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UsersLastOpened", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserProfile item in e.OldItems)
                {
                    if (ReferenceEquals(item.LastOpenedProjectGroup, this))
                    {
                        item.LastOpenedProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UsersLastOpened", item);
                    }
                }
            }
        }
    
        private void FixupGoals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupGoal item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Goals", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupGoal item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Goals", item);
                    }
                }
            }
        }
    
        private void FixupRoadmaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupRoadmap item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Roadmaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupRoadmap item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Roadmaps", item);
                    }
                }
            }
        }
    
        private void FixupRisk(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Risk item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Risk", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Risk item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Risk", item);
                    }
                }
            }
        }
    
        private void FixupTimecardEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntry item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimecardEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimecardEntries", item);
                    }
                }
            }
        }
    
        private void FixupDocuments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Attachment item in e.NewItems)
                {
                    if (!item.ProjectGroups.Contains(this))
                    {
                        item.ProjectGroups.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Documents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachment item in e.OldItems)
                {
                    if (item.ProjectGroups.Contains(this))
                    {
                        item.ProjectGroups.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Documents", item);
                    }
                }
            }
        }
    
        private void FixupTST_PROJECT_GROUP_SETTING_VALUE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupSettingValue item in e.NewItems)
                {
                    item.ProjectGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_PROJECT_GROUP_SETTING_VALUE", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupSettingValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectGroup, this))
                    {
                        item.ProjectGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_PROJECT_GROUP_SETTING_VALUE", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
