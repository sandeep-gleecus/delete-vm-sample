//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Release))]
    [KnownType(typeof(TestCaseFolder))]
    public partial class ReleaseTestCaseFolder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReleaseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private int _releaseId;
    
        [DataMember]
        public int TestCaseFolderId
        {
            get { return _testCaseFolderId; }
            set
            {
                if (_testCaseFolderId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestCaseFolderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseFolderId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseFolderId = value;
                    OnPropertyChanged("TestCaseFolderId");
                }
            }
        }
        private int _testCaseFolderId;
    
        [DataMember]
        public Nullable<System.DateTime> ExecutionDate
        {
            get { return _executionDate; }
            set
            {
                if (_executionDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionDate", _executionDate);
                    _executionDate = value;
                    OnPropertyChanged("ExecutionDate");
                }
            }
        }
        private Nullable<System.DateTime> _executionDate;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;
    
        [DataMember]
        public int CountPassed
        {
            get { return _countPassed; }
            set
            {
                if (_countPassed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountPassed", _countPassed);
                    _countPassed = value;
                    OnPropertyChanged("CountPassed");
                }
            }
        }
        private int _countPassed;
    
        [DataMember]
        public int CountFailed
        {
            get { return _countFailed; }
            set
            {
                if (_countFailed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountFailed", _countFailed);
                    _countFailed = value;
                    OnPropertyChanged("CountFailed");
                }
            }
        }
        private int _countFailed;
    
        [DataMember]
        public int CountBlocked
        {
            get { return _countBlocked; }
            set
            {
                if (_countBlocked != value)
                {
                    ChangeTracker.RecordOriginalValue("CountBlocked", _countBlocked);
                    _countBlocked = value;
                    OnPropertyChanged("CountBlocked");
                }
            }
        }
        private int _countBlocked;
    
        [DataMember]
        public int CountCaution
        {
            get { return _countCaution; }
            set
            {
                if (_countCaution != value)
                {
                    ChangeTracker.RecordOriginalValue("CountCaution", _countCaution);
                    _countCaution = value;
                    OnPropertyChanged("CountCaution");
                }
            }
        }
        private int _countCaution;
    
        [DataMember]
        public int CountNotRun
        {
            get { return _countNotRun; }
            set
            {
                if (_countNotRun != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotRun", _countNotRun);
                    _countNotRun = value;
                    OnPropertyChanged("CountNotRun");
                }
            }
        }
        private int _countNotRun;
    
        [DataMember]
        public int CountNotApplicable
        {
            get { return _countNotApplicable; }
            set
            {
                if (_countNotApplicable != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotApplicable", _countNotApplicable);
                    _countNotApplicable = value;
                    OnPropertyChanged("CountNotApplicable");
                }
            }
        }
        private int _countNotApplicable;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ReleaseId != value.ReleaseId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public TestCaseFolder TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (TestCaseFolderId != value.TestCaseFolderId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCaseFolder _testCase;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Release = null;
            TestCase = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupRelease(Release previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCaseFolders.Contains(this))
            {
                previousValue.TestCaseFolders.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.TestCaseFolders.Contains(this))
                {
                    Release.TestCaseFolders.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupTestCase(TestCaseFolder previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Releases.Contains(this))
            {
                previousValue.Releases.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.Releases.Contains(this))
                {
                    TestCase.Releases.Add(this);
                }
    
                TestCaseFolderId = TestCase.TestCaseFolderId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }

        #endregion

    }
}
