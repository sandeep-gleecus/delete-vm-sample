//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactLink))]
    [KnownType(typeof(HistoryAssociation))]
    public partial class ArtifactLinkType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ArtifactLinkTypeId
        {
            get { return _artifactLinkTypeId; }
            set
            {
                if (_artifactLinkTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactLinkTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactLinkTypeId = value;
                    OnPropertyChanged("ArtifactLinkTypeId");
                }
            }
        }
        private int _artifactLinkTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string ReverseName
        {
            get { return _reverseName; }
            set
            {
                if (_reverseName != value)
                {
                    ChangeTracker.RecordOriginalValue("ReverseName", _reverseName);
                    _reverseName = value;
                    OnPropertyChanged("ReverseName");
                }
            }
        }
        private string _reverseName;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ArtifactLink> ArtifactLinks
        {
            get
            {
                if (_artifactLinks == null)
                {
                    _artifactLinks = new TrackableCollection<ArtifactLink>();
                    _artifactLinks.CollectionChanged += FixupArtifactLinks;
                }
                return _artifactLinks;
            }
            set
            {
                if (!ReferenceEquals(_artifactLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactLinks != null)
                    {
                        _artifactLinks.CollectionChanged -= FixupArtifactLinks;
                    }
                    _artifactLinks = value;
                    if (_artifactLinks != null)
                    {
                        _artifactLinks.CollectionChanged += FixupArtifactLinks;
                    }
                    OnNavigationPropertyChanged("ArtifactLinks");
                }
            }
        }
        private TrackableCollection<ArtifactLink> _artifactLinks;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> HistoryEntriesNew
        {
            get
            {
                if (_historyEntriesNew == null)
                {
                    _historyEntriesNew = new TrackableCollection<HistoryAssociation>();
                    _historyEntriesNew.CollectionChanged += FixupHistoryEntriesNew;
                }
                return _historyEntriesNew;
            }
            set
            {
                if (!ReferenceEquals(_historyEntriesNew, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyEntriesNew != null)
                    {
                        _historyEntriesNew.CollectionChanged -= FixupHistoryEntriesNew;
                    }
                    _historyEntriesNew = value;
                    if (_historyEntriesNew != null)
                    {
                        _historyEntriesNew.CollectionChanged += FixupHistoryEntriesNew;
                    }
                    OnNavigationPropertyChanged("HistoryEntriesNew");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _historyEntriesNew;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> HistoryEntriesOld
        {
            get
            {
                if (_historyEntriesOld == null)
                {
                    _historyEntriesOld = new TrackableCollection<HistoryAssociation>();
                    _historyEntriesOld.CollectionChanged += FixupHistoryEntriesOld;
                }
                return _historyEntriesOld;
            }
            set
            {
                if (!ReferenceEquals(_historyEntriesOld, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyEntriesOld != null)
                    {
                        _historyEntriesOld.CollectionChanged -= FixupHistoryEntriesOld;
                    }
                    _historyEntriesOld = value;
                    if (_historyEntriesOld != null)
                    {
                        _historyEntriesOld.CollectionChanged += FixupHistoryEntriesOld;
                    }
                    OnNavigationPropertyChanged("HistoryEntriesOld");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _historyEntriesOld;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactLinks.Clear();
            HistoryEntriesNew.Clear();
            HistoryEntriesOld.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactLink item in e.NewItems)
                {
                    item.Type = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Type, this))
                    {
                        item.Type = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactLinks", item);
                    }
                }
            }
        }
    
        private void FixupHistoryEntriesNew(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.LinkTypeNew = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryEntriesNew", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.LinkTypeNew, this))
                    {
                        item.LinkTypeNew = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryEntriesNew", item);
                    }
                }
            }
        }
    
        private void FixupHistoryEntriesOld(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.LinkTypeOld = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryEntriesOld", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.LinkTypeOld, this))
                    {
                        item.LinkTypeOld = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryEntriesOld", item);
                    }
                }
            }
        }

        #endregion

    }
}
