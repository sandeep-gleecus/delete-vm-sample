//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_TestRunStep: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TEST_RUN_STEP_ID
        {
            get { return _tEST_RUN_STEP_ID; }
            set
            {
                if (_tEST_RUN_STEP_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_RUN_STEP_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_RUN_STEP_ID = value;
                    OnPropertyChanged("TEST_RUN_STEP_ID");
                }
            }
        }
        private int _tEST_RUN_STEP_ID;
    
        [DataMember]
        public int EXECUTION_STATUS_ID
        {
            get { return _eXECUTION_STATUS_ID; }
            set
            {
                if (_eXECUTION_STATUS_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EXECUTION_STATUS_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eXECUTION_STATUS_ID = value;
                    OnPropertyChanged("EXECUTION_STATUS_ID");
                }
            }
        }
        private int _eXECUTION_STATUS_ID;
    
        [DataMember]
        public Nullable<int> TEST_CASE_ID
        {
            get { return _tEST_CASE_ID; }
            set
            {
                if (_tEST_CASE_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("TEST_CASE_ID", _tEST_CASE_ID);
                    _tEST_CASE_ID = value;
                    OnPropertyChanged("TEST_CASE_ID");
                }
            }
        }
        private Nullable<int> _tEST_CASE_ID;
    
        [DataMember]
        public Nullable<int> TEST_STEP_ID
        {
            get { return _tEST_STEP_ID; }
            set
            {
                if (_tEST_STEP_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("TEST_STEP_ID", _tEST_STEP_ID);
                    _tEST_STEP_ID = value;
                    OnPropertyChanged("TEST_STEP_ID");
                }
            }
        }
        private Nullable<int> _tEST_STEP_ID;
    
        [DataMember]
        public int TEST_RUN_ID
        {
            get { return _tEST_RUN_ID; }
            set
            {
                if (_tEST_RUN_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_RUN_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_RUN_ID = value;
                    OnPropertyChanged("TEST_RUN_ID");
                }
            }
        }
        private int _tEST_RUN_ID;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DESCRIPTION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public int POSITION
        {
            get { return _pOSITION; }
            set
            {
                if (_pOSITION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'POSITION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pOSITION = value;
                    OnPropertyChanged("POSITION");
                }
            }
        }
        private int _pOSITION;
    
        [DataMember]
        public string EXPECTED_RESULT
        {
            get { return _eXPECTED_RESULT; }
            set
            {
                if (_eXPECTED_RESULT != value)
                {
                    ChangeTracker.RecordOriginalValue("EXPECTED_RESULT", _eXPECTED_RESULT);
                    _eXPECTED_RESULT = value;
                    OnPropertyChanged("EXPECTED_RESULT");
                }
            }
        }
        private string _eXPECTED_RESULT;
    
        [DataMember]
        public string SAMPLE_DATA
        {
            get { return _sAMPLE_DATA; }
            set
            {
                if (_sAMPLE_DATA != value)
                {
                    ChangeTracker.RecordOriginalValue("SAMPLE_DATA", _sAMPLE_DATA);
                    _sAMPLE_DATA = value;
                    OnPropertyChanged("SAMPLE_DATA");
                }
            }
        }
        private string _sAMPLE_DATA;
    
        [DataMember]
        public string ACTUAL_RESULT
        {
            get { return _aCTUAL_RESULT; }
            set
            {
                if (_aCTUAL_RESULT != value)
                {
                    ChangeTracker.RecordOriginalValue("ACTUAL_RESULT", _aCTUAL_RESULT);
                    _aCTUAL_RESULT = value;
                    OnPropertyChanged("ACTUAL_RESULT");
                }
            }
        }
        private string _aCTUAL_RESULT;
    
        [DataMember]
        public string EXECUTION_STATUS_NAME
        {
            get { return _eXECUTION_STATUS_NAME; }
            set
            {
                if (_eXECUTION_STATUS_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EXECUTION_STATUS_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eXECUTION_STATUS_NAME = value;
                    OnPropertyChanged("EXECUTION_STATUS_NAME");
                }
            }
        }
        private string _eXECUTION_STATUS_NAME;
    
        [DataMember]
        public string TEST_CASE_NAME
        {
            get { return _tEST_CASE_NAME; }
            set
            {
                if (_tEST_CASE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_NAME = value;
                    OnPropertyChanged("TEST_CASE_NAME");
                }
            }
        }
        private string _tEST_CASE_NAME;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public int PROJECT_GROUP_ID
        {
            get { return _pROJECT_GROUP_ID; }
            set
            {
                if (_pROJECT_GROUP_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_GROUP_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_GROUP_ID = value;
                    OnPropertyChanged("PROJECT_GROUP_ID");
                }
            }
        }
        private int _pROJECT_GROUP_ID;
    
        [DataMember]
        public Nullable<System.DateTime> START_DATE
        {
            get { return _sTART_DATE; }
            set
            {
                if (_sTART_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("START_DATE", _sTART_DATE);
                    _sTART_DATE = value;
                    OnPropertyChanged("START_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _sTART_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> END_DATE
        {
            get { return _eND_DATE; }
            set
            {
                if (_eND_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("END_DATE", _eND_DATE);
                    _eND_DATE = value;
                    OnPropertyChanged("END_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _eND_DATE;
    
        [DataMember]
        public Nullable<int> ACTUAL_DURATION
        {
            get { return _aCTUAL_DURATION; }
            set
            {
                if (_aCTUAL_DURATION != value)
                {
                    ChangeTracker.RecordOriginalValue("ACTUAL_DURATION", _aCTUAL_DURATION);
                    _aCTUAL_DURATION = value;
                    OnPropertyChanged("ACTUAL_DURATION");
                }
            }
        }
        private Nullable<int> _aCTUAL_DURATION;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
