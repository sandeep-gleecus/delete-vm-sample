//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactLink))]
    [KnownType(typeof(ArtifactLinkType))]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(HistoryChangeSet))]
    public partial class HistoryAssociation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long AssociationHistoryId
        {
            get { return _associationHistoryId; }
            set
            {
                if (_associationHistoryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AssociationHistoryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _associationHistoryId = value;
                    OnPropertyChanged("AssociationHistoryId");
                }
            }
        }
        private long _associationHistoryId;
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    if (!IsDeserializing)
                    {
                        if (ChangeSet != null && ChangeSet.ChangeSetId != value)
                        {
                            ChangeSet = null;
                        }
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public int SourceArtifactTypeId
        {
            get { return _sourceArtifactTypeId; }
            set
            {
                if (_sourceArtifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactTypeId", _sourceArtifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (SourceArtifactType != null && SourceArtifactType.ArtifactTypeId != value)
                        {
                            SourceArtifactType = null;
                        }
                    }
                    _sourceArtifactTypeId = value;
                    OnPropertyChanged("SourceArtifactTypeId");
                }
            }
        }
        private int _sourceArtifactTypeId;
    
        [DataMember]
        public int SourceArtifactId
        {
            get { return _sourceArtifactId; }
            set
            {
                if (_sourceArtifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactId", _sourceArtifactId);
                    _sourceArtifactId = value;
                    OnPropertyChanged("SourceArtifactId");
                }
            }
        }
        private int _sourceArtifactId;
    
        [DataMember]
        public int DestArtifactTypeId
        {
            get { return _destArtifactTypeId; }
            set
            {
                if (_destArtifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactTypeId", _destArtifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (DestArtifactType != null && DestArtifactType.ArtifactTypeId != value)
                        {
                            DestArtifactType = null;
                        }
                    }
                    _destArtifactTypeId = value;
                    OnPropertyChanged("DestArtifactTypeId");
                }
            }
        }
        private int _destArtifactTypeId;
    
        [DataMember]
        public int DestArtifactId
        {
            get { return _destArtifactId; }
            set
            {
                if (_destArtifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactId", _destArtifactId);
                    _destArtifactId = value;
                    OnPropertyChanged("DestArtifactId");
                }
            }
        }
        private int _destArtifactId;
    
        [DataMember]
        public Nullable<int> ArtifactLinkId
        {
            get { return _artifactLinkId; }
            set
            {
                if (_artifactLinkId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactLinkId", _artifactLinkId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactLink != null && ArtifactLink.ArtifactLinkId != value)
                        {
                            ArtifactLink = null;
                        }
                    }
                    _artifactLinkId = value;
                    OnPropertyChanged("ArtifactLinkId");
                }
            }
        }
        private Nullable<int> _artifactLinkId;
    
        [DataMember]
        public string OldComment
        {
            get { return _oldComment; }
            set
            {
                if (_oldComment != value)
                {
                    ChangeTracker.RecordOriginalValue("OldComment", _oldComment);
                    _oldComment = value;
                    OnPropertyChanged("OldComment");
                }
            }
        }
        private string _oldComment;
    
        [DataMember]
        public Nullable<int> OldArtifactLinkTypeId
        {
            get { return _oldArtifactLinkTypeId; }
            set
            {
                if (_oldArtifactLinkTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("OldArtifactLinkTypeId", _oldArtifactLinkTypeId);
                    if (!IsDeserializing)
                    {
                        if (LinkTypeOld != null && LinkTypeOld.ArtifactLinkTypeId != value)
                        {
                            LinkTypeOld = null;
                        }
                    }
                    _oldArtifactLinkTypeId = value;
                    OnPropertyChanged("OldArtifactLinkTypeId");
                }
            }
        }
        private Nullable<int> _oldArtifactLinkTypeId;
    
        [DataMember]
        public string NewComment
        {
            get { return _newComment; }
            set
            {
                if (_newComment != value)
                {
                    ChangeTracker.RecordOriginalValue("NewComment", _newComment);
                    _newComment = value;
                    OnPropertyChanged("NewComment");
                }
            }
        }
        private string _newComment;
    
        [DataMember]
        public Nullable<int> NewArtifactLinkTypeId
        {
            get { return _newArtifactLinkTypeId; }
            set
            {
                if (_newArtifactLinkTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("NewArtifactLinkTypeId", _newArtifactLinkTypeId);
                    if (!IsDeserializing)
                    {
                        if (LinkTypeNew != null && LinkTypeNew.ArtifactLinkTypeId != value)
                        {
                            LinkTypeNew = null;
                        }
                    }
                    _newArtifactLinkTypeId = value;
                    OnPropertyChanged("NewArtifactLinkTypeId");
                }
            }
        }
        private Nullable<int> _newArtifactLinkTypeId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactLink ArtifactLink
        {
            get { return _artifactLink; }
            set
            {
                if (!ReferenceEquals(_artifactLink, value))
                {
                    var previousValue = _artifactLink;
                    _artifactLink = value;
                    FixupArtifactLink(previousValue);
                    OnNavigationPropertyChanged("ArtifactLink");
                }
            }
        }
        private ArtifactLink _artifactLink;
    
        [DataMember]
        public ArtifactLinkType LinkTypeNew
        {
            get { return _linkTypeNew; }
            set
            {
                if (!ReferenceEquals(_linkTypeNew, value))
                {
                    var previousValue = _linkTypeNew;
                    _linkTypeNew = value;
                    FixupLinkTypeNew(previousValue);
                    OnNavigationPropertyChanged("LinkTypeNew");
                }
            }
        }
        private ArtifactLinkType _linkTypeNew;
    
        [DataMember]
        public ArtifactLinkType LinkTypeOld
        {
            get { return _linkTypeOld; }
            set
            {
                if (!ReferenceEquals(_linkTypeOld, value))
                {
                    var previousValue = _linkTypeOld;
                    _linkTypeOld = value;
                    FixupLinkTypeOld(previousValue);
                    OnNavigationPropertyChanged("LinkTypeOld");
                }
            }
        }
        private ArtifactLinkType _linkTypeOld;
    
        [DataMember]
        public ArtifactType DestArtifactType
        {
            get { return _destArtifactType; }
            set
            {
                if (!ReferenceEquals(_destArtifactType, value))
                {
                    var previousValue = _destArtifactType;
                    _destArtifactType = value;
                    FixupDestArtifactType(previousValue);
                    OnNavigationPropertyChanged("DestArtifactType");
                }
            }
        }
        private ArtifactType _destArtifactType;
    
        [DataMember]
        public ArtifactType SourceArtifactType
        {
            get { return _sourceArtifactType; }
            set
            {
                if (!ReferenceEquals(_sourceArtifactType, value))
                {
                    var previousValue = _sourceArtifactType;
                    _sourceArtifactType = value;
                    FixupSourceArtifactType(previousValue);
                    OnNavigationPropertyChanged("SourceArtifactType");
                }
            }
        }
        private ArtifactType _sourceArtifactType;
    
        [DataMember]
        public HistoryChangeSet ChangeSet
        {
            get { return _changeSet; }
            set
            {
                if (!ReferenceEquals(_changeSet, value))
                {
                    var previousValue = _changeSet;
                    _changeSet = value;
                    FixupChangeSet(previousValue);
                    OnNavigationPropertyChanged("ChangeSet");
                }
            }
        }
        private HistoryChangeSet _changeSet;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactLink = null;
            LinkTypeNew = null;
            LinkTypeOld = null;
            DestArtifactType = null;
            SourceArtifactType = null;
            ChangeSet = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactLink(ArtifactLink previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryEntries.Contains(this))
            {
                previousValue.HistoryEntries.Remove(this);
            }
    
            if (ArtifactLink != null)
            {
                if (!ArtifactLink.HistoryEntries.Contains(this))
                {
                    ArtifactLink.HistoryEntries.Add(this);
                }
    
                ArtifactLinkId = ArtifactLink.ArtifactLinkId;
            }
            else if (!skipKeys)
            {
                ArtifactLinkId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactLink")
                    && (ChangeTracker.OriginalValues["ArtifactLink"] == ArtifactLink))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactLink");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactLink", previousValue);
                }
                if (ArtifactLink != null && !ArtifactLink.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactLink.StartTracking();
                }
            }
        }
    
        private void FixupLinkTypeNew(ArtifactLinkType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryEntriesNew.Contains(this))
            {
                previousValue.HistoryEntriesNew.Remove(this);
            }
    
            if (LinkTypeNew != null)
            {
                if (!LinkTypeNew.HistoryEntriesNew.Contains(this))
                {
                    LinkTypeNew.HistoryEntriesNew.Add(this);
                }
    
                NewArtifactLinkTypeId = LinkTypeNew.ArtifactLinkTypeId;
            }
            else if (!skipKeys)
            {
                NewArtifactLinkTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LinkTypeNew")
                    && (ChangeTracker.OriginalValues["LinkTypeNew"] == LinkTypeNew))
                {
                    ChangeTracker.OriginalValues.Remove("LinkTypeNew");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LinkTypeNew", previousValue);
                }
                if (LinkTypeNew != null && !LinkTypeNew.ChangeTracker.ChangeTrackingEnabled)
                {
                    LinkTypeNew.StartTracking();
                }
            }
        }
    
        private void FixupLinkTypeOld(ArtifactLinkType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryEntriesOld.Contains(this))
            {
                previousValue.HistoryEntriesOld.Remove(this);
            }
    
            if (LinkTypeOld != null)
            {
                if (!LinkTypeOld.HistoryEntriesOld.Contains(this))
                {
                    LinkTypeOld.HistoryEntriesOld.Add(this);
                }
    
                OldArtifactLinkTypeId = LinkTypeOld.ArtifactLinkTypeId;
            }
            else if (!skipKeys)
            {
                OldArtifactLinkTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LinkTypeOld")
                    && (ChangeTracker.OriginalValues["LinkTypeOld"] == LinkTypeOld))
                {
                    ChangeTracker.OriginalValues.Remove("LinkTypeOld");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LinkTypeOld", previousValue);
                }
                if (LinkTypeOld != null && !LinkTypeOld.ChangeTracker.ChangeTrackingEnabled)
                {
                    LinkTypeOld.StartTracking();
                }
            }
        }
    
        private void FixupDestArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssociationHistoryEntriesDest.Contains(this))
            {
                previousValue.AssociationHistoryEntriesDest.Remove(this);
            }
    
            if (DestArtifactType != null)
            {
                if (!DestArtifactType.AssociationHistoryEntriesDest.Contains(this))
                {
                    DestArtifactType.AssociationHistoryEntriesDest.Add(this);
                }
    
                DestArtifactTypeId = DestArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DestArtifactType")
                    && (ChangeTracker.OriginalValues["DestArtifactType"] == DestArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("DestArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactType", previousValue);
                }
                if (DestArtifactType != null && !DestArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DestArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupSourceArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssociationHistoryEntriesSource.Contains(this))
            {
                previousValue.AssociationHistoryEntriesSource.Remove(this);
            }
    
            if (SourceArtifactType != null)
            {
                if (!SourceArtifactType.AssociationHistoryEntriesSource.Contains(this))
                {
                    SourceArtifactType.AssociationHistoryEntriesSource.Add(this);
                }
    
                SourceArtifactTypeId = SourceArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SourceArtifactType")
                    && (ChangeTracker.OriginalValues["SourceArtifactType"] == SourceArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("SourceArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactType", previousValue);
                }
                if (SourceArtifactType != null && !SourceArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    SourceArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupChangeSet(HistoryChangeSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssociationChanges.Contains(this))
            {
                previousValue.AssociationChanges.Remove(this);
            }
    
            if (ChangeSet != null)
            {
                if (!ChangeSet.AssociationChanges.Contains(this))
                {
                    ChangeSet.AssociationChanges.Add(this);
                }
    
                ChangeSetId = ChangeSet.ChangeSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChangeSet")
                    && (ChangeTracker.OriginalValues["ChangeSet"] == ChangeSet))
                {
                    ChangeTracker.OriginalValues.Remove("ChangeSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChangeSet", previousValue);
                }
                if (ChangeSet != null && !ChangeSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChangeSet.StartTracking();
                }
            }
        }

        #endregion

    }
}
