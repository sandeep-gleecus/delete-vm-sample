//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomPropertyList))]
    [KnownType(typeof(DataSyncCustomPropertyValueMapping))]
    [KnownType(typeof(TestConfigurationParameterValue))]
    [KnownType(typeof(CustomPropertyValue))]
    public partial class CustomPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomPropertyValueId
        {
            get { return _customPropertyValueId; }
            set
            {
                if (_customPropertyValueId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomPropertyValueId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customPropertyValueId = value;
                    OnPropertyChanged("CustomPropertyValueId");
                }
            }
        }
        private int _customPropertyValueId;
    
        [DataMember]
        public int CustomPropertyListId
        {
            get { return _customPropertyListId; }
            set
            {
                if (_customPropertyListId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyListId", _customPropertyListId);
                    if (!IsDeserializing)
                    {
                        if (List != null && List.CustomPropertyListId != value)
                        {
                            List = null;
                        }
                    }
                    _customPropertyListId = value;
                    OnPropertyChanged("CustomPropertyListId");
                }
            }
        }
        private int _customPropertyListId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> DependentCustomPropertyListId
        {
            get { return _dependentCustomPropertyListId; }
            set
            {
                if (_dependentCustomPropertyListId != value)
                {
                    ChangeTracker.RecordOriginalValue("DependentCustomPropertyListId", _dependentCustomPropertyListId);
                    if (!IsDeserializing)
                    {
                        if (DependentList != null && DependentList.CustomPropertyListId != value)
                        {
                            DependentList = null;
                        }
                    }
                    _dependentCustomPropertyListId = value;
                    OnPropertyChanged("DependentCustomPropertyListId");
                }
            }
        }
        private Nullable<int> _dependentCustomPropertyListId;
    
        [DataMember]
        public Nullable<int> ParentCustomPropertyValueId
        {
            get { return _parentCustomPropertyValueId; }
            set
            {
                if (_parentCustomPropertyValueId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentCustomPropertyValueId", _parentCustomPropertyValueId);
                    if (!IsDeserializing)
                    {
                        if (ParentValue != null && ParentValue.CustomPropertyValueId != value)
                        {
                            ParentValue = null;
                        }
                    }
                    _parentCustomPropertyValueId = value;
                    OnPropertyChanged("ParentCustomPropertyValueId");
                }
            }
        }
        private Nullable<int> _parentCustomPropertyValueId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CustomPropertyList List
        {
            get { return _list; }
            set
            {
                if (!ReferenceEquals(_list, value))
                {
                    var previousValue = _list;
                    _list = value;
                    FixupList(previousValue);
                    OnNavigationPropertyChanged("List");
                }
            }
        }
        private CustomPropertyList _list;
    
        [DataMember]
        public TrackableCollection<DataSyncCustomPropertyValueMapping> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncCustomPropertyValueMapping>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncCustomPropertyValueMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncCustomPropertyValueMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncCustomPropertyValueMapping> _dataSyncMappings;
    
        [DataMember]
        public CustomPropertyList DependentList
        {
            get { return _dependentList; }
            set
            {
                if (!ReferenceEquals(_dependentList, value))
                {
                    var previousValue = _dependentList;
                    _dependentList = value;
                    FixupDependentList(previousValue);
                    OnNavigationPropertyChanged("DependentList");
                }
            }
        }
        private CustomPropertyList _dependentList;
    
        [DataMember]
        public TrackableCollection<TestConfigurationParameterValue> TestConfigurationParameterValues
        {
            get
            {
                if (_testConfigurationParameterValues == null)
                {
                    _testConfigurationParameterValues = new TrackableCollection<TestConfigurationParameterValue>();
                    _testConfigurationParameterValues.CollectionChanged += FixupTestConfigurationParameterValues;
                }
                return _testConfigurationParameterValues;
            }
            set
            {
                if (!ReferenceEquals(_testConfigurationParameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testConfigurationParameterValues != null)
                    {
                        _testConfigurationParameterValues.CollectionChanged -= FixupTestConfigurationParameterValues;
                    }
                    _testConfigurationParameterValues = value;
                    if (_testConfigurationParameterValues != null)
                    {
                        _testConfigurationParameterValues.CollectionChanged += FixupTestConfigurationParameterValues;
                    }
                    OnNavigationPropertyChanged("TestConfigurationParameterValues");
                }
            }
        }
        private TrackableCollection<TestConfigurationParameterValue> _testConfigurationParameterValues;
    
        [DataMember]
        public TrackableCollection<CustomPropertyValue> DependentValues
        {
            get
            {
                if (_dependentValues == null)
                {
                    _dependentValues = new TrackableCollection<CustomPropertyValue>();
                    _dependentValues.CollectionChanged += FixupDependentValues;
                }
                return _dependentValues;
            }
            set
            {
                if (!ReferenceEquals(_dependentValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dependentValues != null)
                    {
                        _dependentValues.CollectionChanged -= FixupDependentValues;
                    }
                    _dependentValues = value;
                    if (_dependentValues != null)
                    {
                        _dependentValues.CollectionChanged += FixupDependentValues;
                    }
                    OnNavigationPropertyChanged("DependentValues");
                }
            }
        }
        private TrackableCollection<CustomPropertyValue> _dependentValues;
    
        [DataMember]
        public TrackableCollection<CustomPropertyValue> ParentValues
        {
            get
            {
                if (_parentValues == null)
                {
                    _parentValues = new TrackableCollection<CustomPropertyValue>();
                    _parentValues.CollectionChanged += FixupParentValues;
                }
                return _parentValues;
            }
            set
            {
                if (!ReferenceEquals(_parentValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parentValues != null)
                    {
                        _parentValues.CollectionChanged -= FixupParentValues;
                    }
                    _parentValues = value;
                    if (_parentValues != null)
                    {
                        _parentValues.CollectionChanged += FixupParentValues;
                    }
                    OnNavigationPropertyChanged("ParentValues");
                }
            }
        }
        private TrackableCollection<CustomPropertyValue> _parentValues;
    
        [DataMember]
        public TrackableCollection<CustomPropertyValue> ChildValues
        {
            get
            {
                if (_childValues == null)
                {
                    _childValues = new TrackableCollection<CustomPropertyValue>();
                    _childValues.CollectionChanged += FixupChildValues;
                }
                return _childValues;
            }
            set
            {
                if (!ReferenceEquals(_childValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childValues != null)
                    {
                        _childValues.CollectionChanged -= FixupChildValues;
                    }
                    _childValues = value;
                    if (_childValues != null)
                    {
                        _childValues.CollectionChanged += FixupChildValues;
                    }
                    OnNavigationPropertyChanged("ChildValues");
                }
            }
        }
        private TrackableCollection<CustomPropertyValue> _childValues;
    
        [DataMember]
        public CustomPropertyValue ParentValue
        {
            get { return _parentValue; }
            set
            {
                if (!ReferenceEquals(_parentValue, value))
                {
                    var previousValue = _parentValue;
                    _parentValue = value;
                    FixupParentValue(previousValue);
                    OnNavigationPropertyChanged("ParentValue");
                }
            }
        }
        private CustomPropertyValue _parentValue;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            List = null;
            DataSyncMappings.Clear();
            DependentList = null;
            TestConfigurationParameterValues.Clear();
            DependentValues.Clear();
            ParentValues.Clear();
            ChildValues.Clear();
            ParentValue = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupList(CustomPropertyList previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Values.Contains(this))
            {
                previousValue.Values.Remove(this);
            }
    
            if (List != null)
            {
                if (!List.Values.Contains(this))
                {
                    List.Values.Add(this);
                }
    
                CustomPropertyListId = List.CustomPropertyListId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("List")
                    && (ChangeTracker.OriginalValues["List"] == List))
                {
                    ChangeTracker.OriginalValues.Remove("List");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("List", previousValue);
                }
                if (List != null && !List.ChangeTracker.ChangeTrackingEnabled)
                {
                    List.StartTracking();
                }
            }
        }
    
        private void FixupDependentList(CustomPropertyList previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DependentUponValues.Contains(this))
            {
                previousValue.DependentUponValues.Remove(this);
            }
    
            if (DependentList != null)
            {
                if (!DependentList.DependentUponValues.Contains(this))
                {
                    DependentList.DependentUponValues.Add(this);
                }
    
                DependentCustomPropertyListId = DependentList.CustomPropertyListId;
            }
            else if (!skipKeys)
            {
                DependentCustomPropertyListId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DependentList")
                    && (ChangeTracker.OriginalValues["DependentList"] == DependentList))
                {
                    ChangeTracker.OriginalValues.Remove("DependentList");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DependentList", previousValue);
                }
                if (DependentList != null && !DependentList.ChangeTracker.ChangeTrackingEnabled)
                {
                    DependentList.StartTracking();
                }
            }
        }
    
        private void FixupParentValue(CustomPropertyValue previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildValues.Contains(this))
            {
                previousValue.ChildValues.Remove(this);
            }
    
            if (ParentValue != null)
            {
                if (!ParentValue.ChildValues.Contains(this))
                {
                    ParentValue.ChildValues.Add(this);
                }
    
                ParentCustomPropertyValueId = ParentValue.CustomPropertyValueId;
            }
            else if (!skipKeys)
            {
                ParentCustomPropertyValueId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentValue")
                    && (ChangeTracker.OriginalValues["ParentValue"] == ParentValue))
                {
                    ChangeTracker.OriginalValues.Remove("ParentValue");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentValue", previousValue);
                }
                if (ParentValue != null && !ParentValue.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentValue.StartTracking();
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncCustomPropertyValueMapping item in e.NewItems)
                {
                    item.CustomPropertyValue = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncCustomPropertyValueMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomPropertyValue, this))
                    {
                        item.CustomPropertyValue = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestConfigurationParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestConfigurationParameterValue item in e.NewItems)
                {
                    item.CustomPropertyValue = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestConfigurationParameterValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestConfigurationParameterValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomPropertyValue, this))
                    {
                        item.CustomPropertyValue = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestConfigurationParameterValues", item);
                    }
                }
            }
        }
    
        private void FixupDependentValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomPropertyValue item in e.NewItems)
                {
                    if (!item.ParentValues.Contains(this))
                    {
                        item.ParentValues.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DependentValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomPropertyValue item in e.OldItems)
                {
                    if (item.ParentValues.Contains(this))
                    {
                        item.ParentValues.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DependentValues", item);
                    }
                }
            }
        }
    
        private void FixupParentValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomPropertyValue item in e.NewItems)
                {
                    if (!item.DependentValues.Contains(this))
                    {
                        item.DependentValues.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParentValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomPropertyValue item in e.OldItems)
                {
                    if (item.DependentValues.Contains(this))
                    {
                        item.DependentValues.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParentValues", item);
                    }
                }
            }
        }
    
        private void FixupChildValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomPropertyValue item in e.NewItems)
                {
                    item.ParentValue = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomPropertyValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentValue, this))
                    {
                        item.ParentValue = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildValues", item);
                    }
                }
            }
        }

        #endregion

    }
}
