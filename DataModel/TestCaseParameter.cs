//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestStepParameter))]
    [KnownType(typeof(TestSetParameter))]
    [KnownType(typeof(TestSetTestCaseParameter))]
    [KnownType(typeof(TestConfigurationSetParameter))]
    public partial class TestCaseParameter: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestCaseParameterId
        {
            get { return _testCaseParameterId; }
            set
            {
                if (_testCaseParameterId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestCaseParameterId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testCaseParameterId = value;
                    OnPropertyChanged("TestCaseParameterId");
                }
            }
        }
        private int _testCaseParameterId;
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string DefaultValue
        {
            get { return _defaultValue; }
            set
            {
                if (_defaultValue != value)
                {
                    ChangeTracker.RecordOriginalValue("DefaultValue", _defaultValue);
                    _defaultValue = value;
                    OnPropertyChanged("DefaultValue");
                }
            }
        }
        private string _defaultValue;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public TrackableCollection<TestStepParameter> StepParameterValues
        {
            get
            {
                if (_stepParameterValues == null)
                {
                    _stepParameterValues = new TrackableCollection<TestStepParameter>();
                    _stepParameterValues.CollectionChanged += FixupStepParameterValues;
                }
                return _stepParameterValues;
            }
            set
            {
                if (!ReferenceEquals(_stepParameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_stepParameterValues != null)
                    {
                        _stepParameterValues.CollectionChanged -= FixupStepParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestStepParameter item in _stepParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _stepParameterValues = value;
                    if (_stepParameterValues != null)
                    {
                        _stepParameterValues.CollectionChanged += FixupStepParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestStepParameter item in _stepParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("StepParameterValues");
                }
            }
        }
        private TrackableCollection<TestStepParameter> _stepParameterValues;
    
        [DataMember]
        public TrackableCollection<TestSetParameter> TestSetParameterValues
        {
            get
            {
                if (_testSetParameterValues == null)
                {
                    _testSetParameterValues = new TrackableCollection<TestSetParameter>();
                    _testSetParameterValues.CollectionChanged += FixupTestSetParameterValues;
                }
                return _testSetParameterValues;
            }
            set
            {
                if (!ReferenceEquals(_testSetParameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetParameterValues != null)
                    {
                        _testSetParameterValues.CollectionChanged -= FixupTestSetParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetParameter item in _testSetParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetParameterValues = value;
                    if (_testSetParameterValues != null)
                    {
                        _testSetParameterValues.CollectionChanged += FixupTestSetParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetParameter item in _testSetParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetParameterValues");
                }
            }
        }
        private TrackableCollection<TestSetParameter> _testSetParameterValues;
    
        [DataMember]
        public TrackableCollection<TestSetTestCaseParameter> TestSetTestCaseParameterValues
        {
            get
            {
                if (_testSetTestCaseParameterValues == null)
                {
                    _testSetTestCaseParameterValues = new TrackableCollection<TestSetTestCaseParameter>();
                    _testSetTestCaseParameterValues.CollectionChanged += FixupTestSetTestCaseParameterValues;
                }
                return _testSetTestCaseParameterValues;
            }
            set
            {
                if (!ReferenceEquals(_testSetTestCaseParameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetTestCaseParameterValues != null)
                    {
                        _testSetTestCaseParameterValues.CollectionChanged -= FixupTestSetTestCaseParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetTestCaseParameter item in _testSetTestCaseParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetTestCaseParameterValues = value;
                    if (_testSetTestCaseParameterValues != null)
                    {
                        _testSetTestCaseParameterValues.CollectionChanged += FixupTestSetTestCaseParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetTestCaseParameter item in _testSetTestCaseParameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetTestCaseParameterValues");
                }
            }
        }
        private TrackableCollection<TestSetTestCaseParameter> _testSetTestCaseParameterValues;
    
        [DataMember]
        public TrackableCollection<TestConfigurationSetParameter> TestConfigurationSetParameters
        {
            get
            {
                if (_testConfigurationSetParameters == null)
                {
                    _testConfigurationSetParameters = new TrackableCollection<TestConfigurationSetParameter>();
                    _testConfigurationSetParameters.CollectionChanged += FixupTestConfigurationSetParameters;
                }
                return _testConfigurationSetParameters;
            }
            set
            {
                if (!ReferenceEquals(_testConfigurationSetParameters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testConfigurationSetParameters != null)
                    {
                        _testConfigurationSetParameters.CollectionChanged -= FixupTestConfigurationSetParameters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestConfigurationSetParameter item in _testConfigurationSetParameters)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testConfigurationSetParameters = value;
                    if (_testConfigurationSetParameters != null)
                    {
                        _testConfigurationSetParameters.CollectionChanged += FixupTestConfigurationSetParameters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestConfigurationSetParameter item in _testConfigurationSetParameters)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestConfigurationSetParameters");
                }
            }
        }
        private TrackableCollection<TestConfigurationSetParameter> _testConfigurationSetParameters;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TestCase = null;
            StepParameterValues.Clear();
            TestSetParameterValues.Clear();
            TestSetTestCaseParameterValues.Clear();
            TestConfigurationSetParameters.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTestCase(TestCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Parameters.Contains(this))
            {
                previousValue.Parameters.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.Parameters.Contains(this))
                {
                    TestCase.Parameters.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupStepParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStepParameter item in e.NewItems)
                {
                    item.Parameter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("StepParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStepParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parameter, this))
                    {
                        item.Parameter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("StepParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetParameter item in e.NewItems)
                {
                    item.TestCaseParameter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCaseParameter, this))
                    {
                        item.TestCaseParameter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetTestCaseParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetTestCaseParameter item in e.NewItems)
                {
                    item.Parameter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetTestCaseParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetTestCaseParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parameter, this))
                    {
                        item.Parameter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetTestCaseParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestConfigurationSetParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestConfigurationSetParameter item in e.NewItems)
                {
                    item.TestCaseParameter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestConfigurationSetParameters", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestConfigurationSetParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCaseParameter, this))
                    {
                        item.TestCaseParameter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestConfigurationSetParameters", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
