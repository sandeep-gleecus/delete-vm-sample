//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class TST_ERROR_LOG: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ErrorLogId
        {
            get { return _errorLogId; }
            set
            {
                if (_errorLogId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ErrorLogId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _errorLogId = value;
                    OnPropertyChanged("ErrorLogId");
                }
            }
        }
        private int _errorLogId;
    
        [DataMember]
        public string ErrorMessage
        {
            get { return _errorMessage; }
            set
            {
                if (_errorMessage != value)
                {
                    ChangeTracker.RecordOriginalValue("ErrorMessage", _errorMessage);
                    _errorMessage = value;
                    OnPropertyChanged("ErrorMessage");
                }
            }
        }
        private string _errorMessage;
    
        [DataMember]
        public string ErrorContext
        {
            get { return _errorContext; }
            set
            {
                if (_errorContext != value)
                {
                    ChangeTracker.RecordOriginalValue("ErrorContext", _errorContext);
                    _errorContext = value;
                    OnPropertyChanged("ErrorContext");
                }
            }
        }
        private string _errorContext;
    
        [DataMember]
        public System.DateTime CreatedDateTimeUtc
        {
            get { return _createdDateTimeUtc; }
            set
            {
                if (_createdDateTimeUtc != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedDateTimeUtc", _createdDateTimeUtc);
                    _createdDateTimeUtc = value;
                    OnPropertyChanged("CreatedDateTimeUtc");
                }
            }
        }
        private System.DateTime _createdDateTimeUtc;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public string CallingApplication
        {
            get { return _callingApplication; }
            set
            {
                if (_callingApplication != value)
                {
                    ChangeTracker.RecordOriginalValue("CallingApplication", _callingApplication);
                    _callingApplication = value;
                    OnPropertyChanged("CallingApplication");
                }
            }
        }
        private string _callingApplication;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
