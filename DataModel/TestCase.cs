//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attachment))]
    [KnownType(typeof(AutomationEngine))]
    [KnownType(typeof(ExecutionStatus))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TestCaseParameter))]
    [KnownType(typeof(TestCasePriority))]
    [KnownType(typeof(TestStep))]
    [KnownType(typeof(TestCaseFolder))]
    [KnownType(typeof(TestCaseStatus))]
    [KnownType(typeof(TestCaseDiscussion))]
    [KnownType(typeof(TestCaseType))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(ReleaseTestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestRunStep))]
    [KnownType(typeof(TestSetTestCase))]
    [KnownType(typeof(TestCaseSignature))]
    [KnownType(typeof(TestCasePreparationStatus))]
    public partial class TestCase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestCaseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatusId", _executionStatusId);
                    if (!IsDeserializing)
                    {
                        if (ExecutionStatus != null && ExecutionStatus.ExecutionStatusId != value)
                        {
                            ExecutionStatus = null;
                        }
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public Nullable<int> TestCasePriorityId
        {
            get { return _testCasePriorityId; }
            set
            {
                if (_testCasePriorityId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCasePriorityId", _testCasePriorityId);
                    if (!IsDeserializing)
                    {
                        if (Priority != null && Priority.TestCasePriorityId != value)
                        {
                            Priority = null;
                        }
                    }
                    _testCasePriorityId = value;
                    OnPropertyChanged("TestCasePriorityId");
                }
            }
        }
        private Nullable<int> _testCasePriorityId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorId", _authorId);
                    if (!IsDeserializing)
                    {
                        if (Author != null && Author.UserId != value)
                        {
                            Author = null;
                        }
                    }
                    _authorId = value;
                    OnPropertyChanged("AuthorId");
                }
            }
        }
        private int _authorId;
    
        [DataMember]
        public int TestCaseStatusId
        {
            get { return _testCaseStatusId; }
            set
            {
                if (_testCaseStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseStatusId", _testCaseStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.TestCaseStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _testCaseStatusId = value;
                    OnPropertyChanged("TestCaseStatusId");
                }
            }
        }
        private int _testCaseStatusId;
    
        [DataMember]
        public int TestCaseTypeId
        {
            get { return _testCaseTypeId; }
            set
            {
                if (_testCaseTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseTypeId", _testCaseTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.TestCaseTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _testCaseTypeId = value;
                    OnPropertyChanged("TestCaseTypeId");
                }
            }
        }
        private int _testCaseTypeId;
    
        [DataMember]
        public Nullable<int> TestCaseFolderId
        {
            get { return _testCaseFolderId; }
            set
            {
                if (_testCaseFolderId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseFolderId", _testCaseFolderId);
                    if (!IsDeserializing)
                    {
                        if (Folder != null && Folder.TestCaseFolderId != value)
                        {
                            Folder = null;
                        }
                    }
                    _testCaseFolderId = value;
                    OnPropertyChanged("TestCaseFolderId");
                }
            }
        }
        private Nullable<int> _testCaseFolderId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> ExecutionDate
        {
            get { return _executionDate; }
            set
            {
                if (_executionDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionDate", _executionDate);
                    _executionDate = value;
                    OnPropertyChanged("ExecutionDate");
                }
            }
        }
        private Nullable<System.DateTime> _executionDate;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public Nullable<int> AutomationEngineId
        {
            get { return _automationEngineId; }
            set
            {
                if (_automationEngineId != value)
                {
                    ChangeTracker.RecordOriginalValue("AutomationEngineId", _automationEngineId);
                    if (!IsDeserializing)
                    {
                        if (AutomationEngine != null && AutomationEngine.AutomationEngineId != value)
                        {
                            AutomationEngine = null;
                        }
                    }
                    _automationEngineId = value;
                    OnPropertyChanged("AutomationEngineId");
                }
            }
        }
        private Nullable<int> _automationEngineId;
    
        [DataMember]
        public Nullable<int> AutomationAttachmentId
        {
            get { return _automationAttachmentId; }
            set
            {
                if (_automationAttachmentId != value)
                {
                    ChangeTracker.RecordOriginalValue("AutomationAttachmentId", _automationAttachmentId);
                    if (!IsDeserializing)
                    {
                        if (Attachments != null && Attachments.AttachmentId != value)
                        {
                            Attachments = null;
                        }
                    }
                    _automationAttachmentId = value;
                    OnPropertyChanged("AutomationAttachmentId");
                }
            }
        }
        private Nullable<int> _automationAttachmentId;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public bool IsTestSteps
        {
            get { return _isTestSteps; }
            set
            {
                if (_isTestSteps != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTestSteps", _isTestSteps);
                    _isTestSteps = value;
                    OnPropertyChanged("IsTestSteps");
                }
            }
        }
        private bool _isTestSteps;
    
        [DataMember]
        public Nullable<int> EstimatedDuration
        {
            get { return _estimatedDuration; }
            set
            {
                if (_estimatedDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedDuration", _estimatedDuration);
                    _estimatedDuration = value;
                    OnPropertyChanged("EstimatedDuration");
                }
            }
        }
        private Nullable<int> _estimatedDuration;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;
    
        [DataMember]
        public string ComponentIds
        {
            get { return _componentIds; }
            set
            {
                if (_componentIds != value)
                {
                    ChangeTracker.RecordOriginalValue("ComponentIds", _componentIds);
                    _componentIds = value;
                    OnPropertyChanged("ComponentIds");
                }
            }
        }
        private string _componentIds;
    
        [DataMember]
        public bool IsSuspect
        {
            get { return _isSuspect; }
            set
            {
                if (_isSuspect != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSuspect", _isSuspect);
                    _isSuspect = value;
                    OnPropertyChanged("IsSuspect");
                }
            }
        }
        private bool _isSuspect;
    
        [DataMember]
        public Nullable<int> TestCasePreparationStatusId
        {
            get { return _testCasePreparationStatusId; }
            set
            {
                if (_testCasePreparationStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCasePreparationStatusId", _testCasePreparationStatusId);
                    if (!IsDeserializing)
                    {
                        if (TestCasePreparationStatus != null && TestCasePreparationStatus.TestCasePreparationStatusId != value)
                        {
                            TestCasePreparationStatus = null;
                        }
                    }
                    _testCasePreparationStatusId = value;
                    OnPropertyChanged("TestCasePreparationStatusId");
                }
            }
        }
        private Nullable<int> _testCasePreparationStatusId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Attachment Attachments
        {
            get { return _attachments; }
            set
            {
                if (!ReferenceEquals(_attachments, value))
                {
                    var previousValue = _attachments;
                    _attachments = value;
                    FixupAttachments(previousValue);
                    OnNavigationPropertyChanged("Attachments");
                }
            }
        }
        private Attachment _attachments;
    
        [DataMember]
        public AutomationEngine AutomationEngine
        {
            get { return _automationEngine; }
            set
            {
                if (!ReferenceEquals(_automationEngine, value))
                {
                    var previousValue = _automationEngine;
                    _automationEngine = value;
                    FixupAutomationEngine(previousValue);
                    OnNavigationPropertyChanged("AutomationEngine");
                }
            }
        }
        private AutomationEngine _automationEngine;
    
        [DataMember]
        public ExecutionStatus ExecutionStatus
        {
            get { return _executionStatus; }
            set
            {
                if (!ReferenceEquals(_executionStatus, value))
                {
                    var previousValue = _executionStatus;
                    _executionStatus = value;
                    FixupExecutionStatus(previousValue);
                    OnNavigationPropertyChanged("ExecutionStatus");
                }
            }
        }
        private ExecutionStatus _executionStatus;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public User Author
        {
            get { return _author; }
            set
            {
                if (!ReferenceEquals(_author, value))
                {
                    var previousValue = _author;
                    _author = value;
                    FixupAuthor(previousValue);
                    OnNavigationPropertyChanged("Author");
                }
            }
        }
        private User _author;
    
        [DataMember]
        public TrackableCollection<TestCaseParameter> Parameters
        {
            get
            {
                if (_parameters == null)
                {
                    _parameters = new TrackableCollection<TestCaseParameter>();
                    _parameters.CollectionChanged += FixupParameters;
                }
                return _parameters;
            }
            set
            {
                if (!ReferenceEquals(_parameters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parameters != null)
                    {
                        _parameters.CollectionChanged -= FixupParameters;
                    }
                    _parameters = value;
                    if (_parameters != null)
                    {
                        _parameters.CollectionChanged += FixupParameters;
                    }
                    OnNavigationPropertyChanged("Parameters");
                }
            }
        }
        private TrackableCollection<TestCaseParameter> _parameters;
    
        [DataMember]
        public TestCasePriority Priority
        {
            get { return _priority; }
            set
            {
                if (!ReferenceEquals(_priority, value))
                {
                    var previousValue = _priority;
                    _priority = value;
                    FixupPriority(previousValue);
                    OnNavigationPropertyChanged("Priority");
                }
            }
        }
        private TestCasePriority _priority;
    
        [DataMember]
        public TrackableCollection<TestStep> ParentLinkedTestStep
        {
            get
            {
                if (_parentLinkedTestStep == null)
                {
                    _parentLinkedTestStep = new TrackableCollection<TestStep>();
                    _parentLinkedTestStep.CollectionChanged += FixupParentLinkedTestStep;
                }
                return _parentLinkedTestStep;
            }
            set
            {
                if (!ReferenceEquals(_parentLinkedTestStep, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parentLinkedTestStep != null)
                    {
                        _parentLinkedTestStep.CollectionChanged -= FixupParentLinkedTestStep;
                    }
                    _parentLinkedTestStep = value;
                    if (_parentLinkedTestStep != null)
                    {
                        _parentLinkedTestStep.CollectionChanged += FixupParentLinkedTestStep;
                    }
                    OnNavigationPropertyChanged("ParentLinkedTestStep");
                }
            }
        }
        private TrackableCollection<TestStep> _parentLinkedTestStep;
    
        [DataMember]
        public TrackableCollection<TestStep> TestSteps
        {
            get
            {
                if (_testSteps == null)
                {
                    _testSteps = new TrackableCollection<TestStep>();
                    _testSteps.CollectionChanged += FixupTestSteps;
                }
                return _testSteps;
            }
            set
            {
                if (!ReferenceEquals(_testSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged -= FixupTestSteps;
                    }
                    _testSteps = value;
                    if (_testSteps != null)
                    {
                        _testSteps.CollectionChanged += FixupTestSteps;
                    }
                    OnNavigationPropertyChanged("TestSteps");
                }
            }
        }
        private TrackableCollection<TestStep> _testSteps;
    
        [DataMember]
        public TestCaseFolder Folder
        {
            get { return _folder; }
            set
            {
                if (!ReferenceEquals(_folder, value))
                {
                    var previousValue = _folder;
                    _folder = value;
                    FixupFolder(previousValue);
                    OnNavigationPropertyChanged("Folder");
                }
            }
        }
        private TestCaseFolder _folder;
    
        [DataMember]
        public TestCaseStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private TestCaseStatus _status;
    
        [DataMember]
        public TrackableCollection<TestCaseDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<TestCaseDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseDiscussion item in _discussions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseDiscussion item in _discussions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<TestCaseDiscussion> _discussions;
    
        [DataMember]
        public TestCaseType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private TestCaseType _type;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public TrackableCollection<Requirement> Requirements
        {
            get
            {
                if (_requirements == null)
                {
                    _requirements = new TrackableCollection<Requirement>();
                    _requirements.CollectionChanged += FixupRequirements;
                }
                return _requirements;
            }
            set
            {
                if (!ReferenceEquals(_requirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged -= FixupRequirements;
                    }
                    _requirements = value;
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged += FixupRequirements;
                    }
                    OnNavigationPropertyChanged("Requirements");
                }
            }
        }
        private TrackableCollection<Requirement> _requirements;
    
        [DataMember]
        public TrackableCollection<ReleaseTestCase> Releases
        {
            get
            {
                if (_releases == null)
                {
                    _releases = new TrackableCollection<ReleaseTestCase>();
                    _releases.CollectionChanged += FixupReleases;
                }
                return _releases;
            }
            set
            {
                if (!ReferenceEquals(_releases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releases != null)
                    {
                        _releases.CollectionChanged -= FixupReleases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestCase item in _releases)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releases = value;
                    if (_releases != null)
                    {
                        _releases.CollectionChanged += FixupReleases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestCase item in _releases)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Releases");
                }
            }
        }
        private TrackableCollection<ReleaseTestCase> _releases;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TrackableCollection<TestRunStep> TestRunSteps
        {
            get
            {
                if (_testRunSteps == null)
                {
                    _testRunSteps = new TrackableCollection<TestRunStep>();
                    _testRunSteps.CollectionChanged += FixupTestRunSteps;
                }
                return _testRunSteps;
            }
            set
            {
                if (!ReferenceEquals(_testRunSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged -= FixupTestRunSteps;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestRunStep item in _testRunSteps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testRunSteps = value;
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged += FixupTestRunSteps;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestRunStep item in _testRunSteps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestRunSteps");
                }
            }
        }
        private TrackableCollection<TestRunStep> _testRunSteps;
    
        [DataMember]
        public TrackableCollection<TestSetTestCase> TestSetTestCases
        {
            get
            {
                if (_testSetTestCases == null)
                {
                    _testSetTestCases = new TrackableCollection<TestSetTestCase>();
                    _testSetTestCases.CollectionChanged += FixupTestSetTestCases;
                }
                return _testSetTestCases;
            }
            set
            {
                if (!ReferenceEquals(_testSetTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetTestCases != null)
                    {
                        _testSetTestCases.CollectionChanged -= FixupTestSetTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetTestCase item in _testSetTestCases)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetTestCases = value;
                    if (_testSetTestCases != null)
                    {
                        _testSetTestCases.CollectionChanged += FixupTestSetTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetTestCase item in _testSetTestCases)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetTestCases");
                }
            }
        }
        private TrackableCollection<TestSetTestCase> _testSetTestCases;
    
        [DataMember]
        public TrackableCollection<TestCaseSignature> TST_TEST_CASE_SIGNATURE
        {
            get
            {
                if (_tST_TEST_CASE_SIGNATURE == null)
                {
                    _tST_TEST_CASE_SIGNATURE = new TrackableCollection<TestCaseSignature>();
                    _tST_TEST_CASE_SIGNATURE.CollectionChanged += FixupTST_TEST_CASE_SIGNATURE;
                }
                return _tST_TEST_CASE_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEST_CASE_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEST_CASE_SIGNATURE != null)
                    {
                        _tST_TEST_CASE_SIGNATURE.CollectionChanged -= FixupTST_TEST_CASE_SIGNATURE;
                    }
                    _tST_TEST_CASE_SIGNATURE = value;
                    if (_tST_TEST_CASE_SIGNATURE != null)
                    {
                        _tST_TEST_CASE_SIGNATURE.CollectionChanged += FixupTST_TEST_CASE_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_TEST_CASE_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TestCaseSignature> _tST_TEST_CASE_SIGNATURE;
    
        [DataMember]
        public TestCasePreparationStatus TestCasePreparationStatus
        {
            get { return _testCasePreparationStatus; }
            set
            {
                if (!ReferenceEquals(_testCasePreparationStatus, value))
                {
                    var previousValue = _testCasePreparationStatus;
                    _testCasePreparationStatus = value;
                    FixupTestCasePreparationStatus(previousValue);
                    OnNavigationPropertyChanged("TestCasePreparationStatus");
                }
            }
        }
        private TestCasePreparationStatus _testCasePreparationStatus;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Attachments = null;
            AutomationEngine = null;
            ExecutionStatus = null;
            Project = null;
            Author = null;
            Parameters.Clear();
            Priority = null;
            ParentLinkedTestStep.Clear();
            TestSteps.Clear();
            Folder = null;
            Status = null;
            Discussions.Clear();
            Type = null;
            Owner = null;
            Requirements.Clear();
            Releases.Clear();
            TestRuns.Clear();
            TestRunSteps.Clear();
            TestSetTestCases.Clear();
            TST_TEST_CASE_SIGNATURE.Clear();
            TestCasePreparationStatus = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttachments(Attachment previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Attachments != null)
            {
                if (!Attachments.TestCases.Contains(this))
                {
                    Attachments.TestCases.Add(this);
                }
    
                AutomationAttachmentId = Attachments.AttachmentId;
            }
            else if (!skipKeys)
            {
                AutomationAttachmentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attachments")
                    && (ChangeTracker.OriginalValues["Attachments"] == Attachments))
                {
                    ChangeTracker.OriginalValues.Remove("Attachments");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attachments", previousValue);
                }
                if (Attachments != null && !Attachments.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attachments.StartTracking();
                }
            }
        }
    
        private void FixupAutomationEngine(AutomationEngine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (AutomationEngine != null)
            {
                if (!AutomationEngine.TestCases.Contains(this))
                {
                    AutomationEngine.TestCases.Add(this);
                }
    
                AutomationEngineId = AutomationEngine.AutomationEngineId;
            }
            else if (!skipKeys)
            {
                AutomationEngineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AutomationEngine")
                    && (ChangeTracker.OriginalValues["AutomationEngine"] == AutomationEngine))
                {
                    ChangeTracker.OriginalValues.Remove("AutomationEngine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AutomationEngine", previousValue);
                }
                if (AutomationEngine != null && !AutomationEngine.ChangeTracker.ChangeTrackingEnabled)
                {
                    AutomationEngine.StartTracking();
                }
            }
        }
    
        private void FixupExecutionStatus(ExecutionStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (ExecutionStatus != null)
            {
                if (!ExecutionStatus.TestCases.Contains(this))
                {
                    ExecutionStatus.TestCases.Add(this);
                }
    
                ExecutionStatusId = ExecutionStatus.ExecutionStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExecutionStatus")
                    && (ChangeTracker.OriginalValues["ExecutionStatus"] == ExecutionStatus))
                {
                    ChangeTracker.OriginalValues.Remove("ExecutionStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatus", previousValue);
                }
                if (ExecutionStatus != null && !ExecutionStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExecutionStatus.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.TestCases.Contains(this))
                {
                    Project.TestCases.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupAuthor(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuthoredTestCases.Contains(this))
            {
                previousValue.AuthoredTestCases.Remove(this);
            }
    
            if (Author != null)
            {
                if (!Author.AuthoredTestCases.Contains(this))
                {
                    Author.AuthoredTestCases.Add(this);
                }
    
                AuthorId = Author.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Author")
                    && (ChangeTracker.OriginalValues["Author"] == Author))
                {
                    ChangeTracker.OriginalValues.Remove("Author");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Author", previousValue);
                }
                if (Author != null && !Author.ChangeTracker.ChangeTrackingEnabled)
                {
                    Author.StartTracking();
                }
            }
        }
    
        private void FixupPriority(TestCasePriority previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Priority != null)
            {
                if (!Priority.TestCases.Contains(this))
                {
                    Priority.TestCases.Add(this);
                }
    
                TestCasePriorityId = Priority.TestCasePriorityId;
            }
            else if (!skipKeys)
            {
                TestCasePriorityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Priority")
                    && (ChangeTracker.OriginalValues["Priority"] == Priority))
                {
                    ChangeTracker.OriginalValues.Remove("Priority");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Priority", previousValue);
                }
                if (Priority != null && !Priority.ChangeTracker.ChangeTrackingEnabled)
                {
                    Priority.StartTracking();
                }
            }
        }
    
        private void FixupFolder(TestCaseFolder previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Folder != null)
            {
                if (!Folder.TestCases.Contains(this))
                {
                    Folder.TestCases.Add(this);
                }
    
                TestCaseFolderId = Folder.TestCaseFolderId;
            }
            else if (!skipKeys)
            {
                TestCaseFolderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Folder")
                    && (ChangeTracker.OriginalValues["Folder"] == Folder))
                {
                    ChangeTracker.OriginalValues.Remove("Folder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Folder", previousValue);
                }
                if (Folder != null && !Folder.ChangeTracker.ChangeTrackingEnabled)
                {
                    Folder.StartTracking();
                }
            }
        }
    
        private void FixupStatus(TestCaseStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.TestCases.Contains(this))
                {
                    Status.TestCases.Add(this);
                }
    
                TestCaseStatusId = Status.TestCaseStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupType(TestCaseType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestCases.Contains(this))
            {
                previousValue.TestCases.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.TestCases.Contains(this))
                {
                    Type.TestCases.Add(this);
                }
    
                TestCaseTypeId = Type.TestCaseTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedTestCases.Contains(this))
            {
                previousValue.OwnedTestCases.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedTestCases.Contains(this))
                {
                    Owner.OwnedTestCases.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupTestCasePreparationStatus(TestCasePreparationStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_TEST_CASE.Contains(this))
            {
                previousValue.TST_TEST_CASE.Remove(this);
            }
    
            if (TestCasePreparationStatus != null)
            {
                if (!TestCasePreparationStatus.TST_TEST_CASE.Contains(this))
                {
                    TestCasePreparationStatus.TST_TEST_CASE.Add(this);
                }
    
                TestCasePreparationStatusId = TestCasePreparationStatus.TestCasePreparationStatusId;
            }
            else if (!skipKeys)
            {
                TestCasePreparationStatusId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCasePreparationStatus")
                    && (ChangeTracker.OriginalValues["TestCasePreparationStatus"] == TestCasePreparationStatus))
                {
                    ChangeTracker.OriginalValues.Remove("TestCasePreparationStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCasePreparationStatus", previousValue);
                }
                if (TestCasePreparationStatus != null && !TestCasePreparationStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCasePreparationStatus.StartTracking();
                }
            }
        }
    
        private void FixupParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseParameter item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Parameters", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Parameters", item);
                    }
                }
            }
        }
    
        private void FixupParentLinkedTestStep(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStep item in e.NewItems)
                {
                    item.LinkedTestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParentLinkedTestStep", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.LinkedTestCase, this))
                    {
                        item.LinkedTestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParentLinkedTestStep", item);
                    }
                }
            }
        }
    
        private void FixupTestSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStep item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSteps", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseDiscussion item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    if (!item.TestCases.Contains(this))
                    {
                        item.TestCases.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (item.TestCases.Contains(this))
                    {
                        item.TestCases.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
                    }
                }
            }
        }
    
        private void FixupReleases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestCase item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Releases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Releases", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupTestRunSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunStep item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRunSteps", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRunSteps", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetTestCase item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetTestCases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetTestCases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_TEST_CASE_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseSignature item in e.NewItems)
                {
                    item.TestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEST_CASE_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseSignature item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestCase, this))
                    {
                        item.TestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEST_CASE_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
