//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Dashboard))]
    public partial class DashboardGlobalPersonalization: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DashboardId
        {
            get { return _dashboardId; }
            set
            {
                if (_dashboardId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DashboardId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Dashboard != null && Dashboard.DashboardId != value)
                        {
                            Dashboard = null;
                        }
                    }
                    _dashboardId = value;
                    OnPropertyChanged("DashboardId");
                }
            }
        }
        private int _dashboardId;
    
        [DataMember]
        public byte[] PageSettings
        {
            get { return _pageSettings; }
            set
            {
                if (_pageSettings != value)
                {
                    ChangeTracker.RecordOriginalValue("PageSettings", _pageSettings);
                    _pageSettings = value;
                    OnPropertyChanged("PageSettings");
                }
            }
        }
        private byte[] _pageSettings;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Dashboard Dashboard
        {
            get { return _dashboard; }
            set
            {
                if (!ReferenceEquals(_dashboard, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (DashboardId != value.DashboardId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _dashboard;
                    _dashboard = value;
                    FixupDashboard(previousValue);
                    OnNavigationPropertyChanged("Dashboard");
                }
            }
        }
        private Dashboard _dashboard;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Dashboard = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDashboard(Dashboard previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.GlobalPersonalization, this))
            {
                previousValue.GlobalPersonalization = null;
            }
    
            if (Dashboard != null)
            {
                Dashboard.GlobalPersonalization = this;
                DashboardId = Dashboard.DashboardId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Dashboard")
                    && (ChangeTracker.OriginalValues["Dashboard"] == Dashboard))
                {
                    ChangeTracker.OriginalValues.Remove("Dashboard");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Dashboard", previousValue);
                }
                if (Dashboard != null && !Dashboard.ChangeTracker.ChangeTrackingEnabled)
                {
                    Dashboard.StartTracking();
                }
            }
        }

        #endregion

    }
}
