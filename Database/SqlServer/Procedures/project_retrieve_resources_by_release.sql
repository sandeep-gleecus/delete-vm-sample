-- ================================================================
-- Author:			Inflectra Corporation
-- Business Object: Project
-- Description:		Retrieves the project resources for a specific release/iteration
-- ================================================================
IF OBJECT_ID ( 'PROJECT_RETRIEVE_RESOURCES_BY_RELEASE', 'P' ) IS NOT NULL 
    DROP PROCEDURE PROJECT_RETRIEVE_RESOURCES_BY_RELEASE;
GO
CREATE PROCEDURE PROJECT_RETRIEVE_RESOURCES_BY_RELEASE
	@ProjectId INT,
	@ReleaseId INT
AS
BEGIN
	--Declare results set
	DECLARE  @ReleaseList TABLE
	(
		RELEASE_ID INT
	)
	DECLARE @ReturnValue INT
	
	--Populate list of child iterations
	INSERT @ReleaseList (RELEASE_ID)
	SELECT RELEASE_ID FROM FN_RELEASE_GET_SELF_AND_ITERATIONS (@ProjectId, @ReleaseId)
	
	SELECT	PRU.PROJECT_ID, PRU.USER_ID, MIN(USP.FIRST_NAME + ' ' + USP.LAST_NAME) AS FULL_NAME,
			MIN(PRU.PROJECT_ROLE_ID) AS PROJECT_ROLE_ID, MIN(PRR.NAME) AS PROJECT_ROLE_NAME,
			SUM(ISNULL(RES.INCIDENT_EFFORT,0)) AS INCIDENT_EFFORT, SUM(ISNULL(RES.REQ_TASK_EFFORT,0)) AS REQ_TASK_EFFORT,
			SUM(ISNULL(RES.INCIDENT_EFFORT_OPEN,0)) AS INCIDENT_EFFORT_OPEN, SUM(ISNULL(RES.REQ_TASK_EFFORT_OPEN,0)) AS REQ_TASK_EFFORT_OPEN
	FROM (
		--We want the totals for open and all incident
		SELECT  INC.PROJECT_ID, INC.OWNER_ID AS USER_ID, 
				INC.PROJECTED_EFFORT AS INCIDENT_EFFORT, 0 AS REQ_TASK_EFFORT,
				(CASE WHEN IST.IS_OPEN_STATUS = 1 THEN INC.PROJECTED_EFFORT ELSE 0 END) AS INCIDENT_EFFORT_OPEN,
				0 AS REQ_TASK_EFFORT_OPEN
		FROM	TST_INCIDENT INC INNER JOIN TST_INCIDENT_STATUS IST
		ON		INC.INCIDENT_STATUS_ID = IST.INCIDENT_STATUS_ID
		WHERE	INC.IS_DELETED = 0 AND INC.RESOLVED_RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList)
		UNION ALL
		--We want the totals for incomplete and all tasks (ignore deferred)
		SELECT  TSK.PROJECT_ID, TSK.OWNER_ID AS USER_ID,
				0 AS INCIDENT_EFFORT, TSK.PROJECTED_EFFORT AS REQ_TASK_EFFORT,
				0 AS INCIDENT_EFFORT_OPEN,
				(CASE WHEN TSK.TASK_STATUS_ID <> 3 THEN TSK.PROJECTED_EFFORT ELSE 0 END) AS REQ_TASK_EFFORT_OPEN
		FROM	TST_TASK TSK
		WHERE	TSK.IS_DELETED = 0 AND TSK.TASK_STATUS_ID <> 5 AND
				TSK.RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList)
		UNION ALL
		--We need to get the totals for in-progress and completed requirements (ignore rejected,under review, requested)
		--Ignore any requirements that do have a task effort set
		SELECT  REQ.PROJECT_ID, REQ.OWNER_ID AS USER_ID,
				0 AS INCIDENT_EFFORT, REQ.ESTIMATED_EFFORT AS REQ_TASK_EFFORT,
				0 AS INCIDENT_EFFORT_OPEN,
				(CASE WHEN REQ.REQUIREMENT_STATUS_ID IN (2,3,5) THEN REQ.ESTIMATED_EFFORT ELSE 0 END) AS REQ_TASK_EFFORT_OPEN
		FROM	TST_REQUIREMENT REQ
		WHERE	REQ.IS_DELETED = 0 AND REQ.REQUIREMENT_STATUS_ID IN (2,3,4,5,8,9,10) AND
				(REQ.TASK_PROJECTED_EFFORT IS NULL OR REQ.TASK_PROJECTED_EFFORT = 0) AND
				REQ.RELEASE_ID IN (SELECT RELEASE_ID FROM @ReleaseList)
		) AS RES RIGHT JOIN TST_PROJECT_USER PRU
	ON	RES.PROJECT_ID = PRU.PROJECT_ID AND RES.USER_ID = PRU.USER_ID INNER JOIN TST_USER USR
	ON	PRU.USER_ID = USR.USER_ID INNER JOIN TST_USER_PROFILE USP
	ON	USR.USER_ID = USP.USER_ID INNER JOIN TST_PROJECT_ROLE PRR
	ON	PRU.PROJECT_ROLE_ID = PRR.PROJECT_ROLE_ID
	WHERE USR.IS_ACTIVE = 1 AND PRU.PROJECT_ID = @ProjectId
	GROUP BY PRU.USER_ID, PRU.PROJECT_ID
END
GO
