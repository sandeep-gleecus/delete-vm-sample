//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DataSyncProject))]
    [KnownType(typeof(DataSyncStatus))]
    [KnownType(typeof(DataSyncUserMapping))]
    public partial class DataSyncSystem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DataSyncSystemId
        {
            get { return _dataSyncSystemId; }
            set
            {
                if (_dataSyncSystemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DataSyncSystemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataSyncSystemId = value;
                    OnPropertyChanged("DataSyncSystemId");
                }
            }
        }
        private int _dataSyncSystemId;
    
        [DataMember]
        public int DataSyncStatusId
        {
            get { return _dataSyncStatusId; }
            set
            {
                if (_dataSyncStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("DataSyncStatusId", _dataSyncStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.DataSyncStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _dataSyncStatusId = value;
                    OnPropertyChanged("DataSyncStatusId");
                }
            }
        }
        private int _dataSyncStatusId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string ConnectionString
        {
            get { return _connectionString; }
            set
            {
                if (_connectionString != value)
                {
                    ChangeTracker.RecordOriginalValue("ConnectionString", _connectionString);
                    _connectionString = value;
                    OnPropertyChanged("ConnectionString");
                }
            }
        }
        private string _connectionString;
    
        [DataMember]
        public string ExternalLogin
        {
            get { return _externalLogin; }
            set
            {
                if (_externalLogin != value)
                {
                    ChangeTracker.RecordOriginalValue("ExternalLogin", _externalLogin);
                    _externalLogin = value;
                    OnPropertyChanged("ExternalLogin");
                }
            }
        }
        private string _externalLogin;
    
        [DataMember]
        internal string EncryptedPassword
        {
            get { return _encryptedPassword; }
            set
            {
                if (_encryptedPassword != value)
                {
                    ChangeTracker.RecordOriginalValue("EncryptedPassword", _encryptedPassword);
                    _encryptedPassword = value;
                    OnPropertyChanged("EncryptedPassword");
                }
            }
        }
        private string _encryptedPassword;
    
        [DataMember]
        public int TimeOffsetHours
        {
            get { return _timeOffsetHours; }
            set
            {
                if (_timeOffsetHours != value)
                {
                    ChangeTracker.RecordOriginalValue("TimeOffsetHours", _timeOffsetHours);
                    _timeOffsetHours = value;
                    OnPropertyChanged("TimeOffsetHours");
                }
            }
        }
        private int _timeOffsetHours;
    
        [DataMember]
        public Nullable<System.DateTime> LastSyncDate
        {
            get { return _lastSyncDate; }
            set
            {
                if (_lastSyncDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastSyncDate", _lastSyncDate);
                    _lastSyncDate = value;
                    OnPropertyChanged("LastSyncDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastSyncDate;
    
        [DataMember]
        public string Custom01
        {
            get { return _custom01; }
            set
            {
                if (_custom01 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom01", _custom01);
                    _custom01 = value;
                    OnPropertyChanged("Custom01");
                }
            }
        }
        private string _custom01;
    
        [DataMember]
        public string Custom02
        {
            get { return _custom02; }
            set
            {
                if (_custom02 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom02", _custom02);
                    _custom02 = value;
                    OnPropertyChanged("Custom02");
                }
            }
        }
        private string _custom02;
    
        [DataMember]
        public string Custom03
        {
            get { return _custom03; }
            set
            {
                if (_custom03 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom03", _custom03);
                    _custom03 = value;
                    OnPropertyChanged("Custom03");
                }
            }
        }
        private string _custom03;
    
        [DataMember]
        public string Custom04
        {
            get { return _custom04; }
            set
            {
                if (_custom04 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom04", _custom04);
                    _custom04 = value;
                    OnPropertyChanged("Custom04");
                }
            }
        }
        private string _custom04;
    
        [DataMember]
        public string Custom05
        {
            get { return _custom05; }
            set
            {
                if (_custom05 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom05", _custom05);
                    _custom05 = value;
                    OnPropertyChanged("Custom05");
                }
            }
        }
        private string _custom05;
    
        [DataMember]
        public string AutoMapUsersYn
        {
            get { return _autoMapUsersYn; }
            set
            {
                if (_autoMapUsersYn != value)
                {
                    ChangeTracker.RecordOriginalValue("AutoMapUsersYn", _autoMapUsersYn);
                    _autoMapUsersYn = value;
                    OnPropertyChanged("AutoMapUsersYn");
                }
            }
        }
        private string _autoMapUsersYn;
    
        [DataMember]
        public string Caption
        {
            get { return _caption; }
            set
            {
                if (_caption != value)
                {
                    ChangeTracker.RecordOriginalValue("Caption", _caption);
                    _caption = value;
                    OnPropertyChanged("Caption");
                }
            }
        }
        private string _caption;
    
        [DataMember]
        public bool IsEncrypted
        {
            get { return _isEncrypted; }
            set
            {
                if (_isEncrypted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEncrypted", _isEncrypted);
                    _isEncrypted = value;
                    OnPropertyChanged("IsEncrypted");
                }
            }
        }
        private bool _isEncrypted;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DataSyncProject> ProjectMappings
        {
            get
            {
                if (_projectMappings == null)
                {
                    _projectMappings = new TrackableCollection<DataSyncProject>();
                    _projectMappings.CollectionChanged += FixupProjectMappings;
                }
                return _projectMappings;
            }
            set
            {
                if (!ReferenceEquals(_projectMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectMappings != null)
                    {
                        _projectMappings.CollectionChanged -= FixupProjectMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncProject item in _projectMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectMappings = value;
                    if (_projectMappings != null)
                    {
                        _projectMappings.CollectionChanged += FixupProjectMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncProject item in _projectMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectMappings");
                }
            }
        }
        private TrackableCollection<DataSyncProject> _projectMappings;
    
        [DataMember]
        public DataSyncStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private DataSyncStatus _status;
    
        [DataMember]
        public TrackableCollection<DataSyncUserMapping> UserMappings
        {
            get
            {
                if (_userMappings == null)
                {
                    _userMappings = new TrackableCollection<DataSyncUserMapping>();
                    _userMappings.CollectionChanged += FixupUserMappings;
                }
                return _userMappings;
            }
            set
            {
                if (!ReferenceEquals(_userMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userMappings != null)
                    {
                        _userMappings.CollectionChanged -= FixupUserMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncUserMapping item in _userMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userMappings = value;
                    if (_userMappings != null)
                    {
                        _userMappings.CollectionChanged += FixupUserMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncUserMapping item in _userMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserMappings");
                }
            }
        }
        private TrackableCollection<DataSyncUserMapping> _userMappings;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProjectMappings.Clear();
            Status = null;
            UserMappings.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupStatus(DataSyncStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Systems.Contains(this))
            {
                previousValue.Systems.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Systems.Contains(this))
                {
                    Status.Systems.Add(this);
                }
    
                DataSyncStatusId = Status.DataSyncStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupProjectMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncProject item in e.NewItems)
                {
                    item.System = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.System, this))
                    {
                        item.System = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupUserMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncUserMapping item in e.NewItems)
                {
                    item.System = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncUserMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.System, this))
                    {
                        item.System = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
