-- ===================================================================================================
-- Author:			Inflectra Corporation
-- Business Object: Project
-- Description:		Refreshes the requirement count, overall percent complete for the project and also
--					rolls up to the parent program and portfolio (if any)
-- ===================================================================================================
IF OBJECT_ID ( 'PROJECT_REFRESH_REQUIREMENT_COMPLETION', 'P' ) IS NOT NULL 
    DROP PROCEDURE PROJECT_REFRESH_REQUIREMENT_COMPLETION;
GO
CREATE PROCEDURE PROJECT_REFRESH_REQUIREMENT_COMPLETION
	@ProjectId INT
AS
DECLARE
	@ProjectGroupId INT,
	@PortfolioId INT
BEGIN
	--First we update the requirement count and % complete from only the active releases
	--We also have to account for the major releases that contain minor releases/sprints/phases
	--and avoid double-counting
	MERGE TST_PROJECT AS TARGET	
	USING (
		SELECT
			@ProjectId AS PROJECT_ID,
			REQ.IS_DELETED,
			SUM(ISNULL(REQ.ESTIMATE_POINTS,0)) AS REQUIREMENT_POINTS,
			COUNT(REQ.REQUIREMENT_ID) AS REQUIREMENT_COUNT,
			SUM((CASE WHEN REQ.REQUIREMENT_STATUS_ID IN
			(
				9, /*Tested*/
				10, /*Completed*/
				13 /*Released*/
			)
			THEN 1 ELSE 0 END)* 100) / COUNT(REQ.REQUIREMENT_ID) AS PERCENT_COMPLETE
		FROM
			TST_REQUIREMENT REQ
			INNER JOIN TST_RELEASE REL ON REQ.RELEASE_ID = REL.RELEASE_ID
		WHERE
			REQ.PROJECT_ID = @ProjectId AND
			REL.RELEASE_STATUS_ID NOT IN (4 /*Closed*/, 5 /*Deferred*/, 6 /*Cancelled*/) AND
			REQ.REQUIREMENT_STATUS_ID NOT IN (6 /* Rejected */, 8 /* Obsolete*/) AND
			REQ.IS_DELETED = 0
		GROUP BY REQ.IS_DELETED
	) AS SOURCE
	ON
		TARGET.PROJECT_ID = SOURCE.PROJECT_ID
	WHEN MATCHED THEN
		UPDATE
			SET	
				TARGET.REQUIREMENT_COUNT = SOURCE.REQUIREMENT_COUNT,
				TARGET.PERCENT_COMPLETE = SOURCE.PERCENT_COMPLETE
	WHEN NOT MATCHED BY SOURCE AND TARGET.PROJECT_ID = @ProjectId THEN
			UPDATE
			SET	
				TARGET.REQUIREMENT_COUNT = 0,
				TARGET.PERCENT_COMPLETE = 0;
				
	--Next we update the min start-date and max end-date from all the "active" releases
	MERGE TST_PROJECT AS TARGET	
	USING (
		SELECT
			REL.PROJECT_ID,
			MIN(REL.START_DATE) AS MIN_START_DATE,
			MAX(REL.END_DATE) AS MAX_END_DATE
		FROM
			TST_RELEASE REL
		WHERE
			REL.PROJECT_ID = @ProjectId AND
			REL.IS_DELETED = 0 AND
			REL.RELEASE_STATUS_ID NOT IN (4 /*Closed*/, 5 /*Deferred*/, 6 /*Cancelled*/)
		GROUP BY REL.PROJECT_ID
	) AS SOURCE
	ON
		TARGET.PROJECT_ID = SOURCE.PROJECT_ID
	WHEN MATCHED THEN
		UPDATE
			SET	
				TARGET.START_DATE = SOURCE.MIN_START_DATE,
				TARGET.END_DATE = SOURCE.MAX_END_DATE
	WHEN NOT MATCHED BY SOURCE AND TARGET.PROJECT_ID = @ProjectId THEN
			UPDATE
			SET	
				TARGET.START_DATE = NULL,
				TARGET.END_DATE = NULL;
				
	--Next we update the program with the percentage complete and requirement counts
	SELECT @ProjectGroupId = PROJECT_GROUP_ID FROM TST_PROJECT WHERE PROJECT_ID = @ProjectId;
	MERGE TST_PROJECT_GROUP AS TARGET	
	USING (
		SELECT
			PRJ.PROJECT_GROUP_ID,
			SUM(PRJ.REQUIREMENT_COUNT) AS REQUIREMENT_COUNT,
			FLOOR(SUM(CAST(PRJ.PERCENT_COMPLETE AS DECIMAL(11,1)) * CAST(PRJ.REQUIREMENT_COUNT AS DECIMAL(11,1))) / SUM(CAST(PRJ.REQUIREMENT_COUNT AS DECIMAL(11,1)))) AS PERCENT_COMPLETE
		FROM
			TST_PROJECT PRJ
		WHERE
			PRJ.PROJECT_GROUP_ID = @ProjectGroupId AND
			PRJ.IS_ACTIVE = 1 AND
			PRJ.REQUIREMENT_COUNT > 0
		GROUP BY PRJ.PROJECT_GROUP_ID
	) AS SOURCE
	ON
		TARGET.PROJECT_GROUP_ID = SOURCE.PROJECT_GROUP_ID
	WHEN MATCHED THEN
		UPDATE
			SET	
				TARGET.REQUIREMENT_COUNT = SOURCE.REQUIREMENT_COUNT,
				TARGET.PERCENT_COMPLETE = SOURCE.PERCENT_COMPLETE
	WHEN NOT MATCHED BY SOURCE AND TARGET.PROJECT_GROUP_ID = @ProjectGroupId THEN
			UPDATE
			SET	
				TARGET.REQUIREMENT_COUNT = 0,
				TARGET.PERCENT_COMPLETE = 0;
				
	--Next we update the program with the min/max start/end dates
	MERGE TST_PROJECT_GROUP AS TARGET	
	USING (
		SELECT
			PRJ.PROJECT_GROUP_ID,
			MIN(PRJ.START_DATE) AS MIN_START_DATE,
			MAX(PRJ.END_DATE) AS MAX_END_DATE
		FROM
			TST_PROJECT PRJ
		WHERE
			PRJ.PROJECT_GROUP_ID = @ProjectGroupId AND
			PRJ.IS_ACTIVE = 1 AND
			PRJ.START_DATE IS NOT NULL AND
			PRJ.END_DATE IS NOT NULL
		GROUP BY PRJ.PROJECT_GROUP_ID
	) AS SOURCE
	ON
		TARGET.PROJECT_GROUP_ID = SOURCE.PROJECT_GROUP_ID
	WHEN MATCHED THEN
		UPDATE
			SET	
				TARGET.START_DATE = SOURCE.MIN_START_DATE,
				TARGET.END_DATE = SOURCE.MAX_END_DATE
	WHEN NOT MATCHED BY SOURCE AND TARGET.PROJECT_GROUP_ID = @ProjectGroupId THEN
			UPDATE
			SET	
				TARGET.START_DATE = NULL,
				TARGET.END_DATE = NULL;
				
	--Next we update the portfolio (if exists) with the percentage complete and requirement counts
	--We do it from the product counts (not program) to reduce accumulated rounding errors
	SELECT @PortfolioId = PORTFOLIO_ID FROM TST_PROJECT_GROUP WHERE PROJECT_GROUP_ID = @ProjectGroupId;
	IF @PortfolioId IS NOT NULL
	BEGIN
		MERGE TST_PORTFOLIO AS TARGET	
		USING (
			SELECT
				PRG.PORTFOLIO_ID,
				SUM(PRJ.REQUIREMENT_COUNT) AS REQUIREMENT_COUNT,
				FLOOR(SUM(CAST(PRJ.PERCENT_COMPLETE AS DECIMAL(11,1)) * CAST(PRJ.REQUIREMENT_COUNT AS DECIMAL(11,1))) / SUM(CAST(PRJ.REQUIREMENT_COUNT AS DECIMAL(11,1)))) AS PERCENT_COMPLETE
			FROM
				TST_PROJECT PRJ
				INNER JOIN TST_PROJECT_GROUP PRG ON PRJ.PROJECT_GROUP_ID = PRG.PROJECT_GROUP_ID
			WHERE
				PRG.PORTFOLIO_ID = @PortfolioId AND
				PRG.IS_ACTIVE = 1 AND
				PRJ.IS_ACTIVE = 1 AND
				PRJ.REQUIREMENT_COUNT > 0				
			GROUP BY PRG.PORTFOLIO_ID
		) AS SOURCE
		ON
			TARGET.PORTFOLIO_ID = SOURCE.PORTFOLIO_ID
		WHEN MATCHED THEN
			UPDATE
				SET	
					TARGET.REQUIREMENT_COUNT = SOURCE.REQUIREMENT_COUNT,
					TARGET.PERCENT_COMPLETE = SOURCE.PERCENT_COMPLETE
		WHEN NOT MATCHED BY SOURCE AND TARGET.PORTFOLIO_ID = @PortfolioId THEN
				UPDATE
				SET	
					TARGET.REQUIREMENT_COUNT = 0,
					TARGET.PERCENT_COMPLETE = 0;
					
		--Next we update the portfolio with the min/max start/end dates
		--We can do this directly from the programs, since no worry about rounding
		MERGE TST_PORTFOLIO AS TARGET	
		USING (
			SELECT
				PRG.PORTFOLIO_ID,
				MIN(PRG.START_DATE) AS MIN_START_DATE,
				MAX(PRG.END_DATE) AS MAX_END_DATE
			FROM
				TST_PROJECT_GROUP PRG
			WHERE
				PRG.PORTFOLIO_ID = @PortfolioId AND
				PRG.IS_ACTIVE = 1 AND
				PRG.START_DATE IS NOT NULL AND
				PRG.END_DATE IS NOT NULL
			GROUP BY PRG.PORTFOLIO_ID
		) AS SOURCE
		ON
			TARGET.PORTFOLIO_ID = SOURCE.PORTFOLIO_ID
		WHEN MATCHED THEN
			UPDATE
				SET	
					TARGET.START_DATE = SOURCE.MIN_START_DATE,
					TARGET.END_DATE = SOURCE.MAX_END_DATE
		WHEN NOT MATCHED BY SOURCE AND TARGET.PORTFOLIO_ID = @PortfolioId THEN
				UPDATE
				SET	
					TARGET.START_DATE = NULL,
					TARGET.END_DATE = NULL;
	END
END
GO
