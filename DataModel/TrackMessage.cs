//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ResourceTrack))]
    [KnownType(typeof(User))]
    public partial class TrackMessage: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long MessageId
        {
            get { return _messageId; }
            set
            {
                if (_messageId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MessageId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messageId = value;
                    OnPropertyChanged("MessageId");
                }
            }
        }
        private long _messageId;
    
        [DataMember]
        public int ResourceTrackId
        {
            get { return _resourceTrackId; }
            set
            {
                if (_resourceTrackId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResourceTrackId", _resourceTrackId);
                    if (!IsDeserializing)
                    {
                        if (ResourceTrack != null && ResourceTrack.ResourceTrackId != value)
                        {
                            ResourceTrack = null;
                        }
                    }
                    _resourceTrackId = value;
                    OnPropertyChanged("ResourceTrackId");
                }
            }
        }
        private int _resourceTrackId;
    
        [DataMember]
        public int SenderUserId
        {
            get { return _senderUserId; }
            set
            {
                if (_senderUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("SenderUserId", _senderUserId);
                    if (!IsDeserializing)
                    {
                        if (SenderUser != null && SenderUser.UserId != value)
                        {
                            SenderUser = null;
                        }
                    }
                    _senderUserId = value;
                    OnPropertyChanged("SenderUserId");
                }
            }
        }
        private int _senderUserId;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    ChangeTracker.RecordOriginalValue("Body", _body);
                    _body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        private string _body;
    
        [DataMember]
        public bool IsRead
        {
            get { return _isRead; }
            set
            {
                if (_isRead != value)
                {
                    ChangeTracker.RecordOriginalValue("IsRead", _isRead);
                    _isRead = value;
                    OnPropertyChanged("IsRead");
                }
            }
        }
        private bool _isRead;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ResourceTrack ResourceTrack
        {
            get { return _resourceTrack; }
            set
            {
                if (!ReferenceEquals(_resourceTrack, value))
                {
                    var previousValue = _resourceTrack;
                    _resourceTrack = value;
                    FixupResourceTrack(previousValue);
                    OnNavigationPropertyChanged("ResourceTrack");
                }
            }
        }
        private ResourceTrack _resourceTrack;
    
        [DataMember]
        public User SenderUser
        {
            get { return _senderUser; }
            set
            {
                if (!ReferenceEquals(_senderUser, value))
                {
                    var previousValue = _senderUser;
                    _senderUser = value;
                    FixupSenderUser(previousValue);
                    OnNavigationPropertyChanged("SenderUser");
                }
            }
        }
        private User _senderUser;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ResourceTrack = null;
            SenderUser = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupResourceTrack(ResourceTrack previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (ResourceTrack != null)
            {
                if (!ResourceTrack.Messages.Contains(this))
                {
                    ResourceTrack.Messages.Add(this);
                }
    
                ResourceTrackId = ResourceTrack.ResourceTrackId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResourceTrack")
                    && (ChangeTracker.OriginalValues["ResourceTrack"] == ResourceTrack))
                {
                    ChangeTracker.OriginalValues.Remove("ResourceTrack");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResourceTrack", previousValue);
                }
                if (ResourceTrack != null && !ResourceTrack.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResourceTrack.StartTracking();
                }
            }
        }
    
        private void FixupSenderUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TrackMessages.Contains(this))
            {
                previousValue.TrackMessages.Remove(this);
            }
    
            if (SenderUser != null)
            {
                if (!SenderUser.TrackMessages.Contains(this))
                {
                    SenderUser.TrackMessages.Add(this);
                }
    
                SenderUserId = SenderUser.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SenderUser")
                    && (ChangeTracker.OriginalValues["SenderUser"] == SenderUser))
                {
                    ChangeTracker.OriginalValues.Remove("SenderUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SenderUser", previousValue);
                }
                if (SenderUser != null && !SenderUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    SenderUser.StartTracking();
                }
            }
        }

        #endregion

    }
}
