//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TemplateDataSource))]
    [KnownType(typeof(TemplateOutputType))]
    [KnownType(typeof(TemplateParameter))]
    public partial class Template: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TemplateId
        {
            get { return _templateId; }
            set
            {
                if (_templateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TemplateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _templateId = value;
                    OnPropertyChanged("TemplateId");
                }
            }
        }
        private int _templateId;
    
        [DataMember]
        public string TemplateName
        {
            get { return _templateName; }
            set
            {
                if (_templateName != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateName", _templateName);
                    _templateName = value;
                    OnPropertyChanged("TemplateName");
                }
            }
        }
        private string _templateName;
    
        [DataMember]
        public Nullable<bool> IsCustom
        {
            get { return _isCustom; }
            set
            {
                if (_isCustom != value)
                {
                    ChangeTracker.RecordOriginalValue("IsCustom", _isCustom);
                    _isCustom = value;
                    OnPropertyChanged("IsCustom");
                }
            }
        }
        private Nullable<bool> _isCustom;
    
        [DataMember]
        public string TemplateLocation
        {
            get { return _templateLocation; }
            set
            {
                if (_templateLocation != value)
                {
                    ChangeTracker.RecordOriginalValue("TemplateLocation", _templateLocation);
                    _templateLocation = value;
                    OnPropertyChanged("TemplateLocation");
                }
            }
        }
        private string _templateLocation;
    
        [DataMember]
        public string PodLocation
        {
            get { return _podLocation; }
            set
            {
                if (_podLocation != value)
                {
                    ChangeTracker.RecordOriginalValue("PodLocation", _podLocation);
                    _podLocation = value;
                    OnPropertyChanged("PodLocation");
                }
            }
        }
        private string _podLocation;
    
        [DataMember]
        public Nullable<bool> Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    ChangeTracker.RecordOriginalValue("Active", _active);
                    _active = value;
                    OnPropertyChanged("Active");
                }
            }
        }
        private Nullable<bool> _active;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string ReportCategory
        {
            get { return _reportCategory; }
            set
            {
                if (_reportCategory != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportCategory", _reportCategory);
                    _reportCategory = value;
                    OnPropertyChanged("ReportCategory");
                }
            }
        }
        private string _reportCategory;
    
        [DataMember]
        public Nullable<int> CategoryGroup
        {
            get { return _categoryGroup; }
            set
            {
                if (_categoryGroup != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryGroup", _categoryGroup);
                    _categoryGroup = value;
                    OnPropertyChanged("CategoryGroup");
                }
            }
        }
        private Nullable<int> _categoryGroup;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TemplateDataSource> TST_TEMPLATE_DATASOURCE
        {
            get
            {
                if (_tST_TEMPLATE_DATASOURCE == null)
                {
                    _tST_TEMPLATE_DATASOURCE = new TrackableCollection<TemplateDataSource>();
                    _tST_TEMPLATE_DATASOURCE.CollectionChanged += FixupTST_TEMPLATE_DATASOURCE;
                }
                return _tST_TEMPLATE_DATASOURCE;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEMPLATE_DATASOURCE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEMPLATE_DATASOURCE != null)
                    {
                        _tST_TEMPLATE_DATASOURCE.CollectionChanged -= FixupTST_TEMPLATE_DATASOURCE;
                    }
                    _tST_TEMPLATE_DATASOURCE = value;
                    if (_tST_TEMPLATE_DATASOURCE != null)
                    {
                        _tST_TEMPLATE_DATASOURCE.CollectionChanged += FixupTST_TEMPLATE_DATASOURCE;
                    }
                    OnNavigationPropertyChanged("TST_TEMPLATE_DATASOURCE");
                }
            }
        }
        private TrackableCollection<TemplateDataSource> _tST_TEMPLATE_DATASOURCE;
    
        [DataMember]
        public TrackableCollection<TemplateOutputType> TST_TEMPLATE_OUTTYPE
        {
            get
            {
                if (_tST_TEMPLATE_OUTTYPE == null)
                {
                    _tST_TEMPLATE_OUTTYPE = new TrackableCollection<TemplateOutputType>();
                    _tST_TEMPLATE_OUTTYPE.CollectionChanged += FixupTST_TEMPLATE_OUTTYPE;
                }
                return _tST_TEMPLATE_OUTTYPE;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEMPLATE_OUTTYPE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEMPLATE_OUTTYPE != null)
                    {
                        _tST_TEMPLATE_OUTTYPE.CollectionChanged -= FixupTST_TEMPLATE_OUTTYPE;
                    }
                    _tST_TEMPLATE_OUTTYPE = value;
                    if (_tST_TEMPLATE_OUTTYPE != null)
                    {
                        _tST_TEMPLATE_OUTTYPE.CollectionChanged += FixupTST_TEMPLATE_OUTTYPE;
                    }
                    OnNavigationPropertyChanged("TST_TEMPLATE_OUTTYPE");
                }
            }
        }
        private TrackableCollection<TemplateOutputType> _tST_TEMPLATE_OUTTYPE;
    
        [DataMember]
        public TrackableCollection<TemplateParameter> TST_TEMPLATE_PARAMETER
        {
            get
            {
                if (_tST_TEMPLATE_PARAMETER == null)
                {
                    _tST_TEMPLATE_PARAMETER = new TrackableCollection<TemplateParameter>();
                    _tST_TEMPLATE_PARAMETER.CollectionChanged += FixupTST_TEMPLATE_PARAMETER;
                }
                return _tST_TEMPLATE_PARAMETER;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEMPLATE_PARAMETER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEMPLATE_PARAMETER != null)
                    {
                        _tST_TEMPLATE_PARAMETER.CollectionChanged -= FixupTST_TEMPLATE_PARAMETER;
                    }
                    _tST_TEMPLATE_PARAMETER = value;
                    if (_tST_TEMPLATE_PARAMETER != null)
                    {
                        _tST_TEMPLATE_PARAMETER.CollectionChanged += FixupTST_TEMPLATE_PARAMETER;
                    }
                    OnNavigationPropertyChanged("TST_TEMPLATE_PARAMETER");
                }
            }
        }
        private TrackableCollection<TemplateParameter> _tST_TEMPLATE_PARAMETER;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_TEMPLATE_DATASOURCE.Clear();
            TST_TEMPLATE_OUTTYPE.Clear();
            TST_TEMPLATE_PARAMETER.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_TEMPLATE_DATASOURCE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateDataSource item in e.NewItems)
                {
                    item.TST_TEMPLATE = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEMPLATE_DATASOURCE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateDataSource item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_TEMPLATE, this))
                    {
                        item.TST_TEMPLATE = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEMPLATE_DATASOURCE", item);
                    }
                }
            }
        }
    
        private void FixupTST_TEMPLATE_OUTTYPE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateOutputType item in e.NewItems)
                {
                    item.TST_TEMPLATE = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEMPLATE_OUTTYPE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateOutputType item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_TEMPLATE, this))
                    {
                        item.TST_TEMPLATE = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEMPLATE_OUTTYPE", item);
                    }
                }
            }
        }
    
        private void FixupTST_TEMPLATE_PARAMETER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TemplateParameter item in e.NewItems)
                {
                    item.TST_TEMPLATE = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEMPLATE_PARAMETER", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TemplateParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_TEMPLATE, this))
                    {
                        item.TST_TEMPLATE = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEMPLATE_PARAMETER", item);
                    }
                }
            }
        }

        #endregion

    }
}
