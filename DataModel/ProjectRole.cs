//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProjectUser))]
    [KnownType(typeof(WorkflowTransitionRole))]
    [KnownType(typeof(RequirementWorkflowTransitionRole))]
    [KnownType(typeof(TaskWorkflowTransitionRole))]
    [KnownType(typeof(ProjectRolePermission))]
    [KnownType(typeof(ReleaseWorkflowTransitionRole))]
    [KnownType(typeof(TestCaseWorkflowTransitionRole))]
    [KnownType(typeof(NotificationEvent))]
    [KnownType(typeof(DocumentWorkflowTransitionRole))]
    [KnownType(typeof(RiskWorkflowTransitionRole))]
    public partial class ProjectRole: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectRoleId
        {
            get { return _projectRoleId; }
            set
            {
                if (_projectRoleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectRoleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectRoleId = value;
                    OnPropertyChanged("ProjectRoleId");
                }
            }
        }
        private int _projectRoleId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsAdmin
        {
            get { return _isAdmin; }
            set
            {
                if (_isAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAdmin", _isAdmin);
                    _isAdmin = value;
                    OnPropertyChanged("IsAdmin");
                }
            }
        }
        private bool _isAdmin;
    
        [DataMember]
        public bool IsDiscussionsAdd
        {
            get { return _isDiscussionsAdd; }
            set
            {
                if (_isDiscussionsAdd != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDiscussionsAdd", _isDiscussionsAdd);
                    _isDiscussionsAdd = value;
                    OnPropertyChanged("IsDiscussionsAdd");
                }
            }
        }
        private bool _isDiscussionsAdd;
    
        [DataMember]
        public bool IsSourceCodeView
        {
            get { return _isSourceCodeView; }
            set
            {
                if (_isSourceCodeView != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSourceCodeView", _isSourceCodeView);
                    _isSourceCodeView = value;
                    OnPropertyChanged("IsSourceCodeView");
                }
            }
        }
        private bool _isSourceCodeView;
    
        [DataMember]
        public bool IsSourceCodeEdit
        {
            get { return _isSourceCodeEdit; }
            set
            {
                if (_isSourceCodeEdit != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSourceCodeEdit", _isSourceCodeEdit);
                    _isSourceCodeEdit = value;
                    OnPropertyChanged("IsSourceCodeEdit");
                }
            }
        }
        private bool _isSourceCodeEdit;
    
        [DataMember]
        public bool IsDocumentFoldersEdit
        {
            get { return _isDocumentFoldersEdit; }
            set
            {
                if (_isDocumentFoldersEdit != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDocumentFoldersEdit", _isDocumentFoldersEdit);
                    _isDocumentFoldersEdit = value;
                    OnPropertyChanged("IsDocumentFoldersEdit");
                }
            }
        }
        private bool _isDocumentFoldersEdit;
    
        [DataMember]
        public bool IsLimitedView
        {
            get { return _isLimitedView; }
            set
            {
                if (_isLimitedView != value)
                {
                    ChangeTracker.RecordOriginalValue("IsLimitedView", _isLimitedView);
                    _isLimitedView = value;
                    OnPropertyChanged("IsLimitedView");
                }
            }
        }
        private bool _isLimitedView;
    
        [DataMember]
        public bool IsTemplateAdmin
        {
            get { return _isTemplateAdmin; }
            set
            {
                if (_isTemplateAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTemplateAdmin", _isTemplateAdmin);
                    _isTemplateAdmin = value;
                    OnPropertyChanged("IsTemplateAdmin");
                }
            }
        }
        private bool _isTemplateAdmin;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ProjectUser> ProjectUser
        {
            get
            {
                if (_projectUser == null)
                {
                    _projectUser = new TrackableCollection<ProjectUser>();
                    _projectUser.CollectionChanged += FixupProjectUser;
                }
                return _projectUser;
            }
            set
            {
                if (!ReferenceEquals(_projectUser, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectUser != null)
                    {
                        _projectUser.CollectionChanged -= FixupProjectUser;
                    }
                    _projectUser = value;
                    if (_projectUser != null)
                    {
                        _projectUser.CollectionChanged += FixupProjectUser;
                    }
                    OnNavigationPropertyChanged("ProjectUser");
                }
            }
        }
        private TrackableCollection<ProjectUser> _projectUser;
    
        [DataMember]
        public TrackableCollection<WorkflowTransitionRole> IncidentWorkflowTransitionRoles
        {
            get
            {
                if (_incidentWorkflowTransitionRoles == null)
                {
                    _incidentWorkflowTransitionRoles = new TrackableCollection<WorkflowTransitionRole>();
                    _incidentWorkflowTransitionRoles.CollectionChanged += FixupIncidentWorkflowTransitionRoles;
                }
                return _incidentWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_incidentWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentWorkflowTransitionRoles != null)
                    {
                        _incidentWorkflowTransitionRoles.CollectionChanged -= FixupIncidentWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowTransitionRole item in _incidentWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentWorkflowTransitionRoles = value;
                    if (_incidentWorkflowTransitionRoles != null)
                    {
                        _incidentWorkflowTransitionRoles.CollectionChanged += FixupIncidentWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowTransitionRole item in _incidentWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<WorkflowTransitionRole> _incidentWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflowTransitionRole> RequirementWorkflowTransitionRoles
        {
            get
            {
                if (_requirementWorkflowTransitionRoles == null)
                {
                    _requirementWorkflowTransitionRoles = new TrackableCollection<RequirementWorkflowTransitionRole>();
                    _requirementWorkflowTransitionRoles.CollectionChanged += FixupRequirementWorkflowTransitionRoles;
                }
                return _requirementWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_requirementWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementWorkflowTransitionRoles != null)
                    {
                        _requirementWorkflowTransitionRoles.CollectionChanged -= FixupRequirementWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflowTransitionRole item in _requirementWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementWorkflowTransitionRoles = value;
                    if (_requirementWorkflowTransitionRoles != null)
                    {
                        _requirementWorkflowTransitionRoles.CollectionChanged += FixupRequirementWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflowTransitionRole item in _requirementWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<RequirementWorkflowTransitionRole> _requirementWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<TaskWorkflowTransitionRole> TaskWorkflowTransitionRoles
        {
            get
            {
                if (_taskWorkflowTransitionRoles == null)
                {
                    _taskWorkflowTransitionRoles = new TrackableCollection<TaskWorkflowTransitionRole>();
                    _taskWorkflowTransitionRoles.CollectionChanged += FixupTaskWorkflowTransitionRoles;
                }
                return _taskWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_taskWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskWorkflowTransitionRoles != null)
                    {
                        _taskWorkflowTransitionRoles.CollectionChanged -= FixupTaskWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskWorkflowTransitionRole item in _taskWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskWorkflowTransitionRoles = value;
                    if (_taskWorkflowTransitionRoles != null)
                    {
                        _taskWorkflowTransitionRoles.CollectionChanged += FixupTaskWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskWorkflowTransitionRole item in _taskWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<TaskWorkflowTransitionRole> _taskWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<ProjectRolePermission> RolePermissions
        {
            get
            {
                if (_rolePermissions == null)
                {
                    _rolePermissions = new TrackableCollection<ProjectRolePermission>();
                    _rolePermissions.CollectionChanged += FixupRolePermissions;
                }
                return _rolePermissions;
            }
            set
            {
                if (!ReferenceEquals(_rolePermissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rolePermissions != null)
                    {
                        _rolePermissions.CollectionChanged -= FixupRolePermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectRolePermission item in _rolePermissions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _rolePermissions = value;
                    if (_rolePermissions != null)
                    {
                        _rolePermissions.CollectionChanged += FixupRolePermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectRolePermission item in _rolePermissions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RolePermissions");
                }
            }
        }
        private TrackableCollection<ProjectRolePermission> _rolePermissions;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflowTransitionRole> ReleaseWorkflowTransitionRoles
        {
            get
            {
                if (_releaseWorkflowTransitionRoles == null)
                {
                    _releaseWorkflowTransitionRoles = new TrackableCollection<ReleaseWorkflowTransitionRole>();
                    _releaseWorkflowTransitionRoles.CollectionChanged += FixupReleaseWorkflowTransitionRoles;
                }
                return _releaseWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_releaseWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseWorkflowTransitionRoles != null)
                    {
                        _releaseWorkflowTransitionRoles.CollectionChanged -= FixupReleaseWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseWorkflowTransitionRole item in _releaseWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseWorkflowTransitionRoles = value;
                    if (_releaseWorkflowTransitionRoles != null)
                    {
                        _releaseWorkflowTransitionRoles.CollectionChanged += FixupReleaseWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseWorkflowTransitionRole item in _releaseWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflowTransitionRole> _releaseWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflowTransitionRole> TestCaseWorkflowTransitionRoles
        {
            get
            {
                if (_testCaseWorkflowTransitionRoles == null)
                {
                    _testCaseWorkflowTransitionRoles = new TrackableCollection<TestCaseWorkflowTransitionRole>();
                    _testCaseWorkflowTransitionRoles.CollectionChanged += FixupTestCaseWorkflowTransitionRoles;
                }
                return _testCaseWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_testCaseWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseWorkflowTransitionRoles != null)
                    {
                        _testCaseWorkflowTransitionRoles.CollectionChanged -= FixupTestCaseWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseWorkflowTransitionRole item in _testCaseWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseWorkflowTransitionRoles = value;
                    if (_testCaseWorkflowTransitionRoles != null)
                    {
                        _testCaseWorkflowTransitionRoles.CollectionChanged += FixupTestCaseWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseWorkflowTransitionRole item in _testCaseWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflowTransitionRole> _testCaseWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<NotificationEvent> NotificationEvents
        {
            get
            {
                if (_notificationEvents == null)
                {
                    _notificationEvents = new TrackableCollection<NotificationEvent>();
                    _notificationEvents.CollectionChanged += FixupNotificationEvents;
                }
                return _notificationEvents;
            }
            set
            {
                if (!ReferenceEquals(_notificationEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged -= FixupNotificationEvents;
                    }
                    _notificationEvents = value;
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged += FixupNotificationEvents;
                    }
                    OnNavigationPropertyChanged("NotificationEvents");
                }
            }
        }
        private TrackableCollection<NotificationEvent> _notificationEvents;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowTransitionRole> DocumentWorkflowTransitionRoles
        {
            get
            {
                if (_documentWorkflowTransitionRoles == null)
                {
                    _documentWorkflowTransitionRoles = new TrackableCollection<DocumentWorkflowTransitionRole>();
                    _documentWorkflowTransitionRoles.CollectionChanged += FixupDocumentWorkflowTransitionRoles;
                }
                return _documentWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_documentWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentWorkflowTransitionRoles != null)
                    {
                        _documentWorkflowTransitionRoles.CollectionChanged -= FixupDocumentWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowTransitionRole item in _documentWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentWorkflowTransitionRoles = value;
                    if (_documentWorkflowTransitionRoles != null)
                    {
                        _documentWorkflowTransitionRoles.CollectionChanged += FixupDocumentWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowTransitionRole item in _documentWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowTransitionRole> _documentWorkflowTransitionRoles;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowTransitionRole> RiskWorkflowTransitionRoles
        {
            get
            {
                if (_riskWorkflowTransitionRoles == null)
                {
                    _riskWorkflowTransitionRoles = new TrackableCollection<RiskWorkflowTransitionRole>();
                    _riskWorkflowTransitionRoles.CollectionChanged += FixupRiskWorkflowTransitionRoles;
                }
                return _riskWorkflowTransitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_riskWorkflowTransitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskWorkflowTransitionRoles != null)
                    {
                        _riskWorkflowTransitionRoles.CollectionChanged -= FixupRiskWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowTransitionRole item in _riskWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskWorkflowTransitionRoles = value;
                    if (_riskWorkflowTransitionRoles != null)
                    {
                        _riskWorkflowTransitionRoles.CollectionChanged += FixupRiskWorkflowTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowTransitionRole item in _riskWorkflowTransitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskWorkflowTransitionRoles");
                }
            }
        }
        private TrackableCollection<RiskWorkflowTransitionRole> _riskWorkflowTransitionRoles;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProjectUser.Clear();
            IncidentWorkflowTransitionRoles.Clear();
            RequirementWorkflowTransitionRoles.Clear();
            TaskWorkflowTransitionRoles.Clear();
            RolePermissions.Clear();
            ReleaseWorkflowTransitionRoles.Clear();
            TestCaseWorkflowTransitionRoles.Clear();
            NotificationEvents.Clear();
            DocumentWorkflowTransitionRoles.Clear();
            RiskWorkflowTransitionRoles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProjectUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectUser item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectUser", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectUser", item);
                    }
                }
            }
        }
    
        private void FixupIncidentWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRolePermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectRolePermission item in e.NewItems)
                {
                    item.ProjectRole = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RolePermissions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectRolePermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectRole, this))
                    {
                        item.ProjectRole = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RolePermissions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupReleaseWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupNotificationEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEvent item in e.NewItems)
                {
                    if (!item.ProjectRoles.Contains(this))
                    {
                        item.ProjectRoles.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEvent item in e.OldItems)
                {
                    if (item.ProjectRoles.Contains(this))
                    {
                        item.ProjectRoles.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationEvents", item);
                    }
                }
            }
        }
    
        private void FixupDocumentWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowTransitionRole item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskWorkflowTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowTransitionRole item in e.NewItems)
                {
                    item.ProjectRole = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskWorkflowTransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProjectRole, this))
                    {
                        item.ProjectRole = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskWorkflowTransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
