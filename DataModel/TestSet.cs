//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AutomationHost))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Recurrence))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(ReleaseTestSet))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestRunType))]
    [KnownType(typeof(TestRunsPending))]
    [KnownType(typeof(TestSetFolder))]
    [KnownType(typeof(TestSetStatus))]
    [KnownType(typeof(TestSetDiscussion))]
    [KnownType(typeof(TestSetParameter))]
    [KnownType(typeof(TestSetTestCase))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TestConfigurationSet))]
    public partial class TestSet: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestSetId
        {
            get { return _testSetId; }
            set
            {
                if (_testSetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestSetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testSetId = value;
                    OnPropertyChanged("TestSetId");
                }
            }
        }
        private int _testSetId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public int TestSetStatusId
        {
            get { return _testSetStatusId; }
            set
            {
                if (_testSetStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestSetStatusId", _testSetStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.TestSetStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _testSetStatusId = value;
                    OnPropertyChanged("TestSetStatusId");
                }
            }
        }
        private int _testSetStatusId;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorId", _creatorId);
                    if (!IsDeserializing)
                    {
                        if (Creator != null && Creator.UserId != value)
                        {
                            Creator = null;
                        }
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public Nullable<int> AutomationHostId
        {
            get { return _automationHostId; }
            set
            {
                if (_automationHostId != value)
                {
                    ChangeTracker.RecordOriginalValue("AutomationHostId", _automationHostId);
                    if (!IsDeserializing)
                    {
                        if (AutomationHost != null && AutomationHost.AutomationHostId != value)
                        {
                            AutomationHost = null;
                        }
                    }
                    _automationHostId = value;
                    OnPropertyChanged("AutomationHostId");
                }
            }
        }
        private Nullable<int> _automationHostId;
    
        [DataMember]
        public Nullable<int> TestRunTypeId
        {
            get { return _testRunTypeId; }
            set
            {
                if (_testRunTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestRunTypeId", _testRunTypeId);
                    if (!IsDeserializing)
                    {
                        if (TestRunType != null && TestRunType.TestRunTypeId != value)
                        {
                            TestRunType = null;
                        }
                    }
                    _testRunTypeId = value;
                    OnPropertyChanged("TestRunTypeId");
                }
            }
        }
        private Nullable<int> _testRunTypeId;
    
        [DataMember]
        public Nullable<int> RecurrenceId
        {
            get { return _recurrenceId; }
            set
            {
                if (_recurrenceId != value)
                {
                    ChangeTracker.RecordOriginalValue("RecurrenceId", _recurrenceId);
                    if (!IsDeserializing)
                    {
                        if (Recurrence != null && Recurrence.RecurrenceId != value)
                        {
                            Recurrence = null;
                        }
                    }
                    _recurrenceId = value;
                    OnPropertyChanged("RecurrenceId");
                }
            }
        }
        private Nullable<int> _recurrenceId;
    
        [DataMember]
        public Nullable<int> TestSetFolderId
        {
            get { return _testSetFolderId; }
            set
            {
                if (_testSetFolderId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestSetFolderId", _testSetFolderId);
                    if (!IsDeserializing)
                    {
                        if (Folder != null && Folder.TestSetFolderId != value)
                        {
                            Folder = null;
                        }
                    }
                    _testSetFolderId = value;
                    OnPropertyChanged("TestSetFolderId");
                }
            }
        }
        private Nullable<int> _testSetFolderId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public Nullable<System.DateTime> PlannedDate
        {
            get { return _plannedDate; }
            set
            {
                if (_plannedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("PlannedDate", _plannedDate);
                    _plannedDate = value;
                    OnPropertyChanged("PlannedDate");
                }
            }
        }
        private Nullable<System.DateTime> _plannedDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<int> BuildExecuteTimeInterval
        {
            get { return _buildExecuteTimeInterval; }
            set
            {
                if (_buildExecuteTimeInterval != value)
                {
                    ChangeTracker.RecordOriginalValue("BuildExecuteTimeInterval", _buildExecuteTimeInterval);
                    _buildExecuteTimeInterval = value;
                    OnPropertyChanged("BuildExecuteTimeInterval");
                }
            }
        }
        private Nullable<int> _buildExecuteTimeInterval;
    
        [DataMember]
        public Nullable<int> EstimatedDuration
        {
            get { return _estimatedDuration; }
            set
            {
                if (_estimatedDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedDuration", _estimatedDuration);
                    _estimatedDuration = value;
                    OnPropertyChanged("EstimatedDuration");
                }
            }
        }
        private Nullable<int> _estimatedDuration;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;
    
        [DataMember]
        public int CountPassed
        {
            get { return _countPassed; }
            set
            {
                if (_countPassed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountPassed", _countPassed);
                    _countPassed = value;
                    OnPropertyChanged("CountPassed");
                }
            }
        }
        private int _countPassed;
    
        [DataMember]
        public int CountFailed
        {
            get { return _countFailed; }
            set
            {
                if (_countFailed != value)
                {
                    ChangeTracker.RecordOriginalValue("CountFailed", _countFailed);
                    _countFailed = value;
                    OnPropertyChanged("CountFailed");
                }
            }
        }
        private int _countFailed;
    
        [DataMember]
        public int CountCaution
        {
            get { return _countCaution; }
            set
            {
                if (_countCaution != value)
                {
                    ChangeTracker.RecordOriginalValue("CountCaution", _countCaution);
                    _countCaution = value;
                    OnPropertyChanged("CountCaution");
                }
            }
        }
        private int _countCaution;
    
        [DataMember]
        public int CountBlocked
        {
            get { return _countBlocked; }
            set
            {
                if (_countBlocked != value)
                {
                    ChangeTracker.RecordOriginalValue("CountBlocked", _countBlocked);
                    _countBlocked = value;
                    OnPropertyChanged("CountBlocked");
                }
            }
        }
        private int _countBlocked;
    
        [DataMember]
        public int CountNotRun
        {
            get { return _countNotRun; }
            set
            {
                if (_countNotRun != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotRun", _countNotRun);
                    _countNotRun = value;
                    OnPropertyChanged("CountNotRun");
                }
            }
        }
        private int _countNotRun;
    
        [DataMember]
        public int CountNotApplicable
        {
            get { return _countNotApplicable; }
            set
            {
                if (_countNotApplicable != value)
                {
                    ChangeTracker.RecordOriginalValue("CountNotApplicable", _countNotApplicable);
                    _countNotApplicable = value;
                    OnPropertyChanged("CountNotApplicable");
                }
            }
        }
        private int _countNotApplicable;
    
        [DataMember]
        public Nullable<System.DateTime> ExecutionDate
        {
            get { return _executionDate; }
            set
            {
                if (_executionDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionDate", _executionDate);
                    _executionDate = value;
                    OnPropertyChanged("ExecutionDate");
                }
            }
        }
        private Nullable<System.DateTime> _executionDate;
    
        [DataMember]
        public bool IsDynamic
        {
            get { return _isDynamic; }
            set
            {
                if (_isDynamic != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDynamic", _isDynamic);
                    _isDynamic = value;
                    OnPropertyChanged("IsDynamic");
                }
            }
        }
        private bool _isDynamic;
    
        [DataMember]
        public string DynamicQuery
        {
            get { return _dynamicQuery; }
            set
            {
                if (_dynamicQuery != value)
                {
                    ChangeTracker.RecordOriginalValue("DynamicQuery", _dynamicQuery);
                    _dynamicQuery = value;
                    OnPropertyChanged("DynamicQuery");
                }
            }
        }
        private string _dynamicQuery;
    
        [DataMember]
        public bool IsAutoScheduled
        {
            get { return _isAutoScheduled; }
            set
            {
                if (_isAutoScheduled != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAutoScheduled", _isAutoScheduled);
                    _isAutoScheduled = value;
                    OnPropertyChanged("IsAutoScheduled");
                }
            }
        }
        private bool _isAutoScheduled;
    
        [DataMember]
        public Nullable<int> TestConfigurationSetId
        {
            get { return _testConfigurationSetId; }
            set
            {
                if (_testConfigurationSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestConfigurationSetId", _testConfigurationSetId);
                    if (!IsDeserializing)
                    {
                        if (TestConfigurationSet != null && TestConfigurationSet.TestConfigurationSetId != value)
                        {
                            TestConfigurationSet = null;
                        }
                    }
                    _testConfigurationSetId = value;
                    OnPropertyChanged("TestConfigurationSetId");
                }
            }
        }
        private Nullable<int> _testConfigurationSetId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public AutomationHost AutomationHost
        {
            get { return _automationHost; }
            set
            {
                if (!ReferenceEquals(_automationHost, value))
                {
                    var previousValue = _automationHost;
                    _automationHost = value;
                    FixupAutomationHost(previousValue);
                    OnNavigationPropertyChanged("AutomationHost");
                }
            }
        }
        private AutomationHost _automationHost;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public Recurrence Recurrence
        {
            get { return _recurrence; }
            set
            {
                if (!ReferenceEquals(_recurrence, value))
                {
                    var previousValue = _recurrence;
                    _recurrence = value;
                    FixupRecurrence(previousValue);
                    OnNavigationPropertyChanged("Recurrence");
                }
            }
        }
        private Recurrence _recurrence;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public TrackableCollection<ReleaseTestSet> ReleasesExecutionData
        {
            get
            {
                if (_releasesExecutionData == null)
                {
                    _releasesExecutionData = new TrackableCollection<ReleaseTestSet>();
                    _releasesExecutionData.CollectionChanged += FixupReleasesExecutionData;
                }
                return _releasesExecutionData;
            }
            set
            {
                if (!ReferenceEquals(_releasesExecutionData, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releasesExecutionData != null)
                    {
                        _releasesExecutionData.CollectionChanged -= FixupReleasesExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseTestSet item in _releasesExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releasesExecutionData = value;
                    if (_releasesExecutionData != null)
                    {
                        _releasesExecutionData.CollectionChanged += FixupReleasesExecutionData;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseTestSet item in _releasesExecutionData)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleasesExecutionData");
                }
            }
        }
        private TrackableCollection<ReleaseTestSet> _releasesExecutionData;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TestRunType TestRunType
        {
            get { return _testRunType; }
            set
            {
                if (!ReferenceEquals(_testRunType, value))
                {
                    var previousValue = _testRunType;
                    _testRunType = value;
                    FixupTestRunType(previousValue);
                    OnNavigationPropertyChanged("TestRunType");
                }
            }
        }
        private TestRunType _testRunType;
    
        [DataMember]
        public TrackableCollection<TestRunsPending> PendingTestRuns
        {
            get
            {
                if (_pendingTestRuns == null)
                {
                    _pendingTestRuns = new TrackableCollection<TestRunsPending>();
                    _pendingTestRuns.CollectionChanged += FixupPendingTestRuns;
                }
                return _pendingTestRuns;
            }
            set
            {
                if (!ReferenceEquals(_pendingTestRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pendingTestRuns != null)
                    {
                        _pendingTestRuns.CollectionChanged -= FixupPendingTestRuns;
                    }
                    _pendingTestRuns = value;
                    if (_pendingTestRuns != null)
                    {
                        _pendingTestRuns.CollectionChanged += FixupPendingTestRuns;
                    }
                    OnNavigationPropertyChanged("PendingTestRuns");
                }
            }
        }
        private TrackableCollection<TestRunsPending> _pendingTestRuns;
    
        [DataMember]
        public TestSetFolder Folder
        {
            get { return _folder; }
            set
            {
                if (!ReferenceEquals(_folder, value))
                {
                    var previousValue = _folder;
                    _folder = value;
                    FixupFolder(previousValue);
                    OnNavigationPropertyChanged("Folder");
                }
            }
        }
        private TestSetFolder _folder;
    
        [DataMember]
        public TestSetStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private TestSetStatus _status;
    
        [DataMember]
        public TrackableCollection<TestSetDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<TestSetDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetDiscussion item in _discussions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetDiscussion item in _discussions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<TestSetDiscussion> _discussions;
    
        [DataMember]
        public TrackableCollection<TestSetParameter> ParameterValues
        {
            get
            {
                if (_parameterValues == null)
                {
                    _parameterValues = new TrackableCollection<TestSetParameter>();
                    _parameterValues.CollectionChanged += FixupParameterValues;
                }
                return _parameterValues;
            }
            set
            {
                if (!ReferenceEquals(_parameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged -= FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetParameter item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _parameterValues = value;
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged += FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetParameter item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ParameterValues");
                }
            }
        }
        private TrackableCollection<TestSetParameter> _parameterValues;
    
        [DataMember]
        public TrackableCollection<TestSetTestCase> TestSetTestCases
        {
            get
            {
                if (_testSetTestCases == null)
                {
                    _testSetTestCases = new TrackableCollection<TestSetTestCase>();
                    _testSetTestCases.CollectionChanged += FixupTestSetTestCases;
                }
                return _testSetTestCases;
            }
            set
            {
                if (!ReferenceEquals(_testSetTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetTestCases != null)
                    {
                        _testSetTestCases.CollectionChanged -= FixupTestSetTestCases;
                    }
                    _testSetTestCases = value;
                    if (_testSetTestCases != null)
                    {
                        _testSetTestCases.CollectionChanged += FixupTestSetTestCases;
                    }
                    OnNavigationPropertyChanged("TestSetTestCases");
                }
            }
        }
        private TrackableCollection<TestSetTestCase> _testSetTestCases;
    
        [DataMember]
        public User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                    OnNavigationPropertyChanged("Creator");
                }
            }
        }
        private User _creator;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public TestConfigurationSet TestConfigurationSet
        {
            get { return _testConfigurationSet; }
            set
            {
                if (!ReferenceEquals(_testConfigurationSet, value))
                {
                    var previousValue = _testConfigurationSet;
                    _testConfigurationSet = value;
                    FixupTestConfigurationSet(previousValue);
                    OnNavigationPropertyChanged("TestConfigurationSet");
                }
            }
        }
        private TestConfigurationSet _testConfigurationSet;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AutomationHost = null;
            Project = null;
            Recurrence = null;
            Release = null;
            ReleasesExecutionData.Clear();
            TestRuns.Clear();
            TestRunType = null;
            PendingTestRuns.Clear();
            Folder = null;
            Status = null;
            Discussions.Clear();
            ParameterValues.Clear();
            TestSetTestCases.Clear();
            Creator = null;
            Owner = null;
            TestConfigurationSet = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAutomationHost(AutomationHost previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (AutomationHost != null)
            {
                if (!AutomationHost.TestSets.Contains(this))
                {
                    AutomationHost.TestSets.Add(this);
                }
    
                AutomationHostId = AutomationHost.AutomationHostId;
            }
            else if (!skipKeys)
            {
                AutomationHostId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AutomationHost")
                    && (ChangeTracker.OriginalValues["AutomationHost"] == AutomationHost))
                {
                    ChangeTracker.OriginalValues.Remove("AutomationHost");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AutomationHost", previousValue);
                }
                if (AutomationHost != null && !AutomationHost.ChangeTracker.ChangeTrackingEnabled)
                {
                    AutomationHost.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.TestSets.Contains(this))
                {
                    Project.TestSets.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupRecurrence(Recurrence previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (Recurrence != null)
            {
                if (!Recurrence.TestSets.Contains(this))
                {
                    Recurrence.TestSets.Add(this);
                }
    
                RecurrenceId = Recurrence.RecurrenceId;
            }
            else if (!skipKeys)
            {
                RecurrenceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Recurrence")
                    && (ChangeTracker.OriginalValues["Recurrence"] == Recurrence))
                {
                    ChangeTracker.OriginalValues.Remove("Recurrence");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Recurrence", previousValue);
                }
                if (Recurrence != null && !Recurrence.ChangeTracker.ChangeTrackingEnabled)
                {
                    Recurrence.StartTracking();
                }
            }
        }
    
        private void FixupRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.TestSets.Contains(this))
                {
                    Release.TestSets.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            else if (!skipKeys)
            {
                ReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupTestRunType(TestRunType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (TestRunType != null)
            {
                if (!TestRunType.TestSets.Contains(this))
                {
                    TestRunType.TestSets.Add(this);
                }
    
                TestRunTypeId = TestRunType.TestRunTypeId;
            }
            else if (!skipKeys)
            {
                TestRunTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestRunType")
                    && (ChangeTracker.OriginalValues["TestRunType"] == TestRunType))
                {
                    ChangeTracker.OriginalValues.Remove("TestRunType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestRunType", previousValue);
                }
                if (TestRunType != null && !TestRunType.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestRunType.StartTracking();
                }
            }
        }
    
        private void FixupFolder(TestSetFolder previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (Folder != null)
            {
                if (!Folder.TestSets.Contains(this))
                {
                    Folder.TestSets.Add(this);
                }
    
                TestSetFolderId = Folder.TestSetFolderId;
            }
            else if (!skipKeys)
            {
                TestSetFolderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Folder")
                    && (ChangeTracker.OriginalValues["Folder"] == Folder))
                {
                    ChangeTracker.OriginalValues.Remove("Folder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Folder", previousValue);
                }
                if (Folder != null && !Folder.ChangeTracker.ChangeTrackingEnabled)
                {
                    Folder.StartTracking();
                }
            }
        }
    
        private void FixupStatus(TestSetStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.TestSets.Contains(this))
                {
                    Status.TestSets.Add(this);
                }
    
                TestSetStatusId = Status.TestSetStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CreatedTestSets.Contains(this))
            {
                previousValue.CreatedTestSets.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.CreatedTestSets.Contains(this))
                {
                    Creator.CreatedTestSets.Add(this);
                }
    
                CreatorId = Creator.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Creator")
                    && (ChangeTracker.OriginalValues["Creator"] == Creator))
                {
                    ChangeTracker.OriginalValues.Remove("Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Creator", previousValue);
                }
                if (Creator != null && !Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Creator.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedTestSets.Contains(this))
            {
                previousValue.OwnedTestSets.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedTestSets.Contains(this))
                {
                    Owner.OwnedTestSets.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupTestConfigurationSet(TestConfigurationSet previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSets.Contains(this))
            {
                previousValue.TestSets.Remove(this);
            }
    
            if (TestConfigurationSet != null)
            {
                if (!TestConfigurationSet.TestSets.Contains(this))
                {
                    TestConfigurationSet.TestSets.Add(this);
                }
    
                TestConfigurationSetId = TestConfigurationSet.TestConfigurationSetId;
            }
            else if (!skipKeys)
            {
                TestConfigurationSetId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestConfigurationSet")
                    && (ChangeTracker.OriginalValues["TestConfigurationSet"] == TestConfigurationSet))
                {
                    ChangeTracker.OriginalValues.Remove("TestConfigurationSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestConfigurationSet", previousValue);
                }
                if (TestConfigurationSet != null && !TestConfigurationSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestConfigurationSet.StartTracking();
                }
            }
        }
    
        private void FixupReleasesExecutionData(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseTestSet item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleasesExecutionData", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseTestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleasesExecutionData", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupPendingTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunsPending item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PendingTestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunsPending item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PendingTestRuns", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetDiscussion item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetParameter item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetTestCase item in e.NewItems)
                {
                    item.TestSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetTestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSet, this))
                    {
                        item.TestSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetTestCases", item);
                    }
                }
            }
        }

        #endregion

    }
}
