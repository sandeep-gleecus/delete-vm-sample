//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class TestRunStepView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestRunStepId
        {
            get { return _testRunStepId; }
            set
            {
                if (_testRunStepId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestRunStepId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testRunStepId = value;
                    OnPropertyChanged("TestRunStepId");
                }
            }
        }
        private int _testRunStepId;
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExecutionStatusId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public Nullable<int> TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private Nullable<int> _testCaseId;
    
        [DataMember]
        public Nullable<int> TestStepId
        {
            get { return _testStepId; }
            set
            {
                if (_testStepId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestStepId", _testStepId);
                    _testStepId = value;
                    OnPropertyChanged("TestStepId");
                }
            }
        }
        private Nullable<int> _testStepId;
    
        [DataMember]
        public int TestRunId
        {
            get { return _testRunId; }
            set
            {
                if (_testRunId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestRunId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testRunId = value;
                    OnPropertyChanged("TestRunId");
                }
            }
        }
        private int _testRunId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Description' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Position' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public string ExpectedResult
        {
            get { return _expectedResult; }
            set
            {
                if (_expectedResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ExpectedResult", _expectedResult);
                    _expectedResult = value;
                    OnPropertyChanged("ExpectedResult");
                }
            }
        }
        private string _expectedResult;
    
        [DataMember]
        public string SampleData
        {
            get { return _sampleData; }
            set
            {
                if (_sampleData != value)
                {
                    ChangeTracker.RecordOriginalValue("SampleData", _sampleData);
                    _sampleData = value;
                    OnPropertyChanged("SampleData");
                }
            }
        }
        private string _sampleData;
    
        [DataMember]
        public string ActualResult
        {
            get { return _actualResult; }
            set
            {
                if (_actualResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualResult", _actualResult);
                    _actualResult = value;
                    OnPropertyChanged("ActualResult");
                }
            }
        }
        private string _actualResult;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;
    
        [DataMember]
        public string ExecutionStatusName
        {
            get { return _executionStatusName; }
            set
            {
                if (_executionStatusName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExecutionStatusName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _executionStatusName = value;
                    OnPropertyChanged("ExecutionStatusName");
                }
            }
        }
        private string _executionStatusName;
    
        [DataMember]
        public Nullable<int> IncidentCount
        {
            get { return _incidentCount; }
            set
            {
                if (_incidentCount != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentCount", _incidentCount);
                    _incidentCount = value;
                    OnPropertyChanged("IncidentCount");
                }
            }
        }
        private Nullable<int> _incidentCount;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
