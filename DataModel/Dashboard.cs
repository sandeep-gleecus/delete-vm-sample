//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DashboardGlobalPersonalization))]
    [KnownType(typeof(DashboardUserPersonalization))]
    public partial class Dashboard: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DashboardId
        {
            get { return _dashboardId; }
            set
            {
                if (_dashboardId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DashboardId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dashboardId = value;
                    OnPropertyChanged("DashboardId");
                }
            }
        }
        private int _dashboardId;
    
        [DataMember]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    ChangeTracker.RecordOriginalValue("Path", _path);
                    _path = value;
                    OnPropertyChanged("Path");
                }
            }
        }
        private string _path;
    
        [DataMember]
        public string LoweredPath
        {
            get { return _loweredPath; }
            set
            {
                if (_loweredPath != value)
                {
                    ChangeTracker.RecordOriginalValue("LoweredPath", _loweredPath);
                    _loweredPath = value;
                    OnPropertyChanged("LoweredPath");
                }
            }
        }
        private string _loweredPath;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DashboardGlobalPersonalization GlobalPersonalization
        {
            get { return _globalPersonalization; }
            set
            {
                if (!ReferenceEquals(_globalPersonalization, value))
                {
                    var previousValue = _globalPersonalization;
                    _globalPersonalization = value;
                    FixupGlobalPersonalization(previousValue);
                    OnNavigationPropertyChanged("GlobalPersonalization");
                }
            }
        }
        private DashboardGlobalPersonalization _globalPersonalization;
    
        [DataMember]
        public TrackableCollection<DashboardUserPersonalization> UserPersonalization
        {
            get
            {
                if (_userPersonalization == null)
                {
                    _userPersonalization = new TrackableCollection<DashboardUserPersonalization>();
                    _userPersonalization.CollectionChanged += FixupUserPersonalization;
                }
                return _userPersonalization;
            }
            set
            {
                if (!ReferenceEquals(_userPersonalization, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userPersonalization != null)
                    {
                        _userPersonalization.CollectionChanged -= FixupUserPersonalization;
                    }
                    _userPersonalization = value;
                    if (_userPersonalization != null)
                    {
                        _userPersonalization.CollectionChanged += FixupUserPersonalization;
                    }
                    OnNavigationPropertyChanged("UserPersonalization");
                }
            }
        }
        private TrackableCollection<DashboardUserPersonalization> _userPersonalization;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GlobalPersonalization = null;
            UserPersonalization.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupGlobalPersonalization(DashboardGlobalPersonalization previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (GlobalPersonalization != null)
            {
                ChangeTracker.ObjectStateChanging += GlobalPersonalization.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Dashboard, this))
            {
                previousValue.Dashboard = null;
            }
    
            if (GlobalPersonalization != null)
            {
                GlobalPersonalization.Dashboard = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("GlobalPersonalization")
                    && (ChangeTracker.OriginalValues["GlobalPersonalization"] == GlobalPersonalization))
                {
                    ChangeTracker.OriginalValues.Remove("GlobalPersonalization");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("GlobalPersonalization", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (GlobalPersonalization != null && !GlobalPersonalization.ChangeTracker.ChangeTrackingEnabled)
                {
                    GlobalPersonalization.StartTracking();
                }
            }
        }
    
        private void FixupUserPersonalization(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DashboardUserPersonalization item in e.NewItems)
                {
                    item.Dashboard = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserPersonalization", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DashboardUserPersonalization item in e.OldItems)
                {
                    if (ReferenceEquals(item.Dashboard, this))
                    {
                        item.Dashboard = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserPersonalization", item);
                    }
                }
            }
        }

        #endregion

    }
}
