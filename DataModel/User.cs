//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DashboardUserPersonalization))]
    [KnownType(typeof(UserCollectionEntry))]
    [KnownType(typeof(UserProfile))]
    [KnownType(typeof(ProjectUser))]
    [KnownType(typeof(ProjectCollectionEntry))]
    [KnownType(typeof(ProjectGroupUser))]
    [KnownType(typeof(UserArtifactField))]
    [KnownType(typeof(UserCustomProperty))]
    [KnownType(typeof(SavedReport))]
    [KnownType(typeof(ReportGenerated))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(RequirementUser))]
    [KnownType(typeof(SavedFilter))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(Message))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TaraVaultUser))]
    [KnownType(typeof(Incident))]
    [KnownType(typeof(IncidentResolution))]
    [KnownType(typeof(ArtifactLink))]
    [KnownType(typeof(Attachment))]
    [KnownType(typeof(AttachmentVersion))]
    [KnownType(typeof(ReleaseDiscussion))]
    [KnownType(typeof(RequirementDiscussion))]
    [KnownType(typeof(TaskDiscussion))]
    [KnownType(typeof(TestCaseDiscussion))]
    [KnownType(typeof(TestSetDiscussion))]
    [KnownType(typeof(HistoryChangeSet))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(ReleaseUser))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestRunsPending))]
    [KnownType(typeof(TestSet))]
    [KnownType(typeof(TestSetTestCase))]
    [KnownType(typeof(DataSyncUserMapping))]
    [KnownType(typeof(NotificationUserSubscription))]
    [KnownType(typeof(ArtifactMessage))]
    [KnownType(typeof(DocumentDiscussion))]
    [KnownType(typeof(GlobalOAuthProvider))]
    [KnownType(typeof(AllocationActual))]
    [KnownType(typeof(ProjectBaseline))]
    [KnownType(typeof(Risk))]
    [KnownType(typeof(RiskDiscussion))]
    [KnownType(typeof(TimecardEntry))]
    [KnownType(typeof(UserIdea))]
    [KnownType(typeof(TrackMessage))]
    [KnownType(typeof(UserPageViewed))]
    [KnownType(typeof(ProjectTemplate))]
    [KnownType(typeof(MultiApproverExecuted))]
    [KnownType(typeof(Timecard))]
    [KnownType(typeof(UserRecentArtifact))]
    [KnownType(typeof(UserRecentProject))]
    [KnownType(typeof(GlobalHistoryChangeset))]
    [KnownType(typeof(ProjectSignature))]
    [KnownType(typeof(TestCaseSignature))]
    [KnownType(typeof(TestCaseApprovalUser))]
    [KnownType(typeof(TST_ADMIN_HISTORY_CHANGESET))]
    [KnownType(typeof(TST_ADMIN_HISTORY_DETAILS))]
    [KnownType(typeof(TST_USER_HISTORY_CHANGESET))]
    [KnownType(typeof(TST_USER_ACTIVITY_LOG))]
    [KnownType(typeof(TST_REPORT_DOWNLOADABLE))]
    [KnownType(typeof(TST_REQUIREMENT_APPROVAL_USERS))]
    [KnownType(typeof(TST_REQUIREMENT_SIGNATURE))]
    [KnownType(typeof(TST_ARTIFACT_SIGNATURE))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string LdapDn
        {
            get { return _ldapDn; }
            set
            {
                if (_ldapDn != value)
                {
                    ChangeTracker.RecordOriginalValue("LdapDn", _ldapDn);
                    _ldapDn = value;
                    OnPropertyChanged("LdapDn");
                }
            }
        }
        private string _ldapDn;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    ChangeTracker.RecordOriginalValue("Password", _password);
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string EmailAddress
        {
            get { return _emailAddress; }
            set
            {
                if (_emailAddress != value)
                {
                    ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
                    _emailAddress = value;
                    OnPropertyChanged("EmailAddress");
                }
            }
        }
        private string _emailAddress;
    
        [DataMember]
        public Nullable<System.DateTime> LastLoginDate
        {
            get { return _lastLoginDate; }
            set
            {
                if (_lastLoginDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastLoginDate", _lastLoginDate);
                    _lastLoginDate = value;
                    OnPropertyChanged("LastLoginDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastLoginDate;
    
        [DataMember]
        public string RssToken
        {
            get { return _rssToken; }
            set
            {
                if (_rssToken != value)
                {
                    ChangeTracker.RecordOriginalValue("RssToken", _rssToken);
                    _rssToken = value;
                    OnPropertyChanged("RssToken");
                }
            }
        }
        private string _rssToken;
    
        [DataMember]
        public string PasswordSalt
        {
            get { return _passwordSalt; }
            set
            {
                if (_passwordSalt != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordSalt", _passwordSalt);
                    _passwordSalt = value;
                    OnPropertyChanged("PasswordSalt");
                }
            }
        }
        private string _passwordSalt;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastActivityDate
        {
            get { return _lastActivityDate; }
            set
            {
                if (_lastActivityDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastActivityDate", _lastActivityDate);
                    _lastActivityDate = value;
                    OnPropertyChanged("LastActivityDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastActivityDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastLockoutDate
        {
            get { return _lastLockoutDate; }
            set
            {
                if (_lastLockoutDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastLockoutDate", _lastLockoutDate);
                    _lastLockoutDate = value;
                    OnPropertyChanged("LastLockoutDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastLockoutDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastPasswordChangedDate
        {
            get { return _lastPasswordChangedDate; }
            set
            {
                if (_lastPasswordChangedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastPasswordChangedDate", _lastPasswordChangedDate);
                    _lastPasswordChangedDate = value;
                    OnPropertyChanged("LastPasswordChangedDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastPasswordChangedDate;
    
        [DataMember]
        public bool IsApproved
        {
            get { return _isApproved; }
            set
            {
                if (_isApproved != value)
                {
                    ChangeTracker.RecordOriginalValue("IsApproved", _isApproved);
                    _isApproved = value;
                    OnPropertyChanged("IsApproved");
                }
            }
        }
        private bool _isApproved;
    
        [DataMember]
        public bool IsLocked
        {
            get { return _isLocked; }
            set
            {
                if (_isLocked != value)
                {
                    ChangeTracker.RecordOriginalValue("IsLocked", _isLocked);
                    _isLocked = value;
                    OnPropertyChanged("IsLocked");
                }
            }
        }
        private bool _isLocked;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    ChangeTracker.RecordOriginalValue("Comment", _comment);
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string PasswordQuestion
        {
            get { return _passwordQuestion; }
            set
            {
                if (_passwordQuestion != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordQuestion", _passwordQuestion);
                    _passwordQuestion = value;
                    OnPropertyChanged("PasswordQuestion");
                }
            }
        }
        private string _passwordQuestion;
    
        [DataMember]
        public string PasswordAnswer
        {
            get { return _passwordAnswer; }
            set
            {
                if (_passwordAnswer != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordAnswer", _passwordAnswer);
                    _passwordAnswer = value;
                    OnPropertyChanged("PasswordAnswer");
                }
            }
        }
        private string _passwordAnswer;
    
        [DataMember]
        public int PasswordFormat
        {
            get { return _passwordFormat; }
            set
            {
                if (_passwordFormat != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordFormat", _passwordFormat);
                    _passwordFormat = value;
                    OnPropertyChanged("PasswordFormat");
                }
            }
        }
        private int _passwordFormat;
    
        [DataMember]
        public int FailedPasswordAttemptCount
        {
            get { return _failedPasswordAttemptCount; }
            set
            {
                if (_failedPasswordAttemptCount != value)
                {
                    ChangeTracker.RecordOriginalValue("FailedPasswordAttemptCount", _failedPasswordAttemptCount);
                    _failedPasswordAttemptCount = value;
                    OnPropertyChanged("FailedPasswordAttemptCount");
                }
            }
        }
        private int _failedPasswordAttemptCount;
    
        [DataMember]
        public Nullable<System.DateTime> FailedPasswordAttemptWindowStart
        {
            get { return _failedPasswordAttemptWindowStart; }
            set
            {
                if (_failedPasswordAttemptWindowStart != value)
                {
                    ChangeTracker.RecordOriginalValue("FailedPasswordAttemptWindowStart", _failedPasswordAttemptWindowStart);
                    _failedPasswordAttemptWindowStart = value;
                    OnPropertyChanged("FailedPasswordAttemptWindowStart");
                }
            }
        }
        private Nullable<System.DateTime> _failedPasswordAttemptWindowStart;
    
        [DataMember]
        public int FailedPasswordAnswerAttemptCount
        {
            get { return _failedPasswordAnswerAttemptCount; }
            set
            {
                if (_failedPasswordAnswerAttemptCount != value)
                {
                    ChangeTracker.RecordOriginalValue("FailedPasswordAnswerAttemptCount", _failedPasswordAnswerAttemptCount);
                    _failedPasswordAnswerAttemptCount = value;
                    OnPropertyChanged("FailedPasswordAnswerAttemptCount");
                }
            }
        }
        private int _failedPasswordAnswerAttemptCount;
    
        [DataMember]
        public Nullable<System.DateTime> FailedPasswordAnswerAttemptWindowStart
        {
            get { return _failedPasswordAnswerAttemptWindowStart; }
            set
            {
                if (_failedPasswordAnswerAttemptWindowStart != value)
                {
                    ChangeTracker.RecordOriginalValue("FailedPasswordAnswerAttemptWindowStart", _failedPasswordAnswerAttemptWindowStart);
                    _failedPasswordAnswerAttemptWindowStart = value;
                    OnPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
                }
            }
        }
        private Nullable<System.DateTime> _failedPasswordAnswerAttemptWindowStart;
    
        [DataMember]
        public bool IsLegacyFormat
        {
            get { return _isLegacyFormat; }
            set
            {
                if (_isLegacyFormat != value)
                {
                    ChangeTracker.RecordOriginalValue("IsLegacyFormat", _isLegacyFormat);
                    _isLegacyFormat = value;
                    OnPropertyChanged("IsLegacyFormat");
                }
            }
        }
        private bool _isLegacyFormat;
    
        [DataMember]
        public string OAuthAccessToken
        {
            get { return _oAuthAccessToken; }
            set
            {
                if (_oAuthAccessToken != value)
                {
                    ChangeTracker.RecordOriginalValue("OAuthAccessToken", _oAuthAccessToken);
                    _oAuthAccessToken = value;
                    OnPropertyChanged("OAuthAccessToken");
                }
            }
        }
        private string _oAuthAccessToken;
    
        [DataMember]
        public Nullable<System.Guid> OAuthProviderId
        {
            get { return _oAuthProviderId; }
            set
            {
                if (_oAuthProviderId != value)
                {
                    ChangeTracker.RecordOriginalValue("OAuthProviderId", _oAuthProviderId);
                    if (!IsDeserializing)
                    {
                        if (OAuthProviders != null && OAuthProviders.OAuthProviderId != value)
                        {
                            OAuthProviders = null;
                        }
                    }
                    _oAuthProviderId = value;
                    OnPropertyChanged("OAuthProviderId");
                }
            }
        }
        private Nullable<System.Guid> _oAuthProviderId;
    
        [DataMember]
        public string MFAPhone
        {
            get { return _mFAPhone; }
            set
            {
                if (_mFAPhone != value)
                {
                    ChangeTracker.RecordOriginalValue("MFAPhone", _mFAPhone);
                    _mFAPhone = value;
                    OnPropertyChanged("MFAPhone");
                }
            }
        }
        private string _mFAPhone;
    
        [DataMember]
        public string MfaTokenEncrypted
        {
            get { return _mfaTokenEncrypted; }
            set
            {
                if (_mfaTokenEncrypted != value)
                {
                    ChangeTracker.RecordOriginalValue("MfaTokenEncrypted", _mfaTokenEncrypted);
                    _mfaTokenEncrypted = value;
                    OnPropertyChanged("MfaTokenEncrypted");
                }
            }
        }
        private string _mfaTokenEncrypted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DashboardUserPersonalization> DashboardPersonalization
        {
            get
            {
                if (_dashboardPersonalization == null)
                {
                    _dashboardPersonalization = new TrackableCollection<DashboardUserPersonalization>();
                    _dashboardPersonalization.CollectionChanged += FixupDashboardPersonalization;
                }
                return _dashboardPersonalization;
            }
            set
            {
                if (!ReferenceEquals(_dashboardPersonalization, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dashboardPersonalization != null)
                    {
                        _dashboardPersonalization.CollectionChanged -= FixupDashboardPersonalization;
                    }
                    _dashboardPersonalization = value;
                    if (_dashboardPersonalization != null)
                    {
                        _dashboardPersonalization.CollectionChanged += FixupDashboardPersonalization;
                    }
                    OnNavigationPropertyChanged("DashboardPersonalization");
                }
            }
        }
        private TrackableCollection<DashboardUserPersonalization> _dashboardPersonalization;
    
        [DataMember]
        public TrackableCollection<UserCollectionEntry> SettingsEntries
        {
            get
            {
                if (_settingsEntries == null)
                {
                    _settingsEntries = new TrackableCollection<UserCollectionEntry>();
                    _settingsEntries.CollectionChanged += FixupSettingsEntries;
                }
                return _settingsEntries;
            }
            set
            {
                if (!ReferenceEquals(_settingsEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_settingsEntries != null)
                    {
                        _settingsEntries.CollectionChanged -= FixupSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserCollectionEntry item in _settingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _settingsEntries = value;
                    if (_settingsEntries != null)
                    {
                        _settingsEntries.CollectionChanged += FixupSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserCollectionEntry item in _settingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SettingsEntries");
                }
            }
        }
        private TrackableCollection<UserCollectionEntry> _settingsEntries;
    
        [DataMember]
        public UserProfile Profile
        {
            get { return _profile; }
            set
            {
                if (!ReferenceEquals(_profile, value))
                {
                    var previousValue = _profile;
                    _profile = value;
                    FixupProfile(previousValue);
                    OnNavigationPropertyChanged("Profile");
                }
            }
        }
        private UserProfile _profile;
    
        [DataMember]
        public TrackableCollection<ProjectUser> ProjectMembership
        {
            get
            {
                if (_projectMembership == null)
                {
                    _projectMembership = new TrackableCollection<ProjectUser>();
                    _projectMembership.CollectionChanged += FixupProjectMembership;
                }
                return _projectMembership;
            }
            set
            {
                if (!ReferenceEquals(_projectMembership, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectMembership != null)
                    {
                        _projectMembership.CollectionChanged -= FixupProjectMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectUser item in _projectMembership)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectMembership = value;
                    if (_projectMembership != null)
                    {
                        _projectMembership.CollectionChanged += FixupProjectMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectUser item in _projectMembership)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectMembership");
                }
            }
        }
        private TrackableCollection<ProjectUser> _projectMembership;
    
        [DataMember]
        public TrackableCollection<ProjectCollectionEntry> ProjectSettingsEntries
        {
            get
            {
                if (_projectSettingsEntries == null)
                {
                    _projectSettingsEntries = new TrackableCollection<ProjectCollectionEntry>();
                    _projectSettingsEntries.CollectionChanged += FixupProjectSettingsEntries;
                }
                return _projectSettingsEntries;
            }
            set
            {
                if (!ReferenceEquals(_projectSettingsEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectSettingsEntries != null)
                    {
                        _projectSettingsEntries.CollectionChanged -= FixupProjectSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectCollectionEntry item in _projectSettingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectSettingsEntries = value;
                    if (_projectSettingsEntries != null)
                    {
                        _projectSettingsEntries.CollectionChanged += FixupProjectSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectCollectionEntry item in _projectSettingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectSettingsEntries");
                }
            }
        }
        private TrackableCollection<ProjectCollectionEntry> _projectSettingsEntries;
    
        [DataMember]
        public TrackableCollection<ProjectGroupUser> ProjectGroupMembership
        {
            get
            {
                if (_projectGroupMembership == null)
                {
                    _projectGroupMembership = new TrackableCollection<ProjectGroupUser>();
                    _projectGroupMembership.CollectionChanged += FixupProjectGroupMembership;
                }
                return _projectGroupMembership;
            }
            set
            {
                if (!ReferenceEquals(_projectGroupMembership, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectGroupMembership != null)
                    {
                        _projectGroupMembership.CollectionChanged -= FixupProjectGroupMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectGroupUser item in _projectGroupMembership)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectGroupMembership = value;
                    if (_projectGroupMembership != null)
                    {
                        _projectGroupMembership.CollectionChanged += FixupProjectGroupMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectGroupUser item in _projectGroupMembership)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectGroupMembership");
                }
            }
        }
        private TrackableCollection<ProjectGroupUser> _projectGroupMembership;
    
        [DataMember]
        public TrackableCollection<UserArtifactField> ArtifactFields
        {
            get
            {
                if (_artifactFields == null)
                {
                    _artifactFields = new TrackableCollection<UserArtifactField>();
                    _artifactFields.CollectionChanged += FixupArtifactFields;
                }
                return _artifactFields;
            }
            set
            {
                if (!ReferenceEquals(_artifactFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactFields != null)
                    {
                        _artifactFields.CollectionChanged -= FixupArtifactFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserArtifactField item in _artifactFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactFields = value;
                    if (_artifactFields != null)
                    {
                        _artifactFields.CollectionChanged += FixupArtifactFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserArtifactField item in _artifactFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactFields");
                }
            }
        }
        private TrackableCollection<UserArtifactField> _artifactFields;
    
        [DataMember]
        public TrackableCollection<UserCustomProperty> ArtifactCustomProperties
        {
            get
            {
                if (_artifactCustomProperties == null)
                {
                    _artifactCustomProperties = new TrackableCollection<UserCustomProperty>();
                    _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                }
                return _artifactCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_artifactCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged -= FixupArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserCustomProperty item in _artifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactCustomProperties = value;
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserCustomProperty item in _artifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactCustomProperties");
                }
            }
        }
        private TrackableCollection<UserCustomProperty> _artifactCustomProperties;
    
        [DataMember]
        public TrackableCollection<SavedReport> SavedReports
        {
            get
            {
                if (_savedReports == null)
                {
                    _savedReports = new TrackableCollection<SavedReport>();
                    _savedReports.CollectionChanged += FixupSavedReports;
                }
                return _savedReports;
            }
            set
            {
                if (!ReferenceEquals(_savedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged -= FixupSavedReports;
                    }
                    _savedReports = value;
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged += FixupSavedReports;
                    }
                    OnNavigationPropertyChanged("SavedReports");
                }
            }
        }
        private TrackableCollection<SavedReport> _savedReports;
    
        [DataMember]
        public TrackableCollection<ReportGenerated> GeneratedReports
        {
            get
            {
                if (_generatedReports == null)
                {
                    _generatedReports = new TrackableCollection<ReportGenerated>();
                    _generatedReports.CollectionChanged += FixupGeneratedReports;
                }
                return _generatedReports;
            }
            set
            {
                if (!ReferenceEquals(_generatedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged -= FixupGeneratedReports;
                    }
                    _generatedReports = value;
                    if (_generatedReports != null)
                    {
                        _generatedReports.CollectionChanged += FixupGeneratedReports;
                    }
                    OnNavigationPropertyChanged("GeneratedReports");
                }
            }
        }
        private TrackableCollection<ReportGenerated> _generatedReports;
    
        [DataMember]
        public TrackableCollection<Requirement> AuthoredRequirements
        {
            get
            {
                if (_authoredRequirements == null)
                {
                    _authoredRequirements = new TrackableCollection<Requirement>();
                    _authoredRequirements.CollectionChanged += FixupAuthoredRequirements;
                }
                return _authoredRequirements;
            }
            set
            {
                if (!ReferenceEquals(_authoredRequirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_authoredRequirements != null)
                    {
                        _authoredRequirements.CollectionChanged -= FixupAuthoredRequirements;
                    }
                    _authoredRequirements = value;
                    if (_authoredRequirements != null)
                    {
                        _authoredRequirements.CollectionChanged += FixupAuthoredRequirements;
                    }
                    OnNavigationPropertyChanged("AuthoredRequirements");
                }
            }
        }
        private TrackableCollection<Requirement> _authoredRequirements;
    
        [DataMember]
        public TrackableCollection<Requirement> OwnedRequirements
        {
            get
            {
                if (_ownedRequirements == null)
                {
                    _ownedRequirements = new TrackableCollection<Requirement>();
                    _ownedRequirements.CollectionChanged += FixupOwnedRequirements;
                }
                return _ownedRequirements;
            }
            set
            {
                if (!ReferenceEquals(_ownedRequirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedRequirements != null)
                    {
                        _ownedRequirements.CollectionChanged -= FixupOwnedRequirements;
                    }
                    _ownedRequirements = value;
                    if (_ownedRequirements != null)
                    {
                        _ownedRequirements.CollectionChanged += FixupOwnedRequirements;
                    }
                    OnNavigationPropertyChanged("OwnedRequirements");
                }
            }
        }
        private TrackableCollection<Requirement> _ownedRequirements;
    
        [DataMember]
        public TrackableCollection<RequirementUser> RequirementViewState
        {
            get
            {
                if (_requirementViewState == null)
                {
                    _requirementViewState = new TrackableCollection<RequirementUser>();
                    _requirementViewState.CollectionChanged += FixupRequirementViewState;
                }
                return _requirementViewState;
            }
            set
            {
                if (!ReferenceEquals(_requirementViewState, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementViewState != null)
                    {
                        _requirementViewState.CollectionChanged -= FixupRequirementViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementUser item in _requirementViewState)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementViewState = value;
                    if (_requirementViewState != null)
                    {
                        _requirementViewState.CollectionChanged += FixupRequirementViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementUser item in _requirementViewState)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementViewState");
                }
            }
        }
        private TrackableCollection<RequirementUser> _requirementViewState;
    
        [DataMember]
        public TrackableCollection<SavedFilter> SavedFilters
        {
            get
            {
                if (_savedFilters == null)
                {
                    _savedFilters = new TrackableCollection<SavedFilter>();
                    _savedFilters.CollectionChanged += FixupSavedFilters;
                }
                return _savedFilters;
            }
            set
            {
                if (!ReferenceEquals(_savedFilters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged -= FixupSavedFilters;
                    }
                    _savedFilters = value;
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged += FixupSavedFilters;
                    }
                    OnNavigationPropertyChanged("SavedFilters");
                }
            }
        }
        private TrackableCollection<SavedFilter> _savedFilters;
    
        [DataMember]
        public TrackableCollection<Task> CreatedTasks
        {
            get
            {
                if (_createdTasks == null)
                {
                    _createdTasks = new TrackableCollection<Task>();
                    _createdTasks.CollectionChanged += FixupCreatedTasks;
                }
                return _createdTasks;
            }
            set
            {
                if (!ReferenceEquals(_createdTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_createdTasks != null)
                    {
                        _createdTasks.CollectionChanged -= FixupCreatedTasks;
                    }
                    _createdTasks = value;
                    if (_createdTasks != null)
                    {
                        _createdTasks.CollectionChanged += FixupCreatedTasks;
                    }
                    OnNavigationPropertyChanged("CreatedTasks");
                }
            }
        }
        private TrackableCollection<Task> _createdTasks;
    
        [DataMember]
        public TrackableCollection<Task> OwnedTasks
        {
            get
            {
                if (_ownedTasks == null)
                {
                    _ownedTasks = new TrackableCollection<Task>();
                    _ownedTasks.CollectionChanged += FixupOwnedTasks;
                }
                return _ownedTasks;
            }
            set
            {
                if (!ReferenceEquals(_ownedTasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedTasks != null)
                    {
                        _ownedTasks.CollectionChanged -= FixupOwnedTasks;
                    }
                    _ownedTasks = value;
                    if (_ownedTasks != null)
                    {
                        _ownedTasks.CollectionChanged += FixupOwnedTasks;
                    }
                    OnNavigationPropertyChanged("OwnedTasks");
                }
            }
        }
        private TrackableCollection<Task> _ownedTasks;
    
        [DataMember]
        public TrackableCollection<Message> ReceivedMessages
        {
            get
            {
                if (_receivedMessages == null)
                {
                    _receivedMessages = new TrackableCollection<Message>();
                    _receivedMessages.CollectionChanged += FixupReceivedMessages;
                }
                return _receivedMessages;
            }
            set
            {
                if (!ReferenceEquals(_receivedMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_receivedMessages != null)
                    {
                        _receivedMessages.CollectionChanged -= FixupReceivedMessages;
                    }
                    _receivedMessages = value;
                    if (_receivedMessages != null)
                    {
                        _receivedMessages.CollectionChanged += FixupReceivedMessages;
                    }
                    OnNavigationPropertyChanged("ReceivedMessages");
                }
            }
        }
        private TrackableCollection<Message> _receivedMessages;
    
        [DataMember]
        public TrackableCollection<Message> SentMessages
        {
            get
            {
                if (_sentMessages == null)
                {
                    _sentMessages = new TrackableCollection<Message>();
                    _sentMessages.CollectionChanged += FixupSentMessages;
                }
                return _sentMessages;
            }
            set
            {
                if (!ReferenceEquals(_sentMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sentMessages != null)
                    {
                        _sentMessages.CollectionChanged -= FixupSentMessages;
                    }
                    _sentMessages = value;
                    if (_sentMessages != null)
                    {
                        _sentMessages.CollectionChanged += FixupSentMessages;
                    }
                    OnNavigationPropertyChanged("SentMessages");
                }
            }
        }
        private TrackableCollection<Message> _sentMessages;
    
        [DataMember]
        public TrackableCollection<User> UserContactsOf
        {
            get
            {
                if (_userContactsOf == null)
                {
                    _userContactsOf = new TrackableCollection<User>();
                    _userContactsOf.CollectionChanged += FixupUserContactsOf;
                }
                return _userContactsOf;
            }
            set
            {
                if (!ReferenceEquals(_userContactsOf, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userContactsOf != null)
                    {
                        _userContactsOf.CollectionChanged -= FixupUserContactsOf;
                    }
                    _userContactsOf = value;
                    if (_userContactsOf != null)
                    {
                        _userContactsOf.CollectionChanged += FixupUserContactsOf;
                    }
                    OnNavigationPropertyChanged("UserContactsOf");
                }
            }
        }
        private TrackableCollection<User> _userContactsOf;
    
        [DataMember]
        public TrackableCollection<User> UserContacts
        {
            get
            {
                if (_userContacts == null)
                {
                    _userContacts = new TrackableCollection<User>();
                    _userContacts.CollectionChanged += FixupUserContacts;
                }
                return _userContacts;
            }
            set
            {
                if (!ReferenceEquals(_userContacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userContacts != null)
                    {
                        _userContacts.CollectionChanged -= FixupUserContacts;
                    }
                    _userContacts = value;
                    if (_userContacts != null)
                    {
                        _userContacts.CollectionChanged += FixupUserContacts;
                    }
                    OnNavigationPropertyChanged("UserContacts");
                }
            }
        }
        private TrackableCollection<User> _userContacts;
    
        [DataMember]
        public TaraVaultUser TaraVault
        {
            get { return _taraVault; }
            set
            {
                if (!ReferenceEquals(_taraVault, value))
                {
                    var previousValue = _taraVault;
                    _taraVault = value;
                    FixupTaraVault(previousValue);
                    OnNavigationPropertyChanged("TaraVault");
                }
            }
        }
        private TaraVaultUser _taraVault;
    
        [DataMember]
        public TrackableCollection<Incident> OpenedIncidents
        {
            get
            {
                if (_openedIncidents == null)
                {
                    _openedIncidents = new TrackableCollection<Incident>();
                    _openedIncidents.CollectionChanged += FixupOpenedIncidents;
                }
                return _openedIncidents;
            }
            set
            {
                if (!ReferenceEquals(_openedIncidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_openedIncidents != null)
                    {
                        _openedIncidents.CollectionChanged -= FixupOpenedIncidents;
                    }
                    _openedIncidents = value;
                    if (_openedIncidents != null)
                    {
                        _openedIncidents.CollectionChanged += FixupOpenedIncidents;
                    }
                    OnNavigationPropertyChanged("OpenedIncidents");
                }
            }
        }
        private TrackableCollection<Incident> _openedIncidents;
    
        [DataMember]
        public TrackableCollection<Incident> OwnedIncidents
        {
            get
            {
                if (_ownedIncidents == null)
                {
                    _ownedIncidents = new TrackableCollection<Incident>();
                    _ownedIncidents.CollectionChanged += FixupOwnedIncidents;
                }
                return _ownedIncidents;
            }
            set
            {
                if (!ReferenceEquals(_ownedIncidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedIncidents != null)
                    {
                        _ownedIncidents.CollectionChanged -= FixupOwnedIncidents;
                    }
                    _ownedIncidents = value;
                    if (_ownedIncidents != null)
                    {
                        _ownedIncidents.CollectionChanged += FixupOwnedIncidents;
                    }
                    OnNavigationPropertyChanged("OwnedIncidents");
                }
            }
        }
        private TrackableCollection<Incident> _ownedIncidents;
    
        [DataMember]
        public TrackableCollection<IncidentResolution> IncidentResolutions
        {
            get
            {
                if (_incidentResolutions == null)
                {
                    _incidentResolutions = new TrackableCollection<IncidentResolution>();
                    _incidentResolutions.CollectionChanged += FixupIncidentResolutions;
                }
                return _incidentResolutions;
            }
            set
            {
                if (!ReferenceEquals(_incidentResolutions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentResolutions != null)
                    {
                        _incidentResolutions.CollectionChanged -= FixupIncidentResolutions;
                    }
                    _incidentResolutions = value;
                    if (_incidentResolutions != null)
                    {
                        _incidentResolutions.CollectionChanged += FixupIncidentResolutions;
                    }
                    OnNavigationPropertyChanged("IncidentResolutions");
                }
            }
        }
        private TrackableCollection<IncidentResolution> _incidentResolutions;
    
        [DataMember]
        public TrackableCollection<ArtifactLink> ArtifactLinks
        {
            get
            {
                if (_artifactLinks == null)
                {
                    _artifactLinks = new TrackableCollection<ArtifactLink>();
                    _artifactLinks.CollectionChanged += FixupArtifactLinks;
                }
                return _artifactLinks;
            }
            set
            {
                if (!ReferenceEquals(_artifactLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactLinks != null)
                    {
                        _artifactLinks.CollectionChanged -= FixupArtifactLinks;
                    }
                    _artifactLinks = value;
                    if (_artifactLinks != null)
                    {
                        _artifactLinks.CollectionChanged += FixupArtifactLinks;
                    }
                    OnNavigationPropertyChanged("ArtifactLinks");
                }
            }
        }
        private TrackableCollection<ArtifactLink> _artifactLinks;
    
        [DataMember]
        public TrackableCollection<Attachment> AuthoredAttachments
        {
            get
            {
                if (_authoredAttachments == null)
                {
                    _authoredAttachments = new TrackableCollection<Attachment>();
                    _authoredAttachments.CollectionChanged += FixupAuthoredAttachments;
                }
                return _authoredAttachments;
            }
            set
            {
                if (!ReferenceEquals(_authoredAttachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_authoredAttachments != null)
                    {
                        _authoredAttachments.CollectionChanged -= FixupAuthoredAttachments;
                    }
                    _authoredAttachments = value;
                    if (_authoredAttachments != null)
                    {
                        _authoredAttachments.CollectionChanged += FixupAuthoredAttachments;
                    }
                    OnNavigationPropertyChanged("AuthoredAttachments");
                }
            }
        }
        private TrackableCollection<Attachment> _authoredAttachments;
    
        [DataMember]
        public TrackableCollection<Attachment> EditedAttachments
        {
            get
            {
                if (_editedAttachments == null)
                {
                    _editedAttachments = new TrackableCollection<Attachment>();
                    _editedAttachments.CollectionChanged += FixupEditedAttachments;
                }
                return _editedAttachments;
            }
            set
            {
                if (!ReferenceEquals(_editedAttachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_editedAttachments != null)
                    {
                        _editedAttachments.CollectionChanged -= FixupEditedAttachments;
                    }
                    _editedAttachments = value;
                    if (_editedAttachments != null)
                    {
                        _editedAttachments.CollectionChanged += FixupEditedAttachments;
                    }
                    OnNavigationPropertyChanged("EditedAttachments");
                }
            }
        }
        private TrackableCollection<Attachment> _editedAttachments;
    
        [DataMember]
        public TrackableCollection<AttachmentVersion> AttachmentVersions
        {
            get
            {
                if (_attachmentVersions == null)
                {
                    _attachmentVersions = new TrackableCollection<AttachmentVersion>();
                    _attachmentVersions.CollectionChanged += FixupAttachmentVersions;
                }
                return _attachmentVersions;
            }
            set
            {
                if (!ReferenceEquals(_attachmentVersions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachmentVersions != null)
                    {
                        _attachmentVersions.CollectionChanged -= FixupAttachmentVersions;
                    }
                    _attachmentVersions = value;
                    if (_attachmentVersions != null)
                    {
                        _attachmentVersions.CollectionChanged += FixupAttachmentVersions;
                    }
                    OnNavigationPropertyChanged("AttachmentVersions");
                }
            }
        }
        private TrackableCollection<AttachmentVersion> _attachmentVersions;
    
        [DataMember]
        public TrackableCollection<ReleaseDiscussion> ReleaseDiscussions
        {
            get
            {
                if (_releaseDiscussions == null)
                {
                    _releaseDiscussions = new TrackableCollection<ReleaseDiscussion>();
                    _releaseDiscussions.CollectionChanged += FixupReleaseDiscussions;
                }
                return _releaseDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_releaseDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseDiscussions != null)
                    {
                        _releaseDiscussions.CollectionChanged -= FixupReleaseDiscussions;
                    }
                    _releaseDiscussions = value;
                    if (_releaseDiscussions != null)
                    {
                        _releaseDiscussions.CollectionChanged += FixupReleaseDiscussions;
                    }
                    OnNavigationPropertyChanged("ReleaseDiscussions");
                }
            }
        }
        private TrackableCollection<ReleaseDiscussion> _releaseDiscussions;
    
        [DataMember]
        public TrackableCollection<RequirementDiscussion> RequirementDiscussions
        {
            get
            {
                if (_requirementDiscussions == null)
                {
                    _requirementDiscussions = new TrackableCollection<RequirementDiscussion>();
                    _requirementDiscussions.CollectionChanged += FixupRequirementDiscussions;
                }
                return _requirementDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_requirementDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementDiscussions != null)
                    {
                        _requirementDiscussions.CollectionChanged -= FixupRequirementDiscussions;
                    }
                    _requirementDiscussions = value;
                    if (_requirementDiscussions != null)
                    {
                        _requirementDiscussions.CollectionChanged += FixupRequirementDiscussions;
                    }
                    OnNavigationPropertyChanged("RequirementDiscussions");
                }
            }
        }
        private TrackableCollection<RequirementDiscussion> _requirementDiscussions;
    
        [DataMember]
        public TrackableCollection<TaskDiscussion> TaskDiscussions
        {
            get
            {
                if (_taskDiscussions == null)
                {
                    _taskDiscussions = new TrackableCollection<TaskDiscussion>();
                    _taskDiscussions.CollectionChanged += FixupTaskDiscussions;
                }
                return _taskDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_taskDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskDiscussions != null)
                    {
                        _taskDiscussions.CollectionChanged -= FixupTaskDiscussions;
                    }
                    _taskDiscussions = value;
                    if (_taskDiscussions != null)
                    {
                        _taskDiscussions.CollectionChanged += FixupTaskDiscussions;
                    }
                    OnNavigationPropertyChanged("TaskDiscussions");
                }
            }
        }
        private TrackableCollection<TaskDiscussion> _taskDiscussions;
    
        [DataMember]
        public TrackableCollection<TestCaseDiscussion> TestCaseDiscussions
        {
            get
            {
                if (_testCaseDiscussions == null)
                {
                    _testCaseDiscussions = new TrackableCollection<TestCaseDiscussion>();
                    _testCaseDiscussions.CollectionChanged += FixupTestCaseDiscussions;
                }
                return _testCaseDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_testCaseDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseDiscussions != null)
                    {
                        _testCaseDiscussions.CollectionChanged -= FixupTestCaseDiscussions;
                    }
                    _testCaseDiscussions = value;
                    if (_testCaseDiscussions != null)
                    {
                        _testCaseDiscussions.CollectionChanged += FixupTestCaseDiscussions;
                    }
                    OnNavigationPropertyChanged("TestCaseDiscussions");
                }
            }
        }
        private TrackableCollection<TestCaseDiscussion> _testCaseDiscussions;
    
        [DataMember]
        public TrackableCollection<TestSetDiscussion> TestSetDiscussions
        {
            get
            {
                if (_testSetDiscussions == null)
                {
                    _testSetDiscussions = new TrackableCollection<TestSetDiscussion>();
                    _testSetDiscussions.CollectionChanged += FixupTestSetDiscussions;
                }
                return _testSetDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_testSetDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetDiscussions != null)
                    {
                        _testSetDiscussions.CollectionChanged -= FixupTestSetDiscussions;
                    }
                    _testSetDiscussions = value;
                    if (_testSetDiscussions != null)
                    {
                        _testSetDiscussions.CollectionChanged += FixupTestSetDiscussions;
                    }
                    OnNavigationPropertyChanged("TestSetDiscussions");
                }
            }
        }
        private TrackableCollection<TestSetDiscussion> _testSetDiscussions;
    
        [DataMember]
        public TrackableCollection<HistoryChangeSet> HistoryChangeSets
        {
            get
            {
                if (_historyChangeSets == null)
                {
                    _historyChangeSets = new TrackableCollection<HistoryChangeSet>();
                    _historyChangeSets.CollectionChanged += FixupHistoryChangeSets;
                }
                return _historyChangeSets;
            }
            set
            {
                if (!ReferenceEquals(_historyChangeSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyChangeSets != null)
                    {
                        _historyChangeSets.CollectionChanged -= FixupHistoryChangeSets;
                    }
                    _historyChangeSets = value;
                    if (_historyChangeSets != null)
                    {
                        _historyChangeSets.CollectionChanged += FixupHistoryChangeSets;
                    }
                    OnNavigationPropertyChanged("HistoryChangeSets");
                }
            }
        }
        private TrackableCollection<HistoryChangeSet> _historyChangeSets;
    
        [DataMember]
        public TrackableCollection<Release> CreatedReleases
        {
            get
            {
                if (_createdReleases == null)
                {
                    _createdReleases = new TrackableCollection<Release>();
                    _createdReleases.CollectionChanged += FixupCreatedReleases;
                }
                return _createdReleases;
            }
            set
            {
                if (!ReferenceEquals(_createdReleases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_createdReleases != null)
                    {
                        _createdReleases.CollectionChanged -= FixupCreatedReleases;
                    }
                    _createdReleases = value;
                    if (_createdReleases != null)
                    {
                        _createdReleases.CollectionChanged += FixupCreatedReleases;
                    }
                    OnNavigationPropertyChanged("CreatedReleases");
                }
            }
        }
        private TrackableCollection<Release> _createdReleases;
    
        [DataMember]
        public TrackableCollection<Release> OwnedReleases
        {
            get
            {
                if (_ownedReleases == null)
                {
                    _ownedReleases = new TrackableCollection<Release>();
                    _ownedReleases.CollectionChanged += FixupOwnedReleases;
                }
                return _ownedReleases;
            }
            set
            {
                if (!ReferenceEquals(_ownedReleases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedReleases != null)
                    {
                        _ownedReleases.CollectionChanged -= FixupOwnedReleases;
                    }
                    _ownedReleases = value;
                    if (_ownedReleases != null)
                    {
                        _ownedReleases.CollectionChanged += FixupOwnedReleases;
                    }
                    OnNavigationPropertyChanged("OwnedReleases");
                }
            }
        }
        private TrackableCollection<Release> _ownedReleases;
    
        [DataMember]
        public TrackableCollection<ReleaseUser> ReleaseViewState
        {
            get
            {
                if (_releaseViewState == null)
                {
                    _releaseViewState = new TrackableCollection<ReleaseUser>();
                    _releaseViewState.CollectionChanged += FixupReleaseViewState;
                }
                return _releaseViewState;
            }
            set
            {
                if (!ReferenceEquals(_releaseViewState, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseViewState != null)
                    {
                        _releaseViewState.CollectionChanged -= FixupReleaseViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseUser item in _releaseViewState)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseViewState = value;
                    if (_releaseViewState != null)
                    {
                        _releaseViewState.CollectionChanged += FixupReleaseViewState;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseUser item in _releaseViewState)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseViewState");
                }
            }
        }
        private TrackableCollection<ReleaseUser> _releaseViewState;
    
        [DataMember]
        public TrackableCollection<TestCase> AuthoredTestCases
        {
            get
            {
                if (_authoredTestCases == null)
                {
                    _authoredTestCases = new TrackableCollection<TestCase>();
                    _authoredTestCases.CollectionChanged += FixupAuthoredTestCases;
                }
                return _authoredTestCases;
            }
            set
            {
                if (!ReferenceEquals(_authoredTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_authoredTestCases != null)
                    {
                        _authoredTestCases.CollectionChanged -= FixupAuthoredTestCases;
                    }
                    _authoredTestCases = value;
                    if (_authoredTestCases != null)
                    {
                        _authoredTestCases.CollectionChanged += FixupAuthoredTestCases;
                    }
                    OnNavigationPropertyChanged("AuthoredTestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _authoredTestCases;
    
        [DataMember]
        public TrackableCollection<TestCase> OwnedTestCases
        {
            get
            {
                if (_ownedTestCases == null)
                {
                    _ownedTestCases = new TrackableCollection<TestCase>();
                    _ownedTestCases.CollectionChanged += FixupOwnedTestCases;
                }
                return _ownedTestCases;
            }
            set
            {
                if (!ReferenceEquals(_ownedTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedTestCases != null)
                    {
                        _ownedTestCases.CollectionChanged -= FixupOwnedTestCases;
                    }
                    _ownedTestCases = value;
                    if (_ownedTestCases != null)
                    {
                        _ownedTestCases.CollectionChanged += FixupOwnedTestCases;
                    }
                    OnNavigationPropertyChanged("OwnedTestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _ownedTestCases;
    
        [DataMember]
        public TrackableCollection<TestRun> ExecutedTestRuns
        {
            get
            {
                if (_executedTestRuns == null)
                {
                    _executedTestRuns = new TrackableCollection<TestRun>();
                    _executedTestRuns.CollectionChanged += FixupExecutedTestRuns;
                }
                return _executedTestRuns;
            }
            set
            {
                if (!ReferenceEquals(_executedTestRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_executedTestRuns != null)
                    {
                        _executedTestRuns.CollectionChanged -= FixupExecutedTestRuns;
                    }
                    _executedTestRuns = value;
                    if (_executedTestRuns != null)
                    {
                        _executedTestRuns.CollectionChanged += FixupExecutedTestRuns;
                    }
                    OnNavigationPropertyChanged("ExecutedTestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _executedTestRuns;
    
        [DataMember]
        public TrackableCollection<TestRunsPending> OwnedPendingTestRuns
        {
            get
            {
                if (_ownedPendingTestRuns == null)
                {
                    _ownedPendingTestRuns = new TrackableCollection<TestRunsPending>();
                    _ownedPendingTestRuns.CollectionChanged += FixupOwnedPendingTestRuns;
                }
                return _ownedPendingTestRuns;
            }
            set
            {
                if (!ReferenceEquals(_ownedPendingTestRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedPendingTestRuns != null)
                    {
                        _ownedPendingTestRuns.CollectionChanged -= FixupOwnedPendingTestRuns;
                    }
                    _ownedPendingTestRuns = value;
                    if (_ownedPendingTestRuns != null)
                    {
                        _ownedPendingTestRuns.CollectionChanged += FixupOwnedPendingTestRuns;
                    }
                    OnNavigationPropertyChanged("OwnedPendingTestRuns");
                }
            }
        }
        private TrackableCollection<TestRunsPending> _ownedPendingTestRuns;
    
        [DataMember]
        public TrackableCollection<TestSet> CreatedTestSets
        {
            get
            {
                if (_createdTestSets == null)
                {
                    _createdTestSets = new TrackableCollection<TestSet>();
                    _createdTestSets.CollectionChanged += FixupCreatedTestSets;
                }
                return _createdTestSets;
            }
            set
            {
                if (!ReferenceEquals(_createdTestSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_createdTestSets != null)
                    {
                        _createdTestSets.CollectionChanged -= FixupCreatedTestSets;
                    }
                    _createdTestSets = value;
                    if (_createdTestSets != null)
                    {
                        _createdTestSets.CollectionChanged += FixupCreatedTestSets;
                    }
                    OnNavigationPropertyChanged("CreatedTestSets");
                }
            }
        }
        private TrackableCollection<TestSet> _createdTestSets;
    
        [DataMember]
        public TrackableCollection<TestSet> OwnedTestSets
        {
            get
            {
                if (_ownedTestSets == null)
                {
                    _ownedTestSets = new TrackableCollection<TestSet>();
                    _ownedTestSets.CollectionChanged += FixupOwnedTestSets;
                }
                return _ownedTestSets;
            }
            set
            {
                if (!ReferenceEquals(_ownedTestSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedTestSets != null)
                    {
                        _ownedTestSets.CollectionChanged -= FixupOwnedTestSets;
                    }
                    _ownedTestSets = value;
                    if (_ownedTestSets != null)
                    {
                        _ownedTestSets.CollectionChanged += FixupOwnedTestSets;
                    }
                    OnNavigationPropertyChanged("OwnedTestSets");
                }
            }
        }
        private TrackableCollection<TestSet> _ownedTestSets;
    
        [DataMember]
        public TrackableCollection<TestSetTestCase> OwnedTestSetTestCases
        {
            get
            {
                if (_ownedTestSetTestCases == null)
                {
                    _ownedTestSetTestCases = new TrackableCollection<TestSetTestCase>();
                    _ownedTestSetTestCases.CollectionChanged += FixupOwnedTestSetTestCases;
                }
                return _ownedTestSetTestCases;
            }
            set
            {
                if (!ReferenceEquals(_ownedTestSetTestCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedTestSetTestCases != null)
                    {
                        _ownedTestSetTestCases.CollectionChanged -= FixupOwnedTestSetTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetTestCase item in _ownedTestSetTestCases)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _ownedTestSetTestCases = value;
                    if (_ownedTestSetTestCases != null)
                    {
                        _ownedTestSetTestCases.CollectionChanged += FixupOwnedTestSetTestCases;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetTestCase item in _ownedTestSetTestCases)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("OwnedTestSetTestCases");
                }
            }
        }
        private TrackableCollection<TestSetTestCase> _ownedTestSetTestCases;
    
        [DataMember]
        public TrackableCollection<DataSyncUserMapping> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncUserMapping>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncUserMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncUserMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncUserMapping> _dataSyncMappings;
    
        [DataMember]
        public TrackableCollection<NotificationUserSubscription> ArtifactSubscriptions
        {
            get
            {
                if (_artifactSubscriptions == null)
                {
                    _artifactSubscriptions = new TrackableCollection<NotificationUserSubscription>();
                    _artifactSubscriptions.CollectionChanged += FixupArtifactSubscriptions;
                }
                return _artifactSubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_artifactSubscriptions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactSubscriptions != null)
                    {
                        _artifactSubscriptions.CollectionChanged -= FixupArtifactSubscriptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (NotificationUserSubscription item in _artifactSubscriptions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactSubscriptions = value;
                    if (_artifactSubscriptions != null)
                    {
                        _artifactSubscriptions.CollectionChanged += FixupArtifactSubscriptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (NotificationUserSubscription item in _artifactSubscriptions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactSubscriptions");
                }
            }
        }
        private TrackableCollection<NotificationUserSubscription> _artifactSubscriptions;
    
        [DataMember]
        public TrackableCollection<ArtifactMessage> ArtifactMessages
        {
            get
            {
                if (_artifactMessages == null)
                {
                    _artifactMessages = new TrackableCollection<ArtifactMessage>();
                    _artifactMessages.CollectionChanged += FixupArtifactMessages;
                }
                return _artifactMessages;
            }
            set
            {
                if (!ReferenceEquals(_artifactMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactMessages != null)
                    {
                        _artifactMessages.CollectionChanged -= FixupArtifactMessages;
                    }
                    _artifactMessages = value;
                    if (_artifactMessages != null)
                    {
                        _artifactMessages.CollectionChanged += FixupArtifactMessages;
                    }
                    OnNavigationPropertyChanged("ArtifactMessages");
                }
            }
        }
        private TrackableCollection<ArtifactMessage> _artifactMessages;
    
        [DataMember]
        public TrackableCollection<DocumentDiscussion> DocumentDiscussions
        {
            get
            {
                if (_documentDiscussions == null)
                {
                    _documentDiscussions = new TrackableCollection<DocumentDiscussion>();
                    _documentDiscussions.CollectionChanged += FixupDocumentDiscussions;
                }
                return _documentDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_documentDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentDiscussions != null)
                    {
                        _documentDiscussions.CollectionChanged -= FixupDocumentDiscussions;
                    }
                    _documentDiscussions = value;
                    if (_documentDiscussions != null)
                    {
                        _documentDiscussions.CollectionChanged += FixupDocumentDiscussions;
                    }
                    OnNavigationPropertyChanged("DocumentDiscussions");
                }
            }
        }
        private TrackableCollection<DocumentDiscussion> _documentDiscussions;
    
        [DataMember]
        public GlobalOAuthProvider OAuthProviders
        {
            get { return _oAuthProviders; }
            set
            {
                if (!ReferenceEquals(_oAuthProviders, value))
                {
                    var previousValue = _oAuthProviders;
                    _oAuthProviders = value;
                    FixupOAuthProviders(previousValue);
                    OnNavigationPropertyChanged("OAuthProviders");
                }
            }
        }
        private GlobalOAuthProvider _oAuthProviders;
    
        [DataMember]
        public TrackableCollection<AllocationActual> ActualAllocations
        {
            get
            {
                if (_actualAllocations == null)
                {
                    _actualAllocations = new TrackableCollection<AllocationActual>();
                    _actualAllocations.CollectionChanged += FixupActualAllocations;
                }
                return _actualAllocations;
            }
            set
            {
                if (!ReferenceEquals(_actualAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_actualAllocations != null)
                    {
                        _actualAllocations.CollectionChanged -= FixupActualAllocations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AllocationActual item in _actualAllocations)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _actualAllocations = value;
                    if (_actualAllocations != null)
                    {
                        _actualAllocations.CollectionChanged += FixupActualAllocations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AllocationActual item in _actualAllocations)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ActualAllocations");
                }
            }
        }
        private TrackableCollection<AllocationActual> _actualAllocations;
    
        [DataMember]
        public TrackableCollection<ProjectBaseline> CreatedBaselines
        {
            get
            {
                if (_createdBaselines == null)
                {
                    _createdBaselines = new TrackableCollection<ProjectBaseline>();
                    _createdBaselines.CollectionChanged += FixupCreatedBaselines;
                }
                return _createdBaselines;
            }
            set
            {
                if (!ReferenceEquals(_createdBaselines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_createdBaselines != null)
                    {
                        _createdBaselines.CollectionChanged -= FixupCreatedBaselines;
                    }
                    _createdBaselines = value;
                    if (_createdBaselines != null)
                    {
                        _createdBaselines.CollectionChanged += FixupCreatedBaselines;
                    }
                    OnNavigationPropertyChanged("CreatedBaselines");
                }
            }
        }
        private TrackableCollection<ProjectBaseline> _createdBaselines;
    
        [DataMember]
        public TrackableCollection<Risk> CreatedRisks
        {
            get
            {
                if (_createdRisks == null)
                {
                    _createdRisks = new TrackableCollection<Risk>();
                    _createdRisks.CollectionChanged += FixupCreatedRisks;
                }
                return _createdRisks;
            }
            set
            {
                if (!ReferenceEquals(_createdRisks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_createdRisks != null)
                    {
                        _createdRisks.CollectionChanged -= FixupCreatedRisks;
                    }
                    _createdRisks = value;
                    if (_createdRisks != null)
                    {
                        _createdRisks.CollectionChanged += FixupCreatedRisks;
                    }
                    OnNavigationPropertyChanged("CreatedRisks");
                }
            }
        }
        private TrackableCollection<Risk> _createdRisks;
    
        [DataMember]
        public TrackableCollection<Risk> OwnedRisks
        {
            get
            {
                if (_ownedRisks == null)
                {
                    _ownedRisks = new TrackableCollection<Risk>();
                    _ownedRisks.CollectionChanged += FixupOwnedRisks;
                }
                return _ownedRisks;
            }
            set
            {
                if (!ReferenceEquals(_ownedRisks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedRisks != null)
                    {
                        _ownedRisks.CollectionChanged -= FixupOwnedRisks;
                    }
                    _ownedRisks = value;
                    if (_ownedRisks != null)
                    {
                        _ownedRisks.CollectionChanged += FixupOwnedRisks;
                    }
                    OnNavigationPropertyChanged("OwnedRisks");
                }
            }
        }
        private TrackableCollection<Risk> _ownedRisks;
    
        [DataMember]
        public TrackableCollection<RiskDiscussion> RiskDiscussions
        {
            get
            {
                if (_riskDiscussions == null)
                {
                    _riskDiscussions = new TrackableCollection<RiskDiscussion>();
                    _riskDiscussions.CollectionChanged += FixupRiskDiscussions;
                }
                return _riskDiscussions;
            }
            set
            {
                if (!ReferenceEquals(_riskDiscussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskDiscussions != null)
                    {
                        _riskDiscussions.CollectionChanged -= FixupRiskDiscussions;
                    }
                    _riskDiscussions = value;
                    if (_riskDiscussions != null)
                    {
                        _riskDiscussions.CollectionChanged += FixupRiskDiscussions;
                    }
                    OnNavigationPropertyChanged("RiskDiscussions");
                }
            }
        }
        private TrackableCollection<RiskDiscussion> _riskDiscussions;
    
        [DataMember]
        public TrackableCollection<TimecardEntry> TimecardEntries
        {
            get
            {
                if (_timecardEntries == null)
                {
                    _timecardEntries = new TrackableCollection<TimecardEntry>();
                    _timecardEntries.CollectionChanged += FixupTimecardEntries;
                }
                return _timecardEntries;
            }
            set
            {
                if (!ReferenceEquals(_timecardEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged -= FixupTimecardEntries;
                    }
                    _timecardEntries = value;
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged += FixupTimecardEntries;
                    }
                    OnNavigationPropertyChanged("TimecardEntries");
                }
            }
        }
        private TrackableCollection<TimecardEntry> _timecardEntries;
    
        [DataMember]
        public TrackableCollection<UserIdea> Ideas
        {
            get
            {
                if (_ideas == null)
                {
                    _ideas = new TrackableCollection<UserIdea>();
                    _ideas.CollectionChanged += FixupIdeas;
                }
                return _ideas;
            }
            set
            {
                if (!ReferenceEquals(_ideas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ideas != null)
                    {
                        _ideas.CollectionChanged -= FixupIdeas;
                    }
                    _ideas = value;
                    if (_ideas != null)
                    {
                        _ideas.CollectionChanged += FixupIdeas;
                    }
                    OnNavigationPropertyChanged("Ideas");
                }
            }
        }
        private TrackableCollection<UserIdea> _ideas;
    
        [DataMember]
        public TrackableCollection<TrackMessage> TrackMessages
        {
            get
            {
                if (_trackMessages == null)
                {
                    _trackMessages = new TrackableCollection<TrackMessage>();
                    _trackMessages.CollectionChanged += FixupTrackMessages;
                }
                return _trackMessages;
            }
            set
            {
                if (!ReferenceEquals(_trackMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trackMessages != null)
                    {
                        _trackMessages.CollectionChanged -= FixupTrackMessages;
                    }
                    _trackMessages = value;
                    if (_trackMessages != null)
                    {
                        _trackMessages.CollectionChanged += FixupTrackMessages;
                    }
                    OnNavigationPropertyChanged("TrackMessages");
                }
            }
        }
        private TrackableCollection<TrackMessage> _trackMessages;
    
        [DataMember]
        public TrackableCollection<UserPageViewed> PagesViewed
        {
            get
            {
                if (_pagesViewed == null)
                {
                    _pagesViewed = new TrackableCollection<UserPageViewed>();
                    _pagesViewed.CollectionChanged += FixupPagesViewed;
                }
                return _pagesViewed;
            }
            set
            {
                if (!ReferenceEquals(_pagesViewed, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pagesViewed != null)
                    {
                        _pagesViewed.CollectionChanged -= FixupPagesViewed;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserPageViewed item in _pagesViewed)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pagesViewed = value;
                    if (_pagesViewed != null)
                    {
                        _pagesViewed.CollectionChanged += FixupPagesViewed;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserPageViewed item in _pagesViewed)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PagesViewed");
                }
            }
        }
        private TrackableCollection<UserPageViewed> _pagesViewed;
    
        [DataMember]
        public TrackableCollection<ProjectTemplate> OwnedProjectTemplates
        {
            get
            {
                if (_ownedProjectTemplates == null)
                {
                    _ownedProjectTemplates = new TrackableCollection<ProjectTemplate>();
                    _ownedProjectTemplates.CollectionChanged += FixupOwnedProjectTemplates;
                }
                return _ownedProjectTemplates;
            }
            set
            {
                if (!ReferenceEquals(_ownedProjectTemplates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ownedProjectTemplates != null)
                    {
                        _ownedProjectTemplates.CollectionChanged -= FixupOwnedProjectTemplates;
                    }
                    _ownedProjectTemplates = value;
                    if (_ownedProjectTemplates != null)
                    {
                        _ownedProjectTemplates.CollectionChanged += FixupOwnedProjectTemplates;
                    }
                    OnNavigationPropertyChanged("OwnedProjectTemplates");
                }
            }
        }
        private TrackableCollection<ProjectTemplate> _ownedProjectTemplates;
    
        [DataMember]
        public TrackableCollection<MultiApproverExecuted> MultiApprovedExecutedChanges
        {
            get
            {
                if (_multiApprovedExecutedChanges == null)
                {
                    _multiApprovedExecutedChanges = new TrackableCollection<MultiApproverExecuted>();
                    _multiApprovedExecutedChanges.CollectionChanged += FixupMultiApprovedExecutedChanges;
                }
                return _multiApprovedExecutedChanges;
            }
            set
            {
                if (!ReferenceEquals(_multiApprovedExecutedChanges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_multiApprovedExecutedChanges != null)
                    {
                        _multiApprovedExecutedChanges.CollectionChanged -= FixupMultiApprovedExecutedChanges;
                    }
                    _multiApprovedExecutedChanges = value;
                    if (_multiApprovedExecutedChanges != null)
                    {
                        _multiApprovedExecutedChanges.CollectionChanged += FixupMultiApprovedExecutedChanges;
                    }
                    OnNavigationPropertyChanged("MultiApprovedExecutedChanges");
                }
            }
        }
        private TrackableCollection<MultiApproverExecuted> _multiApprovedExecutedChanges;
    
        [DataMember]
        public TrackableCollection<Timecard> SubmittedTimecards
        {
            get
            {
                if (_submittedTimecards == null)
                {
                    _submittedTimecards = new TrackableCollection<Timecard>();
                    _submittedTimecards.CollectionChanged += FixupSubmittedTimecards;
                }
                return _submittedTimecards;
            }
            set
            {
                if (!ReferenceEquals(_submittedTimecards, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_submittedTimecards != null)
                    {
                        _submittedTimecards.CollectionChanged -= FixupSubmittedTimecards;
                    }
                    _submittedTimecards = value;
                    if (_submittedTimecards != null)
                    {
                        _submittedTimecards.CollectionChanged += FixupSubmittedTimecards;
                    }
                    OnNavigationPropertyChanged("SubmittedTimecards");
                }
            }
        }
        private TrackableCollection<Timecard> _submittedTimecards;
    
        [DataMember]
        public TrackableCollection<Timecard> ApprovedTimecards
        {
            get
            {
                if (_approvedTimecards == null)
                {
                    _approvedTimecards = new TrackableCollection<Timecard>();
                    _approvedTimecards.CollectionChanged += FixupApprovedTimecards;
                }
                return _approvedTimecards;
            }
            set
            {
                if (!ReferenceEquals(_approvedTimecards, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_approvedTimecards != null)
                    {
                        _approvedTimecards.CollectionChanged -= FixupApprovedTimecards;
                    }
                    _approvedTimecards = value;
                    if (_approvedTimecards != null)
                    {
                        _approvedTimecards.CollectionChanged += FixupApprovedTimecards;
                    }
                    OnNavigationPropertyChanged("ApprovedTimecards");
                }
            }
        }
        private TrackableCollection<Timecard> _approvedTimecards;
    
        [DataMember]
        public TrackableCollection<UserRecentArtifact> RecentArtifacts
        {
            get
            {
                if (_recentArtifacts == null)
                {
                    _recentArtifacts = new TrackableCollection<UserRecentArtifact>();
                    _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                }
                return _recentArtifacts;
            }
            set
            {
                if (!ReferenceEquals(_recentArtifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged -= FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recentArtifacts = value;
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecentArtifacts");
                }
            }
        }
        private TrackableCollection<UserRecentArtifact> _recentArtifacts;
    
        [DataMember]
        public TrackableCollection<UserRecentProject> RecentProjects
        {
            get
            {
                if (_recentProjects == null)
                {
                    _recentProjects = new TrackableCollection<UserRecentProject>();
                    _recentProjects.CollectionChanged += FixupRecentProjects;
                }
                return _recentProjects;
            }
            set
            {
                if (!ReferenceEquals(_recentProjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recentProjects != null)
                    {
                        _recentProjects.CollectionChanged -= FixupRecentProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserRecentProject item in _recentProjects)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recentProjects = value;
                    if (_recentProjects != null)
                    {
                        _recentProjects.CollectionChanged += FixupRecentProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserRecentProject item in _recentProjects)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecentProjects");
                }
            }
        }
        private TrackableCollection<UserRecentProject> _recentProjects;
    
        [DataMember]
        public TrackableCollection<GlobalHistoryChangeset> TST_GLOBAL_HISTORY_CHANGESET
        {
            get
            {
                if (_tST_GLOBAL_HISTORY_CHANGESET == null)
                {
                    _tST_GLOBAL_HISTORY_CHANGESET = new TrackableCollection<GlobalHistoryChangeset>();
                    _tST_GLOBAL_HISTORY_CHANGESET.CollectionChanged += FixupTST_GLOBAL_HISTORY_CHANGESET;
                }
                return _tST_GLOBAL_HISTORY_CHANGESET;
            }
            set
            {
                if (!ReferenceEquals(_tST_GLOBAL_HISTORY_CHANGESET, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_GLOBAL_HISTORY_CHANGESET != null)
                    {
                        _tST_GLOBAL_HISTORY_CHANGESET.CollectionChanged -= FixupTST_GLOBAL_HISTORY_CHANGESET;
                    }
                    _tST_GLOBAL_HISTORY_CHANGESET = value;
                    if (_tST_GLOBAL_HISTORY_CHANGESET != null)
                    {
                        _tST_GLOBAL_HISTORY_CHANGESET.CollectionChanged += FixupTST_GLOBAL_HISTORY_CHANGESET;
                    }
                    OnNavigationPropertyChanged("TST_GLOBAL_HISTORY_CHANGESET");
                }
            }
        }
        private TrackableCollection<GlobalHistoryChangeset> _tST_GLOBAL_HISTORY_CHANGESET;
    
        [DataMember]
        public TrackableCollection<ProjectSignature> TST_PROJECT_USER_SIGNATURE
        {
            get
            {
                if (_tST_PROJECT_USER_SIGNATURE == null)
                {
                    _tST_PROJECT_USER_SIGNATURE = new TrackableCollection<ProjectSignature>();
                    _tST_PROJECT_USER_SIGNATURE.CollectionChanged += FixupTST_PROJECT_USER_SIGNATURE;
                }
                return _tST_PROJECT_USER_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_PROJECT_USER_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_PROJECT_USER_SIGNATURE != null)
                    {
                        _tST_PROJECT_USER_SIGNATURE.CollectionChanged -= FixupTST_PROJECT_USER_SIGNATURE;
                    }
                    _tST_PROJECT_USER_SIGNATURE = value;
                    if (_tST_PROJECT_USER_SIGNATURE != null)
                    {
                        _tST_PROJECT_USER_SIGNATURE.CollectionChanged += FixupTST_PROJECT_USER_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_PROJECT_USER_SIGNATURE");
                }
            }
        }
        private TrackableCollection<ProjectSignature> _tST_PROJECT_USER_SIGNATURE;
    
        [DataMember]
        public TrackableCollection<TestCaseSignature> TST_TEST_CASE_SIGNATURE
        {
            get
            {
                if (_tST_TEST_CASE_SIGNATURE == null)
                {
                    _tST_TEST_CASE_SIGNATURE = new TrackableCollection<TestCaseSignature>();
                    _tST_TEST_CASE_SIGNATURE.CollectionChanged += FixupTST_TEST_CASE_SIGNATURE;
                }
                return _tST_TEST_CASE_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEST_CASE_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEST_CASE_SIGNATURE != null)
                    {
                        _tST_TEST_CASE_SIGNATURE.CollectionChanged -= FixupTST_TEST_CASE_SIGNATURE;
                    }
                    _tST_TEST_CASE_SIGNATURE = value;
                    if (_tST_TEST_CASE_SIGNATURE != null)
                    {
                        _tST_TEST_CASE_SIGNATURE.CollectionChanged += FixupTST_TEST_CASE_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_TEST_CASE_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TestCaseSignature> _tST_TEST_CASE_SIGNATURE;
    
        [DataMember]
        public TrackableCollection<TestCaseApprovalUser> TST_TEST_CASE_APPROVAL_USERS
        {
            get
            {
                if (_tST_TEST_CASE_APPROVAL_USERS == null)
                {
                    _tST_TEST_CASE_APPROVAL_USERS = new TrackableCollection<TestCaseApprovalUser>();
                    _tST_TEST_CASE_APPROVAL_USERS.CollectionChanged += FixupTST_TEST_CASE_APPROVAL_USERS;
                }
                return _tST_TEST_CASE_APPROVAL_USERS;
            }
            set
            {
                if (!ReferenceEquals(_tST_TEST_CASE_APPROVAL_USERS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_TEST_CASE_APPROVAL_USERS != null)
                    {
                        _tST_TEST_CASE_APPROVAL_USERS.CollectionChanged -= FixupTST_TEST_CASE_APPROVAL_USERS;
                    }
                    _tST_TEST_CASE_APPROVAL_USERS = value;
                    if (_tST_TEST_CASE_APPROVAL_USERS != null)
                    {
                        _tST_TEST_CASE_APPROVAL_USERS.CollectionChanged += FixupTST_TEST_CASE_APPROVAL_USERS;
                    }
                    OnNavigationPropertyChanged("TST_TEST_CASE_APPROVAL_USERS");
                }
            }
        }
        private TrackableCollection<TestCaseApprovalUser> _tST_TEST_CASE_APPROVAL_USERS;
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_CHANGESET> TST_ADMIN_HISTORY_CHANGESET
        {
            get
            {
                if (_tST_ADMIN_HISTORY_CHANGESET == null)
                {
                    _tST_ADMIN_HISTORY_CHANGESET = new TrackableCollection<TST_ADMIN_HISTORY_CHANGESET>();
                    _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged += FixupTST_ADMIN_HISTORY_CHANGESET;
                }
                return _tST_ADMIN_HISTORY_CHANGESET;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_CHANGESET, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_CHANGESET != null)
                    {
                        _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged -= FixupTST_ADMIN_HISTORY_CHANGESET;
                    }
                    _tST_ADMIN_HISTORY_CHANGESET = value;
                    if (_tST_ADMIN_HISTORY_CHANGESET != null)
                    {
                        _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged += FixupTST_ADMIN_HISTORY_CHANGESET;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_CHANGESET");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_CHANGESET> _tST_ADMIN_HISTORY_CHANGESET;
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_DETAILS> TST_ADMIN_HISTORY_DETAILS
        {
            get
            {
                if (_tST_ADMIN_HISTORY_DETAILS == null)
                {
                    _tST_ADMIN_HISTORY_DETAILS = new TrackableCollection<TST_ADMIN_HISTORY_DETAILS>();
                    _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                }
                return _tST_ADMIN_HISTORY_DETAILS;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_DETAILS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged -= FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    _tST_ADMIN_HISTORY_DETAILS = value;
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_DETAILS");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_DETAILS> _tST_ADMIN_HISTORY_DETAILS;
    
        [DataMember]
        public TrackableCollection<TST_USER_HISTORY_CHANGESET> TST_USER_HISTORY_CHANGESET
        {
            get
            {
                if (_tST_USER_HISTORY_CHANGESET == null)
                {
                    _tST_USER_HISTORY_CHANGESET = new TrackableCollection<TST_USER_HISTORY_CHANGESET>();
                    _tST_USER_HISTORY_CHANGESET.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET;
                }
                return _tST_USER_HISTORY_CHANGESET;
            }
            set
            {
                if (!ReferenceEquals(_tST_USER_HISTORY_CHANGESET, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_USER_HISTORY_CHANGESET != null)
                    {
                        _tST_USER_HISTORY_CHANGESET.CollectionChanged -= FixupTST_USER_HISTORY_CHANGESET;
                    }
                    _tST_USER_HISTORY_CHANGESET = value;
                    if (_tST_USER_HISTORY_CHANGESET != null)
                    {
                        _tST_USER_HISTORY_CHANGESET.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET;
                    }
                    OnNavigationPropertyChanged("TST_USER_HISTORY_CHANGESET");
                }
            }
        }
        private TrackableCollection<TST_USER_HISTORY_CHANGESET> _tST_USER_HISTORY_CHANGESET;
    
        [DataMember]
        public TrackableCollection<TST_USER_HISTORY_CHANGESET> TST_USER_HISTORY_CHANGESET1
        {
            get
            {
                if (_tST_USER_HISTORY_CHANGESET1 == null)
                {
                    _tST_USER_HISTORY_CHANGESET1 = new TrackableCollection<TST_USER_HISTORY_CHANGESET>();
                    _tST_USER_HISTORY_CHANGESET1.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET1;
                }
                return _tST_USER_HISTORY_CHANGESET1;
            }
            set
            {
                if (!ReferenceEquals(_tST_USER_HISTORY_CHANGESET1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_USER_HISTORY_CHANGESET1 != null)
                    {
                        _tST_USER_HISTORY_CHANGESET1.CollectionChanged -= FixupTST_USER_HISTORY_CHANGESET1;
                    }
                    _tST_USER_HISTORY_CHANGESET1 = value;
                    if (_tST_USER_HISTORY_CHANGESET1 != null)
                    {
                        _tST_USER_HISTORY_CHANGESET1.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET1;
                    }
                    OnNavigationPropertyChanged("TST_USER_HISTORY_CHANGESET1");
                }
            }
        }
        private TrackableCollection<TST_USER_HISTORY_CHANGESET> _tST_USER_HISTORY_CHANGESET1;
    
        [DataMember]
        public TrackableCollection<TST_USER_ACTIVITY_LOG> TST_USER_ACTIVITY_LOG
        {
            get
            {
                if (_tST_USER_ACTIVITY_LOG == null)
                {
                    _tST_USER_ACTIVITY_LOG = new TrackableCollection<TST_USER_ACTIVITY_LOG>();
                    _tST_USER_ACTIVITY_LOG.CollectionChanged += FixupTST_USER_ACTIVITY_LOG;
                }
                return _tST_USER_ACTIVITY_LOG;
            }
            set
            {
                if (!ReferenceEquals(_tST_USER_ACTIVITY_LOG, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_USER_ACTIVITY_LOG != null)
                    {
                        _tST_USER_ACTIVITY_LOG.CollectionChanged -= FixupTST_USER_ACTIVITY_LOG;
                    }
                    _tST_USER_ACTIVITY_LOG = value;
                    if (_tST_USER_ACTIVITY_LOG != null)
                    {
                        _tST_USER_ACTIVITY_LOG.CollectionChanged += FixupTST_USER_ACTIVITY_LOG;
                    }
                    OnNavigationPropertyChanged("TST_USER_ACTIVITY_LOG");
                }
            }
        }
        private TrackableCollection<TST_USER_ACTIVITY_LOG> _tST_USER_ACTIVITY_LOG;
    
        [DataMember]
        public TrackableCollection<TST_REPORT_DOWNLOADABLE> TST_REPORT_DOWNLOADABLE
        {
            get
            {
                if (_tST_REPORT_DOWNLOADABLE == null)
                {
                    _tST_REPORT_DOWNLOADABLE = new TrackableCollection<TST_REPORT_DOWNLOADABLE>();
                    _tST_REPORT_DOWNLOADABLE.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE;
                }
                return _tST_REPORT_DOWNLOADABLE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REPORT_DOWNLOADABLE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REPORT_DOWNLOADABLE != null)
                    {
                        _tST_REPORT_DOWNLOADABLE.CollectionChanged -= FixupTST_REPORT_DOWNLOADABLE;
                    }
                    _tST_REPORT_DOWNLOADABLE = value;
                    if (_tST_REPORT_DOWNLOADABLE != null)
                    {
                        _tST_REPORT_DOWNLOADABLE.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE;
                    }
                    OnNavigationPropertyChanged("TST_REPORT_DOWNLOADABLE");
                }
            }
        }
        private TrackableCollection<TST_REPORT_DOWNLOADABLE> _tST_REPORT_DOWNLOADABLE;
    
        [DataMember]
        public TrackableCollection<TST_REPORT_DOWNLOADABLE> TST_REPORT_DOWNLOADABLE1
        {
            get
            {
                if (_tST_REPORT_DOWNLOADABLE1 == null)
                {
                    _tST_REPORT_DOWNLOADABLE1 = new TrackableCollection<TST_REPORT_DOWNLOADABLE>();
                    _tST_REPORT_DOWNLOADABLE1.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE1;
                }
                return _tST_REPORT_DOWNLOADABLE1;
            }
            set
            {
                if (!ReferenceEquals(_tST_REPORT_DOWNLOADABLE1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REPORT_DOWNLOADABLE1 != null)
                    {
                        _tST_REPORT_DOWNLOADABLE1.CollectionChanged -= FixupTST_REPORT_DOWNLOADABLE1;
                    }
                    _tST_REPORT_DOWNLOADABLE1 = value;
                    if (_tST_REPORT_DOWNLOADABLE1 != null)
                    {
                        _tST_REPORT_DOWNLOADABLE1.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE1;
                    }
                    OnNavigationPropertyChanged("TST_REPORT_DOWNLOADABLE1");
                }
            }
        }
        private TrackableCollection<TST_REPORT_DOWNLOADABLE> _tST_REPORT_DOWNLOADABLE1;
    
        [DataMember]
        public TrackableCollection<TST_REQUIREMENT_APPROVAL_USERS> TST_REQUIREMENT_APPROVAL_USERS
        {
            get
            {
                if (_tST_REQUIREMENT_APPROVAL_USERS == null)
                {
                    _tST_REQUIREMENT_APPROVAL_USERS = new TrackableCollection<TST_REQUIREMENT_APPROVAL_USERS>();
                    _tST_REQUIREMENT_APPROVAL_USERS.CollectionChanged += FixupTST_REQUIREMENT_APPROVAL_USERS;
                }
                return _tST_REQUIREMENT_APPROVAL_USERS;
            }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_APPROVAL_USERS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REQUIREMENT_APPROVAL_USERS != null)
                    {
                        _tST_REQUIREMENT_APPROVAL_USERS.CollectionChanged -= FixupTST_REQUIREMENT_APPROVAL_USERS;
                    }
                    _tST_REQUIREMENT_APPROVAL_USERS = value;
                    if (_tST_REQUIREMENT_APPROVAL_USERS != null)
                    {
                        _tST_REQUIREMENT_APPROVAL_USERS.CollectionChanged += FixupTST_REQUIREMENT_APPROVAL_USERS;
                    }
                    OnNavigationPropertyChanged("TST_REQUIREMENT_APPROVAL_USERS");
                }
            }
        }
        private TrackableCollection<TST_REQUIREMENT_APPROVAL_USERS> _tST_REQUIREMENT_APPROVAL_USERS;
    
        [DataMember]
        public TrackableCollection<TST_REQUIREMENT_SIGNATURE> TST_REQUIREMENT_SIGNATURE
        {
            get
            {
                if (_tST_REQUIREMENT_SIGNATURE == null)
                {
                    _tST_REQUIREMENT_SIGNATURE = new TrackableCollection<TST_REQUIREMENT_SIGNATURE>();
                    _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                }
                return _tST_REQUIREMENT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged -= FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    _tST_REQUIREMENT_SIGNATURE = value;
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_REQUIREMENT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_REQUIREMENT_SIGNATURE> _tST_REQUIREMENT_SIGNATURE;
    
        [DataMember]
        public TrackableCollection<TST_ARTIFACT_SIGNATURE> TST_ARTIFACT_SIGNATURE
        {
            get
            {
                if (_tST_ARTIFACT_SIGNATURE == null)
                {
                    _tST_ARTIFACT_SIGNATURE = new TrackableCollection<TST_ARTIFACT_SIGNATURE>();
                    _tST_ARTIFACT_SIGNATURE.CollectionChanged += FixupTST_ARTIFACT_SIGNATURE;
                }
                return _tST_ARTIFACT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_ARTIFACT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ARTIFACT_SIGNATURE != null)
                    {
                        _tST_ARTIFACT_SIGNATURE.CollectionChanged -= FixupTST_ARTIFACT_SIGNATURE;
                    }
                    _tST_ARTIFACT_SIGNATURE = value;
                    if (_tST_ARTIFACT_SIGNATURE != null)
                    {
                        _tST_ARTIFACT_SIGNATURE.CollectionChanged += FixupTST_ARTIFACT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_ARTIFACT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_ARTIFACT_SIGNATURE> _tST_ARTIFACT_SIGNATURE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DashboardPersonalization.Clear();
            SettingsEntries.Clear();
            Profile = null;
            ProjectMembership.Clear();
            ProjectSettingsEntries.Clear();
            ProjectGroupMembership.Clear();
            ArtifactFields.Clear();
            ArtifactCustomProperties.Clear();
            SavedReports.Clear();
            GeneratedReports.Clear();
            AuthoredRequirements.Clear();
            OwnedRequirements.Clear();
            RequirementViewState.Clear();
            SavedFilters.Clear();
            CreatedTasks.Clear();
            OwnedTasks.Clear();
            ReceivedMessages.Clear();
            SentMessages.Clear();
            UserContactsOf.Clear();
            UserContacts.Clear();
            TaraVault = null;
            OpenedIncidents.Clear();
            OwnedIncidents.Clear();
            IncidentResolutions.Clear();
            ArtifactLinks.Clear();
            AuthoredAttachments.Clear();
            EditedAttachments.Clear();
            AttachmentVersions.Clear();
            ReleaseDiscussions.Clear();
            RequirementDiscussions.Clear();
            TaskDiscussions.Clear();
            TestCaseDiscussions.Clear();
            TestSetDiscussions.Clear();
            HistoryChangeSets.Clear();
            CreatedReleases.Clear();
            OwnedReleases.Clear();
            ReleaseViewState.Clear();
            AuthoredTestCases.Clear();
            OwnedTestCases.Clear();
            ExecutedTestRuns.Clear();
            OwnedPendingTestRuns.Clear();
            CreatedTestSets.Clear();
            OwnedTestSets.Clear();
            OwnedTestSetTestCases.Clear();
            DataSyncMappings.Clear();
            ArtifactSubscriptions.Clear();
            ArtifactMessages.Clear();
            DocumentDiscussions.Clear();
            OAuthProviders = null;
            ActualAllocations.Clear();
            CreatedBaselines.Clear();
            CreatedRisks.Clear();
            OwnedRisks.Clear();
            RiskDiscussions.Clear();
            TimecardEntries.Clear();
            Ideas.Clear();
            TrackMessages.Clear();
            PagesViewed.Clear();
            OwnedProjectTemplates.Clear();
            MultiApprovedExecutedChanges.Clear();
            SubmittedTimecards.Clear();
            ApprovedTimecards.Clear();
            RecentArtifacts.Clear();
            RecentProjects.Clear();
            TST_GLOBAL_HISTORY_CHANGESET.Clear();
            TST_PROJECT_USER_SIGNATURE.Clear();
            TST_TEST_CASE_SIGNATURE.Clear();
            TST_TEST_CASE_APPROVAL_USERS.Clear();
            TST_ADMIN_HISTORY_CHANGESET.Clear();
            TST_ADMIN_HISTORY_DETAILS.Clear();
            TST_USER_HISTORY_CHANGESET.Clear();
            TST_USER_HISTORY_CHANGESET1.Clear();
            TST_USER_ACTIVITY_LOG.Clear();
            TST_REPORT_DOWNLOADABLE.Clear();
            TST_REPORT_DOWNLOADABLE1.Clear();
            TST_REQUIREMENT_APPROVAL_USERS.Clear();
            TST_REQUIREMENT_SIGNATURE.Clear();
            TST_ARTIFACT_SIGNATURE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProfile(UserProfile previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (Profile != null)
            {
                ChangeTracker.ObjectStateChanging += Profile.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (Profile != null)
            {
                Profile.User = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Profile")
                    && (ChangeTracker.OriginalValues["Profile"] == Profile))
                {
                    ChangeTracker.OriginalValues.Remove("Profile");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Profile", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (Profile != null && !Profile.ChangeTracker.ChangeTrackingEnabled)
                {
                    Profile.StartTracking();
                }
            }
        }
    
        private void FixupTaraVault(TaraVaultUser previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (TaraVault != null)
            {
                ChangeTracker.ObjectStateChanging += TaraVault.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (TaraVault != null)
            {
                TaraVault.User = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TaraVault")
                    && (ChangeTracker.OriginalValues["TaraVault"] == TaraVault))
                {
                    ChangeTracker.OriginalValues.Remove("TaraVault");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TaraVault", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (TaraVault != null && !TaraVault.ChangeTracker.ChangeTrackingEnabled)
                {
                    TaraVault.StartTracking();
                }
            }
        }
    
        private void FixupOAuthProviders(GlobalOAuthProvider previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (OAuthProviders != null)
            {
                if (!OAuthProviders.Users.Contains(this))
                {
                    OAuthProviders.Users.Add(this);
                }
    
                OAuthProviderId = OAuthProviders.OAuthProviderId;
            }
            else if (!skipKeys)
            {
                OAuthProviderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OAuthProviders")
                    && (ChangeTracker.OriginalValues["OAuthProviders"] == OAuthProviders))
                {
                    ChangeTracker.OriginalValues.Remove("OAuthProviders");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OAuthProviders", previousValue);
                }
                if (OAuthProviders != null && !OAuthProviders.ChangeTracker.ChangeTrackingEnabled)
                {
                    OAuthProviders.StartTracking();
                }
            }
        }
    
        private void FixupDashboardPersonalization(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DashboardUserPersonalization item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DashboardPersonalization", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DashboardUserPersonalization item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DashboardPersonalization", item);
                    }
                }
            }
        }
    
        private void FixupSettingsEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCollectionEntry item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SettingsEntries", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCollectionEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SettingsEntries", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjectMembership(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectUser item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectMembership", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectMembership", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjectSettingsEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectCollectionEntry item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectSettingsEntries", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectCollectionEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectSettingsEntries", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjectGroupMembership(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroupUser item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectGroupMembership", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroupUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectGroupMembership", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserArtifactField item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserArtifactField item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCustomProperty item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSavedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedReport item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedReports", item);
                    }
                }
            }
        }
    
        private void FixupGeneratedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportGenerated item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GeneratedReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportGenerated item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GeneratedReports", item);
                    }
                }
            }
        }
    
        private void FixupAuthoredRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    item.Author = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AuthoredRequirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AuthoredRequirements", item);
                    }
                }
            }
        }
    
        private void FixupOwnedRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedRequirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedRequirements", item);
                    }
                }
            }
        }
    
        private void FixupRequirementViewState(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementUser item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementViewState", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementViewState", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSavedFilters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedFilter item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedFilters", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedFilter item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedFilters", item);
                    }
                }
            }
        }
    
        private void FixupCreatedTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreatedTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreatedTasks", item);
                    }
                }
            }
        }
    
        private void FixupOwnedTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedTasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedTasks", item);
                    }
                }
            }
        }
    
        private void FixupReceivedMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Recipient = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReceivedMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recipient, this))
                    {
                        item.Recipient = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReceivedMessages", item);
                    }
                }
            }
        }
    
        private void FixupSentMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Sender = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SentMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Sender, this))
                    {
                        item.Sender = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SentMessages", item);
                    }
                }
            }
        }
    
        private void FixupUserContactsOf(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.UserContacts.Contains(this))
                    {
                        item.UserContacts.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserContactsOf", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.UserContacts.Contains(this))
                    {
                        item.UserContacts.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserContactsOf", item);
                    }
                }
            }
        }
    
        private void FixupUserContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.UserContactsOf.Contains(this))
                    {
                        item.UserContactsOf.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserContacts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.UserContactsOf.Contains(this))
                    {
                        item.UserContactsOf.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserContacts", item);
                    }
                }
            }
        }
    
        private void FixupOpenedIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Opener = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OpenedIncidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Opener, this))
                    {
                        item.Opener = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OpenedIncidents", item);
                    }
                }
            }
        }
    
        private void FixupOwnedIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedIncidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedIncidents", item);
                    }
                }
            }
        }
    
        private void FixupIncidentResolutions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentResolution item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentResolutions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentResolution item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentResolutions", item);
                    }
                }
            }
        }
    
        private void FixupArtifactLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactLink item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactLinks", item);
                    }
                }
            }
        }
    
        private void FixupAuthoredAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Attachment item in e.NewItems)
                {
                    item.Author = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AuthoredAttachments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AuthoredAttachments", item);
                    }
                }
            }
        }
    
        private void FixupEditedAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Attachment item in e.NewItems)
                {
                    item.Editor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EditedAttachments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Editor, this))
                    {
                        item.Editor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EditedAttachments", item);
                    }
                }
            }
        }
    
        private void FixupAttachmentVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttachmentVersion item in e.NewItems)
                {
                    item.Author = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttachmentVersions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttachmentVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttachmentVersions", item);
                    }
                }
            }
        }
    
        private void FixupReleaseDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupRequirementDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupTaskDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupTestCaseDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupTestSetDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupHistoryChangeSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryChangeSet item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryChangeSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryChangeSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryChangeSets", item);
                    }
                }
            }
        }
    
        private void FixupCreatedReleases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Release item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreatedReleases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Release item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreatedReleases", item);
                    }
                }
            }
        }
    
        private void FixupOwnedReleases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Release item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedReleases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Release item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedReleases", item);
                    }
                }
            }
        }
    
        private void FixupReleaseViewState(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseUser item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseViewState", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseViewState", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAuthoredTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    item.Author = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AuthoredTestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AuthoredTestCases", item);
                    }
                }
            }
        }
    
        private void FixupOwnedTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedTestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedTestCases", item);
                    }
                }
            }
        }
    
        private void FixupExecutedTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.Tester = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ExecutedTestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tester, this))
                    {
                        item.Tester = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ExecutedTestRuns", item);
                    }
                }
            }
        }
    
        private void FixupOwnedPendingTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunsPending item in e.NewItems)
                {
                    item.Tester = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedPendingTestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunsPending item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tester, this))
                    {
                        item.Tester = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedPendingTestRuns", item);
                    }
                }
            }
        }
    
        private void FixupCreatedTestSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSet item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreatedTestSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreatedTestSets", item);
                    }
                }
            }
        }
    
        private void FixupOwnedTestSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSet item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedTestSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedTestSets", item);
                    }
                }
            }
        }
    
        private void FixupOwnedTestSetTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetTestCase item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedTestSetTestCases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetTestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedTestSetTestCases", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncUserMapping item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncUserMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationUserSubscription item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactSubscriptions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationUserSubscription item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactSubscriptions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactMessage item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactMessages", item);
                    }
                }
            }
        }
    
        private void FixupDocumentDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupActualAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AllocationActual item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ActualAllocations", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AllocationActual item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ActualAllocations", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCreatedBaselines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectBaseline item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreatedBaselines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectBaseline item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreatedBaselines", item);
                    }
                }
            }
        }
    
        private void FixupCreatedRisks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Risk item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreatedRisks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Risk item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreatedRisks", item);
                    }
                }
            }
        }
    
        private void FixupOwnedRisks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Risk item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedRisks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Risk item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedRisks", item);
                    }
                }
            }
        }
    
        private void FixupRiskDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskDiscussion item in e.NewItems)
                {
                    item.Creator = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskDiscussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Creator, this))
                    {
                        item.Creator = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskDiscussions", item);
                    }
                }
            }
        }
    
        private void FixupTimecardEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntry item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimecardEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimecardEntries", item);
                    }
                }
            }
        }
    
        private void FixupIdeas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserIdea item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Ideas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserIdea item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Ideas", item);
                    }
                }
            }
        }
    
        private void FixupTrackMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TrackMessage item in e.NewItems)
                {
                    item.SenderUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TrackMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TrackMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.SenderUser, this))
                    {
                        item.SenderUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TrackMessages", item);
                    }
                }
            }
        }
    
        private void FixupPagesViewed(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserPageViewed item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PagesViewed", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserPageViewed item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PagesViewed", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupOwnedProjectTemplates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectTemplate item in e.NewItems)
                {
                    if (!item.Owners.Contains(this))
                    {
                        item.Owners.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OwnedProjectTemplates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectTemplate item in e.OldItems)
                {
                    if (item.Owners.Contains(this))
                    {
                        item.Owners.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OwnedProjectTemplates", item);
                    }
                }
            }
        }
    
        private void FixupMultiApprovedExecutedChanges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MultiApproverExecuted item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MultiApprovedExecutedChanges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MultiApproverExecuted item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MultiApprovedExecutedChanges", item);
                    }
                }
            }
        }
    
        private void FixupSubmittedTimecards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Timecard item in e.NewItems)
                {
                    item.Submitter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SubmittedTimecards", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Timecard item in e.OldItems)
                {
                    if (ReferenceEquals(item.Submitter, this))
                    {
                        item.Submitter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SubmittedTimecards", item);
                    }
                }
            }
        }
    
        private void FixupApprovedTimecards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Timecard item in e.NewItems)
                {
                    item.Approver = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ApprovedTimecards", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Timecard item in e.OldItems)
                {
                    if (ReferenceEquals(item.Approver, this))
                    {
                        item.Approver = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ApprovedTimecards", item);
                    }
                }
            }
        }
    
        private void FixupRecentArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserRecentArtifact item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecentArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRecentArtifact item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecentArtifacts", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRecentProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserRecentProject item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecentProjects", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRecentProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecentProjects", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_GLOBAL_HISTORY_CHANGESET(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GlobalHistoryChangeset item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_GLOBAL_HISTORY_CHANGESET", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GlobalHistoryChangeset item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_GLOBAL_HISTORY_CHANGESET", item);
                    }
                }
            }
        }
    
        private void FixupTST_PROJECT_USER_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectSignature item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_PROJECT_USER_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectSignature item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_PROJECT_USER_SIGNATURE", item);
                    }
                }
            }
        }
    
        private void FixupTST_TEST_CASE_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseSignature item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEST_CASE_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseSignature item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEST_CASE_SIGNATURE", item);
                    }
                }
            }
        }
    
        private void FixupTST_TEST_CASE_APPROVAL_USERS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseApprovalUser item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_TEST_CASE_APPROVAL_USERS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseApprovalUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_TEST_CASE_APPROVAL_USERS", item);
                    }
                }
            }
        }
    
        private void FixupTST_ADMIN_HISTORY_CHANGESET(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_CHANGESET item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_CHANGESET", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_CHANGESET item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_CHANGESET", item);
                    }
                }
            }
        }
    
        private void FixupTST_ADMIN_HISTORY_DETAILS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
        }
    
        private void FixupTST_USER_HISTORY_CHANGESET(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_USER_HISTORY_CHANGESET", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_USER_HISTORY_CHANGESET", item);
                    }
                }
            }
        }
    
        private void FixupTST_USER_HISTORY_CHANGESET1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.NewItems)
                {
                    item.TST_USER1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_USER_HISTORY_CHANGESET1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER1, this))
                    {
                        item.TST_USER1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_USER_HISTORY_CHANGESET1", item);
                    }
                }
            }
        }
    
        private void FixupTST_USER_ACTIVITY_LOG(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_USER_ACTIVITY_LOG item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_USER_ACTIVITY_LOG", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_USER_ACTIVITY_LOG item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_USER_ACTIVITY_LOG", item);
                    }
                }
            }
        }
    
        private void FixupTST_REPORT_DOWNLOADABLE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REPORT_DOWNLOADABLE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REPORT_DOWNLOADABLE", item);
                    }
                }
            }
        }
    
        private void FixupTST_REPORT_DOWNLOADABLE1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.NewItems)
                {
                    item.TST_USER1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REPORT_DOWNLOADABLE1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER1, this))
                    {
                        item.TST_USER1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REPORT_DOWNLOADABLE1", item);
                    }
                }
            }
        }
    
        private void FixupTST_REQUIREMENT_APPROVAL_USERS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REQUIREMENT_APPROVAL_USERS item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REQUIREMENT_APPROVAL_USERS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REQUIREMENT_APPROVAL_USERS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REQUIREMENT_APPROVAL_USERS", item);
                    }
                }
            }
        }
    
        private void FixupTST_REQUIREMENT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
        }
    
        private void FixupTST_ARTIFACT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ARTIFACT_SIGNATURE item in e.NewItems)
                {
                    item.TST_USER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ARTIFACT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ARTIFACT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_USER, this))
                    {
                        item.TST_USER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ARTIFACT_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
