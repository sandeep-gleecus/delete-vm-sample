//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(Report))]
    [KnownType(typeof(WorkspaceType))]
    [KnownType(typeof(TST_REPORT_DOWNLOADABLE))]
    public partial class ReportCategory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReportCategoryId
        {
            get { return _reportCategoryId; }
            set
            {
                if (_reportCategoryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReportCategoryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reportCategoryId = value;
                    OnPropertyChanged("ReportCategoryId");
                }
            }
        }
        private int _reportCategoryId;
    
        [DataMember]
        public Nullable<int> ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private Nullable<int> _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public int WorkspaceTypeId
        {
            get { return _workspaceTypeId; }
            set
            {
                if (_workspaceTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkspaceTypeId", _workspaceTypeId);
                    if (!IsDeserializing)
                    {
                        if (WorkspaceType != null && WorkspaceType.WorkspaceTypeId != value)
                        {
                            WorkspaceType = null;
                        }
                    }
                    _workspaceTypeId = value;
                    OnPropertyChanged("WorkspaceTypeId");
                }
            }
        }
        private int _workspaceTypeId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<Report> Reports
        {
            get
            {
                if (_reports == null)
                {
                    _reports = new TrackableCollection<Report>();
                    _reports.CollectionChanged += FixupReports;
                }
                return _reports;
            }
            set
            {
                if (!ReferenceEquals(_reports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reports != null)
                    {
                        _reports.CollectionChanged -= FixupReports;
                    }
                    _reports = value;
                    if (_reports != null)
                    {
                        _reports.CollectionChanged += FixupReports;
                    }
                    OnNavigationPropertyChanged("Reports");
                }
            }
        }
        private TrackableCollection<Report> _reports;
    
        [DataMember]
        public WorkspaceType WorkspaceType
        {
            get { return _workspaceType; }
            set
            {
                if (!ReferenceEquals(_workspaceType, value))
                {
                    var previousValue = _workspaceType;
                    _workspaceType = value;
                    FixupWorkspaceType(previousValue);
                    OnNavigationPropertyChanged("WorkspaceType");
                }
            }
        }
        private WorkspaceType _workspaceType;
    
        [DataMember]
        public TrackableCollection<TST_REPORT_DOWNLOADABLE> TST_REPORT_DOWNLOADABLE
        {
            get
            {
                if (_tST_REPORT_DOWNLOADABLE == null)
                {
                    _tST_REPORT_DOWNLOADABLE = new TrackableCollection<TST_REPORT_DOWNLOADABLE>();
                    _tST_REPORT_DOWNLOADABLE.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE;
                }
                return _tST_REPORT_DOWNLOADABLE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REPORT_DOWNLOADABLE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REPORT_DOWNLOADABLE != null)
                    {
                        _tST_REPORT_DOWNLOADABLE.CollectionChanged -= FixupTST_REPORT_DOWNLOADABLE;
                    }
                    _tST_REPORT_DOWNLOADABLE = value;
                    if (_tST_REPORT_DOWNLOADABLE != null)
                    {
                        _tST_REPORT_DOWNLOADABLE.CollectionChanged += FixupTST_REPORT_DOWNLOADABLE;
                    }
                    OnNavigationPropertyChanged("TST_REPORT_DOWNLOADABLE");
                }
            }
        }
        private TrackableCollection<TST_REPORT_DOWNLOADABLE> _tST_REPORT_DOWNLOADABLE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            Reports.Clear();
            WorkspaceType = null;
            TST_REPORT_DOWNLOADABLE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReportCategories.Contains(this))
            {
                previousValue.ReportCategories.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.ReportCategories.Contains(this))
                {
                    ArtifactType.ReportCategories.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            else if (!skipKeys)
            {
                ArtifactTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupWorkspaceType(WorkspaceType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReportCategories.Contains(this))
            {
                previousValue.ReportCategories.Remove(this);
            }
    
            if (WorkspaceType != null)
            {
                if (!WorkspaceType.ReportCategories.Contains(this))
                {
                    WorkspaceType.ReportCategories.Add(this);
                }
    
                WorkspaceTypeId = WorkspaceType.WorkspaceTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WorkspaceType")
                    && (ChangeTracker.OriginalValues["WorkspaceType"] == WorkspaceType))
                {
                    ChangeTracker.OriginalValues.Remove("WorkspaceType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WorkspaceType", previousValue);
                }
                if (WorkspaceType != null && !WorkspaceType.ChangeTracker.ChangeTrackingEnabled)
                {
                    WorkspaceType.StartTracking();
                }
            }
        }
    
        private void FixupReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Report item in e.NewItems)
                {
                    item.Category = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Reports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Report item in e.OldItems)
                {
                    if (ReferenceEquals(item.Category, this))
                    {
                        item.Category = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Reports", item);
                    }
                }
            }
        }
    
        private void FixupTST_REPORT_DOWNLOADABLE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.NewItems)
                {
                    item.TST_REPORT_CATEGORY = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REPORT_DOWNLOADABLE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REPORT_DOWNLOADABLE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_REPORT_CATEGORY, this))
                    {
                        item.TST_REPORT_CATEGORY = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REPORT_DOWNLOADABLE", item);
                    }
                }
            }
        }

        #endregion

    }
}
