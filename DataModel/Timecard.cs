//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TimecardEntry))]
    [KnownType(typeof(TimecardStatus))]
    [KnownType(typeof(User))]
    public partial class Timecard: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TimecardId
        {
            get { return _timecardId; }
            set
            {
                if (_timecardId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TimecardId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _timecardId = value;
                    OnPropertyChanged("TimecardId");
                }
            }
        }
        private int _timecardId;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public Nullable<System.DateTime> ApprovalDate
        {
            get { return _approvalDate; }
            set
            {
                if (_approvalDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalDate", _approvalDate);
                    _approvalDate = value;
                    OnPropertyChanged("ApprovalDate");
                }
            }
        }
        private Nullable<System.DateTime> _approvalDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public string SubmitterComments
        {
            get { return _submitterComments; }
            set
            {
                if (_submitterComments != value)
                {
                    ChangeTracker.RecordOriginalValue("SubmitterComments", _submitterComments);
                    _submitterComments = value;
                    OnPropertyChanged("SubmitterComments");
                }
            }
        }
        private string _submitterComments;
    
        [DataMember]
        public int SubmitterUserId
        {
            get { return _submitterUserId; }
            set
            {
                if (_submitterUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("SubmitterUserId", _submitterUserId);
                    if (!IsDeserializing)
                    {
                        if (Submitter != null && Submitter.UserId != value)
                        {
                            Submitter = null;
                        }
                    }
                    _submitterUserId = value;
                    OnPropertyChanged("SubmitterUserId");
                }
            }
        }
        private int _submitterUserId;
    
        [DataMember]
        public Nullable<int> ApproverUserId
        {
            get { return _approverUserId; }
            set
            {
                if (_approverUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApproverUserId", _approverUserId);
                    if (!IsDeserializing)
                    {
                        if (Approver != null && Approver.UserId != value)
                        {
                            Approver = null;
                        }
                    }
                    _approverUserId = value;
                    OnPropertyChanged("ApproverUserId");
                }
            }
        }
        private Nullable<int> _approverUserId;
    
        [DataMember]
        public Nullable<int> TimecardStatusId
        {
            get { return _timecardStatusId; }
            set
            {
                if (_timecardStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("TimecardStatusId", _timecardStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.TimecardStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _timecardStatusId = value;
                    OnPropertyChanged("TimecardStatusId");
                }
            }
        }
        private Nullable<int> _timecardStatusId;
    
        [DataMember]
        public string ApproverComments
        {
            get { return _approverComments; }
            set
            {
                if (_approverComments != value)
                {
                    ChangeTracker.RecordOriginalValue("ApproverComments", _approverComments);
                    _approverComments = value;
                    OnPropertyChanged("ApproverComments");
                }
            }
        }
        private string _approverComments;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TimecardEntry> Entries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new TrackableCollection<TimecardEntry>();
                    _entries.CollectionChanged += FixupEntries;
                }
                return _entries;
            }
            set
            {
                if (!ReferenceEquals(_entries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_entries != null)
                    {
                        _entries.CollectionChanged -= FixupEntries;
                    }
                    _entries = value;
                    if (_entries != null)
                    {
                        _entries.CollectionChanged += FixupEntries;
                    }
                    OnNavigationPropertyChanged("Entries");
                }
            }
        }
        private TrackableCollection<TimecardEntry> _entries;
    
        [DataMember]
        public TimecardStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private TimecardStatus _status;
    
        [DataMember]
        public User Submitter
        {
            get { return _submitter; }
            set
            {
                if (!ReferenceEquals(_submitter, value))
                {
                    var previousValue = _submitter;
                    _submitter = value;
                    FixupSubmitter(previousValue);
                    OnNavigationPropertyChanged("Submitter");
                }
            }
        }
        private User _submitter;
    
        [DataMember]
        public User Approver
        {
            get { return _approver; }
            set
            {
                if (!ReferenceEquals(_approver, value))
                {
                    var previousValue = _approver;
                    _approver = value;
                    FixupApprover(previousValue);
                    OnNavigationPropertyChanged("Approver");
                }
            }
        }
        private User _approver;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Entries.Clear();
            Status = null;
            Submitter = null;
            Approver = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupStatus(TimecardStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Timecards.Contains(this))
            {
                previousValue.Timecards.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Timecards.Contains(this))
                {
                    Status.Timecards.Add(this);
                }
    
                TimecardStatusId = Status.TimecardStatusId;
            }
            else if (!skipKeys)
            {
                TimecardStatusId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupSubmitter(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SubmittedTimecards.Contains(this))
            {
                previousValue.SubmittedTimecards.Remove(this);
            }
    
            if (Submitter != null)
            {
                if (!Submitter.SubmittedTimecards.Contains(this))
                {
                    Submitter.SubmittedTimecards.Add(this);
                }
    
                SubmitterUserId = Submitter.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Submitter")
                    && (ChangeTracker.OriginalValues["Submitter"] == Submitter))
                {
                    ChangeTracker.OriginalValues.Remove("Submitter");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Submitter", previousValue);
                }
                if (Submitter != null && !Submitter.ChangeTracker.ChangeTrackingEnabled)
                {
                    Submitter.StartTracking();
                }
            }
        }
    
        private void FixupApprover(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ApprovedTimecards.Contains(this))
            {
                previousValue.ApprovedTimecards.Remove(this);
            }
    
            if (Approver != null)
            {
                if (!Approver.ApprovedTimecards.Contains(this))
                {
                    Approver.ApprovedTimecards.Add(this);
                }
    
                ApproverUserId = Approver.UserId;
            }
            else if (!skipKeys)
            {
                ApproverUserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approver")
                    && (ChangeTracker.OriginalValues["Approver"] == Approver))
                {
                    ChangeTracker.OriginalValues.Remove("Approver");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approver", previousValue);
                }
                if (Approver != null && !Approver.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approver.StartTracking();
                }
            }
        }
    
        private void FixupEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntry item in e.NewItems)
                {
                    item.Timecard = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Entries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Timecard, this))
                    {
                        item.Timecard = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Entries", item);
                    }
                }
            }
        }

        #endregion

    }
}
