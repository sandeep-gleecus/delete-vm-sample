//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WorkflowCustomProperty))]
    [KnownType(typeof(WorkflowField))]
    [KnownType(typeof(WorkflowTransition))]
    [KnownType(typeof(Incident))]
    [KnownType(typeof(ProjectTemplate))]
    public partial class IncidentStatus: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IncidentStatusId
        {
            get { return _incidentStatusId; }
            set
            {
                if (_incidentStatusId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IncidentStatusId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _incidentStatusId = value;
                    OnPropertyChanged("IncidentStatusId");
                }
            }
        }
        private int _incidentStatusId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsOpenStatus
        {
            get { return _isOpenStatus; }
            set
            {
                if (_isOpenStatus != value)
                {
                    ChangeTracker.RecordOriginalValue("IsOpenStatus", _isOpenStatus);
                    _isOpenStatus = value;
                    OnPropertyChanged("IsOpenStatus");
                }
            }
        }
        private bool _isOpenStatus;
    
        [DataMember]
        public bool IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDefault", _isDefault);
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _isDefault;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (ProjectTemplate != null && ProjectTemplate.ProjectTemplateId != value)
                        {
                            ProjectTemplate = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<WorkflowCustomProperty> WorkflowCustomProperties
        {
            get
            {
                if (_workflowCustomProperties == null)
                {
                    _workflowCustomProperties = new TrackableCollection<WorkflowCustomProperty>();
                    _workflowCustomProperties.CollectionChanged += FixupWorkflowCustomProperties;
                }
                return _workflowCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_workflowCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_workflowCustomProperties != null)
                    {
                        _workflowCustomProperties.CollectionChanged -= FixupWorkflowCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowCustomProperty item in _workflowCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _workflowCustomProperties = value;
                    if (_workflowCustomProperties != null)
                    {
                        _workflowCustomProperties.CollectionChanged += FixupWorkflowCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowCustomProperty item in _workflowCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("WorkflowCustomProperties");
                }
            }
        }
        private TrackableCollection<WorkflowCustomProperty> _workflowCustomProperties;
    
        [DataMember]
        public TrackableCollection<WorkflowField> WorkflowFields
        {
            get
            {
                if (_workflowFields == null)
                {
                    _workflowFields = new TrackableCollection<WorkflowField>();
                    _workflowFields.CollectionChanged += FixupWorkflowFields;
                }
                return _workflowFields;
            }
            set
            {
                if (!ReferenceEquals(_workflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_workflowFields != null)
                    {
                        _workflowFields.CollectionChanged -= FixupWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowField item in _workflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _workflowFields = value;
                    if (_workflowFields != null)
                    {
                        _workflowFields.CollectionChanged += FixupWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowField item in _workflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("WorkflowFields");
                }
            }
        }
        private TrackableCollection<WorkflowField> _workflowFields;
    
        [DataMember]
        public TrackableCollection<WorkflowTransition> WorkflowTransitionsTo
        {
            get
            {
                if (_workflowTransitionsTo == null)
                {
                    _workflowTransitionsTo = new TrackableCollection<WorkflowTransition>();
                    _workflowTransitionsTo.CollectionChanged += FixupWorkflowTransitionsTo;
                }
                return _workflowTransitionsTo;
            }
            set
            {
                if (!ReferenceEquals(_workflowTransitionsTo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_workflowTransitionsTo != null)
                    {
                        _workflowTransitionsTo.CollectionChanged -= FixupWorkflowTransitionsTo;
                    }
                    _workflowTransitionsTo = value;
                    if (_workflowTransitionsTo != null)
                    {
                        _workflowTransitionsTo.CollectionChanged += FixupWorkflowTransitionsTo;
                    }
                    OnNavigationPropertyChanged("WorkflowTransitionsTo");
                }
            }
        }
        private TrackableCollection<WorkflowTransition> _workflowTransitionsTo;
    
        [DataMember]
        public TrackableCollection<WorkflowTransition> WorkflowTransitionsFrom
        {
            get
            {
                if (_workflowTransitionsFrom == null)
                {
                    _workflowTransitionsFrom = new TrackableCollection<WorkflowTransition>();
                    _workflowTransitionsFrom.CollectionChanged += FixupWorkflowTransitionsFrom;
                }
                return _workflowTransitionsFrom;
            }
            set
            {
                if (!ReferenceEquals(_workflowTransitionsFrom, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_workflowTransitionsFrom != null)
                    {
                        _workflowTransitionsFrom.CollectionChanged -= FixupWorkflowTransitionsFrom;
                    }
                    _workflowTransitionsFrom = value;
                    if (_workflowTransitionsFrom != null)
                    {
                        _workflowTransitionsFrom.CollectionChanged += FixupWorkflowTransitionsFrom;
                    }
                    OnNavigationPropertyChanged("WorkflowTransitionsFrom");
                }
            }
        }
        private TrackableCollection<WorkflowTransition> _workflowTransitionsFrom;
    
        [DataMember]
        public TrackableCollection<Incident> Incidents
        {
            get
            {
                if (_incidents == null)
                {
                    _incidents = new TrackableCollection<Incident>();
                    _incidents.CollectionChanged += FixupIncidents;
                }
                return _incidents;
            }
            set
            {
                if (!ReferenceEquals(_incidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged -= FixupIncidents;
                    }
                    _incidents = value;
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged += FixupIncidents;
                    }
                    OnNavigationPropertyChanged("Incidents");
                }
            }
        }
        private TrackableCollection<Incident> _incidents;
    
        [DataMember]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set
            {
                if (!ReferenceEquals(_projectTemplate, value))
                {
                    var previousValue = _projectTemplate;
                    _projectTemplate = value;
                    FixupProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("ProjectTemplate");
                }
            }
        }
        private ProjectTemplate _projectTemplate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WorkflowCustomProperties.Clear();
            WorkflowFields.Clear();
            WorkflowTransitionsTo.Clear();
            WorkflowTransitionsFrom.Clear();
            Incidents.Clear();
            ProjectTemplate = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProjectTemplate(ProjectTemplate previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.IncidentStati.Contains(this))
            {
                previousValue.IncidentStati.Remove(this);
            }
    
            if (ProjectTemplate != null)
            {
                if (!ProjectTemplate.IncidentStati.Contains(this))
                {
                    ProjectTemplate.IncidentStati.Add(this);
                }
    
                ProjectTemplateId = ProjectTemplate.ProjectTemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectTemplate")
                    && (ChangeTracker.OriginalValues["ProjectTemplate"] == ProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplate", previousValue);
                }
                if (ProjectTemplate != null && !ProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectTemplate.StartTracking();
                }
            }
        }
    
        private void FixupWorkflowCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowCustomProperty item in e.NewItems)
                {
                    item.Status = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WorkflowCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.Status, this))
                    {
                        item.Status = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WorkflowCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowField item in e.NewItems)
                {
                    item.Status = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.Status, this))
                    {
                        item.Status = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupWorkflowTransitionsTo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowTransition item in e.NewItems)
                {
                    item.InputStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WorkflowTransitionsTo", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowTransition item in e.OldItems)
                {
                    if (ReferenceEquals(item.InputStatus, this))
                    {
                        item.InputStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WorkflowTransitionsTo", item);
                    }
                }
            }
        }
    
        private void FixupWorkflowTransitionsFrom(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowTransition item in e.NewItems)
                {
                    item.OutputStatus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WorkflowTransitionsFrom", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowTransition item in e.OldItems)
                {
                    if (ReferenceEquals(item.OutputStatus, this))
                    {
                        item.OutputStatus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WorkflowTransitionsFrom", item);
                    }
                }
            }
        }
    
        private void FixupIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Status = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Incidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Status, this))
                    {
                        item.Status = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Incidents", item);
                    }
                }
            }
        }

        #endregion

    }
}
