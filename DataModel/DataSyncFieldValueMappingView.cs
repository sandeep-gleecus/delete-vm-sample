//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class DataSyncFieldValueMappingView : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> DataSyncSystemId
        {
            get { return _dataSyncSystemId; }
            set
            {
                if (_dataSyncSystemId != value)
                {
                    OnComplexPropertyChanging();
                    _dataSyncSystemId = value;
                    OnPropertyChanged("DataSyncSystemId");
                }
            }
        }
        private Nullable<int> _dataSyncSystemId;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    OnComplexPropertyChanging();
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public Nullable<int> ArtifactFieldId
        {
            get { return _artifactFieldId; }
            set
            {
                if (_artifactFieldId != value)
                {
                    OnComplexPropertyChanging();
                    _artifactFieldId = value;
                    OnPropertyChanged("ArtifactFieldId");
                }
            }
        }
        private Nullable<int> _artifactFieldId;
    
        [DataMember]
        public Nullable<int> ArtifactFieldValue
        {
            get { return _artifactFieldValue; }
            set
            {
                if (_artifactFieldValue != value)
                {
                    OnComplexPropertyChanging();
                    _artifactFieldValue = value;
                    OnPropertyChanged("ArtifactFieldValue");
                }
            }
        }
        private Nullable<int> _artifactFieldValue;
    
        [DataMember]
        public string ExternalKey
        {
            get { return _externalKey; }
            set
            {
                if (_externalKey != value)
                {
                    OnComplexPropertyChanging();
                    _externalKey = value;
                    OnPropertyChanged("ExternalKey");
                }
            }
        }
        private string _externalKey;
    
        [DataMember]
        public string PrimaryYn
        {
            get { return _primaryYn; }
            set
            {
                if (_primaryYn != value)
                {
                    OnComplexPropertyChanging();
                    _primaryYn = value;
                    OnPropertyChanged("PrimaryYn");
                }
            }
        }
        private string _primaryYn;
    
        [DataMember]
        public string ArtifactFieldValueName
        {
            get { return _artifactFieldValueName; }
            set
            {
                if (_artifactFieldValueName != value)
                {
                    OnComplexPropertyChanging();
                    _artifactFieldValueName = value;
                    OnPropertyChanged("ArtifactFieldValueName");
                }
            }
        }
        private string _artifactFieldValueName;
    
        [DataMember]
        public Nullable<bool> IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    OnComplexPropertyChanging();
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private Nullable<bool> _isActive;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, DataSyncFieldValueMappingView complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DataSyncSystemId", parentPropertyName), complexObject == null ? null : (object)complexObject.DataSyncSystemId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProjectId", parentPropertyName), complexObject == null ? null : (object)complexObject.ProjectId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ArtifactFieldId", parentPropertyName), complexObject == null ? null : (object)complexObject.ArtifactFieldId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ArtifactFieldValue", parentPropertyName), complexObject == null ? null : (object)complexObject.ArtifactFieldValue);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ExternalKey", parentPropertyName), complexObject == null ? null : (object)complexObject.ExternalKey);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PrimaryYn", parentPropertyName), complexObject == null ? null : (object)complexObject.PrimaryYn);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ArtifactFieldValueName", parentPropertyName), complexObject == null ? null : (object)complexObject.ArtifactFieldValueName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsActive", parentPropertyName), complexObject == null ? null : (object)complexObject.IsActive);
        }

        #endregion

    }
}
