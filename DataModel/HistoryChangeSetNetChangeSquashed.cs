//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class HistoryChangeSetNetChangeSquashed: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BaselineId
        {
            get { return _baselineId; }
            set
            {
                if (_baselineId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BaselineId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _baselineId = value;
                    OnPropertyChanged("BaselineId");
                }
            }
        }
        private int _baselineId;
    
        [DataMember]
        public string BaselineName
        {
            get { return _baselineName; }
            set
            {
                if (_baselineName != value)
                {
                    ChangeTracker.RecordOriginalValue("BaselineName", _baselineName);
                    _baselineName = value;
                    OnPropertyChanged("BaselineName");
                }
            }
        }
        private string _baselineName;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public int ChangedArtifactId
        {
            get { return _changedArtifactId; }
            set
            {
                if (_changedArtifactId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangedArtifactId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changedArtifactId = value;
                    OnPropertyChanged("ChangedArtifactId");
                }
            }
        }
        private int _changedArtifactId;
    
        [DataMember]
        public Nullable<long> ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private Nullable<long> _changeSetId;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeDate", _changeDate);
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public string ArtifactName
        {
            get { return _artifactName; }
            set
            {
                if (_artifactName != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactName", _artifactName);
                    _artifactName = value;
                    OnPropertyChanged("ArtifactName");
                }
            }
        }
        private string _artifactName;
    
        [DataMember]
        public string UserFullName
        {
            get { return _userFullName; }
            set
            {
                if (_userFullName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserFullName", _userFullName);
                    _userFullName = value;
                    OnPropertyChanged("UserFullName");
                }
            }
        }
        private string _userFullName;
    
        [DataMember]
        public string ArtifactTypeName
        {
            get { return _artifactTypeName; }
            set
            {
                if (_artifactTypeName != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeName", _artifactTypeName);
                    _artifactTypeName = value;
                    OnPropertyChanged("ArtifactTypeName");
                }
            }
        }
        private string _artifactTypeName;
    
        [DataMember]
        public string ChangeTypes
        {
            get { return _changeTypes; }
            set
            {
                if (_changeTypes != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeTypes", _changeTypes);
                    _changeTypes = value;
                    OnPropertyChanged("ChangeTypes");
                }
            }
        }
        private string _changeTypes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
