//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attachment))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HistoryChangeSet))]
    public partial class AttachmentVersion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int AttachmentVersionId
        {
            get { return _attachmentVersionId; }
            set
            {
                if (_attachmentVersionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttachmentVersionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _attachmentVersionId = value;
                    OnPropertyChanged("AttachmentVersionId");
                }
            }
        }
        private int _attachmentVersionId;
    
        [DataMember]
        public int AttachmentId
        {
            get { return _attachmentId; }
            set
            {
                if (_attachmentId != value)
                {
                    ChangeTracker.RecordOriginalValue("AttachmentId", _attachmentId);
                    if (!IsDeserializing)
                    {
                        if (Attachment != null && Attachment.AttachmentId != value)
                        {
                            Attachment = null;
                        }
                    }
                    _attachmentId = value;
                    OnPropertyChanged("AttachmentId");
                }
            }
        }
        private int _attachmentId;
    
        [DataMember]
        public int AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorId", _authorId);
                    if (!IsDeserializing)
                    {
                        if (Author != null && Author.UserId != value)
                        {
                            Author = null;
                        }
                    }
                    _authorId = value;
                    OnPropertyChanged("AuthorId");
                }
            }
        }
        private int _authorId;
    
        [DataMember]
        public string Filename
        {
            get { return _filename; }
            set
            {
                if (_filename != value)
                {
                    ChangeTracker.RecordOriginalValue("Filename", _filename);
                    _filename = value;
                    OnPropertyChanged("Filename");
                }
            }
        }
        private string _filename;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime UploadDate
        {
            get { return _uploadDate; }
            set
            {
                if (_uploadDate != value)
                {
                    ChangeTracker.RecordOriginalValue("UploadDate", _uploadDate);
                    _uploadDate = value;
                    OnPropertyChanged("UploadDate");
                }
            }
        }
        private System.DateTime _uploadDate;
    
        [DataMember]
        public int Size
        {
            get { return _size; }
            set
            {
                if (_size != value)
                {
                    ChangeTracker.RecordOriginalValue("Size", _size);
                    _size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        private int _size;
    
        [DataMember]
        public string VersionNumber
        {
            get { return _versionNumber; }
            set
            {
                if (_versionNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionNumber", _versionNumber);
                    _versionNumber = value;
                    OnPropertyChanged("VersionNumber");
                }
            }
        }
        private string _versionNumber;
    
        [DataMember]
        public bool IsCurrent
        {
            get { return _isCurrent; }
            set
            {
                if (_isCurrent != value)
                {
                    ChangeTracker.RecordOriginalValue("IsCurrent", _isCurrent);
                    _isCurrent = value;
                    OnPropertyChanged("IsCurrent");
                }
            }
        }
        private bool _isCurrent;
    
        [DataMember]
        public Nullable<long> ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    if (!IsDeserializing)
                    {
                        if (HistoryChangeSet != null && HistoryChangeSet.ChangeSetId != value)
                        {
                            HistoryChangeSet = null;
                        }
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private Nullable<long> _changeSetId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Attachment Attachment
        {
            get { return _attachment; }
            set
            {
                if (!ReferenceEquals(_attachment, value))
                {
                    var previousValue = _attachment;
                    _attachment = value;
                    FixupAttachment(previousValue);
                    OnNavigationPropertyChanged("Attachment");
                }
            }
        }
        private Attachment _attachment;
    
        [DataMember]
        public User Author
        {
            get { return _author; }
            set
            {
                if (!ReferenceEquals(_author, value))
                {
                    var previousValue = _author;
                    _author = value;
                    FixupAuthor(previousValue);
                    OnNavigationPropertyChanged("Author");
                }
            }
        }
        private User _author;
    
        [DataMember]
        public HistoryChangeSet HistoryChangeSet
        {
            get { return _historyChangeSet; }
            set
            {
                if (!ReferenceEquals(_historyChangeSet, value))
                {
                    var previousValue = _historyChangeSet;
                    _historyChangeSet = value;
                    FixupHistoryChangeSet(previousValue);
                    OnNavigationPropertyChanged("HistoryChangeSet");
                }
            }
        }
        private HistoryChangeSet _historyChangeSet;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Attachment = null;
            Author = null;
            HistoryChangeSet = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttachment(Attachment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Versions.Contains(this))
            {
                previousValue.Versions.Remove(this);
            }
    
            if (Attachment != null)
            {
                if (!Attachment.Versions.Contains(this))
                {
                    Attachment.Versions.Add(this);
                }
    
                AttachmentId = Attachment.AttachmentId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attachment")
                    && (ChangeTracker.OriginalValues["Attachment"] == Attachment))
                {
                    ChangeTracker.OriginalValues.Remove("Attachment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attachment", previousValue);
                }
                if (Attachment != null && !Attachment.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attachment.StartTracking();
                }
            }
        }
    
        private void FixupAuthor(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttachmentVersions.Contains(this))
            {
                previousValue.AttachmentVersions.Remove(this);
            }
    
            if (Author != null)
            {
                if (!Author.AttachmentVersions.Contains(this))
                {
                    Author.AttachmentVersions.Add(this);
                }
    
                AuthorId = Author.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Author")
                    && (ChangeTracker.OriginalValues["Author"] == Author))
                {
                    ChangeTracker.OriginalValues.Remove("Author");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Author", previousValue);
                }
                if (Author != null && !Author.ChangeTracker.ChangeTrackingEnabled)
                {
                    Author.StartTracking();
                }
            }
        }
    
        private void FixupHistoryChangeSet(HistoryChangeSet previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttachmentVersions.Contains(this))
            {
                previousValue.AttachmentVersions.Remove(this);
            }
    
            if (HistoryChangeSet != null)
            {
                if (!HistoryChangeSet.AttachmentVersions.Contains(this))
                {
                    HistoryChangeSet.AttachmentVersions.Add(this);
                }
    
                ChangeSetId = HistoryChangeSet.ChangeSetId;
            }
            else if (!skipKeys)
            {
                ChangeSetId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HistoryChangeSet")
                    && (ChangeTracker.OriginalValues["HistoryChangeSet"] == HistoryChangeSet))
                {
                    ChangeTracker.OriginalValues.Remove("HistoryChangeSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HistoryChangeSet", previousValue);
                }
                if (HistoryChangeSet != null && !HistoryChangeSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    HistoryChangeSet.StartTracking();
                }
            }
        }

        #endregion

    }
}
