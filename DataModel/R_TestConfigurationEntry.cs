//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_TestConfigurationEntry: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TEST_CONFIGURATION_ID
        {
            get { return _tEST_CONFIGURATION_ID; }
            set
            {
                if (_tEST_CONFIGURATION_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CONFIGURATION_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CONFIGURATION_ID = value;
                    OnPropertyChanged("TEST_CONFIGURATION_ID");
                }
            }
        }
        private int _tEST_CONFIGURATION_ID;
    
        [DataMember]
        public int TEST_CONFIGURATION_SET_ID
        {
            get { return _tEST_CONFIGURATION_SET_ID; }
            set
            {
                if (_tEST_CONFIGURATION_SET_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CONFIGURATION_SET_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CONFIGURATION_SET_ID = value;
                    OnPropertyChanged("TEST_CONFIGURATION_SET_ID");
                }
            }
        }
        private int _tEST_CONFIGURATION_SET_ID;
    
        [DataMember]
        public int POSITION
        {
            get { return _pOSITION; }
            set
            {
                if (_pOSITION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'POSITION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pOSITION = value;
                    OnPropertyChanged("POSITION");
                }
            }
        }
        private int _pOSITION;
    
        [DataMember]
        public string TEST_CONFIGURATION_SET_NAME
        {
            get { return _tEST_CONFIGURATION_SET_NAME; }
            set
            {
                if (_tEST_CONFIGURATION_SET_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CONFIGURATION_SET_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CONFIGURATION_SET_NAME = value;
                    OnPropertyChanged("TEST_CONFIGURATION_SET_NAME");
                }
            }
        }
        private string _tEST_CONFIGURATION_SET_NAME;
    
        [DataMember]
        public bool IS_TEST_CONFIGURATION_SET_ACTIVE
        {
            get { return _iS_TEST_CONFIGURATION_SET_ACTIVE; }
            set
            {
                if (_iS_TEST_CONFIGURATION_SET_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_TEST_CONFIGURATION_SET_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_TEST_CONFIGURATION_SET_ACTIVE = value;
                    OnPropertyChanged("IS_TEST_CONFIGURATION_SET_ACTIVE");
                }
            }
        }
        private bool _iS_TEST_CONFIGURATION_SET_ACTIVE;
    
        [DataMember]
        public int CUSTOM_PROPERTY_VALUE_ID
        {
            get { return _cUSTOM_PROPERTY_VALUE_ID; }
            set
            {
                if (_cUSTOM_PROPERTY_VALUE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CUSTOM_PROPERTY_VALUE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cUSTOM_PROPERTY_VALUE_ID = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_VALUE_ID");
                }
            }
        }
        private int _cUSTOM_PROPERTY_VALUE_ID;
    
        [DataMember]
        public string TEST_CASE_PARAMETER_NAME
        {
            get { return _tEST_CASE_PARAMETER_NAME; }
            set
            {
                if (_tEST_CASE_PARAMETER_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_PARAMETER_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_PARAMETER_NAME = value;
                    OnPropertyChanged("TEST_CASE_PARAMETER_NAME");
                }
            }
        }
        private string _tEST_CASE_PARAMETER_NAME;
    
        [DataMember]
        public string TEST_CASE_PARAMETER_VALUE
        {
            get { return _tEST_CASE_PARAMETER_VALUE; }
            set
            {
                if (_tEST_CASE_PARAMETER_VALUE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_PARAMETER_VALUE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_PARAMETER_VALUE = value;
                    OnPropertyChanged("TEST_CASE_PARAMETER_VALUE");
                }
            }
        }
        private string _tEST_CASE_PARAMETER_VALUE;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public int PROJECT_GROUP_ID
        {
            get { return _pROJECT_GROUP_ID; }
            set
            {
                if (_pROJECT_GROUP_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_GROUP_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_GROUP_ID = value;
                    OnPropertyChanged("PROJECT_GROUP_ID");
                }
            }
        }
        private int _pROJECT_GROUP_ID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
