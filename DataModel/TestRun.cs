//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AutomationEngine))]
    [KnownType(typeof(AutomationHost))]
    [KnownType(typeof(Build))]
    [KnownType(typeof(ExecutionStatus))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestRunStep))]
    [KnownType(typeof(TestRunType))]
    [KnownType(typeof(TestRunFormat))]
    [KnownType(typeof(TestRunsPending))]
    [KnownType(typeof(TestSetTestCase))]
    [KnownType(typeof(TestSet))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HistoryChangeSet))]
    [KnownType(typeof(TestConfiguration))]
    public partial class TestRun: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestRunId
        {
            get { return _testRunId; }
            set
            {
                if (_testRunId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestRunId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testRunId = value;
                    OnPropertyChanged("TestRunId");
                }
            }
        }
        private int _testRunId;
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public int TestRunTypeId
        {
            get { return _testRunTypeId; }
            set
            {
                if (_testRunTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestRunTypeId", _testRunTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.TestRunTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _testRunTypeId = value;
                    OnPropertyChanged("TestRunTypeId");
                }
            }
        }
        private int _testRunTypeId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public Nullable<int> TestSetId
        {
            get { return _testSetId; }
            set
            {
                if (_testSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestSetId", _testSetId);
                    if (!IsDeserializing)
                    {
                        if (TestSet != null && TestSet.TestSetId != value)
                        {
                            TestSet = null;
                        }
                    }
                    _testSetId = value;
                    OnPropertyChanged("TestSetId");
                }
            }
        }
        private Nullable<int> _testSetId;
    
        [DataMember]
        public Nullable<int> TestSetTestCaseId
        {
            get { return _testSetTestCaseId; }
            set
            {
                if (_testSetTestCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestSetTestCaseId", _testSetTestCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestSetTestCase != null && TestSetTestCase.TestSetTestCaseId != value)
                        {
                            TestSetTestCase = null;
                        }
                    }
                    _testSetTestCaseId = value;
                    OnPropertyChanged("TestSetTestCaseId");
                }
            }
        }
        private Nullable<int> _testSetTestCaseId;
    
        [DataMember]
        public int TesterId
        {
            get { return _testerId; }
            set
            {
                if (_testerId != value)
                {
                    ChangeTracker.RecordOriginalValue("TesterId", _testerId);
                    if (!IsDeserializing)
                    {
                        if (Tester != null && Tester.UserId != value)
                        {
                            Tester = null;
                        }
                    }
                    _testerId = value;
                    OnPropertyChanged("TesterId");
                }
            }
        }
        private int _testerId;
    
        [DataMember]
        public Nullable<int> TestRunsPendingId
        {
            get { return _testRunsPendingId; }
            set
            {
                if (_testRunsPendingId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestRunsPendingId", _testRunsPendingId);
                    if (!IsDeserializing)
                    {
                        if (PendingTestRun != null && PendingTestRun.TestRunsPendingId != value)
                        {
                            PendingTestRun = null;
                        }
                    }
                    _testRunsPendingId = value;
                    OnPropertyChanged("TestRunsPendingId");
                }
            }
        }
        private Nullable<int> _testRunsPendingId;
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatusId", _executionStatusId);
                    if (!IsDeserializing)
                    {
                        if (ExecutionStatus != null && ExecutionStatus.ExecutionStatusId != value)
                        {
                            ExecutionStatus = null;
                        }
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> AutomationHostId
        {
            get { return _automationHostId; }
            set
            {
                if (_automationHostId != value)
                {
                    ChangeTracker.RecordOriginalValue("AutomationHostId", _automationHostId);
                    if (!IsDeserializing)
                    {
                        if (AutomationHost != null && AutomationHost.AutomationHostId != value)
                        {
                            AutomationHost = null;
                        }
                    }
                    _automationHostId = value;
                    OnPropertyChanged("AutomationHostId");
                }
            }
        }
        private Nullable<int> _automationHostId;
    
        [DataMember]
        public Nullable<int> AutomationEngineId
        {
            get { return _automationEngineId; }
            set
            {
                if (_automationEngineId != value)
                {
                    ChangeTracker.RecordOriginalValue("AutomationEngineId", _automationEngineId);
                    if (!IsDeserializing)
                    {
                        if (AutomationEngine != null && AutomationEngine.AutomationEngineId != value)
                        {
                            AutomationEngine = null;
                        }
                    }
                    _automationEngineId = value;
                    OnPropertyChanged("AutomationEngineId");
                }
            }
        }
        private Nullable<int> _automationEngineId;
    
        [DataMember]
        public Nullable<int> BuildId
        {
            get { return _buildId; }
            set
            {
                if (_buildId != value)
                {
                    ChangeTracker.RecordOriginalValue("BuildId", _buildId);
                    if (!IsDeserializing)
                    {
                        if (Build != null && Build.BuildId != value)
                        {
                            Build = null;
                        }
                    }
                    _buildId = value;
                    OnPropertyChanged("BuildId");
                }
            }
        }
        private Nullable<int> _buildId;
    
        [DataMember]
        public Nullable<int> TestRunFormatId
        {
            get { return _testRunFormatId; }
            set
            {
                if (_testRunFormatId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestRunFormatId", _testRunFormatId);
                    if (!IsDeserializing)
                    {
                        if (Format != null && Format.TestRunFormatId != value)
                        {
                            Format = null;
                        }
                    }
                    _testRunFormatId = value;
                    OnPropertyChanged("TestRunFormatId");
                }
            }
        }
        private Nullable<int> _testRunFormatId;
    
        [DataMember]
        public string RunnerName
        {
            get { return _runnerName; }
            set
            {
                if (_runnerName != value)
                {
                    ChangeTracker.RecordOriginalValue("RunnerName", _runnerName);
                    _runnerName = value;
                    OnPropertyChanged("RunnerName");
                }
            }
        }
        private string _runnerName;
    
        [DataMember]
        public Nullable<int> EstimatedDuration
        {
            get { return _estimatedDuration; }
            set
            {
                if (_estimatedDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedDuration", _estimatedDuration);
                    _estimatedDuration = value;
                    OnPropertyChanged("EstimatedDuration");
                }
            }
        }
        private Nullable<int> _estimatedDuration;
    
        [DataMember]
        public Nullable<int> ActualDuration
        {
            get { return _actualDuration; }
            set
            {
                if (_actualDuration != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDuration", _actualDuration);
                    _actualDuration = value;
                    OnPropertyChanged("ActualDuration");
                }
            }
        }
        private Nullable<int> _actualDuration;
    
        [DataMember]
        public Nullable<int> RunnerAssertCount
        {
            get { return _runnerAssertCount; }
            set
            {
                if (_runnerAssertCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RunnerAssertCount", _runnerAssertCount);
                    _runnerAssertCount = value;
                    OnPropertyChanged("RunnerAssertCount");
                }
            }
        }
        private Nullable<int> _runnerAssertCount;
    
        [DataMember]
        public string RunnerTestName
        {
            get { return _runnerTestName; }
            set
            {
                if (_runnerTestName != value)
                {
                    ChangeTracker.RecordOriginalValue("RunnerTestName", _runnerTestName);
                    _runnerTestName = value;
                    OnPropertyChanged("RunnerTestName");
                }
            }
        }
        private string _runnerTestName;
    
        [DataMember]
        public string RunnerMessage
        {
            get { return _runnerMessage; }
            set
            {
                if (_runnerMessage != value)
                {
                    ChangeTracker.RecordOriginalValue("RunnerMessage", _runnerMessage);
                    _runnerMessage = value;
                    OnPropertyChanged("RunnerMessage");
                }
            }
        }
        private string _runnerMessage;
    
        [DataMember]
        public string RunnerStackTrace
        {
            get { return _runnerStackTrace; }
            set
            {
                if (_runnerStackTrace != value)
                {
                    ChangeTracker.RecordOriginalValue("RunnerStackTrace", _runnerStackTrace);
                    _runnerStackTrace = value;
                    OnPropertyChanged("RunnerStackTrace");
                }
            }
        }
        private string _runnerStackTrace;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<long> ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeSetId", _changeSetId);
                    if (!IsDeserializing)
                    {
                        if (HistoryChangeSet != null && HistoryChangeSet.ChangeSetId != value)
                        {
                            HistoryChangeSet = null;
                        }
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private Nullable<long> _changeSetId;
    
        [DataMember]
        public Nullable<int> TestConfigurationId
        {
            get { return _testConfigurationId; }
            set
            {
                if (_testConfigurationId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestConfigurationId", _testConfigurationId);
                    if (!IsDeserializing)
                    {
                        if (TestConfiguration != null && TestConfiguration.TestConfigurationId != value)
                        {
                            TestConfiguration = null;
                        }
                    }
                    _testConfigurationId = value;
                    OnPropertyChanged("TestConfigurationId");
                }
            }
        }
        private Nullable<int> _testConfigurationId;
    
        [DataMember]
        public bool IS_DELETED
        {
            get { return _iS_DELETED; }
            set
            {
                if (_iS_DELETED != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_DELETED", _iS_DELETED);
                    _iS_DELETED = value;
                    OnPropertyChanged("IS_DELETED");
                }
            }
        }
        private bool _iS_DELETED;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public AutomationEngine AutomationEngine
        {
            get { return _automationEngine; }
            set
            {
                if (!ReferenceEquals(_automationEngine, value))
                {
                    var previousValue = _automationEngine;
                    _automationEngine = value;
                    FixupAutomationEngine(previousValue);
                    OnNavigationPropertyChanged("AutomationEngine");
                }
            }
        }
        private AutomationEngine _automationEngine;
    
        [DataMember]
        public AutomationHost AutomationHost
        {
            get { return _automationHost; }
            set
            {
                if (!ReferenceEquals(_automationHost, value))
                {
                    var previousValue = _automationHost;
                    _automationHost = value;
                    FixupAutomationHost(previousValue);
                    OnNavigationPropertyChanged("AutomationHost");
                }
            }
        }
        private AutomationHost _automationHost;
    
        [DataMember]
        public Build Build
        {
            get { return _build; }
            set
            {
                if (!ReferenceEquals(_build, value))
                {
                    var previousValue = _build;
                    _build = value;
                    FixupBuild(previousValue);
                    OnNavigationPropertyChanged("Build");
                }
            }
        }
        private Build _build;
    
        [DataMember]
        public ExecutionStatus ExecutionStatus
        {
            get { return _executionStatus; }
            set
            {
                if (!ReferenceEquals(_executionStatus, value))
                {
                    var previousValue = _executionStatus;
                    _executionStatus = value;
                    FixupExecutionStatus(previousValue);
                    OnNavigationPropertyChanged("ExecutionStatus");
                }
            }
        }
        private ExecutionStatus _executionStatus;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public TrackableCollection<TestRunStep> TestRunSteps
        {
            get
            {
                if (_testRunSteps == null)
                {
                    _testRunSteps = new TrackableCollection<TestRunStep>();
                    _testRunSteps.CollectionChanged += FixupTestRunSteps;
                }
                return _testRunSteps;
            }
            set
            {
                if (!ReferenceEquals(_testRunSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged -= FixupTestRunSteps;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestRunStep item in _testRunSteps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testRunSteps = value;
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged += FixupTestRunSteps;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestRunStep item in _testRunSteps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestRunSteps");
                }
            }
        }
        private TrackableCollection<TestRunStep> _testRunSteps;
    
        [DataMember]
        public TestRunType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private TestRunType _type;
    
        [DataMember]
        public TestRunFormat Format
        {
            get { return _format; }
            set
            {
                if (!ReferenceEquals(_format, value))
                {
                    var previousValue = _format;
                    _format = value;
                    FixupFormat(previousValue);
                    OnNavigationPropertyChanged("Format");
                }
            }
        }
        private TestRunFormat _format;
    
        [DataMember]
        public TestRunsPending PendingTestRun
        {
            get { return _pendingTestRun; }
            set
            {
                if (!ReferenceEquals(_pendingTestRun, value))
                {
                    var previousValue = _pendingTestRun;
                    _pendingTestRun = value;
                    FixupPendingTestRun(previousValue);
                    OnNavigationPropertyChanged("PendingTestRun");
                }
            }
        }
        private TestRunsPending _pendingTestRun;
    
        [DataMember]
        public TestSetTestCase TestSetTestCase
        {
            get { return _testSetTestCase; }
            set
            {
                if (!ReferenceEquals(_testSetTestCase, value))
                {
                    var previousValue = _testSetTestCase;
                    _testSetTestCase = value;
                    FixupTestSetTestCase(previousValue);
                    OnNavigationPropertyChanged("TestSetTestCase");
                }
            }
        }
        private TestSetTestCase _testSetTestCase;
    
        [DataMember]
        public TestSet TestSet
        {
            get { return _testSet; }
            set
            {
                if (!ReferenceEquals(_testSet, value))
                {
                    var previousValue = _testSet;
                    _testSet = value;
                    FixupTestSet(previousValue);
                    OnNavigationPropertyChanged("TestSet");
                }
            }
        }
        private TestSet _testSet;
    
        [DataMember]
        public User Tester
        {
            get { return _tester; }
            set
            {
                if (!ReferenceEquals(_tester, value))
                {
                    var previousValue = _tester;
                    _tester = value;
                    FixupTester(previousValue);
                    OnNavigationPropertyChanged("Tester");
                }
            }
        }
        private User _tester;
    
        [DataMember]
        public HistoryChangeSet HistoryChangeSet
        {
            get { return _historyChangeSet; }
            set
            {
                if (!ReferenceEquals(_historyChangeSet, value))
                {
                    var previousValue = _historyChangeSet;
                    _historyChangeSet = value;
                    FixupHistoryChangeSet(previousValue);
                    OnNavigationPropertyChanged("HistoryChangeSet");
                }
            }
        }
        private HistoryChangeSet _historyChangeSet;
    
        [DataMember]
        public TestConfiguration TestConfiguration
        {
            get { return _testConfiguration; }
            set
            {
                if (!ReferenceEquals(_testConfiguration, value))
                {
                    var previousValue = _testConfiguration;
                    _testConfiguration = value;
                    FixupTestConfiguration(previousValue);
                    OnNavigationPropertyChanged("TestConfiguration");
                }
            }
        }
        private TestConfiguration _testConfiguration;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AutomationEngine = null;
            AutomationHost = null;
            Build = null;
            ExecutionStatus = null;
            Release = null;
            TestCase = null;
            TestRunSteps.Clear();
            Type = null;
            Format = null;
            PendingTestRun = null;
            TestSetTestCase = null;
            TestSet = null;
            Tester = null;
            HistoryChangeSet = null;
            TestConfiguration = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAutomationEngine(AutomationEngine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (AutomationEngine != null)
            {
                if (!AutomationEngine.TestRuns.Contains(this))
                {
                    AutomationEngine.TestRuns.Add(this);
                }
    
                AutomationEngineId = AutomationEngine.AutomationEngineId;
            }
            else if (!skipKeys)
            {
                AutomationEngineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AutomationEngine")
                    && (ChangeTracker.OriginalValues["AutomationEngine"] == AutomationEngine))
                {
                    ChangeTracker.OriginalValues.Remove("AutomationEngine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AutomationEngine", previousValue);
                }
                if (AutomationEngine != null && !AutomationEngine.ChangeTracker.ChangeTrackingEnabled)
                {
                    AutomationEngine.StartTracking();
                }
            }
        }
    
        private void FixupAutomationHost(AutomationHost previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (AutomationHost != null)
            {
                if (!AutomationHost.TestRuns.Contains(this))
                {
                    AutomationHost.TestRuns.Add(this);
                }
    
                AutomationHostId = AutomationHost.AutomationHostId;
            }
            else if (!skipKeys)
            {
                AutomationHostId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AutomationHost")
                    && (ChangeTracker.OriginalValues["AutomationHost"] == AutomationHost))
                {
                    ChangeTracker.OriginalValues.Remove("AutomationHost");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AutomationHost", previousValue);
                }
                if (AutomationHost != null && !AutomationHost.ChangeTracker.ChangeTrackingEnabled)
                {
                    AutomationHost.StartTracking();
                }
            }
        }
    
        private void FixupBuild(Build previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (Build != null)
            {
                if (!Build.TestRuns.Contains(this))
                {
                    Build.TestRuns.Add(this);
                }
    
                BuildId = Build.BuildId;
            }
            else if (!skipKeys)
            {
                BuildId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Build")
                    && (ChangeTracker.OriginalValues["Build"] == Build))
                {
                    ChangeTracker.OriginalValues.Remove("Build");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Build", previousValue);
                }
                if (Build != null && !Build.ChangeTracker.ChangeTrackingEnabled)
                {
                    Build.StartTracking();
                }
            }
        }
    
        private void FixupExecutionStatus(ExecutionStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (ExecutionStatus != null)
            {
                if (!ExecutionStatus.TestRuns.Contains(this))
                {
                    ExecutionStatus.TestRuns.Add(this);
                }
    
                ExecutionStatusId = ExecutionStatus.ExecutionStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExecutionStatus")
                    && (ChangeTracker.OriginalValues["ExecutionStatus"] == ExecutionStatus))
                {
                    ChangeTracker.OriginalValues.Remove("ExecutionStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatus", previousValue);
                }
                if (ExecutionStatus != null && !ExecutionStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExecutionStatus.StartTracking();
                }
            }
        }
    
        private void FixupRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.TestRuns.Contains(this))
                {
                    Release.TestRuns.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            else if (!skipKeys)
            {
                ReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupTestCase(TestCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.TestRuns.Contains(this))
                {
                    TestCase.TestRuns.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupType(TestRunType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.TestRuns.Contains(this))
                {
                    Type.TestRuns.Add(this);
                }
    
                TestRunTypeId = Type.TestRunTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupFormat(TestRunFormat previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (Format != null)
            {
                if (!Format.TestRuns.Contains(this))
                {
                    Format.TestRuns.Add(this);
                }
    
                TestRunFormatId = Format.TestRunFormatId;
            }
            else if (!skipKeys)
            {
                TestRunFormatId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Format")
                    && (ChangeTracker.OriginalValues["Format"] == Format))
                {
                    ChangeTracker.OriginalValues.Remove("Format");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Format", previousValue);
                }
                if (Format != null && !Format.ChangeTracker.ChangeTrackingEnabled)
                {
                    Format.StartTracking();
                }
            }
        }
    
        private void FixupPendingTestRun(TestRunsPending previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (PendingTestRun != null)
            {
                if (!PendingTestRun.TestRuns.Contains(this))
                {
                    PendingTestRun.TestRuns.Add(this);
                }
    
                TestRunsPendingId = PendingTestRun.TestRunsPendingId;
            }
            else if (!skipKeys)
            {
                TestRunsPendingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PendingTestRun")
                    && (ChangeTracker.OriginalValues["PendingTestRun"] == PendingTestRun))
                {
                    ChangeTracker.OriginalValues.Remove("PendingTestRun");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PendingTestRun", previousValue);
                }
                if (PendingTestRun != null && !PendingTestRun.ChangeTracker.ChangeTrackingEnabled)
                {
                    PendingTestRun.StartTracking();
                }
            }
        }
    
        private void FixupTestSetTestCase(TestSetTestCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (TestSetTestCase != null)
            {
                if (!TestSetTestCase.TestRuns.Contains(this))
                {
                    TestSetTestCase.TestRuns.Add(this);
                }
    
                TestSetTestCaseId = TestSetTestCase.TestSetTestCaseId;
            }
            else if (!skipKeys)
            {
                TestSetTestCaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestSetTestCase")
                    && (ChangeTracker.OriginalValues["TestSetTestCase"] == TestSetTestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestSetTestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestSetTestCase", previousValue);
                }
                if (TestSetTestCase != null && !TestSetTestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestSetTestCase.StartTracking();
                }
            }
        }
    
        private void FixupTestSet(TestSet previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (TestSet != null)
            {
                if (!TestSet.TestRuns.Contains(this))
                {
                    TestSet.TestRuns.Add(this);
                }
    
                TestSetId = TestSet.TestSetId;
            }
            else if (!skipKeys)
            {
                TestSetId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestSet")
                    && (ChangeTracker.OriginalValues["TestSet"] == TestSet))
                {
                    ChangeTracker.OriginalValues.Remove("TestSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestSet", previousValue);
                }
                if (TestSet != null && !TestSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestSet.StartTracking();
                }
            }
        }
    
        private void FixupTester(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExecutedTestRuns.Contains(this))
            {
                previousValue.ExecutedTestRuns.Remove(this);
            }
    
            if (Tester != null)
            {
                if (!Tester.ExecutedTestRuns.Contains(this))
                {
                    Tester.ExecutedTestRuns.Add(this);
                }
    
                TesterId = Tester.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tester")
                    && (ChangeTracker.OriginalValues["Tester"] == Tester))
                {
                    ChangeTracker.OriginalValues.Remove("Tester");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tester", previousValue);
                }
                if (Tester != null && !Tester.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tester.StartTracking();
                }
            }
        }
    
        private void FixupHistoryChangeSet(HistoryChangeSet previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (HistoryChangeSet != null)
            {
                if (!HistoryChangeSet.TestRuns.Contains(this))
                {
                    HistoryChangeSet.TestRuns.Add(this);
                }
    
                ChangeSetId = HistoryChangeSet.ChangeSetId;
            }
            else if (!skipKeys)
            {
                ChangeSetId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HistoryChangeSet")
                    && (ChangeTracker.OriginalValues["HistoryChangeSet"] == HistoryChangeSet))
                {
                    ChangeTracker.OriginalValues.Remove("HistoryChangeSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HistoryChangeSet", previousValue);
                }
                if (HistoryChangeSet != null && !HistoryChangeSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    HistoryChangeSet.StartTracking();
                }
            }
        }
    
        private void FixupTestConfiguration(TestConfiguration previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestRuns.Contains(this))
            {
                previousValue.TestRuns.Remove(this);
            }
    
            if (TestConfiguration != null)
            {
                if (!TestConfiguration.TestRuns.Contains(this))
                {
                    TestConfiguration.TestRuns.Add(this);
                }
    
                TestConfigurationId = TestConfiguration.TestConfigurationId;
            }
            else if (!skipKeys)
            {
                TestConfigurationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestConfiguration")
                    && (ChangeTracker.OriginalValues["TestConfiguration"] == TestConfiguration))
                {
                    ChangeTracker.OriginalValues.Remove("TestConfiguration");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestConfiguration", previousValue);
                }
                if (TestConfiguration != null && !TestConfiguration.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestConfiguration.StartTracking();
                }
            }
        }
    
        private void FixupTestRunSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunStep item in e.NewItems)
                {
                    item.TestRun = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRunSteps", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestRun, this))
                    {
                        item.TestRun = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRunSteps", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
