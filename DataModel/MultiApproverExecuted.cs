//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(MultiApprover))]
    [KnownType(typeof(User))]
    public partial class MultiApproverExecuted: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MultiApproverExecutedId
        {
            get { return _multiApproverExecutedId; }
            set
            {
                if (_multiApproverExecutedId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MultiApproverExecutedId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _multiApproverExecutedId = value;
                    OnPropertyChanged("MultiApproverExecutedId");
                }
            }
        }
        private int _multiApproverExecutedId;
    
        [DataMember]
        public Nullable<int> MultiApproverId
        {
            get { return _multiApproverId; }
            set
            {
                if (_multiApproverId != value)
                {
                    ChangeTracker.RecordOriginalValue("MultiApproverId", _multiApproverId);
                    if (!IsDeserializing)
                    {
                        if (MultiApprover != null && MultiApprover.MultiApproverId != value)
                        {
                            MultiApprover = null;
                        }
                    }
                    _multiApproverId = value;
                    OnPropertyChanged("MultiApproverId");
                }
            }
        }
        private Nullable<int> _multiApproverId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public System.DateTime ApprovalDate
        {
            get { return _approvalDate; }
            set
            {
                if (_approvalDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalDate", _approvalDate);
                    _approvalDate = value;
                    OnPropertyChanged("ApprovalDate");
                }
            }
        }
        private System.DateTime _approvalDate;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public int ArtifactId
        {
            get { return _artifactId; }
            set
            {
                if (_artifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactId", _artifactId);
                    _artifactId = value;
                    OnPropertyChanged("ArtifactId");
                }
            }
        }
        private int _artifactId;
    
        [DataMember]
        public string Meaning
        {
            get { return _meaning; }
            set
            {
                if (_meaning != value)
                {
                    ChangeTracker.RecordOriginalValue("Meaning", _meaning);
                    _meaning = value;
                    OnPropertyChanged("Meaning");
                }
            }
        }
        private string _meaning;
    
        [DataMember]
        public string SignatureHash
        {
            get { return _signatureHash; }
            set
            {
                if (_signatureHash != value)
                {
                    ChangeTracker.RecordOriginalValue("SignatureHash", _signatureHash);
                    _signatureHash = value;
                    OnPropertyChanged("SignatureHash");
                }
            }
        }
        private string _signatureHash;
    
        [DataMember]
        public Nullable<int> WorkflowTransitionId
        {
            get { return _workflowTransitionId; }
            set
            {
                if (_workflowTransitionId != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkflowTransitionId", _workflowTransitionId);
                    _workflowTransitionId = value;
                    OnPropertyChanged("WorkflowTransitionId");
                }
            }
        }
        private Nullable<int> _workflowTransitionId;
    
        [DataMember]
        public bool IsCompleted
        {
            get { return _isCompleted; }
            set
            {
                if (_isCompleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsCompleted", _isCompleted);
                    _isCompleted = value;
                    OnPropertyChanged("IsCompleted");
                }
            }
        }
        private bool _isCompleted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public MultiApprover MultiApprover
        {
            get { return _multiApprover; }
            set
            {
                if (!ReferenceEquals(_multiApprover, value))
                {
                    var previousValue = _multiApprover;
                    _multiApprover = value;
                    FixupMultiApprover(previousValue);
                    OnNavigationPropertyChanged("MultiApprover");
                }
            }
        }
        private MultiApprover _multiApprover;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            MultiApprover = null;
            User = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MultiApproverExecutedChanges.Contains(this))
            {
                previousValue.MultiApproverExecutedChanges.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.MultiApproverExecutedChanges.Contains(this))
                {
                    ArtifactType.MultiApproverExecutedChanges.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupMultiApprover(MultiApprover previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExecutedApprovals.Contains(this))
            {
                previousValue.ExecutedApprovals.Remove(this);
            }
    
            if (MultiApprover != null)
            {
                if (!MultiApprover.ExecutedApprovals.Contains(this))
                {
                    MultiApprover.ExecutedApprovals.Add(this);
                }
    
                MultiApproverId = MultiApprover.MultiApproverId;
            }
            else if (!skipKeys)
            {
                MultiApproverId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MultiApprover")
                    && (ChangeTracker.OriginalValues["MultiApprover"] == MultiApprover))
                {
                    ChangeTracker.OriginalValues.Remove("MultiApprover");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MultiApprover", previousValue);
                }
                if (MultiApprover != null && !MultiApprover.ChangeTracker.ChangeTrackingEnabled)
                {
                    MultiApprover.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MultiApprovedExecutedChanges.Contains(this))
            {
                previousValue.MultiApprovedExecutedChanges.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.MultiApprovedExecutedChanges.Contains(this))
                {
                    User.MultiApprovedExecutedChanges.Add(this);
                }
    
                UserId = User.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }

        #endregion

    }
}
