//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactFieldType))]
    [KnownType(typeof(GlobalHistoryChangeset))]
    public partial class GlobalHistoryDetails: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long HistoryId
        {
            get { return _historyId; }
            set
            {
                if (_historyId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'HistoryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _historyId = value;
                    OnPropertyChanged("HistoryId");
                }
            }
        }
        private long _historyId;
    
        [DataMember]
        public long ChangesetId
        {
            get { return _changesetId; }
            set
            {
                if (_changesetId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangesetId", _changesetId);
                    if (!IsDeserializing)
                    {
                        if (Changeset != null && Changeset.ChangesetId != value)
                        {
                            Changeset = null;
                        }
                    }
                    _changesetId = value;
                    OnPropertyChanged("ChangesetId");
                }
            }
        }
        private long _changesetId;
    
        [DataMember]
        public string FieldName
        {
            get { return _fieldName; }
            set
            {
                if (_fieldName != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldName", _fieldName);
                    _fieldName = value;
                    OnPropertyChanged("FieldName");
                }
            }
        }
        private string _fieldName;
    
        [DataMember]
        public string FieldSummary
        {
            get { return _fieldSummary; }
            set
            {
                if (_fieldSummary != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldSummary", _fieldSummary);
                    _fieldSummary = value;
                    OnPropertyChanged("FieldSummary");
                }
            }
        }
        private string _fieldSummary;
    
        [DataMember]
        public string OldValue
        {
            get { return _oldValue; }
            set
            {
                if (_oldValue != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValue", _oldValue);
                    _oldValue = value;
                    OnPropertyChanged("OldValue");
                }
            }
        }
        private string _oldValue;
    
        [DataMember]
        public string NewValue
        {
            get { return _newValue; }
            set
            {
                if (_newValue != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValue", _newValue);
                    _newValue = value;
                    OnPropertyChanged("NewValue");
                }
            }
        }
        private string _newValue;
    
        [DataMember]
        public int FieldTypeId
        {
            get { return _fieldTypeId; }
            set
            {
                if (_fieldTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldTypeId", _fieldTypeId);
                    if (!IsDeserializing)
                    {
                        if (FieldType != null && FieldType.ArtifactFieldTypeId != value)
                        {
                            FieldType = null;
                        }
                    }
                    _fieldTypeId = value;
                    OnPropertyChanged("FieldTypeId");
                }
            }
        }
        private int _fieldTypeId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactFieldType FieldType
        {
            get { return _fieldType; }
            set
            {
                if (!ReferenceEquals(_fieldType, value))
                {
                    var previousValue = _fieldType;
                    _fieldType = value;
                    FixupFieldType(previousValue);
                    OnNavigationPropertyChanged("FieldType");
                }
            }
        }
        private ArtifactFieldType _fieldType;
    
        [DataMember]
        public GlobalHistoryChangeset Changeset
        {
            get { return _changeset; }
            set
            {
                if (!ReferenceEquals(_changeset, value))
                {
                    var previousValue = _changeset;
                    _changeset = value;
                    FixupChangeset(previousValue);
                    OnNavigationPropertyChanged("Changeset");
                }
            }
        }
        private GlobalHistoryChangeset _changeset;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            FieldType = null;
            Changeset = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupFieldType(ArtifactFieldType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_GLOBAL_HISTORY_DETAILS.Contains(this))
            {
                previousValue.TST_GLOBAL_HISTORY_DETAILS.Remove(this);
            }
    
            if (FieldType != null)
            {
                if (!FieldType.TST_GLOBAL_HISTORY_DETAILS.Contains(this))
                {
                    FieldType.TST_GLOBAL_HISTORY_DETAILS.Add(this);
                }
    
                FieldTypeId = FieldType.ArtifactFieldTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FieldType")
                    && (ChangeTracker.OriginalValues["FieldType"] == FieldType))
                {
                    ChangeTracker.OriginalValues.Remove("FieldType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FieldType", previousValue);
                }
                if (FieldType != null && !FieldType.ChangeTracker.ChangeTrackingEnabled)
                {
                    FieldType.StartTracking();
                }
            }
        }
    
        private void FixupChangeset(GlobalHistoryChangeset previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryDetails.Contains(this))
            {
                previousValue.HistoryDetails.Remove(this);
            }
    
            if (Changeset != null)
            {
                if (!Changeset.HistoryDetails.Contains(this))
                {
                    Changeset.HistoryDetails.Add(this);
                }
    
                ChangesetId = Changeset.ChangesetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Changeset")
                    && (ChangeTracker.OriginalValues["Changeset"] == Changeset))
                {
                    ChangeTracker.OriginalValues.Remove("Changeset");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Changeset", previousValue);
                }
                if (Changeset != null && !Changeset.ChangeTracker.ChangeTrackingEnabled)
                {
                    Changeset.StartTracking();
                }
            }
        }

        #endregion

    }
}
