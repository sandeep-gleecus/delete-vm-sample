//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class IncidentOpenClosedCount : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public bool IsOpenStatus
        {
            get { return _isOpenStatus; }
            set
            {
                if (_isOpenStatus != value)
                {
                    OnComplexPropertyChanging();
                    _isOpenStatus = value;
                    OnPropertyChanged("IsOpenStatus");
                }
            }
        }
        private bool _isOpenStatus;
    
        [DataMember]
        public int IncidentCount
        {
            get { return _incidentCount; }
            set
            {
                if (_incidentCount != value)
                {
                    OnComplexPropertyChanging();
                    _incidentCount = value;
                    OnPropertyChanged("IncidentCount");
                }
            }
        }
        private int _incidentCount;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, IncidentOpenClosedCount complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsOpenStatus", parentPropertyName), complexObject == null ? null : (object)complexObject.IsOpenStatus);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IncidentCount", parentPropertyName), complexObject == null ? null : (object)complexObject.IncidentCount);
        }

        #endregion

    }
}
