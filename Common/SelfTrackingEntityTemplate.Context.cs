//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

using Inflectra.SpiraTest.DataModel;
using Component = Inflectra.SpiraTest.DataModel.Component;


namespace Inflectra.SpiraTest.Common
{
    public partial class SpiraTestEntities : ObjectContext
    {
        public const string ConnectionString = "name=SpiraTestEntities";
        public const string ContainerName = "SpiraTestEntities";
    
        #region Constructors
    
        public SpiraTestEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public SpiraTestEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public SpiraTestEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Dashboard> Dashboards
        {
            get { return _dashboards  ?? (_dashboards = CreateObjectSet<Dashboard>("Dashboards")); }
        }
        private ObjectSet<Dashboard> _dashboards;
    
        public ObjectSet<DashboardGlobalPersonalization> DashboardGlobalPersonalizations
        {
            get { return _dashboardGlobalPersonalizations  ?? (_dashboardGlobalPersonalizations = CreateObjectSet<DashboardGlobalPersonalization>("DashboardGlobalPersonalizations")); }
        }
        private ObjectSet<DashboardGlobalPersonalization> _dashboardGlobalPersonalizations;
    
        public ObjectSet<DashboardUserPersonalization> DashboardUserPersonalizations
        {
            get { return _dashboardUserPersonalizations  ?? (_dashboardUserPersonalizations = CreateObjectSet<DashboardUserPersonalization>("DashboardUserPersonalizations")); }
        }
        private ObjectSet<DashboardUserPersonalization> _dashboardUserPersonalizations;
    
        public ObjectSet<GlobalSetting> GlobalSettings
        {
            get { return _globalSettings  ?? (_globalSettings = CreateObjectSet<GlobalSetting>("GlobalSettings")); }
        }
        private ObjectSet<GlobalSetting> _globalSettings;
    
        public ObjectSet<ProductType> ProductTypes
        {
            get { return _productTypes  ?? (_productTypes = CreateObjectSet<ProductType>("ProductTypes")); }
        }
        private ObjectSet<ProductType> _productTypes;
    
        public ObjectSet<Filetype> Filetypes
        {
            get { return _filetypes  ?? (_filetypes = CreateObjectSet<Filetype>("Filetypes")); }
        }
        private ObjectSet<Filetype> _filetypes;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<ArtifactView> ArtifactsView
        {
            get { return _artifactsView  ?? (_artifactsView = CreateObjectSet<ArtifactView>("ArtifactsView")); }
        }
        private ObjectSet<ArtifactView> _artifactsView;
    
        public ObjectSet<Build> Builds
        {
            get { return _builds  ?? (_builds = CreateObjectSet<Build>("Builds")); }
        }
        private ObjectSet<Build> _builds;
    
        public ObjectSet<BuildSourceCode> BuildSourceCodes
        {
            get { return _buildSourceCodes  ?? (_buildSourceCodes = CreateObjectSet<BuildSourceCode>("BuildSourceCodes")); }
        }
        private ObjectSet<BuildSourceCode> _buildSourceCodes;
    
        public ObjectSet<BuildStatus> BuildStatuses
        {
            get { return _buildStatuses  ?? (_buildStatuses = CreateObjectSet<BuildStatus>("BuildStatuses")); }
        }
        private ObjectSet<BuildStatus> _buildStatuses;
    
        public ObjectSet<UserCollection> UserCollections
        {
            get { return _userCollections  ?? (_userCollections = CreateObjectSet<UserCollection>("UserCollections")); }
        }
        private ObjectSet<UserCollection> _userCollections;
    
        public ObjectSet<UserCollectionEntry> UserCollectionEntries
        {
            get { return _userCollectionEntries  ?? (_userCollectionEntries = CreateObjectSet<UserCollectionEntry>("UserCollectionEntries")); }
        }
        private ObjectSet<UserCollectionEntry> _userCollectionEntries;
    
        public ObjectSet<UserProfile> UserProfiles
        {
            get { return _userProfiles  ?? (_userProfiles = CreateObjectSet<UserProfile>("UserProfiles")); }
        }
        private ObjectSet<UserProfile> _userProfiles;
    
        public ObjectSet<Project> Projects
        {
            get { return _projects  ?? (_projects = CreateObjectSet<Project>("Projects")); }
        }
        private ObjectSet<Project> _projects;
    
        public ObjectSet<ProjectUser> ProjectUsers
        {
            get { return _projectUsers  ?? (_projectUsers = CreateObjectSet<ProjectUser>("ProjectUsers")); }
        }
        private ObjectSet<ProjectUser> _projectUsers;
    
        public ObjectSet<Workflow> Workflows
        {
            get { return _workflows  ?? (_workflows = CreateObjectSet<Workflow>("Workflows")); }
        }
        private ObjectSet<Workflow> _workflows;
    
        public ObjectSet<WorkflowTransition> WorkflowTransitions
        {
            get { return _workflowTransitions  ?? (_workflowTransitions = CreateObjectSet<WorkflowTransition>("WorkflowTransitions")); }
        }
        private ObjectSet<WorkflowTransition> _workflowTransitions;
    
        public ObjectSet<WorkflowTransitionRole> WorkflowTransitionRoles
        {
            get { return _workflowTransitionRoles  ?? (_workflowTransitionRoles = CreateObjectSet<WorkflowTransitionRole>("WorkflowTransitionRoles")); }
        }
        private ObjectSet<WorkflowTransitionRole> _workflowTransitionRoles;
    
        public ObjectSet<ProjectRole> ProjectRoles
        {
            get { return _projectRoles  ?? (_projectRoles = CreateObjectSet<ProjectRole>("ProjectRoles")); }
        }
        private ObjectSet<ProjectRole> _projectRoles;
    
        public ObjectSet<ProjectUserView> ProjectUsersView
        {
            get { return _projectUsersView  ?? (_projectUsersView = CreateObjectSet<ProjectUserView>("ProjectUsersView")); }
        }
        private ObjectSet<ProjectUserView> _projectUsersView;
    
        public ObjectSet<ProjectCollection> ProjectCollections
        {
            get { return _projectCollections  ?? (_projectCollections = CreateObjectSet<ProjectCollection>("ProjectCollections")); }
        }
        private ObjectSet<ProjectCollection> _projectCollections;
    
        public ObjectSet<ProjectCollectionEntry> ProjectCollectionEntries
        {
            get { return _projectCollectionEntries  ?? (_projectCollectionEntries = CreateObjectSet<ProjectCollectionEntry>("ProjectCollectionEntries")); }
        }
        private ObjectSet<ProjectCollectionEntry> _projectCollectionEntries;
    
        public ObjectSet<ProjectGroup> ProjectGroups
        {
            get { return _projectGroups  ?? (_projectGroups = CreateObjectSet<ProjectGroup>("ProjectGroups")); }
        }
        private ObjectSet<ProjectGroup> _projectGroups;
    
        public ObjectSet<ProjectGroupRole> ProjectGroupRoles
        {
            get { return _projectGroupRoles  ?? (_projectGroupRoles = CreateObjectSet<ProjectGroupRole>("ProjectGroupRoles")); }
        }
        private ObjectSet<ProjectGroupRole> _projectGroupRoles;
    
        public ObjectSet<ProjectGroupUser> ProjectGroupUsers
        {
            get { return _projectGroupUsers  ?? (_projectGroupUsers = CreateObjectSet<ProjectGroupUser>("ProjectGroupUsers")); }
        }
        private ObjectSet<ProjectGroupUser> _projectGroupUsers;
    
        public ObjectSet<Event> Events
        {
            get { return _events  ?? (_events = CreateObjectSet<Event>("Events")); }
        }
        private ObjectSet<Event> _events;
    
        public ObjectSet<EventType> EventTypes
        {
            get { return _eventTypes  ?? (_eventTypes = CreateObjectSet<EventType>("EventTypes")); }
        }
        private ObjectSet<EventType> _eventTypes;
    
        public ObjectSet<ArtifactCustomProperty> ArtifactCustomProperties
        {
            get { return _artifactCustomProperties  ?? (_artifactCustomProperties = CreateObjectSet<ArtifactCustomProperty>("ArtifactCustomProperties")); }
        }
        private ObjectSet<ArtifactCustomProperty> _artifactCustomProperties;
    
        public ObjectSet<CustomProperty> CustomProperties
        {
            get { return _customProperties  ?? (_customProperties = CreateObjectSet<CustomProperty>("CustomProperties")); }
        }
        private ObjectSet<CustomProperty> _customProperties;
    
        public ObjectSet<CustomPropertyList> CustomPropertyLists
        {
            get { return _customPropertyLists  ?? (_customPropertyLists = CreateObjectSet<CustomPropertyList>("CustomPropertyLists")); }
        }
        private ObjectSet<CustomPropertyList> _customPropertyLists;
    
        public ObjectSet<CustomPropertyOption> CustomPropertyOptions
        {
            get { return _customPropertyOptions  ?? (_customPropertyOptions = CreateObjectSet<CustomPropertyOption>("CustomPropertyOptions")); }
        }
        private ObjectSet<CustomPropertyOption> _customPropertyOptions;
    
        public ObjectSet<CustomPropertyOptionValue> CustomPropertyOptionValues
        {
            get { return _customPropertyOptionValues  ?? (_customPropertyOptionValues = CreateObjectSet<CustomPropertyOptionValue>("CustomPropertyOptionValues")); }
        }
        private ObjectSet<CustomPropertyOptionValue> _customPropertyOptionValues;
    
        public ObjectSet<CustomPropertyType> CustomPropertyTypes
        {
            get { return _customPropertyTypes  ?? (_customPropertyTypes = CreateObjectSet<CustomPropertyType>("CustomPropertyTypes")); }
        }
        private ObjectSet<CustomPropertyType> _customPropertyTypes;
    
        public ObjectSet<CustomPropertyValue> CustomPropertyValues
        {
            get { return _customPropertyValues  ?? (_customPropertyValues = CreateObjectSet<CustomPropertyValue>("CustomPropertyValues")); }
        }
        private ObjectSet<CustomPropertyValue> _customPropertyValues;
    
        public ObjectSet<ArtifactType> ArtifactTypes
        {
            get { return _artifactTypes  ?? (_artifactTypes = CreateObjectSet<ArtifactType>("ArtifactTypes")); }
        }
        private ObjectSet<ArtifactType> _artifactTypes;
    
        public ObjectSet<UserArtifactField> UserArtifactFields
        {
            get { return _userArtifactFields  ?? (_userArtifactFields = CreateObjectSet<UserArtifactField>("UserArtifactFields")); }
        }
        private ObjectSet<UserArtifactField> _userArtifactFields;
    
        public ObjectSet<UserCustomProperty> UserCustomProperties
        {
            get { return _userCustomProperties  ?? (_userCustomProperties = CreateObjectSet<UserCustomProperty>("UserCustomProperties")); }
        }
        private ObjectSet<UserCustomProperty> _userCustomProperties;
    
        public ObjectSet<ArtifactField> ArtifactFields
        {
            get { return _artifactFields  ?? (_artifactFields = CreateObjectSet<ArtifactField>("ArtifactFields")); }
        }
        private ObjectSet<ArtifactField> _artifactFields;
    
        public ObjectSet<ArtifactFieldType> ArtifactFieldTypes
        {
            get { return _artifactFieldTypes  ?? (_artifactFieldTypes = CreateObjectSet<ArtifactFieldType>("ArtifactFieldTypes")); }
        }
        private ObjectSet<ArtifactFieldType> _artifactFieldTypes;

		public ObjectSet<TST_USER_ACTIVITY_LOG> UserActivityLogs
		{
			get { return _userActivityLogs ?? (_userActivityLogs = CreateObjectSet<TST_USER_ACTIVITY_LOG>("TST_USER_ACTIVITY_LOG")); }
		}
		private ObjectSet<TST_USER_ACTIVITY_LOG> _userActivityLogs;

		public ObjectSet<TST_ADMIN_SECTION> AdminSections
		{
			get { return _adminsections ?? (_adminsections = CreateObjectSet<TST_ADMIN_SECTION>("TST_ADMIN_SECTION")); }
		}
		private ObjectSet<TST_ADMIN_SECTION> _adminsections;

		public ObjectSet<TST_USER_HISTORY_CHANGESET> UserHistoryChangesets
		{
			get { return _userHistoryChangesets ?? (_userHistoryChangesets = CreateObjectSet<TST_USER_HISTORY_CHANGESET>("TST_ADMIN_USER_CHANGESET")); }
		}
		private ObjectSet<TST_USER_HISTORY_CHANGESET> _userHistoryChangesets;

		public ObjectSet<TST_ADMIN_HISTORY_CHANGESET> AdminHistoryChangesets
		{
			get { return _adminHistoryChangesets ?? (_adminHistoryChangesets = CreateObjectSet<TST_ADMIN_HISTORY_CHANGESET>("TST_ADMIN_HISTORY_CHANGESET")); }
		}
		private ObjectSet<TST_ADMIN_HISTORY_CHANGESET> _adminHistoryChangesets;

		public ObjectSet<TST_ADMIN_HISTORY_DETAILS> AdminHistoryDetails
		{
			get { return _adminHistoryDetails ?? (_adminHistoryDetails = CreateObjectSet<TST_ADMIN_HISTORY_DETAILS>("TST_ADMIN_HISTORY_DETAILS")); }
		}
		private ObjectSet<TST_ADMIN_HISTORY_DETAILS> _adminHistoryDetails;

		public ObjectSet<WorkflowCustomProperty> WorkflowCustomProperties
        {
            get { return _workflowCustomProperties  ?? (_workflowCustomProperties = CreateObjectSet<WorkflowCustomProperty>("WorkflowCustomProperties")); }
        }
        private ObjectSet<WorkflowCustomProperty> _workflowCustomProperties;
    
        public ObjectSet<WorkflowField> WorkflowFields
        {
            get { return _workflowFields  ?? (_workflowFields = CreateObjectSet<WorkflowField>("WorkflowFields")); }
        }
        private ObjectSet<WorkflowField> _workflowFields;
    
        public ObjectSet<WorkflowFieldState> WorkflowFieldStates
        {
            get { return _workflowFieldStates  ?? (_workflowFieldStates = CreateObjectSet<WorkflowFieldState>("WorkflowFieldStates")); }
        }
        private ObjectSet<WorkflowFieldState> _workflowFieldStates;
    
        public ObjectSet<WorkflowTransitionRoleType> WorkflowTransitionRoleTypes
        {
            get { return _workflowTransitionRoleTypes  ?? (_workflowTransitionRoleTypes = CreateObjectSet<WorkflowTransitionRoleType>("WorkflowTransitionRoleTypes")); }
        }
        private ObjectSet<WorkflowTransitionRoleType> _workflowTransitionRoleTypes;
    
        public ObjectSet<IncidentStatus> IncidentStati
        {
            get { return _incidentStati  ?? (_incidentStati = CreateObjectSet<IncidentStatus>("IncidentStati")); }
        }
        private ObjectSet<IncidentStatus> _incidentStati;
    
        public ObjectSet<IncidentType> IncidentTypes
        {
            get { return _incidentTypes  ?? (_incidentTypes = CreateObjectSet<IncidentType>("IncidentTypes")); }
        }
        private ObjectSet<IncidentType> _incidentTypes;
    
        public ObjectSet<Placeholder> Placeholders
        {
            get { return _placeholders  ?? (_placeholders = CreateObjectSet<Placeholder>("Placeholders")); }
        }
        private ObjectSet<Placeholder> _placeholders;
    
        public ObjectSet<Report> Reports
        {
            get { return _reports  ?? (_reports = CreateObjectSet<Report>("Reports")); }
        }
        private ObjectSet<Report> _reports;

		public ObjectSet<TST_REPORT_DOWNLOADABLE> ReportDownloadable
		{
			get { return _reportDownloadable ?? (_reportDownloadable = CreateObjectSet<TST_REPORT_DOWNLOADABLE>("TST_REPORT_DOWNLOADABLE")); }
		}
		private ObjectSet<TST_REPORT_DOWNLOADABLE> _reportDownloadable;

		public ObjectSet<ReportCategory> ReportCategories
        {
            get { return _reportCategories  ?? (_reportCategories = CreateObjectSet<ReportCategory>("ReportCategories")); }
        }
        private ObjectSet<ReportCategory> _reportCategories;
    
        public ObjectSet<ReportCustomSection> ReportCustomSections
        {
            get { return _reportCustomSections  ?? (_reportCustomSections = CreateObjectSet<ReportCustomSection>("ReportCustomSections")); }
        }
        private ObjectSet<ReportCustomSection> _reportCustomSections;
    
        public ObjectSet<ReportElement> ReportElements
        {
            get { return _reportElements  ?? (_reportElements = CreateObjectSet<ReportElement>("ReportElements")); }
        }
        private ObjectSet<ReportElement> _reportElements;
    
        public ObjectSet<ReportFormat> ReportFormats
        {
            get { return _reportFormats  ?? (_reportFormats = CreateObjectSet<ReportFormat>("ReportFormats")); }
        }
        private ObjectSet<ReportFormat> _reportFormats;
    
        public ObjectSet<SavedReport> SavedReports
        {
            get { return _savedReports  ?? (_savedReports = CreateObjectSet<SavedReport>("SavedReports")); }
        }
        private ObjectSet<SavedReport> _savedReports;
    
        public ObjectSet<ReportSection> ReportSections
        {
            get { return _reportSections  ?? (_reportSections = CreateObjectSet<ReportSection>("ReportSections")); }
        }
        private ObjectSet<ReportSection> _reportSections;
    
        public ObjectSet<SavedReportView> SavedReportsView
        {
            get { return _savedReportsView  ?? (_savedReportsView = CreateObjectSet<SavedReportView>("SavedReportsView")); }
        }
        private ObjectSet<SavedReportView> _savedReportsView;
    
        public ObjectSet<ReportSectionInstance> ReportSectionInstances
        {
            get { return _reportSectionInstances  ?? (_reportSectionInstances = CreateObjectSet<ReportSectionInstance>("ReportSectionInstances")); }
        }
        private ObjectSet<ReportSectionInstance> _reportSectionInstances;
    
        public ObjectSet<ReportGenerated> ReportGenerateds
        {
            get { return _reportGenerateds  ?? (_reportGenerateds = CreateObjectSet<ReportGenerated>("ReportGenerateds")); }
        }
        private ObjectSet<ReportGenerated> _reportGenerateds;
    
        public ObjectSet<R_Requirement> R_Requirements
        {
            get { return _r_Requirements  ?? (_r_Requirements = CreateObjectSet<R_Requirement>("R_Requirements")); }
        }
        private ObjectSet<R_Requirement> _r_Requirements;
    
        public ObjectSet<R_Attachment> R_Attachments
        {
            get { return _r_Attachments  ?? (_r_Attachments = CreateObjectSet<R_Attachment>("R_Attachments")); }
        }
        private ObjectSet<R_Attachment> _r_Attachments;
    
        public ObjectSet<R_AutomationHost> R_AutomationHosts
        {
            get { return _r_AutomationHosts  ?? (_r_AutomationHosts = CreateObjectSet<R_AutomationHost>("R_AutomationHosts")); }
        }
        private ObjectSet<R_AutomationHost> _r_AutomationHosts;
    
        public ObjectSet<R_Build> R_Builds
        {
            get { return _r_Builds  ?? (_r_Builds = CreateObjectSet<R_Build>("R_Builds")); }
        }
        private ObjectSet<R_Build> _r_Builds;
    
        public ObjectSet<R_Comment> R_Comments
        {
            get { return _r_Comments  ?? (_r_Comments = CreateObjectSet<R_Comment>("R_Comments")); }
        }
        private ObjectSet<R_Comment> _r_Comments;
    
        public ObjectSet<R_HistoryChangeSet> R_HistoryChangeSets
        {
            get { return _r_HistoryChangeSets  ?? (_r_HistoryChangeSets = CreateObjectSet<R_HistoryChangeSet>("R_HistoryChangeSets")); }
        }
        private ObjectSet<R_HistoryChangeSet> _r_HistoryChangeSets;
    
        public ObjectSet<R_HistoryDetail> R_HistoryDetails
        {
            get { return _r_HistoryDetails  ?? (_r_HistoryDetails = CreateObjectSet<R_HistoryDetail>("R_HistoryDetails")); }
        }
        private ObjectSet<R_HistoryDetail> _r_HistoryDetails;
    
        public ObjectSet<R_Incident> R_Incidents
        {
            get { return _r_Incidents  ?? (_r_Incidents = CreateObjectSet<R_Incident>("R_Incidents")); }
        }
        private ObjectSet<R_Incident> _r_Incidents;
    
        public ObjectSet<R_ProjectReleaseResource> R_ProjectReleaseResources
        {
            get { return _r_ProjectReleaseResources  ?? (_r_ProjectReleaseResources = CreateObjectSet<R_ProjectReleaseResource>("R_ProjectReleaseResources")); }
        }
        private ObjectSet<R_ProjectReleaseResource> _r_ProjectReleaseResources;
    
        public ObjectSet<R_ProjectGroup> R_ProjectGroups
        {
            get { return _r_ProjectGroups  ?? (_r_ProjectGroups = CreateObjectSet<R_ProjectGroup>("R_ProjectGroups")); }
        }
        private ObjectSet<R_ProjectGroup> _r_ProjectGroups;
    
        public ObjectSet<R_Project> R_Projects
        {
            get { return _r_Projects  ?? (_r_Projects = CreateObjectSet<R_Project>("R_Projects")); }
        }
        private ObjectSet<R_Project> _r_Projects;
    
        public ObjectSet<R_Release> R_Releases
        {
            get { return _r_Releases  ?? (_r_Releases = CreateObjectSet<R_Release>("R_Releases")); }
        }
        private ObjectSet<R_Release> _r_Releases;
    
        public ObjectSet<R_RequirementIncident> R_RequirementIncidents
        {
            get { return _r_RequirementIncidents  ?? (_r_RequirementIncidents = CreateObjectSet<R_RequirementIncident>("R_RequirementIncidents")); }
        }
        private ObjectSet<R_RequirementIncident> _r_RequirementIncidents;
    
        public ObjectSet<R_Task> R_Tasks
        {
            get { return _r_Tasks  ?? (_r_Tasks = CreateObjectSet<R_Task>("R_Tasks")); }
        }
        private ObjectSet<R_Task> _r_Tasks;
    
        public ObjectSet<R_TestCaseIncident> R_TestCaseIncidents
        {
            get { return _r_TestCaseIncidents  ?? (_r_TestCaseIncidents = CreateObjectSet<R_TestCaseIncident>("R_TestCaseIncidents")); }
        }
        private ObjectSet<R_TestCaseIncident> _r_TestCaseIncidents;
    
        public ObjectSet<R_TestCase> R_TestCases
        {
            get { return _r_TestCases  ?? (_r_TestCases = CreateObjectSet<R_TestCase>("R_TestCases")); }
        }
        private ObjectSet<R_TestCase> _r_TestCases;
    
        public ObjectSet<R_TestRun> R_TestRuns
        {
            get { return _r_TestRuns  ?? (_r_TestRuns = CreateObjectSet<R_TestRun>("R_TestRuns")); }
        }
        private ObjectSet<R_TestRun> _r_TestRuns;
    
        public ObjectSet<R_TestRunStep> R_TestRunSteps
        {
            get { return _r_TestRunSteps  ?? (_r_TestRunSteps = CreateObjectSet<R_TestRunStep>("R_TestRunSteps")); }
        }
        private ObjectSet<R_TestRunStep> _r_TestRunSteps;
    
        public ObjectSet<R_TestSet> R_TestSets
        {
            get { return _r_TestSets  ?? (_r_TestSets = CreateObjectSet<R_TestSet>("R_TestSets")); }
        }
        private ObjectSet<R_TestSet> _r_TestSets;
    
        public ObjectSet<R_TestStep> R_TestSteps
        {
            get { return _r_TestSteps  ?? (_r_TestSteps = CreateObjectSet<R_TestStep>("R_TestSteps")); }
        }
        private ObjectSet<R_TestStep> _r_TestSteps;
    
        public ObjectSet<R_User> R_Users
        {
            get { return _r_Users  ?? (_r_Users = CreateObjectSet<R_User>("R_Users")); }
        }
        private ObjectSet<R_User> _r_Users;
    
        public ObjectSet<Requirement> Requirements
        {
            get { return _requirements  ?? (_requirements = CreateObjectSet<Requirement>("Requirements")); }
        }
        private ObjectSet<Requirement> _requirements;
    
        public ObjectSet<TaskFolder> TaskFolders
        {
            get { return _taskFolders  ?? (_taskFolders = CreateObjectSet<TaskFolder>("TaskFolders")); }
        }
        private ObjectSet<TaskFolder> _taskFolders;
    
        public ObjectSet<RequirementStatus> RequirementStati
        {
            get { return _requirementStati  ?? (_requirementStati = CreateObjectSet<RequirementStatus>("RequirementStati")); }
        }
        private ObjectSet<RequirementStatus> _requirementStati;
    
        public ObjectSet<RequirementStep> RequirementSteps
        {
            get { return _requirementSteps  ?? (_requirementSteps = CreateObjectSet<RequirementStep>("RequirementSteps")); }
        }
        private ObjectSet<RequirementStep> _requirementSteps;
    
        public ObjectSet<RequirementType> RequirementTypes
        {
            get { return _requirementTypes  ?? (_requirementTypes = CreateObjectSet<RequirementType>("RequirementTypes")); }
        }
        private ObjectSet<RequirementType> _requirementTypes;
    
        public ObjectSet<RequirementUser> RequirementUsers
        {
            get { return _requirementUsers  ?? (_requirementUsers = CreateObjectSet<RequirementUser>("RequirementUsers")); }
        }
        private ObjectSet<RequirementUser> _requirementUsers;
    
        public ObjectSet<RequirementWorkflow> RequirementWorkflows
        {
            get { return _requirementWorkflows  ?? (_requirementWorkflows = CreateObjectSet<RequirementWorkflow>("RequirementWorkflows")); }
        }
        private ObjectSet<RequirementWorkflow> _requirementWorkflows;
    
        public ObjectSet<RequirementWorkflowCustomProperty> RequirementWorkflowCustomProperties
        {
            get { return _requirementWorkflowCustomProperties  ?? (_requirementWorkflowCustomProperties = CreateObjectSet<RequirementWorkflowCustomProperty>("RequirementWorkflowCustomProperties")); }
        }
        private ObjectSet<RequirementWorkflowCustomProperty> _requirementWorkflowCustomProperties;
    
        public ObjectSet<RequirementWorkflowField> RequirementWorkflowFields
        {
            get { return _requirementWorkflowFields  ?? (_requirementWorkflowFields = CreateObjectSet<RequirementWorkflowField>("RequirementWorkflowFields")); }
        }
        private ObjectSet<RequirementWorkflowField> _requirementWorkflowFields;
    
        public ObjectSet<RequirementWorkflowTransition> RequirementWorkflowTransitions
        {
            get { return _requirementWorkflowTransitions  ?? (_requirementWorkflowTransitions = CreateObjectSet<RequirementWorkflowTransition>("RequirementWorkflowTransitions")); }
        }
        private ObjectSet<RequirementWorkflowTransition> _requirementWorkflowTransitions;
    
        public ObjectSet<RequirementView> RequirementsView
        {
            get { return _requirementsView  ?? (_requirementsView = CreateObjectSet<RequirementView>("RequirementsView")); }
        }
        private ObjectSet<RequirementView> _requirementsView;
    
        public ObjectSet<Component> Components
        {
            get { return _components  ?? (_components = CreateObjectSet<Component>("Components")); }
        }
        private ObjectSet<Component> _components;
    
        public ObjectSet<RequirementWorkflowTransitionRole> RequirementWorkflowTransitionRoles
        {
            get { return _requirementWorkflowTransitionRoles  ?? (_requirementWorkflowTransitionRoles = CreateObjectSet<RequirementWorkflowTransitionRole>("RequirementWorkflowTransitionRoles")); }
        }
        private ObjectSet<RequirementWorkflowTransitionRole> _requirementWorkflowTransitionRoles;
    
        public ObjectSet<Importance> Importances
        {
            get { return _importances  ?? (_importances = CreateObjectSet<Importance>("Importances")); }
        }
        private ObjectSet<Importance> _importances;
    
        public ObjectSet<ProjectForUserView> ProjectForUsersView
        {
            get { return _projectForUsersView  ?? (_projectForUsersView = CreateObjectSet<ProjectForUserView>("ProjectForUsersView")); }
        }
        private ObjectSet<ProjectForUserView> _projectForUsersView;
    
        public ObjectSet<ProjectView> ProjectsView
        {
            get { return _projectsView  ?? (_projectsView = CreateObjectSet<ProjectView>("ProjectsView")); }
        }
        private ObjectSet<ProjectView> _projectsView;
    
        public ObjectSet<SavedFilter> SavedFilters
        {
            get { return _savedFilters  ?? (_savedFilters = CreateObjectSet<SavedFilter>("SavedFilters")); }
        }
        private ObjectSet<SavedFilter> _savedFilters;
    
        public ObjectSet<SavedFilterEntry> SavedFilterEntries
        {
            get { return _savedFilterEntries  ?? (_savedFilterEntries = CreateObjectSet<SavedFilterEntry>("SavedFilterEntries")); }
        }
        private ObjectSet<SavedFilterEntry> _savedFilterEntries;
    
        public ObjectSet<Task> Tasks
        {
            get { return _tasks  ?? (_tasks = CreateObjectSet<Task>("Tasks")); }
        }
        private ObjectSet<Task> _tasks;
    
        public ObjectSet<TaskPriority> TaskPriorities
        {
            get { return _taskPriorities  ?? (_taskPriorities = CreateObjectSet<TaskPriority>("TaskPriorities")); }
        }
        private ObjectSet<TaskPriority> _taskPriorities;
    
        public ObjectSet<TaskStatus> TaskStati
        {
            get { return _taskStati  ?? (_taskStati = CreateObjectSet<TaskStatus>("TaskStati")); }
        }
        private ObjectSet<TaskStatus> _taskStati;
    
        public ObjectSet<TaskType> TaskTypes
        {
            get { return _taskTypes  ?? (_taskTypes = CreateObjectSet<TaskType>("TaskTypes")); }
        }
        private ObjectSet<TaskType> _taskTypes;
    
        public ObjectSet<TaskWorkflow> TaskWorkflows
        {
            get { return _taskWorkflows  ?? (_taskWorkflows = CreateObjectSet<TaskWorkflow>("TaskWorkflows")); }
        }
        private ObjectSet<TaskWorkflow> _taskWorkflows;
    
        public ObjectSet<TaskWorkflowCustomProperty> TaskWorkflowCustomProperties
        {
            get { return _taskWorkflowCustomProperties  ?? (_taskWorkflowCustomProperties = CreateObjectSet<TaskWorkflowCustomProperty>("TaskWorkflowCustomProperties")); }
        }
        private ObjectSet<TaskWorkflowCustomProperty> _taskWorkflowCustomProperties;
    
        public ObjectSet<TaskWorkflowField> TaskWorkflowFields
        {
            get { return _taskWorkflowFields  ?? (_taskWorkflowFields = CreateObjectSet<TaskWorkflowField>("TaskWorkflowFields")); }
        }
        private ObjectSet<TaskWorkflowField> _taskWorkflowFields;
    
        public ObjectSet<TaskWorkflowTransition> TaskWorkflowTransitions
        {
            get { return _taskWorkflowTransitions  ?? (_taskWorkflowTransitions = CreateObjectSet<TaskWorkflowTransition>("TaskWorkflowTransitions")); }
        }
        private ObjectSet<TaskWorkflowTransition> _taskWorkflowTransitions;
    
        public ObjectSet<TaskWorkflowTransitionRole> TaskWorkflowTransitionRoles
        {
            get { return _taskWorkflowTransitionRoles  ?? (_taskWorkflowTransitionRoles = CreateObjectSet<TaskWorkflowTransitionRole>("TaskWorkflowTransitionRoles")); }
        }
        private ObjectSet<TaskWorkflowTransitionRole> _taskWorkflowTransitionRoles;
    
        public ObjectSet<TaskView> TasksView
        {
            get { return _tasksView  ?? (_tasksView = CreateObjectSet<TaskView>("TasksView")); }
        }
        private ObjectSet<TaskView> _tasksView;
    
        public ObjectSet<ProjectTaskProgressEntryView> ProjectTaskProgressEntriesView
        {
            get { return _projectTaskProgressEntriesView  ?? (_projectTaskProgressEntriesView = CreateObjectSet<ProjectTaskProgressEntryView>("ProjectTaskProgressEntriesView")); }
        }
        private ObjectSet<ProjectTaskProgressEntryView> _projectTaskProgressEntriesView;
    
        public ObjectSet<TaskFolderHierarchyView> TaskFoldersHierarchyView
        {
            get { return _taskFoldersHierarchyView  ?? (_taskFoldersHierarchyView = CreateObjectSet<TaskFolderHierarchyView>("TaskFoldersHierarchyView")); }
        }
        private ObjectSet<TaskFolderHierarchyView> _taskFoldersHierarchyView;
    
        public ObjectSet<Message> Messages
        {
            get { return _messages  ?? (_messages = CreateObjectSet<Message>("Messages")); }
        }
        private ObjectSet<Message> _messages;
    
        public ObjectSet<R_CustomListValue> R_CustomListValues
        {
            get { return _r_CustomListValues  ?? (_r_CustomListValues = CreateObjectSet<R_CustomListValue>("R_CustomListValues")); }
        }
        private ObjectSet<R_CustomListValue> _r_CustomListValues;
    
        public ObjectSet<R_CustomList> R_CustomLists
        {
            get { return _r_CustomLists  ?? (_r_CustomLists = CreateObjectSet<R_CustomList>("R_CustomLists")); }
        }
        private ObjectSet<R_CustomList> _r_CustomLists;
    
        public ObjectSet<R_CustomPropertyDefinition> R_CustomPropertyDefinitions
        {
            get { return _r_CustomPropertyDefinitions  ?? (_r_CustomPropertyDefinitions = CreateObjectSet<R_CustomPropertyDefinition>("R_CustomPropertyDefinitions")); }
        }
        private ObjectSet<R_CustomPropertyDefinition> _r_CustomPropertyDefinitions;
    
        public ObjectSet<R_ReleaseTestCase> R_ReleaseTestCases
        {
            get { return _r_ReleaseTestCases  ?? (_r_ReleaseTestCases = CreateObjectSet<R_ReleaseTestCase>("R_ReleaseTestCases")); }
        }
        private ObjectSet<R_ReleaseTestCase> _r_ReleaseTestCases;
    
        public ObjectSet<R_RequirementTestCase> R_RequirementTestCases
        {
            get { return _r_RequirementTestCases  ?? (_r_RequirementTestCases = CreateObjectSet<R_RequirementTestCase>("R_RequirementTestCases")); }
        }
        private ObjectSet<R_RequirementTestCase> _r_RequirementTestCases;
    
        public ObjectSet<R_TestSetTestCase> R_TestSetTestCases
        {
            get { return _r_TestSetTestCases  ?? (_r_TestSetTestCases = CreateObjectSet<R_TestSetTestCase>("R_TestSetTestCases")); }
        }
        private ObjectSet<R_TestSetTestCase> _r_TestSetTestCases;
    
        public ObjectSet<TaraVaultProject> TaraVaultProjects
        {
            get { return _taraVaultProjects  ?? (_taraVaultProjects = CreateObjectSet<TaraVaultProject>("TaraVaultProjects")); }
        }
        private ObjectSet<TaraVaultProject> _taraVaultProjects;
    
        public ObjectSet<TaraVaultUser> TaraVaultUsers
        {
            get { return _taraVaultUsers  ?? (_taraVaultUsers = CreateObjectSet<TaraVaultUser>("TaraVaultUsers")); }
        }
        private ObjectSet<TaraVaultUser> _taraVaultUsers;
    
        public ObjectSet<Incident> Incidents
        {
            get { return _incidents  ?? (_incidents = CreateObjectSet<Incident>("Incidents")); }
        }
        private ObjectSet<Incident> _incidents;
    
        public ObjectSet<IncidentPriority> IncidentPriorities
        {
            get { return _incidentPriorities  ?? (_incidentPriorities = CreateObjectSet<IncidentPriority>("IncidentPriorities")); }
        }
        private ObjectSet<IncidentPriority> _incidentPriorities;
    
        public ObjectSet<IncidentResolution> IncidentResolutions
        {
            get { return _incidentResolutions  ?? (_incidentResolutions = CreateObjectSet<IncidentResolution>("IncidentResolutions")); }
        }
        private ObjectSet<IncidentResolution> _incidentResolutions;
    
        public ObjectSet<IncidentSeverity> IncidentSeverities
        {
            get { return _incidentSeverities  ?? (_incidentSeverities = CreateObjectSet<IncidentSeverity>("IncidentSeverities")); }
        }
        private ObjectSet<IncidentSeverity> _incidentSeverities;
    
        public ObjectSet<IncidentView> IncidentsView
        {
            get { return _incidentsView  ?? (_incidentsView = CreateObjectSet<IncidentView>("IncidentsView")); }
        }
        private ObjectSet<IncidentView> _incidentsView;
    
        public ObjectSet<TaraVaultType> TaraVaultTypes
        {
            get { return _taraVaultTypes  ?? (_taraVaultTypes = CreateObjectSet<TaraVaultType>("TaraVaultTypes")); }
        }
        private ObjectSet<TaraVaultType> _taraVaultTypes;
    
        public ObjectSet<TestCaseIncidentView> TestCaseIncidentsView
        {
            get { return _testCaseIncidentsView  ?? (_testCaseIncidentsView = CreateObjectSet<TestCaseIncidentView>("TestCaseIncidentsView")); }
        }
        private ObjectSet<TestCaseIncidentView> _testCaseIncidentsView;
    
        public ObjectSet<TestRunIncidentView> TestRunIncidentsView
        {
            get { return _testRunIncidentsView  ?? (_testRunIncidentsView = CreateObjectSet<TestRunIncidentView>("TestRunIncidentsView")); }
        }
        private ObjectSet<TestRunIncidentView> _testRunIncidentsView;
    
        public ObjectSet<TestSetIncidentView> TestSetIncidentsView
        {
            get { return _testSetIncidentsView  ?? (_testSetIncidentsView = CreateObjectSet<TestSetIncidentView>("TestSetIncidentsView")); }
        }
        private ObjectSet<TestSetIncidentView> _testSetIncidentsView;
    
        public ObjectSet<TestStepIncidentView> TestStepIncidentsView
        {
            get { return _testStepIncidentsView  ?? (_testStepIncidentsView = CreateObjectSet<TestStepIncidentView>("TestStepIncidentsView")); }
        }
        private ObjectSet<TestStepIncidentView> _testStepIncidentsView;
    
        public ObjectSet<ArtifactSourceCodeFile> ArtifactSourceCodeFiles
        {
            get { return _artifactSourceCodeFiles  ?? (_artifactSourceCodeFiles = CreateObjectSet<ArtifactSourceCodeFile>("ArtifactSourceCodeFiles")); }
        }
        private ObjectSet<ArtifactSourceCodeFile> _artifactSourceCodeFiles;
    
        public ObjectSet<ArtifactSourceCodeRevision> ArtifactSourceCodeRevisions
        {
            get { return _artifactSourceCodeRevisions  ?? (_artifactSourceCodeRevisions = CreateObjectSet<ArtifactSourceCodeRevision>("ArtifactSourceCodeRevisions")); }
        }
        private ObjectSet<ArtifactSourceCodeRevision> _artifactSourceCodeRevisions;
    
        public ObjectSet<VersionControlProject> VersionControlProjects
        {
            get { return _versionControlProjects  ?? (_versionControlProjects = CreateObjectSet<VersionControlProject>("VersionControlProjects")); }
        }
        private ObjectSet<VersionControlProject> _versionControlProjects;
    
        public ObjectSet<VersionControlSystem> VersionControlSystems
        {
            get { return _versionControlSystems  ?? (_versionControlSystems = CreateObjectSet<VersionControlSystem>("VersionControlSystems")); }
        }
        private ObjectSet<VersionControlSystem> _versionControlSystems;
    
        public ObjectSet<ArtifactLink> ArtifactLinks
        {
            get { return _artifactLinks  ?? (_artifactLinks = CreateObjectSet<ArtifactLink>("ArtifactLinks")); }
        }
        private ObjectSet<ArtifactLink> _artifactLinks;
    
        public ObjectSet<ArtifactLinkType> ArtifactLinkTypes
        {
            get { return _artifactLinkTypes  ?? (_artifactLinkTypes = CreateObjectSet<ArtifactLinkType>("ArtifactLinkTypes")); }
        }
        private ObjectSet<ArtifactLinkType> _artifactLinkTypes;
    
        public ObjectSet<ArtifactAttachmentView> ArtifactAttachmentsView
        {
            get { return _artifactAttachmentsView  ?? (_artifactAttachmentsView = CreateObjectSet<ArtifactAttachmentView>("ArtifactAttachmentsView")); }
        }
        private ObjectSet<ArtifactAttachmentView> _artifactAttachmentsView;
    
        public ObjectSet<ArtifactLinkView> ArtifactLinksView
        {
            get { return _artifactLinksView  ?? (_artifactLinksView = CreateObjectSet<ArtifactLinkView>("ArtifactLinksView")); }
        }
        private ObjectSet<ArtifactLinkView> _artifactLinksView;
    
        public ObjectSet<RequirementIncidentView> RequirementIncidentsView
        {
            get { return _requirementIncidentsView  ?? (_requirementIncidentsView = CreateObjectSet<RequirementIncidentView>("RequirementIncidentsView")); }
        }
        private ObjectSet<RequirementIncidentView> _requirementIncidentsView;
    
        public ObjectSet<BuildView> BuildsView
        {
            get { return _buildsView  ?? (_buildsView = CreateObjectSet<BuildView>("BuildsView")); }
        }
        private ObjectSet<BuildView> _buildsView;
    
        public ObjectSet<TestCaseParameter> TestCaseParameters
        {
            get { return _testCaseParameters  ?? (_testCaseParameters = CreateObjectSet<TestCaseParameter>("TestCaseParameters")); }
        }
        private ObjectSet<TestCaseParameter> _testCaseParameters;
    
        public ObjectSet<DataTools_Release> DataTools_Releases
        {
            get { return _dataTools_Releases  ?? (_dataTools_Releases = CreateObjectSet<DataTools_Release>("DataTools_Releases")); }
        }
        private ObjectSet<DataTools_Release> _dataTools_Releases;
    
        public ObjectSet<DataTools_Requirement> DataTools_Requirements
        {
            get { return _dataTools_Requirements  ?? (_dataTools_Requirements = CreateObjectSet<DataTools_Requirement>("DataTools_Requirements")); }
        }
        private ObjectSet<DataTools_Requirement> _dataTools_Requirements;
    
        public ObjectSet<ProjectResourceView> ProjectResourcesView
        {
            get { return _projectResourcesView  ?? (_projectResourcesView = CreateObjectSet<ProjectResourceView>("ProjectResourcesView")); }
        }
        private ObjectSet<ProjectResourceView> _projectResourcesView;
    
        public ObjectSet<Session> Sessions
        {
            get { return _sessions  ?? (_sessions = CreateObjectSet<Session>("Sessions")); }
        }
        private ObjectSet<Session> _sessions;
    
        public ObjectSet<ArtifactAttachment> ArtifactAttachments
        {
            get { return _artifactAttachments  ?? (_artifactAttachments = CreateObjectSet<ArtifactAttachment>("ArtifactAttachments")); }
        }
        private ObjectSet<ArtifactAttachment> _artifactAttachments;
    
        public ObjectSet<Attachment> Attachments
        {
            get { return _attachments  ?? (_attachments = CreateObjectSet<Attachment>("Attachments")); }
        }
        private ObjectSet<Attachment> _attachments;
    
        public ObjectSet<AttachmentType> AttachmentTypes
        {
            get { return _attachmentTypes  ?? (_attachmentTypes = CreateObjectSet<AttachmentType>("AttachmentTypes")); }
        }
        private ObjectSet<AttachmentType> _attachmentTypes;
    
        public ObjectSet<AttachmentVersion> AttachmentVersions
        {
            get { return _attachmentVersions  ?? (_attachmentVersions = CreateObjectSet<AttachmentVersion>("AttachmentVersions")); }
        }
        private ObjectSet<AttachmentVersion> _attachmentVersions;
    
        public ObjectSet<ProjectAttachment> ProjectAttachments
        {
            get { return _projectAttachments  ?? (_projectAttachments = CreateObjectSet<ProjectAttachment>("ProjectAttachments")); }
        }
        private ObjectSet<ProjectAttachment> _projectAttachments;
    
        public ObjectSet<ProjectAttachmentFolder> ProjectAttachmentFolders
        {
            get { return _projectAttachmentFolders  ?? (_projectAttachmentFolders = CreateObjectSet<ProjectAttachmentFolder>("ProjectAttachmentFolders")); }
        }
        private ObjectSet<ProjectAttachmentFolder> _projectAttachmentFolders;
    
        public ObjectSet<ProjectAttachmentView> ProjectAttachmentsView
        {
            get { return _projectAttachmentsView  ?? (_projectAttachmentsView = CreateObjectSet<ProjectAttachmentView>("ProjectAttachmentsView")); }
        }
        private ObjectSet<ProjectAttachmentView> _projectAttachmentsView;
    
        public ObjectSet<ProjectAttachmentFolderHierarchyView> ProjectAttachmentFoldersHierarchyView
        {
            get { return _projectAttachmentFoldersHierarchyView  ?? (_projectAttachmentFoldersHierarchyView = CreateObjectSet<ProjectAttachmentFolderHierarchyView>("ProjectAttachmentFoldersHierarchyView")); }
        }
        private ObjectSet<ProjectAttachmentFolderHierarchyView> _projectAttachmentFoldersHierarchyView;
    
        public ObjectSet<AttachmentVersionView> AttachmentVersionsView
        {
            get { return _attachmentVersionsView  ?? (_attachmentVersionsView = CreateObjectSet<AttachmentVersionView>("AttachmentVersionsView")); }
        }
        private ObjectSet<AttachmentVersionView> _attachmentVersionsView;
    
        public ObjectSet<ReleaseDiscussion> ReleaseDiscussions
        {
            get { return _releaseDiscussions  ?? (_releaseDiscussions = CreateObjectSet<ReleaseDiscussion>("ReleaseDiscussions")); }
        }
        private ObjectSet<ReleaseDiscussion> _releaseDiscussions;
    
        public ObjectSet<RequirementDiscussion> RequirementDiscussions
        {
            get { return _requirementDiscussions  ?? (_requirementDiscussions = CreateObjectSet<RequirementDiscussion>("RequirementDiscussions")); }
        }
        private ObjectSet<RequirementDiscussion> _requirementDiscussions;
    
        public ObjectSet<TaskDiscussion> TaskDiscussions
        {
            get { return _taskDiscussions  ?? (_taskDiscussions = CreateObjectSet<TaskDiscussion>("TaskDiscussions")); }
        }
        private ObjectSet<TaskDiscussion> _taskDiscussions;
    
        public ObjectSet<TestCaseDiscussion> TestCaseDiscussions
        {
            get { return _testCaseDiscussions  ?? (_testCaseDiscussions = CreateObjectSet<TestCaseDiscussion>("TestCaseDiscussions")); }
        }
        private ObjectSet<TestCaseDiscussion> _testCaseDiscussions;
    
        public ObjectSet<TestSetDiscussion> TestSetDiscussions
        {
            get { return _testSetDiscussions  ?? (_testSetDiscussions = CreateObjectSet<TestSetDiscussion>("TestSetDiscussions")); }
        }
        private ObjectSet<TestSetDiscussion> _testSetDiscussions;
    
        public ObjectSet<HistoryChangeSet> HistoryChangeSets
        {
            get { return _historyChangeSets  ?? (_historyChangeSets = CreateObjectSet<HistoryChangeSet>("HistoryChangeSets")); }
        }
        private ObjectSet<HistoryChangeSet> _historyChangeSets;
    
        public ObjectSet<HistoryChangeSetType> HistoryChangeSetTypes
        {
            get { return _historyChangeSetTypes  ?? (_historyChangeSetTypes = CreateObjectSet<HistoryChangeSetType>("HistoryChangeSetTypes")); }
        }
        private ObjectSet<HistoryChangeSetType> _historyChangeSetTypes;
    
        public ObjectSet<HistoryDetail> HistoryDetails
        {
            get { return _historyDetails  ?? (_historyDetails = CreateObjectSet<HistoryDetail>("HistoryDetails")); }
        }
        private ObjectSet<HistoryDetail> _historyDetails;
    
        public ObjectSet<Permission> Permissions
        {
            get { return _permissions  ?? (_permissions = CreateObjectSet<Permission>("Permissions")); }
        }
        private ObjectSet<Permission> _permissions;
    
        public ObjectSet<ProjectRolePermission> ProjectRolePermissions
        {
            get { return _projectRolePermissions  ?? (_projectRolePermissions = CreateObjectSet<ProjectRolePermission>("ProjectRolePermissions")); }
        }
        private ObjectSet<ProjectRolePermission> _projectRolePermissions;

		public ObjectSet<VW_ADMINHISTORYCHANGE_LIST> AdminHistoryChangesView
		{
			get { return _adminHistoryChangesView ?? (_adminHistoryChangesView = CreateObjectSet<VW_ADMINHISTORYCHANGE_LIST>("VW_ADMINHISTORYCHANGE_LIST")); }
		}
		private ObjectSet<VW_ADMINHISTORYCHANGE_LIST> _adminHistoryChangesView;

		public ObjectSet<VW_USERHISTORYCHANGE_LIST> UserHistoryChangesView
		{
			get { return _userHistoryChangesView ?? (_userHistoryChangesView = CreateObjectSet<VW_USERHISTORYCHANGE_LIST>("VW_USERHISTORYCHANGE_LIST")); }
		}
		private ObjectSet<VW_USERHISTORYCHANGE_LIST> _userHistoryChangesView;
		public ObjectSet<VW_OLD_HISTORY_CHANGE_LIST> OldHistory_ChangeSetsView
		{
			get { return _oldHistory_ChangeSetsView ?? (_oldHistory_ChangeSetsView = CreateObjectSet<VW_OLD_HISTORY_CHANGE_LIST>("VW_OLD_HISTORY_CHANGE_LIST")); }
		}
		private ObjectSet<VW_OLD_HISTORY_CHANGE_LIST> _oldHistory_ChangeSetsView;
		
		public ObjectSet<VW_OLD_HISTORY_LIST> OldHistoryListView
		{
			get { return _oldHistoryListView ?? (_oldHistoryListView = CreateObjectSet<VW_OLD_HISTORY_LIST>("VW_OLD_HISTORY_LIST")); }
		}
		private ObjectSet<VW_OLD_HISTORY_LIST> _oldHistoryListView;

		public ObjectSet<VW_OLD_HISTORY_CHANGESET_NET_CHANGES> OldHistoryChangesetNetView
		{
			get { return _oldHistoryChangesetNetView ?? (_oldHistoryChangesetNetView = CreateObjectSet<VW_OLD_HISTORY_CHANGESET_NET_CHANGES>("VW_OLD_HISTORY_CHANGESET_NET_CHANGES")); }
		}
		private ObjectSet<VW_OLD_HISTORY_CHANGESET_NET_CHANGES> _oldHistoryChangesetNetView;

		public ObjectSet<HistoryChangeView> HistoryChangesView
        {
            get { return _historyChangesView  ?? (_historyChangesView = CreateObjectSet<HistoryChangeView>("HistoryChangesView")); }
        }
        private ObjectSet<HistoryChangeView> _historyChangesView;
    
        public ObjectSet<HistoryChangeSetView> HistoryChangeSetsView
        {
            get { return _historyChangeSetsView  ?? (_historyChangeSetsView = CreateObjectSet<HistoryChangeSetView>("HistoryChangeSetsView")); }
        }
        private ObjectSet<HistoryChangeSetView> _historyChangeSetsView;
    
        public ObjectSet<TestStep> TestSteps
        {
            get { return _testSteps  ?? (_testSteps = CreateObjectSet<TestStep>("TestSteps")); }
        }
        private ObjectSet<TestStep> _testSteps;
    
        public ObjectSet<Release> Releases
        {
            get { return _releases  ?? (_releases = CreateObjectSet<Release>("Releases")); }
        }
        private ObjectSet<Release> _releases;
    
        public ObjectSet<ReleaseStatus> ReleaseStati
        {
            get { return _releaseStati  ?? (_releaseStati = CreateObjectSet<ReleaseStatus>("ReleaseStati")); }
        }
        private ObjectSet<ReleaseStatus> _releaseStati;
    
        public ObjectSet<ReleaseType> ReleaseTypes
        {
            get { return _releaseTypes  ?? (_releaseTypes = CreateObjectSet<ReleaseType>("ReleaseTypes")); }
        }
        private ObjectSet<ReleaseType> _releaseTypes;
    
        public ObjectSet<ReleaseUser> ReleaseUsers
        {
            get { return _releaseUsers  ?? (_releaseUsers = CreateObjectSet<ReleaseUser>("ReleaseUsers")); }
        }
        private ObjectSet<ReleaseUser> _releaseUsers;
    
        public ObjectSet<ReleaseWorkflow> ReleaseWorkflows
        {
            get { return _releaseWorkflows  ?? (_releaseWorkflows = CreateObjectSet<ReleaseWorkflow>("ReleaseWorkflows")); }
        }
        private ObjectSet<ReleaseWorkflow> _releaseWorkflows;
    
        public ObjectSet<ReleaseWorkflowCustomProperty> ReleaseWorkflowCustomProperties
        {
            get { return _releaseWorkflowCustomProperties  ?? (_releaseWorkflowCustomProperties = CreateObjectSet<ReleaseWorkflowCustomProperty>("ReleaseWorkflowCustomProperties")); }
        }
        private ObjectSet<ReleaseWorkflowCustomProperty> _releaseWorkflowCustomProperties;
    
        public ObjectSet<ReleaseWorkflowField> ReleaseWorkflowFields
        {
            get { return _releaseWorkflowFields  ?? (_releaseWorkflowFields = CreateObjectSet<ReleaseWorkflowField>("ReleaseWorkflowFields")); }
        }
        private ObjectSet<ReleaseWorkflowField> _releaseWorkflowFields;
    
        public ObjectSet<ReleaseWorkflowTransition> ReleaseWorkflowTransitions
        {
            get { return _releaseWorkflowTransitions  ?? (_releaseWorkflowTransitions = CreateObjectSet<ReleaseWorkflowTransition>("ReleaseWorkflowTransitions")); }
        }
        private ObjectSet<ReleaseWorkflowTransition> _releaseWorkflowTransitions;
    
        public ObjectSet<ReleaseWorkflowTransitionRole> ReleaseWorkflowTransitionRoles
        {
            get { return _releaseWorkflowTransitionRoles  ?? (_releaseWorkflowTransitionRoles = CreateObjectSet<ReleaseWorkflowTransitionRole>("ReleaseWorkflowTransitionRoles")); }
        }
        private ObjectSet<ReleaseWorkflowTransitionRole> _releaseWorkflowTransitionRoles;
    
        public ObjectSet<ReleaseView> ReleasesView
        {
            get { return _releasesView  ?? (_releasesView = CreateObjectSet<ReleaseView>("ReleasesView")); }
        }
        private ObjectSet<ReleaseView> _releasesView;
    
        public ObjectSet<AutomationEngine> AutomationEngines
        {
            get { return _automationEngines  ?? (_automationEngines = CreateObjectSet<AutomationEngine>("AutomationEngines")); }
        }
        private ObjectSet<AutomationEngine> _automationEngines;
    
        public ObjectSet<AutomationHost> AutomationHosts
        {
            get { return _automationHosts  ?? (_automationHosts = CreateObjectSet<AutomationHost>("AutomationHosts")); }
        }
        private ObjectSet<AutomationHost> _automationHosts;
    
        public ObjectSet<TestCaseStatus> TestCaseStati
        {
            get { return _testCaseStati  ?? (_testCaseStati = CreateObjectSet<TestCaseStatus>("TestCaseStati")); }
        }
        private ObjectSet<TestCaseStatus> _testCaseStati;
    
        public ObjectSet<TestCaseType> TestCaseTypes
        {
            get { return _testCaseTypes  ?? (_testCaseTypes = CreateObjectSet<TestCaseType>("TestCaseTypes")); }
        }
        private ObjectSet<TestCaseType> _testCaseTypes;
    
        public ObjectSet<TestCaseWorkflow> TestCaseWorkflows
        {
            get { return _testCaseWorkflows  ?? (_testCaseWorkflows = CreateObjectSet<TestCaseWorkflow>("TestCaseWorkflows")); }
        }
        private ObjectSet<TestCaseWorkflow> _testCaseWorkflows;
    
        public ObjectSet<TestCaseWorkflowCustomProperty> TestCaseWorkflowCustomProperties
        {
            get { return _testCaseWorkflowCustomProperties  ?? (_testCaseWorkflowCustomProperties = CreateObjectSet<TestCaseWorkflowCustomProperty>("TestCaseWorkflowCustomProperties")); }
        }
        private ObjectSet<TestCaseWorkflowCustomProperty> _testCaseWorkflowCustomProperties;
    
        public ObjectSet<TestCaseWorkflowField> TestCaseWorkflowFields
        {
            get { return _testCaseWorkflowFields  ?? (_testCaseWorkflowFields = CreateObjectSet<TestCaseWorkflowField>("TestCaseWorkflowFields")); }
        }
        private ObjectSet<TestCaseWorkflowField> _testCaseWorkflowFields;
    
        public ObjectSet<TestCaseWorkflowTransition> TestCaseWorkflowTransitions
        {
            get { return _testCaseWorkflowTransitions  ?? (_testCaseWorkflowTransitions = CreateObjectSet<TestCaseWorkflowTransition>("TestCaseWorkflowTransitions")); }
        }
        private ObjectSet<TestCaseWorkflowTransition> _testCaseWorkflowTransitions;
    
        public ObjectSet<TestCaseWorkflowTransitionRole> TestCaseWorkflowTransitionRoles
        {
            get { return _testCaseWorkflowTransitionRoles  ?? (_testCaseWorkflowTransitionRoles = CreateObjectSet<TestCaseWorkflowTransitionRole>("TestCaseWorkflowTransitionRoles")); }
        }
        private ObjectSet<TestCaseWorkflowTransitionRole> _testCaseWorkflowTransitionRoles;
    
        public ObjectSet<ExecutionStatus> ExecutionStati
        {
            get { return _executionStati  ?? (_executionStati = CreateObjectSet<ExecutionStatus>("ExecutionStati")); }
        }
        private ObjectSet<ExecutionStatus> _executionStati;
    
        public ObjectSet<TestCase> TestCases
        {
            get { return _testCases  ?? (_testCases = CreateObjectSet<TestCase>("TestCases")); }
        }
        private ObjectSet<TestCase> _testCases;
    
        public ObjectSet<TestCaseFolder> TestCaseFolders
        {
            get { return _testCaseFolders  ?? (_testCaseFolders = CreateObjectSet<TestCaseFolder>("TestCaseFolders")); }
        }
        private ObjectSet<TestCaseFolder> _testCaseFolders;
    
        public ObjectSet<TestCasePriority> TestCasePriorities
        {
            get { return _testCasePriorities  ?? (_testCasePriorities = CreateObjectSet<TestCasePriority>("TestCasePriorities")); }
        }
        private ObjectSet<TestCasePriority> _testCasePriorities;
    
        public ObjectSet<TestStepParameter> TestStepParameters
        {
            get { return _testStepParameters  ?? (_testStepParameters = CreateObjectSet<TestStepParameter>("TestStepParameters")); }
        }
        private ObjectSet<TestStepParameter> _testStepParameters;
    
        public ObjectSet<TestCaseView> TestCasesView
        {
            get { return _testCasesView  ?? (_testCasesView = CreateObjectSet<TestCaseView>("TestCasesView")); }
        }
        private ObjectSet<TestCaseView> _testCasesView;
    
        public ObjectSet<TestStepView> TestStepsView
        {
            get { return _testStepsView  ?? (_testStepsView = CreateObjectSet<TestStepView>("TestStepsView")); }
        }
        private ObjectSet<TestStepView> _testStepsView;
    
        public ObjectSet<R_TestCaseFolder> R_TestCaseFolders
        {
            get { return _r_TestCaseFolders  ?? (_r_TestCaseFolders = CreateObjectSet<R_TestCaseFolder>("R_TestCaseFolders")); }
        }
        private ObjectSet<R_TestCaseFolder> _r_TestCaseFolders;
    
        public ObjectSet<ExecutionStatusActiveView> ExecutionStatiActiveView
        {
            get { return _executionStatiActiveView  ?? (_executionStatiActiveView = CreateObjectSet<ExecutionStatusActiveView>("ExecutionStatiActiveView")); }
        }
        private ObjectSet<ExecutionStatusActiveView> _executionStatiActiveView;
    
        public ObjectSet<TestCaseFolderHierarchyView> TestCaseFoldersHierarchyView
        {
            get { return _testCaseFoldersHierarchyView  ?? (_testCaseFoldersHierarchyView = CreateObjectSet<TestCaseFolderHierarchyView>("TestCaseFoldersHierarchyView")); }
        }
        private ObjectSet<TestCaseFolderHierarchyView> _testCaseFoldersHierarchyView;
    
        public ObjectSet<ReleaseTestCaseFolder> ReleaseTestCaseFolders
        {
            get { return _releaseTestCaseFolders  ?? (_releaseTestCaseFolders = CreateObjectSet<ReleaseTestCaseFolder>("ReleaseTestCaseFolders")); }
        }
        private ObjectSet<ReleaseTestCaseFolder> _releaseTestCaseFolders;
    
        public ObjectSet<TestCaseFolderReleaseView> TestCaseFolderReleasesView
        {
            get { return _testCaseFolderReleasesView  ?? (_testCaseFolderReleasesView = CreateObjectSet<TestCaseFolderReleaseView>("TestCaseFolderReleasesView")); }
        }
        private ObjectSet<TestCaseFolderReleaseView> _testCaseFolderReleasesView;
    
        public ObjectSet<TestCaseReleaseView> TestCaseReleasesView
        {
            get { return _testCaseReleasesView  ?? (_testCaseReleasesView = CreateObjectSet<TestCaseReleaseView>("TestCaseReleasesView")); }
        }
        private ObjectSet<TestCaseReleaseView> _testCaseReleasesView;
    
        public ObjectSet<ReleaseTestCase> ReleaseTestCases
        {
            get { return _releaseTestCases  ?? (_releaseTestCases = CreateObjectSet<ReleaseTestCase>("ReleaseTestCases")); }
        }
        private ObjectSet<ReleaseTestCase> _releaseTestCases;
    
        public ObjectSet<Recurrence> Recurrences
        {
            get { return _recurrences  ?? (_recurrences = CreateObjectSet<Recurrence>("Recurrences")); }
        }
        private ObjectSet<Recurrence> _recurrences;
    
        public ObjectSet<ReleaseTestSet> ReleaseTestSets
        {
            get { return _releaseTestSets  ?? (_releaseTestSets = CreateObjectSet<ReleaseTestSet>("ReleaseTestSets")); }
        }
        private ObjectSet<ReleaseTestSet> _releaseTestSets;
    
        public ObjectSet<ReleaseTestSetFolder> ReleaseTestSetFolders
        {
            get { return _releaseTestSetFolders  ?? (_releaseTestSetFolders = CreateObjectSet<ReleaseTestSetFolder>("ReleaseTestSetFolders")); }
        }
        private ObjectSet<ReleaseTestSetFolder> _releaseTestSetFolders;
    
        public ObjectSet<TestRun> TestRuns
        {
            get { return _testRuns  ?? (_testRuns = CreateObjectSet<TestRun>("TestRuns")); }
        }
        private ObjectSet<TestRun> _testRuns;
    
        public ObjectSet<TestRunFormat> TestRunFormats
        {
            get { return _testRunFormats  ?? (_testRunFormats = CreateObjectSet<TestRunFormat>("TestRunFormats")); }
        }
        private ObjectSet<TestRunFormat> _testRunFormats;
    
        public ObjectSet<TestRunStep> TestRunSteps
        {
            get { return _testRunSteps  ?? (_testRunSteps = CreateObjectSet<TestRunStep>("TestRunSteps")); }
        }
        private ObjectSet<TestRunStep> _testRunSteps;
    
        public ObjectSet<TestRunType> TestRunTypes
        {
            get { return _testRunTypes  ?? (_testRunTypes = CreateObjectSet<TestRunType>("TestRunTypes")); }
        }
        private ObjectSet<TestRunType> _testRunTypes;
    
        public ObjectSet<TestRunsPending> TestRunsPendings
        {
            get { return _testRunsPendings  ?? (_testRunsPendings = CreateObjectSet<TestRunsPending>("TestRunsPendings")); }
        }
        private ObjectSet<TestRunsPending> _testRunsPendings;
    
        public ObjectSet<TestSet> TestSets
        {
            get { return _testSets  ?? (_testSets = CreateObjectSet<TestSet>("TestSets")); }
        }
        private ObjectSet<TestSet> _testSets;
    
        public ObjectSet<TestSetFolder> TestSetFolders
        {
            get { return _testSetFolders  ?? (_testSetFolders = CreateObjectSet<TestSetFolder>("TestSetFolders")); }
        }
        private ObjectSet<TestSetFolder> _testSetFolders;
    
        public ObjectSet<TestSetParameter> TestSetParameters
        {
            get { return _testSetParameters  ?? (_testSetParameters = CreateObjectSet<TestSetParameter>("TestSetParameters")); }
        }
        private ObjectSet<TestSetParameter> _testSetParameters;
    
        public ObjectSet<TestSetStatus> TestSetStati
        {
            get { return _testSetStati  ?? (_testSetStati = CreateObjectSet<TestSetStatus>("TestSetStati")); }
        }
        private ObjectSet<TestSetStatus> _testSetStati;
    
        public ObjectSet<TestSetTestCase> TestSetTestCases
        {
            get { return _testSetTestCases  ?? (_testSetTestCases = CreateObjectSet<TestSetTestCase>("TestSetTestCases")); }
        }
        private ObjectSet<TestSetTestCase> _testSetTestCases;
    
        public ObjectSet<TestSetTestCaseParameter> TestSetTestCaseParameters
        {
            get { return _testSetTestCaseParameters  ?? (_testSetTestCaseParameters = CreateObjectSet<TestSetTestCaseParameter>("TestSetTestCaseParameters")); }
        }
        private ObjectSet<TestSetTestCaseParameter> _testSetTestCaseParameters;
    
        public ObjectSet<R_TestSetFolder> R_TestSetFolders
        {
            get { return _r_TestSetFolders  ?? (_r_TestSetFolders = CreateObjectSet<R_TestSetFolder>("R_TestSetFolders")); }
        }
        private ObjectSet<R_TestSetFolder> _r_TestSetFolders;
    
        public ObjectSet<AutomationHostView> AutomationHostsView
        {
            get { return _automationHostsView  ?? (_automationHostsView = CreateObjectSet<AutomationHostView>("AutomationHostsView")); }
        }
        private ObjectSet<AutomationHostView> _automationHostsView;
    
        public ObjectSet<TestRunStepIncidentView> TestRunStepIncidentsView
        {
            get { return _testRunStepIncidentsView  ?? (_testRunStepIncidentsView = CreateObjectSet<TestRunStepIncidentView>("TestRunStepIncidentsView")); }
        }
        private ObjectSet<TestRunStepIncidentView> _testRunStepIncidentsView;
    
        public ObjectSet<TestRunView> TestRunsView
        {
            get { return _testRunsView  ?? (_testRunsView = CreateObjectSet<TestRunView>("TestRunsView")); }
        }
        private ObjectSet<TestRunView> _testRunsView;
    
        public ObjectSet<TestSetFolderHierarchyView> TestSetFoldersHierarchyView
        {
            get { return _testSetFoldersHierarchyView  ?? (_testSetFoldersHierarchyView = CreateObjectSet<TestSetFolderHierarchyView>("TestSetFoldersHierarchyView")); }
        }
        private ObjectSet<TestSetFolderHierarchyView> _testSetFoldersHierarchyView;
    
        public ObjectSet<TestSetView> TestSetsView
        {
            get { return _testSetsView  ?? (_testSetsView = CreateObjectSet<TestSetView>("TestSetsView")); }
        }
        private ObjectSet<TestSetView> _testSetsView;
    
        public ObjectSet<TestSetFolderReleaseView> TestSetFolderReleasesView
        {
            get { return _testSetFolderReleasesView  ?? (_testSetFolderReleasesView = CreateObjectSet<TestSetFolderReleaseView>("TestSetFolderReleasesView")); }
        }
        private ObjectSet<TestSetFolderReleaseView> _testSetFolderReleasesView;
    
        public ObjectSet<TestSetReleaseView> TestSetReleasesView
        {
            get { return _testSetReleasesView  ?? (_testSetReleasesView = CreateObjectSet<TestSetReleaseView>("TestSetReleasesView")); }
        }
        private ObjectSet<TestSetReleaseView> _testSetReleasesView;
    
        public ObjectSet<TestRunStepView> TestRunStepsView
        {
            get { return _testRunStepsView  ?? (_testRunStepsView = CreateObjectSet<TestRunStepView>("TestRunStepsView")); }
        }
        private ObjectSet<TestRunStepView> _testRunStepsView;
    
        public ObjectSet<TestRunsPendingView> TestRunsPendingsView
        {
            get { return _testRunsPendingsView  ?? (_testRunsPendingsView = CreateObjectSet<TestRunsPendingView>("TestRunsPendingsView")); }
        }
        private ObjectSet<TestRunsPendingView> _testRunsPendingsView;
    
        public ObjectSet<DataSyncArtifactFieldValueMapping> DataSyncArtifactFieldValueMappings
        {
            get { return _dataSyncArtifactFieldValueMappings  ?? (_dataSyncArtifactFieldValueMappings = CreateObjectSet<DataSyncArtifactFieldValueMapping>("DataSyncArtifactFieldValueMappings")); }
        }
        private ObjectSet<DataSyncArtifactFieldValueMapping> _dataSyncArtifactFieldValueMappings;
    
        public ObjectSet<DataSyncArtifactMapping> DataSyncArtifactMappings
        {
            get { return _dataSyncArtifactMappings  ?? (_dataSyncArtifactMappings = CreateObjectSet<DataSyncArtifactMapping>("DataSyncArtifactMappings")); }
        }
        private ObjectSet<DataSyncArtifactMapping> _dataSyncArtifactMappings;
    
        public ObjectSet<DataSyncCustomPropertyMapping> DataSyncCustomPropertyMappings
        {
            get { return _dataSyncCustomPropertyMappings  ?? (_dataSyncCustomPropertyMappings = CreateObjectSet<DataSyncCustomPropertyMapping>("DataSyncCustomPropertyMappings")); }
        }
        private ObjectSet<DataSyncCustomPropertyMapping> _dataSyncCustomPropertyMappings;
    
        public ObjectSet<DataSyncCustomPropertyValueMapping> DataSyncCustomPropertyValueMappings
        {
            get { return _dataSyncCustomPropertyValueMappings  ?? (_dataSyncCustomPropertyValueMappings = CreateObjectSet<DataSyncCustomPropertyValueMapping>("DataSyncCustomPropertyValueMappings")); }
        }
        private ObjectSet<DataSyncCustomPropertyValueMapping> _dataSyncCustomPropertyValueMappings;
    
        public ObjectSet<DataSyncProject> DataSyncProjects
        {
            get { return _dataSyncProjects  ?? (_dataSyncProjects = CreateObjectSet<DataSyncProject>("DataSyncProjects")); }
        }
        private ObjectSet<DataSyncProject> _dataSyncProjects;
    
        public ObjectSet<DataSyncStatus> DataSyncStati
        {
            get { return _dataSyncStati  ?? (_dataSyncStati = CreateObjectSet<DataSyncStatus>("DataSyncStati")); }
        }
        private ObjectSet<DataSyncStatus> _dataSyncStati;
    
        public ObjectSet<DataSyncSystem> DataSyncSystems
        {
            get { return _dataSyncSystems  ?? (_dataSyncSystems = CreateObjectSet<DataSyncSystem>("DataSyncSystems")); }
        }
        private ObjectSet<DataSyncSystem> _dataSyncSystems;
    
        public ObjectSet<DataSyncUserMapping> DataSyncUserMappings
        {
            get { return _dataSyncUserMappings  ?? (_dataSyncUserMappings = CreateObjectSet<DataSyncUserMapping>("DataSyncUserMappings")); }
        }
        private ObjectSet<DataSyncUserMapping> _dataSyncUserMappings;
    
        public ObjectSet<TestSetTestCaseView> TestSetTestCasesView
        {
            get { return _testSetTestCasesView  ?? (_testSetTestCasesView = CreateObjectSet<TestSetTestCaseView>("TestSetTestCasesView")); }
        }
        private ObjectSet<TestSetTestCaseView> _testSetTestCasesView;
    
        public ObjectSet<DashboardCustom> DashboardCustoms
        {
            get { return _dashboardCustoms  ?? (_dashboardCustoms = CreateObjectSet<DashboardCustom>("DashboardCustoms")); }
        }
        private ObjectSet<DashboardCustom> _dashboardCustoms;
    
        public ObjectSet<DashboardCustomPermission> DashboardCustomPermissions
        {
            get { return _dashboardCustomPermissions  ?? (_dashboardCustomPermissions = CreateObjectSet<DashboardCustomPermission>("DashboardCustomPermissions")); }
        }
        private ObjectSet<DashboardCustomPermission> _dashboardCustomPermissions;
    
        public ObjectSet<DashboardCustomType> DashboardCustomTypes
        {
            get { return _dashboardCustomTypes  ?? (_dashboardCustomTypes = CreateObjectSet<DashboardCustomType>("DashboardCustomTypes")); }
        }
        private ObjectSet<DashboardCustomType> _dashboardCustomTypes;
    
        public ObjectSet<GlobalSecureSetting> GlobalSecureSettings
        {
            get { return _globalSecureSettings  ?? (_globalSecureSettings = CreateObjectSet<GlobalSecureSetting>("GlobalSecureSettings")); }
        }
        private ObjectSet<GlobalSecureSetting> _globalSecureSettings;
    
        public ObjectSet<Graph> Graphs
        {
            get { return _graphs  ?? (_graphs = CreateObjectSet<Graph>("Graphs")); }
        }
        private ObjectSet<Graph> _graphs;
    
        public ObjectSet<GraphCustom> GraphCustoms
        {
            get { return _graphCustoms  ?? (_graphCustoms = CreateObjectSet<GraphCustom>("GraphCustoms")); }
        }
        private ObjectSet<GraphCustom> _graphCustoms;
    
        public ObjectSet<GraphType> GraphTypes
        {
            get { return _graphTypes  ?? (_graphTypes = CreateObjectSet<GraphType>("GraphTypes")); }
        }
        private ObjectSet<GraphType> _graphTypes;
    
        public ObjectSet<ProjectArtifactSharing> ProjectArtifactSharings
        {
            get { return _projectArtifactSharings  ?? (_projectArtifactSharings = CreateObjectSet<ProjectArtifactSharing>("ProjectArtifactSharings")); }
        }
        private ObjectSet<ProjectArtifactSharing> _projectArtifactSharings;
    
        public ObjectSet<ProjectSetting> ProjectSettings
        {
            get { return _projectSettings  ?? (_projectSettings = CreateObjectSet<ProjectSetting>("ProjectSettings")); }
        }
        private ObjectSet<ProjectSetting> _projectSettings;
    
        public ObjectSet<ProjectSettingValue> ProjectSettingValues
        {
            get { return _projectSettingValues  ?? (_projectSettingValues = CreateObjectSet<ProjectSettingValue>("ProjectSettingValues")); }
        }
        private ObjectSet<ProjectSettingValue> _projectSettingValues;
    
        public ObjectSet<TestConfiguration> TestConfigurations
        {
            get { return _testConfigurations  ?? (_testConfigurations = CreateObjectSet<TestConfiguration>("TestConfigurations")); }
        }
        private ObjectSet<TestConfiguration> _testConfigurations;
    
        public ObjectSet<TestConfigurationParameterValue> TestConfigurationParameterValues
        {
            get { return _testConfigurationParameterValues  ?? (_testConfigurationParameterValues = CreateObjectSet<TestConfigurationParameterValue>("TestConfigurationParameterValues")); }
        }
        private ObjectSet<TestConfigurationParameterValue> _testConfigurationParameterValues;
    
        public ObjectSet<TestConfigurationSet> TestConfigurationSets
        {
            get { return _testConfigurationSets  ?? (_testConfigurationSets = CreateObjectSet<TestConfigurationSet>("TestConfigurationSets")); }
        }
        private ObjectSet<TestConfigurationSet> _testConfigurationSets;
    
        public ObjectSet<TestConfigurationSetParameter> TestConfigurationSetParameters
        {
            get { return _testConfigurationSetParameters  ?? (_testConfigurationSetParameters = CreateObjectSet<TestConfigurationSetParameter>("TestConfigurationSetParameters")); }
        }
        private ObjectSet<TestConfigurationSetParameter> _testConfigurationSetParameters;
    
        public ObjectSet<NotificationUserSubscription> NotificationUserSubscriptions
        {
            get { return _notificationUserSubscriptions  ?? (_notificationUserSubscriptions = CreateObjectSet<NotificationUserSubscription>("NotificationUserSubscriptions")); }
        }
        private ObjectSet<NotificationUserSubscription> _notificationUserSubscriptions;
    
        public ObjectSet<NotificationUserSubscriptionView> NotificationUserSubscriptionsView
        {
            get { return _notificationUserSubscriptionsView  ?? (_notificationUserSubscriptionsView = CreateObjectSet<NotificationUserSubscriptionView>("NotificationUserSubscriptionsView")); }
        }
        private ObjectSet<NotificationUserSubscriptionView> _notificationUserSubscriptionsView;
    
        public ObjectSet<ProjectGroupUserView> ProjectGroupUsersView
        {
            get { return _projectGroupUsersView  ?? (_projectGroupUsersView = CreateObjectSet<ProjectGroupUserView>("ProjectGroupUsersView")); }
        }
        private ObjectSet<ProjectGroupUserView> _projectGroupUsersView;
    
        public ObjectSet<R_RequirementTestStep> R_RequirementTestSteps
        {
            get { return _r_RequirementTestSteps  ?? (_r_RequirementTestSteps = CreateObjectSet<R_RequirementTestStep>("R_RequirementTestSteps")); }
        }
        private ObjectSet<R_RequirementTestStep> _r_RequirementTestSteps;
    
        public ObjectSet<ArtifactMessage> ArtifactMessages
        {
            get { return _artifactMessages  ?? (_artifactMessages = CreateObjectSet<ArtifactMessage>("ArtifactMessages")); }
        }
        private ObjectSet<ArtifactMessage> _artifactMessages;
    
        public ObjectSet<NotificationArtifactTemplate> NotificationArtifactTemplates
        {
            get { return _notificationArtifactTemplates  ?? (_notificationArtifactTemplates = CreateObjectSet<NotificationArtifactTemplate>("NotificationArtifactTemplates")); }
        }
        private ObjectSet<NotificationArtifactTemplate> _notificationArtifactTemplates;
    
        public ObjectSet<NotificationArtifactUserType> NotificationArtifactUserTypes
        {
            get { return _notificationArtifactUserTypes  ?? (_notificationArtifactUserTypes = CreateObjectSet<NotificationArtifactUserType>("NotificationArtifactUserTypes")); }
        }
        private ObjectSet<NotificationArtifactUserType> _notificationArtifactUserTypes;
    
        public ObjectSet<NotificationEvent> NotificationEvents
        {
            get { return _notificationEvents  ?? (_notificationEvents = CreateObjectSet<NotificationEvent>("NotificationEvents")); }
        }
        private ObjectSet<NotificationEvent> _notificationEvents;
    
        public ObjectSet<R_ArtifactAssociation> R_ArtifactAssociations
        {
            get { return _r_ArtifactAssociations  ?? (_r_ArtifactAssociations = CreateObjectSet<R_ArtifactAssociation>("R_ArtifactAssociations")); }
        }
        private ObjectSet<R_ArtifactAssociation> _r_ArtifactAssociations;
    
        public ObjectSet<R_Component> R_Components
        {
            get { return _r_Components  ?? (_r_Components = CreateObjectSet<R_Component>("R_Components")); }
        }
        private ObjectSet<R_Component> _r_Components;
    
        public ObjectSet<R_Event> R_Events
        {
            get { return _r_Events  ?? (_r_Events = CreateObjectSet<R_Event>("R_Events")); }
        }
        private ObjectSet<R_Event> _r_Events;
    
        public ObjectSet<R_TestConfigurationEntry> R_TestConfigurationEntries
        {
            get { return _r_TestConfigurationEntries  ?? (_r_TestConfigurationEntries = CreateObjectSet<R_TestConfigurationEntry>("R_TestConfigurationEntries")); }
        }
        private ObjectSet<R_TestConfigurationEntry> _r_TestConfigurationEntries;
    
        public ObjectSet<R_TestConfigurationSet> R_TestConfigurationSets
        {
            get { return _r_TestConfigurationSets  ?? (_r_TestConfigurationSets = CreateObjectSet<R_TestConfigurationSet>("R_TestConfigurationSets")); }
        }
        private ObjectSet<R_TestConfigurationSet> _r_TestConfigurationSets;
    
        public ObjectSet<R_TestRunIncident> R_TestRunIncidents
        {
            get { return _r_TestRunIncidents  ?? (_r_TestRunIncidents = CreateObjectSet<R_TestRunIncident>("R_TestRunIncidents")); }
        }
        private ObjectSet<R_TestRunIncident> _r_TestRunIncidents;
    
        public ObjectSet<R_TestSetIncident> R_TestSetIncidents
        {
            get { return _r_TestSetIncidents  ?? (_r_TestSetIncidents = CreateObjectSet<R_TestSetIncident>("R_TestSetIncidents")); }
        }
        private ObjectSet<R_TestSetIncident> _r_TestSetIncidents;
    
        public ObjectSet<DocumentDiscussion> DocumentDiscussions
        {
            get { return _documentDiscussions  ?? (_documentDiscussions = CreateObjectSet<DocumentDiscussion>("DocumentDiscussions")); }
        }
        private ObjectSet<DocumentDiscussion> _documentDiscussions;
    
        public ObjectSet<DocumentStatus> DocumentStati
        {
            get { return _documentStati  ?? (_documentStati = CreateObjectSet<DocumentStatus>("DocumentStati")); }
        }
        private ObjectSet<DocumentStatus> _documentStati;
    
        public ObjectSet<DocumentType> DocumentTypes
        {
            get { return _documentTypes  ?? (_documentTypes = CreateObjectSet<DocumentType>("DocumentTypes")); }
        }
        private ObjectSet<DocumentType> _documentTypes;
    
        public ObjectSet<DocumentWorkflow> DocumentWorkflows
        {
            get { return _documentWorkflows  ?? (_documentWorkflows = CreateObjectSet<DocumentWorkflow>("DocumentWorkflows")); }
        }
        private ObjectSet<DocumentWorkflow> _documentWorkflows;
    
        public ObjectSet<DocumentWorkflowCustomProperty> DocumentWorkflowCustomProperties
        {
            get { return _documentWorkflowCustomProperties  ?? (_documentWorkflowCustomProperties = CreateObjectSet<DocumentWorkflowCustomProperty>("DocumentWorkflowCustomProperties")); }
        }
        private ObjectSet<DocumentWorkflowCustomProperty> _documentWorkflowCustomProperties;
    
        public ObjectSet<DocumentWorkflowField> DocumentWorkflowFields
        {
            get { return _documentWorkflowFields  ?? (_documentWorkflowFields = CreateObjectSet<DocumentWorkflowField>("DocumentWorkflowFields")); }
        }
        private ObjectSet<DocumentWorkflowField> _documentWorkflowFields;
    
        public ObjectSet<DocumentWorkflowTransition> DocumentWorkflowTransitions
        {
            get { return _documentWorkflowTransitions  ?? (_documentWorkflowTransitions = CreateObjectSet<DocumentWorkflowTransition>("DocumentWorkflowTransitions")); }
        }
        private ObjectSet<DocumentWorkflowTransition> _documentWorkflowTransitions;
    
        public ObjectSet<DocumentWorkflowTransitionRole> DocumentWorkflowTransitionRoles
        {
            get { return _documentWorkflowTransitionRoles  ?? (_documentWorkflowTransitionRoles = CreateObjectSet<DocumentWorkflowTransitionRole>("DocumentWorkflowTransitionRoles")); }
        }
        private ObjectSet<DocumentWorkflowTransitionRole> _documentWorkflowTransitionRoles;
    
        public ObjectSet<ProjectTemplate> ProjectTemplates
        {
            get { return _projectTemplates  ?? (_projectTemplates = CreateObjectSet<ProjectTemplate>("ProjectTemplates")); }
        }
        private ObjectSet<ProjectTemplate> _projectTemplates;
    
        public ObjectSet<ReleaseTypeWorkflow> ReleaseTypeWorkflows
        {
            get { return _releaseTypeWorkflows  ?? (_releaseTypeWorkflows = CreateObjectSet<ReleaseTypeWorkflow>("ReleaseTypeWorkflows")); }
        }
        private ObjectSet<ReleaseTypeWorkflow> _releaseTypeWorkflows;
    
        public ObjectSet<RiskProbability> RiskProbabilities
        {
            get { return _riskProbabilities  ?? (_riskProbabilities = CreateObjectSet<RiskProbability>("RiskProbabilities")); }
        }
        private ObjectSet<RiskProbability> _riskProbabilities;
    
        public ObjectSet<RiskImpact> RiskImpacts
        {
            get { return _riskImpacts  ?? (_riskImpacts = CreateObjectSet<RiskImpact>("RiskImpacts")); }
        }
        private ObjectSet<RiskImpact> _riskImpacts;
    
        public ObjectSet<GlobalOAuthProvider> GlobalOAuthProviders
        {
            get { return _globalOAuthProviders  ?? (_globalOAuthProviders = CreateObjectSet<GlobalOAuthProvider>("GlobalOAuthProviders")); }
        }
        private ObjectSet<GlobalOAuthProvider> _globalOAuthProviders;
    
        public ObjectSet<NotificationEventWebHook> NotificationEventWebHooks
        {
            get { return _notificationEventWebHooks  ?? (_notificationEventWebHooks = CreateObjectSet<NotificationEventWebHook>("NotificationEventWebHooks")); }
        }
        private ObjectSet<NotificationEventWebHook> _notificationEventWebHooks;
    
        public ObjectSet<AllocationActual> AllocationActuals
        {
            get { return _allocationActuals  ?? (_allocationActuals = CreateObjectSet<AllocationActual>("AllocationActuals")); }
        }
        private ObjectSet<AllocationActual> _allocationActuals;
    
        public ObjectSet<AllocationPlanned> AllocationPlanneds
        {
            get { return _allocationPlanneds  ?? (_allocationPlanneds = CreateObjectSet<AllocationPlanned>("AllocationPlanneds")); }
        }
        private ObjectSet<AllocationPlanned> _allocationPlanneds;
    
        public ObjectSet<GlobalArtifactCustomProperty> GlobalArtifactCustomProperties
        {
            get { return _globalArtifactCustomProperties  ?? (_globalArtifactCustomProperties = CreateObjectSet<GlobalArtifactCustomProperty>("GlobalArtifactCustomProperties")); }
        }
        private ObjectSet<GlobalArtifactCustomProperty> _globalArtifactCustomProperties;
    
        public ObjectSet<GlobalCustomProperty> GlobalCustomProperties
        {
            get { return _globalCustomProperties  ?? (_globalCustomProperties = CreateObjectSet<GlobalCustomProperty>("GlobalCustomProperties")); }
        }
        private ObjectSet<GlobalCustomProperty> _globalCustomProperties;
    
        public ObjectSet<GlobalCustomPropertyList> GlobalCustomPropertyLists
        {
            get { return _globalCustomPropertyLists  ?? (_globalCustomPropertyLists = CreateObjectSet<GlobalCustomPropertyList>("GlobalCustomPropertyLists")); }
        }
        private ObjectSet<GlobalCustomPropertyList> _globalCustomPropertyLists;
    
        public ObjectSet<GlobalCustomPropertyOptionValue> GlobalCustomPropertyOptionValues
        {
            get { return _globalCustomPropertyOptionValues  ?? (_globalCustomPropertyOptionValues = CreateObjectSet<GlobalCustomPropertyOptionValue>("GlobalCustomPropertyOptionValues")); }
        }
        private ObjectSet<GlobalCustomPropertyOptionValue> _globalCustomPropertyOptionValues;
    
        public ObjectSet<GlobalCustomPropertyValue> GlobalCustomPropertyValues
        {
            get { return _globalCustomPropertyValues  ?? (_globalCustomPropertyValues = CreateObjectSet<GlobalCustomPropertyValue>("GlobalCustomPropertyValues")); }
        }
        private ObjectSet<GlobalCustomPropertyValue> _globalCustomPropertyValues;
    
        public ObjectSet<HistoryAssociation> HistoryAssociations
        {
            get { return _historyAssociations  ?? (_historyAssociations = CreateObjectSet<HistoryAssociation>("HistoryAssociations")); }
        }
        private ObjectSet<HistoryAssociation> _historyAssociations;
    
        public ObjectSet<HistoryPosition> HistoryPositions
        {
            get { return _historyPositions  ?? (_historyPositions = CreateObjectSet<HistoryPosition>("HistoryPositions")); }
        }
        private ObjectSet<HistoryPosition> _historyPositions;
    
        public ObjectSet<ProjectBaseline> ProjectBaselines
        {
            get { return _projectBaselines  ?? (_projectBaselines = CreateObjectSet<ProjectBaseline>("ProjectBaselines")); }
        }
        private ObjectSet<ProjectBaseline> _projectBaselines;
    
        public ObjectSet<ProjectGoal> ProjectGoals
        {
            get { return _projectGoals  ?? (_projectGoals = CreateObjectSet<ProjectGoal>("ProjectGoals")); }
        }
        private ObjectSet<ProjectGoal> _projectGoals;
    
        public ObjectSet<ProjectGroupGoal> ProjectGroupGoals
        {
            get { return _projectGroupGoals  ?? (_projectGroupGoals = CreateObjectSet<ProjectGroupGoal>("ProjectGroupGoals")); }
        }
        private ObjectSet<ProjectGroupGoal> _projectGroupGoals;
    
        public ObjectSet<ProjectGroupMilestone> ProjectGroupMilestones
        {
            get { return _projectGroupMilestones  ?? (_projectGroupMilestones = CreateObjectSet<ProjectGroupMilestone>("ProjectGroupMilestones")); }
        }
        private ObjectSet<ProjectGroupMilestone> _projectGroupMilestones;
    
        public ObjectSet<ProjectGroupRoadmap> ProjectGroupRoadmaps
        {
            get { return _projectGroupRoadmaps  ?? (_projectGroupRoadmaps = CreateObjectSet<ProjectGroupRoadmap>("ProjectGroupRoadmaps")); }
        }
        private ObjectSet<ProjectGroupRoadmap> _projectGroupRoadmaps;
    
        public ObjectSet<ProjectGroupTheme> ProjectGroupThemes
        {
            get { return _projectGroupThemes  ?? (_projectGroupThemes = CreateObjectSet<ProjectGroupTheme>("ProjectGroupThemes")); }
        }
        private ObjectSet<ProjectGroupTheme> _projectGroupThemes;
    
        public ObjectSet<ResourceCategory> ResourceCategories
        {
            get { return _resourceCategories  ?? (_resourceCategories = CreateObjectSet<ResourceCategory>("ResourceCategories")); }
        }
        private ObjectSet<ResourceCategory> _resourceCategories;
    
        public ObjectSet<ResourceTrack> ResourceTracks
        {
            get { return _resourceTracks  ?? (_resourceTracks = CreateObjectSet<ResourceTrack>("ResourceTracks")); }
        }
        private ObjectSet<ResourceTrack> _resourceTracks;
    
        public ObjectSet<Risk> Risks
        {
            get { return _risks  ?? (_risks = CreateObjectSet<Risk>("Risks")); }
        }
        private ObjectSet<Risk> _risks;
    
        public ObjectSet<RiskDiscussion> RiskDiscussions
        {
            get { return _riskDiscussions  ?? (_riskDiscussions = CreateObjectSet<RiskDiscussion>("RiskDiscussions")); }
        }
        private ObjectSet<RiskDiscussion> _riskDiscussions;
    
        public ObjectSet<RiskMitigation> RiskMitigations
        {
            get { return _riskMitigations  ?? (_riskMitigations = CreateObjectSet<RiskMitigation>("RiskMitigations")); }
        }
        private ObjectSet<RiskMitigation> _riskMitigations;
    
        public ObjectSet<RiskStatus> RiskStati
        {
            get { return _riskStati  ?? (_riskStati = CreateObjectSet<RiskStatus>("RiskStati")); }
        }
        private ObjectSet<RiskStatus> _riskStati;
    
        public ObjectSet<RiskType> RiskTypes
        {
            get { return _riskTypes  ?? (_riskTypes = CreateObjectSet<RiskType>("RiskTypes")); }
        }
        private ObjectSet<RiskType> _riskTypes;
    
        public ObjectSet<RiskWorkflow> RiskWorkflows
        {
            get { return _riskWorkflows  ?? (_riskWorkflows = CreateObjectSet<RiskWorkflow>("RiskWorkflows")); }
        }
        private ObjectSet<RiskWorkflow> _riskWorkflows;
    
        public ObjectSet<RiskWorkflowCustomProperty> RiskWorkflowCustomProperties
        {
            get { return _riskWorkflowCustomProperties  ?? (_riskWorkflowCustomProperties = CreateObjectSet<RiskWorkflowCustomProperty>("RiskWorkflowCustomProperties")); }
        }
        private ObjectSet<RiskWorkflowCustomProperty> _riskWorkflowCustomProperties;
    
        public ObjectSet<RiskWorkflowField> RiskWorkflowFields
        {
            get { return _riskWorkflowFields  ?? (_riskWorkflowFields = CreateObjectSet<RiskWorkflowField>("RiskWorkflowFields")); }
        }
        private ObjectSet<RiskWorkflowField> _riskWorkflowFields;
    
        public ObjectSet<RiskWorkflowTransition> RiskWorkflowTransitions
        {
            get { return _riskWorkflowTransitions  ?? (_riskWorkflowTransitions = CreateObjectSet<RiskWorkflowTransition>("RiskWorkflowTransitions")); }
        }
        private ObjectSet<RiskWorkflowTransition> _riskWorkflowTransitions;
    
        public ObjectSet<RiskWorkflowTransitionRole> RiskWorkflowTransitionRoles
        {
            get { return _riskWorkflowTransitionRoles  ?? (_riskWorkflowTransitionRoles = CreateObjectSet<RiskWorkflowTransitionRole>("RiskWorkflowTransitionRoles")); }
        }
        private ObjectSet<RiskWorkflowTransitionRole> _riskWorkflowTransitionRoles;
    
        public ObjectSet<ThemePriority> ThemePriorities
        {
            get { return _themePriorities  ?? (_themePriorities = CreateObjectSet<ThemePriority>("ThemePriorities")); }
        }
        private ObjectSet<ThemePriority> _themePriorities;
    
        public ObjectSet<ThemeStatus> ThemeStatus
        {
            get { return _themeStatus  ?? (_themeStatus = CreateObjectSet<ThemeStatus>("ThemeStatus")); }
        }
        private ObjectSet<ThemeStatus> _themeStatus;
    
        public ObjectSet<Timecard> Timecards
        {
            get { return _timecards  ?? (_timecards = CreateObjectSet<Timecard>("Timecards")); }
        }
        private ObjectSet<Timecard> _timecards;
    
        public ObjectSet<TimecardEntry> TimecardEntries
        {
            get { return _timecardEntries  ?? (_timecardEntries = CreateObjectSet<TimecardEntry>("TimecardEntries")); }
        }
        private ObjectSet<TimecardEntry> _timecardEntries;
    
        public ObjectSet<TimecardEntryType> TimecardEntryTypes
        {
            get { return _timecardEntryTypes  ?? (_timecardEntryTypes = CreateObjectSet<TimecardEntryType>("TimecardEntryTypes")); }
        }
        private ObjectSet<TimecardEntryType> _timecardEntryTypes;
    
        public ObjectSet<UserIdea> UserIdeas
        {
            get { return _userIdeas  ?? (_userIdeas = CreateObjectSet<UserIdea>("UserIdeas")); }
        }
        private ObjectSet<UserIdea> _userIdeas;
    
        public ObjectSet<VersionControlBranch> VersionControlBranches
        {
            get { return _versionControlBranches  ?? (_versionControlBranches = CreateObjectSet<VersionControlBranch>("VersionControlBranches")); }
        }
        private ObjectSet<VersionControlBranch> _versionControlBranches;
    
        public ObjectSet<VersionControlPullRequest> VersionControlPullRequests
        {
            get { return _versionControlPullRequests  ?? (_versionControlPullRequests = CreateObjectSet<VersionControlPullRequest>("VersionControlPullRequests")); }
        }
        private ObjectSet<VersionControlPullRequest> _versionControlPullRequests;
    
        public ObjectSet<Portfolio> Portfolios
        {
            get { return _portfolios  ?? (_portfolios = CreateObjectSet<Portfolio>("Portfolios")); }
        }
        private ObjectSet<Portfolio> _portfolios;
    
        public ObjectSet<ProjectTemplateArtifactDefault> ProjectTemplateArtifactDefaults
        {
            get { return _projectTemplateArtifactDefaults  ?? (_projectTemplateArtifactDefaults = CreateObjectSet<ProjectTemplateArtifactDefault>("ProjectTemplateArtifactDefaults")); }
        }
        private ObjectSet<ProjectTemplateArtifactDefault> _projectTemplateArtifactDefaults;
    
        public ObjectSet<RiskView> RisksView
        {
            get { return _risksView  ?? (_risksView = CreateObjectSet<RiskView>("RisksView")); }
        }
        private ObjectSet<RiskView> _risksView;
    
        public ObjectSet<ArtifactTag> ArtifactTags
        {
            get { return _artifactTags  ?? (_artifactTags = CreateObjectSet<ArtifactTag>("ArtifactTags")); }
        }
        private ObjectSet<ArtifactTag> _artifactTags;
    
        public ObjectSet<GlobalTag> GlobalTags
        {
            get { return _globalTags  ?? (_globalTags = CreateObjectSet<GlobalTag>("GlobalTags")); }
        }
        private ObjectSet<GlobalTag> _globalTags;
    
        public ObjectSet<HistoryDiscussion> HistoryDiscussions
        {
            get { return _historyDiscussions  ?? (_historyDiscussions = CreateObjectSet<HistoryDiscussion>("HistoryDiscussions")); }
        }
        private ObjectSet<HistoryDiscussion> _historyDiscussions;
    
        public ObjectSet<TrackMessage> TrackMessages
        {
            get { return _trackMessages  ?? (_trackMessages = CreateObjectSet<TrackMessage>("TrackMessages")); }
        }
        private ObjectSet<TrackMessage> _trackMessages;
    
        public ObjectSet<ProjectTagFrequency> ProjectTagFrequencies
        {
            get { return _projectTagFrequencies  ?? (_projectTagFrequencies = CreateObjectSet<ProjectTagFrequency>("ProjectTagFrequencies")); }
        }
        private ObjectSet<ProjectTagFrequency> _projectTagFrequencies;
    
        public ObjectSet<UserPageViewed> UserPagesViewed
        {
            get { return _userPagesViewed  ?? (_userPagesViewed = CreateObjectSet<UserPageViewed>("UserPagesViewed")); }
        }
        private ObjectSet<UserPageViewed> _userPagesViewed;
    
        public ObjectSet<R_ArtifactAttachment> R_ArtifactAttachments
        {
            get { return _r_ArtifactAttachments  ?? (_r_ArtifactAttachments = CreateObjectSet<R_ArtifactAttachment>("R_ArtifactAttachments")); }
        }
        private ObjectSet<R_ArtifactAttachment> _r_ArtifactAttachments;
    
        public ObjectSet<HistoryTag> HistoryTags
        {
            get { return _historyTags  ?? (_historyTags = CreateObjectSet<HistoryTag>("HistoryTags")); }
        }
        private ObjectSet<HistoryTag> _historyTags;
    
        public ObjectSet<MultiApprover> MultiApprovers
        {
            get { return _multiApprovers  ?? (_multiApprovers = CreateObjectSet<MultiApprover>("MultiApprovers")); }
        }
        private ObjectSet<MultiApprover> _multiApprovers;
    
        public ObjectSet<MultiApproverExecuted> MultiApproverExecuteds
        {
            get { return _multiApproverExecuteds  ?? (_multiApproverExecuteds = CreateObjectSet<MultiApproverExecuted>("MultiApproverExecuteds")); }
        }
        private ObjectSet<MultiApproverExecuted> _multiApproverExecuteds;
    
        public ObjectSet<MultiApproverType> MultiApproverTypes
        {
            get { return _multiApproverTypes  ?? (_multiApproverTypes = CreateObjectSet<MultiApproverType>("MultiApproverTypes")); }
        }
        private ObjectSet<MultiApproverType> _multiApproverTypes;
    
        public ObjectSet<R_RequirementStep> R_RequirementSteps
        {
            get { return _r_RequirementSteps  ?? (_r_RequirementSteps = CreateObjectSet<R_RequirementStep>("R_RequirementSteps")); }
        }
        private ObjectSet<R_RequirementStep> _r_RequirementSteps;
    
        public ObjectSet<R_RiskMitigation> R_RiskMitigations
        {
            get { return _r_RiskMitigations  ?? (_r_RiskMitigations = CreateObjectSet<R_RiskMitigation>("R_RiskMitigations")); }
        }
        private ObjectSet<R_RiskMitigation> _r_RiskMitigations;
    
        public ObjectSet<R_Risk> R_Risks
        {
            get { return _r_Risks  ?? (_r_Risks = CreateObjectSet<R_Risk>("R_Risks")); }
        }
        private ObjectSet<R_Risk> _r_Risks;
    
        public ObjectSet<R_Baseline> R_Baselines
        {
            get { return _r_Baselines  ?? (_r_Baselines = CreateObjectSet<R_Baseline>("R_Baselines")); }
        }
        private ObjectSet<R_Baseline> _r_Baselines;
    
        public ObjectSet<TestCaseFolderHierarchy> TestCaseFolderHierarchies
        {
            get { return _testCaseFolderHierarchies  ?? (_testCaseFolderHierarchies = CreateObjectSet<TestCaseFolderHierarchy>("TestCaseFolderHierarchies")); }
        }
        private ObjectSet<TestCaseFolderHierarchy> _testCaseFolderHierarchies;
    
        public ObjectSet<ProjectAttachmentFolderHierarchy> ProjectAttachmentFolderHierarchies
        {
            get { return _projectAttachmentFolderHierarchies  ?? (_projectAttachmentFolderHierarchies = CreateObjectSet<ProjectAttachmentFolderHierarchy>("ProjectAttachmentFolderHierarchies")); }
        }
        private ObjectSet<ProjectAttachmentFolderHierarchy> _projectAttachmentFolderHierarchies;
    
        public ObjectSet<TaskFolderHierarchy> TaskFolderHierarchies
        {
            get { return _taskFolderHierarchies  ?? (_taskFolderHierarchies = CreateObjectSet<TaskFolderHierarchy>("TaskFolderHierarchies")); }
        }
        private ObjectSet<TaskFolderHierarchy> _taskFolderHierarchies;
    
        public ObjectSet<TestSetFolderHierarchy> TestSetFolderHierarchies
        {
            get { return _testSetFolderHierarchies  ?? (_testSetFolderHierarchies = CreateObjectSet<TestSetFolderHierarchy>("TestSetFolderHierarchies")); }
        }
        private ObjectSet<TestSetFolderHierarchy> _testSetFolderHierarchies;
    
        public ObjectSet<TestCaseParameterHierarchy> TestCaseParameterHierarchies
        {
            get { return _testCaseParameterHierarchies  ?? (_testCaseParameterHierarchies = CreateObjectSet<TestCaseParameterHierarchy>("TestCaseParameterHierarchies")); }
        }
        private ObjectSet<TestCaseParameterHierarchy> _testCaseParameterHierarchies;
    
        public ObjectSet<TestCaseParameterHierarchyAlreadySet> TestCaseParameterHierarchyAlreadySets
        {
            get { return _testCaseParameterHierarchyAlreadySets  ?? (_testCaseParameterHierarchyAlreadySets = CreateObjectSet<TestCaseParameterHierarchyAlreadySet>("TestCaseParameterHierarchyAlreadySets")); }
        }
        private ObjectSet<TestCaseParameterHierarchyAlreadySet> _testCaseParameterHierarchyAlreadySets;
    
        public ObjectSet<HistoryChangeSetNetChange> HistoryChangeSetNetChanges
        {
            get { return _historyChangeSetNetChanges  ?? (_historyChangeSetNetChanges = CreateObjectSet<HistoryChangeSetNetChange>("HistoryChangeSetNetChanges")); }
        }
        private ObjectSet<HistoryChangeSetNetChange> _historyChangeSetNetChanges;
    
        public ObjectSet<HistoryChangeSetNetChangeSquashed> HistoryChangeSetNetChangeSquasheds
        {
            get { return _historyChangeSetNetChangeSquasheds  ?? (_historyChangeSetNetChangeSquasheds = CreateObjectSet<HistoryChangeSetNetChangeSquashed>("HistoryChangeSetNetChangeSquasheds")); }
        }
        private ObjectSet<HistoryChangeSetNetChangeSquashed> _historyChangeSetNetChangeSquasheds;
    
        public ObjectSet<SourceCodeCommit> SourceCodeCommits
        {
            get { return _sourceCodeCommits  ?? (_sourceCodeCommits = CreateObjectSet<SourceCodeCommit>("SourceCodeCommits")); }
        }
        private ObjectSet<SourceCodeCommit> _sourceCodeCommits;
    
        public ObjectSet<SourceCodeCommitArtifact> SourceCodeCommitArtifacts
        {
            get { return _sourceCodeCommitArtifacts  ?? (_sourceCodeCommitArtifacts = CreateObjectSet<SourceCodeCommitArtifact>("SourceCodeCommitArtifacts")); }
        }
        private ObjectSet<SourceCodeCommitArtifact> _sourceCodeCommitArtifacts;
    
        public ObjectSet<SourceCodeFileEntry> SourceCodeFileEntries
        {
            get { return _sourceCodeFileEntries  ?? (_sourceCodeFileEntries = CreateObjectSet<SourceCodeFileEntry>("SourceCodeFileEntries")); }
        }
        private ObjectSet<SourceCodeFileEntry> _sourceCodeFileEntries;
    
        public ObjectSet<ArtifactSourceCodeRevisionView> ArtifactSourceCodeRevisionsView
        {
            get { return _artifactSourceCodeRevisionsView  ?? (_artifactSourceCodeRevisionsView = CreateObjectSet<ArtifactSourceCodeRevisionView>("ArtifactSourceCodeRevisionsView")); }
        }
        private ObjectSet<ArtifactSourceCodeRevisionView> _artifactSourceCodeRevisionsView;
    
        public ObjectSet<PullRequest> PullRequests
        {
            get { return _pullRequests  ?? (_pullRequests = CreateObjectSet<PullRequest>("PullRequests")); }
        }
        private ObjectSet<PullRequest> _pullRequests;
    
        public ObjectSet<PortfolioSetting> PortfolioSettings
        {
            get { return _portfolioSettings  ?? (_portfolioSettings = CreateObjectSet<PortfolioSetting>("PortfolioSettings")); }
        }
        private ObjectSet<PortfolioSetting> _portfolioSettings;
    
        public ObjectSet<PortfolioSettingValue> PortfolioSettingValues
        {
            get { return _portfolioSettingValues  ?? (_portfolioSettingValues = CreateObjectSet<PortfolioSettingValue>("PortfolioSettingValues")); }
        }
        private ObjectSet<PortfolioSettingValue> _portfolioSettingValues;
    
        public ObjectSet<ProjectGroupSetting> ProjectGroupSettings
        {
            get { return _projectGroupSettings  ?? (_projectGroupSettings = CreateObjectSet<ProjectGroupSetting>("ProjectGroupSettings")); }
        }
        private ObjectSet<ProjectGroupSetting> _projectGroupSettings;
    
        public ObjectSet<ProjectGroupSettingValue> ProjectGroupSettingValues
        {
            get { return _projectGroupSettingValues  ?? (_projectGroupSettingValues = CreateObjectSet<ProjectGroupSettingValue>("ProjectGroupSettingValues")); }
        }
        private ObjectSet<ProjectGroupSettingValue> _projectGroupSettingValues;
    
        public ObjectSet<ProjectTemplateSetting> ProjectTemplateSettings
        {
            get { return _projectTemplateSettings  ?? (_projectTemplateSettings = CreateObjectSet<ProjectTemplateSetting>("ProjectTemplateSettings")); }
        }
        private ObjectSet<ProjectTemplateSetting> _projectTemplateSettings;
    
        public ObjectSet<ProjectTemplateSettingValue> ProjectTemplateSettingValues
        {
            get { return _projectTemplateSettingValues  ?? (_projectTemplateSettingValues = CreateObjectSet<ProjectTemplateSettingValue>("ProjectTemplateSettingValues")); }
        }
        private ObjectSet<ProjectTemplateSettingValue> _projectTemplateSettingValues;
    
        public ObjectSet<RiskDetectability> RiskDetectabilities
        {
            get { return _riskDetectabilities  ?? (_riskDetectabilities = CreateObjectSet<RiskDetectability>("RiskDetectabilities")); }
        }
        private ObjectSet<RiskDetectability> _riskDetectabilities;
    
        public ObjectSet<StandardTask> StandardTasks
        {
            get { return _standardTasks  ?? (_standardTasks = CreateObjectSet<StandardTask>("StandardTasks")); }
        }
        private ObjectSet<StandardTask> _standardTasks;
    
        public ObjectSet<StandardTaskSet> StandardTaskSets
        {
            get { return _standardTaskSets  ?? (_standardTaskSets = CreateObjectSet<StandardTaskSet>("StandardTaskSets")); }
        }
        private ObjectSet<StandardTaskSet> _standardTaskSets;
    
        public ObjectSet<StandardTestCase> StandardTestCases
        {
            get { return _standardTestCases  ?? (_standardTestCases = CreateObjectSet<StandardTestCase>("StandardTestCases")); }
        }
        private ObjectSet<StandardTestCase> _standardTestCases;
    
        public ObjectSet<StandardTestCaseSet> StandardTestCaseSets
        {
            get { return _standardTestCaseSets  ?? (_standardTestCaseSets = CreateObjectSet<StandardTestCaseSet>("StandardTestCaseSets")); }
        }
        private ObjectSet<StandardTestCaseSet> _standardTestCaseSets;
    
        public ObjectSet<TimecardStatus> TimecardStatus
        {
            get { return _timecardStatus  ?? (_timecardStatus = CreateObjectSet<TimecardStatus>("TimecardStatus")); }
        }
        private ObjectSet<TimecardStatus> _timecardStatus;
    
        public ObjectSet<UserRecentArtifact> UserRecentArtifacts
        {
            get { return _userRecentArtifacts  ?? (_userRecentArtifacts = CreateObjectSet<UserRecentArtifact>("UserRecentArtifacts")); }
        }
        private ObjectSet<UserRecentArtifact> _userRecentArtifacts;
    
        public ObjectSet<UserRecentProject> UserRecentProjects
        {
            get { return _userRecentProjects  ?? (_userRecentProjects = CreateObjectSet<UserRecentProject>("UserRecentProjects")); }
        }
        private ObjectSet<UserRecentProject> _userRecentProjects;
    
        public ObjectSet<WorkflowTransitionStandardTask> WorkflowTransitionStandardTasks
        {
            get { return _workflowTransitionStandardTasks  ?? (_workflowTransitionStandardTasks = CreateObjectSet<WorkflowTransitionStandardTask>("WorkflowTransitionStandardTasks")); }
        }
        private ObjectSet<WorkflowTransitionStandardTask> _workflowTransitionStandardTasks;
    
        public ObjectSet<WorkflowTransitionStandardTestCase> WorkflowTransitionStandardTestCases
        {
            get { return _workflowTransitionStandardTestCases  ?? (_workflowTransitionStandardTestCases = CreateObjectSet<WorkflowTransitionStandardTestCase>("WorkflowTransitionStandardTestCases")); }
        }
        private ObjectSet<WorkflowTransitionStandardTestCase> _workflowTransitionStandardTestCases;
    
        public ObjectSet<WorkspaceType> WorkspaceTypes
        {
            get { return _workspaceTypes  ?? (_workspaceTypes = CreateObjectSet<WorkspaceType>("WorkspaceTypes")); }
        }
        private ObjectSet<WorkspaceType> _workspaceTypes;
    
        public ObjectSet<GlobalHistoryChangeset> GlobalHistoryChangesets
        {
            get { return _globalHistoryChangesets  ?? (_globalHistoryChangesets = CreateObjectSet<GlobalHistoryChangeset>("GlobalHistoryChangesets")); }
        }
        private ObjectSet<GlobalHistoryChangeset> _globalHistoryChangesets;
    
        public ObjectSet<GlobalHistoryDetails> GlobalHistoryDetails
        {
            get { return _globalHistoryDetails  ?? (_globalHistoryDetails = CreateObjectSet<GlobalHistoryDetails>("GlobalHistoryDetails")); }
        }
        private ObjectSet<GlobalHistoryDetails> _globalHistoryDetails;
    
        public ObjectSet<R_ArtifactType> R_ArtifactTypes
        {
            get { return _r_ArtifactTypes  ?? (_r_ArtifactTypes = CreateObjectSet<R_ArtifactType>("R_ArtifactTypes")); }
        }
        private ObjectSet<R_ArtifactType> _r_ArtifactTypes;
    
        public ObjectSet<R_IncidentPriority> R_IncidentPriorities
        {
            get { return _r_IncidentPriorities  ?? (_r_IncidentPriorities = CreateObjectSet<R_IncidentPriority>("R_IncidentPriorities")); }
        }
        private ObjectSet<R_IncidentPriority> _r_IncidentPriorities;
    
        public ObjectSet<R_IncidentSeverity> R_IncidentSeverities
        {
            get { return _r_IncidentSeverities  ?? (_r_IncidentSeverities = CreateObjectSet<R_IncidentSeverity>("R_IncidentSeverities")); }
        }
        private ObjectSet<R_IncidentSeverity> _r_IncidentSeverities;
    
        public ObjectSet<R_IncidentStatus> R_IncidentStatuses
        {
            get { return _r_IncidentStatuses  ?? (_r_IncidentStatuses = CreateObjectSet<R_IncidentStatus>("R_IncidentStatuses")); }
        }
        private ObjectSet<R_IncidentStatus> _r_IncidentStatuses;
    
        public ObjectSet<R_IncidentType> R_IncidentTypes
        {
            get { return _r_IncidentTypes  ?? (_r_IncidentTypes = CreateObjectSet<R_IncidentType>("R_IncidentTypes")); }
        }
        private ObjectSet<R_IncidentType> _r_IncidentTypes;
    
        public ObjectSet<R_DocumentStatus> R_DocumentStatuses
        {
            get { return _r_DocumentStatuses  ?? (_r_DocumentStatuses = CreateObjectSet<R_DocumentStatus>("R_DocumentStatuses")); }
        }
        private ObjectSet<R_DocumentStatus> _r_DocumentStatuses;
    
        public ObjectSet<R_DocumentType> R_DocumentTypes
        {
            get { return _r_DocumentTypes  ?? (_r_DocumentTypes = CreateObjectSet<R_DocumentType>("R_DocumentTypes")); }
        }
        private ObjectSet<R_DocumentType> _r_DocumentTypes;
    
        public ObjectSet<R_RequirementType> R_RequirementTypes
        {
            get { return _r_RequirementTypes  ?? (_r_RequirementTypes = CreateObjectSet<R_RequirementType>("R_RequirementTypes")); }
        }
        private ObjectSet<R_RequirementType> _r_RequirementTypes;
    
        public ObjectSet<R_RiskImpact> R_RiskImpacts
        {
            get { return _r_RiskImpacts  ?? (_r_RiskImpacts = CreateObjectSet<R_RiskImpact>("R_RiskImpacts")); }
        }
        private ObjectSet<R_RiskImpact> _r_RiskImpacts;
    
        public ObjectSet<R_RiskProbability> R_RiskProbabilities
        {
            get { return _r_RiskProbabilities  ?? (_r_RiskProbabilities = CreateObjectSet<R_RiskProbability>("R_RiskProbabilities")); }
        }
        private ObjectSet<R_RiskProbability> _r_RiskProbabilities;
    
        public ObjectSet<R_RiskStatus> R_RiskStatuses
        {
            get { return _r_RiskStatuses  ?? (_r_RiskStatuses = CreateObjectSet<R_RiskStatus>("R_RiskStatuses")); }
        }
        private ObjectSet<R_RiskStatus> _r_RiskStatuses;
    
        public ObjectSet<R_RiskType> R_RiskTypes
        {
            get { return _r_RiskTypes  ?? (_r_RiskTypes = CreateObjectSet<R_RiskType>("R_RiskTypes")); }
        }
        private ObjectSet<R_RiskType> _r_RiskTypes;
    
        public ObjectSet<R_TaskType> R_TaskTypes
        {
            get { return _r_TaskTypes  ?? (_r_TaskTypes = CreateObjectSet<R_TaskType>("R_TaskTypes")); }
        }
        private ObjectSet<R_TaskType> _r_TaskTypes;
    
        public ObjectSet<R_TestCaseType> R_TestCaseTypes
        {
            get { return _r_TestCaseTypes  ?? (_r_TestCaseTypes = CreateObjectSet<R_TestCaseType>("R_TestCaseTypes")); }
        }
        private ObjectSet<R_TestCaseType> _r_TestCaseTypes;
    
        public ObjectSet<R_TaskPriority> R_TaskPriorities
        {
            get { return _r_TaskPriorities  ?? (_r_TaskPriorities = CreateObjectSet<R_TaskPriority>("R_TaskPriorities")); }
        }
        private ObjectSet<R_TaskPriority> _r_TaskPriorities;
    
        public ObjectSet<R_AttachmentFolder> R_AttachmentFolders
        {
            get { return _r_AttachmentFolders  ?? (_r_AttachmentFolders = CreateObjectSet<R_AttachmentFolder>("R_AttachmentFolders")); }
        }
        private ObjectSet<R_AttachmentFolder> _r_AttachmentFolders;
    
        public ObjectSet<R_Portfolio> R_Portfolios
        {
            get { return _r_Portfolios  ?? (_r_Portfolios = CreateObjectSet<R_Portfolio>("R_Portfolios")); }
        }
        private ObjectSet<R_Portfolio> _r_Portfolios;
    
        public ObjectSet<R_ProjectMembership> R_ProjectMembership
        {
            get { return _r_ProjectMembership  ?? (_r_ProjectMembership = CreateObjectSet<R_ProjectMembership>("R_ProjectMembership")); }
        }
        private ObjectSet<R_ProjectMembership> _r_ProjectMembership;
    
        public ObjectSet<R_ProjectRole> R_ProjectRoles
        {
            get { return _r_ProjectRoles  ?? (_r_ProjectRoles = CreateObjectSet<R_ProjectRole>("R_ProjectRoles")); }
        }
        private ObjectSet<R_ProjectRole> _r_ProjectRoles;
    
        public ObjectSet<R_ProjectTemplate> R_ProjectTemplates
        {
            get { return _r_ProjectTemplates  ?? (_r_ProjectTemplates = CreateObjectSet<R_ProjectTemplate>("R_ProjectTemplates")); }
        }
        private ObjectSet<R_ProjectTemplate> _r_ProjectTemplates;
    
        public ObjectSet<Template> Templates
        {
            get { return _templates  ?? (_templates = CreateObjectSet<Template>("Templates")); }
        }
        private ObjectSet<Template> _templates;
    
        public ObjectSet<TemplateDataSource> TemplateDataSources
        {
            get { return _templateDataSources  ?? (_templateDataSources = CreateObjectSet<TemplateDataSource>("TemplateDataSources")); }
        }
        private ObjectSet<TemplateDataSource> _templateDataSources;
    
        public ObjectSet<TemplateOutputType> TemplateOutputTypes
        {
            get { return _templateOutputTypes  ?? (_templateOutputTypes = CreateObjectSet<TemplateOutputType>("TemplateOutputTypes")); }
        }
        private ObjectSet<TemplateOutputType> _templateOutputTypes;
    
        public ObjectSet<TemplateParameter> TemplateParameters
        {
            get { return _templateParameters  ?? (_templateParameters = CreateObjectSet<TemplateParameter>("TemplateParameters")); }
        }
        private ObjectSet<TemplateParameter> _templateParameters;
    
        public ObjectSet<PeriodicReviewAlertType> PeriodicReviewAlertTypes
        {
            get { return _periodicReviewAlertTypes  ?? (_periodicReviewAlertTypes = CreateObjectSet<PeriodicReviewAlertType>("PeriodicReviewAlertTypes")); }
        }
        private ObjectSet<PeriodicReviewAlertType> _periodicReviewAlertTypes;
    
        public ObjectSet<VW_RELEASE_LIST_INTERNAL> VW_RELEASE_LIST_INTERNAL
        {
            get { return _vW_RELEASE_LIST_INTERNAL  ?? (_vW_RELEASE_LIST_INTERNAL = CreateObjectSet<VW_RELEASE_LIST_INTERNAL>("VW_RELEASE_LIST_INTERNAL")); }
        }
        private ObjectSet<VW_RELEASE_LIST_INTERNAL> _vW_RELEASE_LIST_INTERNAL;
    
        public ObjectSet<VW_REQUIREMENT_LIST_INTERNAL> VW_REQUIREMENT_LIST_INTERNAL
        {
            get { return _vW_REQUIREMENT_LIST_INTERNAL  ?? (_vW_REQUIREMENT_LIST_INTERNAL = CreateObjectSet<VW_REQUIREMENT_LIST_INTERNAL>("VW_REQUIREMENT_LIST_INTERNAL")); }
        }
        private ObjectSet<VW_REQUIREMENT_LIST_INTERNAL> _vW_REQUIREMENT_LIST_INTERNAL;
    
        public ObjectSet<VW_TESTSET_TESTCASE_LIST_INTERNAL> VW_TESTSET_TESTCASE_LIST_INTERNAL
        {
            get { return _vW_TESTSET_TESTCASE_LIST_INTERNAL  ?? (_vW_TESTSET_TESTCASE_LIST_INTERNAL = CreateObjectSet<VW_TESTSET_TESTCASE_LIST_INTERNAL>("VW_TESTSET_TESTCASE_LIST_INTERNAL")); }
        }
        private ObjectSet<VW_TESTSET_TESTCASE_LIST_INTERNAL> _vW_TESTSET_TESTCASE_LIST_INTERNAL;
    
        public ObjectSet<PeriodicReviewNotification> PeriodicReviewNotifications
        {
            get { return _periodicReviewNotifications  ?? (_periodicReviewNotifications = CreateObjectSet<PeriodicReviewNotification>("PeriodicReviewNotifications")); }
        }
        private ObjectSet<PeriodicReviewNotification> _periodicReviewNotifications;
    
        public ObjectSet<ProjectSignature> ProjectSignatures
        {
            get { return _projectSignatures  ?? (_projectSignatures = CreateObjectSet<ProjectSignature>("ProjectSignatures")); }
        }
        private ObjectSet<ProjectSignature> _projectSignatures;
    
        public ObjectSet<TestCaseSignature> TestCaseSignatures
        {
            get { return _testCaseSignatures  ?? (_testCaseSignatures = CreateObjectSet<TestCaseSignature>("TestCaseSignatures")); }
        }
        private ObjectSet<TestCaseSignature> _testCaseSignatures;
    
        public ObjectSet<TestCaseApprovalWorkflow> TestCaseApprovalWorkflows
        {
            get { return _testCaseApprovalWorkflows  ?? (_testCaseApprovalWorkflows = CreateObjectSet<TestCaseApprovalWorkflow>("TestCaseApprovalWorkflows")); }
        }
        private ObjectSet<TestCaseApprovalWorkflow> _testCaseApprovalWorkflows;
    
        public ObjectSet<TestCaseApprovalUser> TestCaseApprovalUsers
        {
            get { return _testCaseApprovalUsers  ?? (_testCaseApprovalUsers = CreateObjectSet<TestCaseApprovalUser>("TestCaseApprovalUsers")); }
        }
        private ObjectSet<TestCaseApprovalUser> _testCaseApprovalUsers;

		public ObjectSet<TST_ARTIFACT_SIGNATURE> ArtifactSignatures
		{
			get { return _artifactSignatures ?? (_artifactSignatures = CreateObjectSet<TST_ARTIFACT_SIGNATURE>("TST_ARTIFACT_SIGNATURE")); }
		}
		private ObjectSet<TST_ARTIFACT_SIGNATURE> _artifactSignatures;

		public ObjectSet<TST_REQUIREMENT_SIGNATURE> RequirementSignatures
		{
			get { return _requirementSignatures ?? (_requirementSignatures = CreateObjectSet<TST_REQUIREMENT_SIGNATURE>("TST_REQUIREMENT_SIGNATURE")); }
		}
		private ObjectSet<TST_REQUIREMENT_SIGNATURE> _requirementSignatures;

		public ObjectSet<TST_REQUIREMENT_APPROVAL_WORKFLOW> RequirementApprovalWorkflows
		{
			get { return _requirementApprovalWorkflows ?? (_requirementApprovalWorkflows = CreateObjectSet<TST_REQUIREMENT_APPROVAL_WORKFLOW>("TST_REQUIREMENT_APPROVAL_WORKFLOW")); }
		}
		private ObjectSet<TST_REQUIREMENT_APPROVAL_WORKFLOW> _requirementApprovalWorkflows;

		public ObjectSet<TST_REQUIREMENT_APPROVAL_USERS> RequirementApprovalUsers
		{
			get { return _requirementApprovalUsers ?? (_requirementApprovalUsers = CreateObjectSet<TST_REQUIREMENT_APPROVAL_USERS>("TST_REQUIREMENT_APPROVAL_USERS")); }
		}
		private ObjectSet<TST_REQUIREMENT_APPROVAL_USERS> _requirementApprovalUsers;

		public ObjectSet<TestCasePreparationStatus> TestCasePreparationStatus
        {
            get { return _testCasePreparationStatus  ?? (_testCasePreparationStatus = CreateObjectSet<TestCasePreparationStatus>("TestCasePreparationStatus")); }
        }
        private ObjectSet<TestCasePreparationStatus> _testCasePreparationStatus;
    
        public ObjectSet<TST_ERROR_LOG> TST_ERROR_LOG
        {
            get { return _tST_ERROR_LOG  ?? (_tST_ERROR_LOG = CreateObjectSet<TST_ERROR_LOG>("TST_ERROR_LOG")); }
        }
        private ObjectSet<TST_ERROR_LOG> _tST_ERROR_LOG;
    
        public ObjectSet<Schedule> Schedules
        {
            get { return _schedules  ?? (_schedules = CreateObjectSet<Schedule>("Schedules")); }
        }
        private ObjectSet<Schedule> _schedules;
    
        public ObjectSet<UsageLog> UsageLogs
        {
            get { return _usageLogs  ?? (_usageLogs = CreateObjectSet<UsageLog>("UsageLogs")); }
        }
        private ObjectSet<UsageLog> _usageLogs;

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual int User_DeleteRelated(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction("User_DeleteRelated", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="lastDateToKeep">No Metadata Documentation available.</param>
        public virtual int Logger_DeleteOld(Nullable<System.DateTime> lastDateToKeep)
        {
    
            ObjectParameter lastDateToKeepParameter;
    
            if (lastDateToKeep.HasValue)
            {
                lastDateToKeepParameter = new ObjectParameter("LastDateToKeep", lastDateToKeep);
            }
            else
            {
                lastDateToKeepParameter = new ObjectParameter("LastDateToKeep", typeof(System.DateTime));
            }
            return base.ExecuteFunction("Logger_DeleteOld", lastDateToKeepParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="custumPropPrefix">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactListFieldDisplay> Artifact_RetrieveListFields(Nullable<int> projectId, Nullable<int> userId, Nullable<int> artifactTypeId, string custumPropPrefix)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter custumPropPrefixParameter;
    
            if (custumPropPrefix != null)
            {
                custumPropPrefixParameter = new ObjectParameter("CustumPropPrefix", custumPropPrefix);
            }
            else
            {
                custumPropPrefixParameter = new ObjectParameter("CustumPropPrefix", typeof(string));
            }
            return base.ExecuteFunction<ArtifactListFieldDisplay>("Artifact_RetrieveListFields", projectIdParameter, userIdParameter, artifactTypeIdParameter, custumPropPrefixParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="custumPropPrefix">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactFieldDisplay> Artifact_RetrieveAllFields(Nullable<int> projectId, Nullable<int> artifactTypeId, string custumPropPrefix)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter custumPropPrefixParameter;
    
            if (custumPropPrefix != null)
            {
                custumPropPrefixParameter = new ObjectParameter("CustumPropPrefix", custumPropPrefix);
            }
            else
            {
                custumPropPrefixParameter = new ObjectParameter("CustumPropPrefix", typeof(string));
            }
            return base.ExecuteFunction<ArtifactFieldDisplay>("Artifact_RetrieveAllFields", projectIdParameter, artifactTypeIdParameter, custumPropPrefixParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactView> Artifact_RetrieveByKeyword(string keywords, string projectArtifactList, Nullable<int> startRow, Nullable<int> numRows)
        {
    
            ObjectParameter keywordsParameter;
    
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
    
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
    
            ObjectParameter startRowParameter;
    
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
            return base.ExecuteFunction<ArtifactView>("Artifact_RetrieveByKeyword", keywordsParameter, projectArtifactListParameter, startRowParameter, numRowsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        public ObjectResult<ArtifactView> Artifact_RetrieveByKeyword(string keywords, string projectArtifactList, Nullable<int> startRow, Nullable<int> numRows, MergeOption mergeOption)
        {
            ObjectParameter keywordsParameter;
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
    
            ObjectParameter startRowParameter;
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            return base.ExecuteFunction<ArtifactView>("Artifact_RetrieveByKeyword", mergeOption, keywordsParameter, projectArtifactListParameter, startRowParameter, numRowsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="keywords">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Artifact_CountByKeyword(string keywords, string projectArtifactList)
        {
    
            ObjectParameter keywordsParameter;
    
            if (keywords != null)
            {
                keywordsParameter = new ObjectParameter("Keywords", keywords);
            }
            else
            {
                keywordsParameter = new ObjectParameter("Keywords", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
    
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("Artifact_CountByKeyword", keywordsParameter, projectArtifactListParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="onlyExpanded">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementView> Requirement_Retrieve(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> onlyExpanded, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
    
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter onlyExpandedParameter;
    
            if (onlyExpanded.HasValue)
            {
                onlyExpandedParameter = new ObjectParameter("OnlyExpanded", onlyExpanded);
            }
            else
            {
                onlyExpandedParameter = new ObjectParameter("OnlyExpanded", typeof(bool));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<RequirementView>("Requirement_Retrieve", userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, onlyExpandedParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="onlyExpanded">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public ObjectResult<RequirementView> Requirement_Retrieve(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> onlyExpanded, Nullable<bool> includeDeleted, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter onlyExpandedParameter;
            if (onlyExpanded.HasValue)
            {
                onlyExpandedParameter = new ObjectParameter("OnlyExpanded", onlyExpanded);
            }
            else
            {
                onlyExpandedParameter = new ObjectParameter("OnlyExpanded", typeof(bool));
            }
    
            ObjectParameter includeDeletedParameter;
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            return base.ExecuteFunction<RequirementView>("Requirement_Retrieve", mergeOption, userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, onlyExpandedParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int Requirement_SaveCoverageInsert(Nullable<int> requirementId, Nullable<int> testCaseId)
        {
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_SaveCoverageInsert", requirementIdParameter, testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int Requirement_SaveCoverageDelete(Nullable<int> requirementId, Nullable<int> testCaseId)
        {
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_SaveCoverageDelete", requirementIdParameter, testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filterSort">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        /// <param name="onlyShowVisible">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementView> Requirement_RetrieveCustom(Nullable<int> userId, Nullable<int> projectId, string filterSort, Nullable<int> numRows, Nullable<bool> includeDeleted, Nullable<bool> onlyShowVisible)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filterSortParameter;
    
            if (filterSort != null)
            {
                filterSortParameter = new ObjectParameter("FilterSort", filterSort);
            }
            else
            {
                filterSortParameter = new ObjectParameter("FilterSort", typeof(string));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            ObjectParameter onlyShowVisibleParameter;
    
            if (onlyShowVisible.HasValue)
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", onlyShowVisible);
            }
            else
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", typeof(bool));
            }
            return base.ExecuteFunction<RequirementView>("Requirement_RetrieveCustom", userIdParameter, projectIdParameter, filterSortParameter, numRowsParameter, includeDeletedParameter, onlyShowVisibleParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filterSort">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        /// <param name="onlyShowVisible">No Metadata Documentation available.</param>
        public ObjectResult<RequirementView> Requirement_RetrieveCustom(Nullable<int> userId, Nullable<int> projectId, string filterSort, Nullable<int> numRows, Nullable<bool> includeDeleted, Nullable<bool> onlyShowVisible, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filterSortParameter;
            if (filterSort != null)
            {
                filterSortParameter = new ObjectParameter("FilterSort", filterSort);
            }
            else
            {
                filterSortParameter = new ObjectParameter("FilterSort", typeof(string));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            ObjectParameter onlyShowVisibleParameter;
            if (onlyShowVisible.HasValue)
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", onlyShowVisible);
            }
            else
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", typeof(bool));
            }
    
            return base.ExecuteFunction<RequirementView>("Requirement_RetrieveCustom", mergeOption, userIdParameter, projectIdParameter, filterSortParameter, numRowsParameter, includeDeletedParameter, onlyShowVisibleParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementView> Requirement_RetrieveNonSummary(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
    
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<RequirementView>("Requirement_RetrieveNonSummary", userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public ObjectResult<RequirementView> Requirement_RetrieveNonSummary(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> includeDeleted, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            return base.ExecuteFunction<RequirementView>("Requirement_RetrieveNonSummary", mergeOption, userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="statusId">No Metadata Documentation available.</param>
        /// <param name="typeId">No Metadata Documentation available.</param>
        /// <param name="authorId">No Metadata Documentation available.</param>
        /// <param name="ownerId">No Metadata Documentation available.</param>
        /// <param name="importanceId">No Metadata Documentation available.</param>
        /// <param name="componentId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="creationDate">No Metadata Documentation available.</param>
        /// <param name="lastUpdateDate">No Metadata Documentation available.</param>
        /// <param name="concurrencyDate">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        /// <param name="isSummary">No Metadata Documentation available.</param>
        /// <param name="coverageCountTotal">No Metadata Documentation available.</param>
        /// <param name="coverageCountPassed">No Metadata Documentation available.</param>
        /// <param name="coverageCountFailed">No Metadata Documentation available.</param>
        /// <param name="coverageCountCaution">No Metadata Documentation available.</param>
        /// <param name="coverageCountBlocked">No Metadata Documentation available.</param>
        /// <param name="isAttachments">No Metadata Documentation available.</param>
        /// <param name="taskCount">No Metadata Documentation available.</param>
        /// <param name="taskPercentOnTime">No Metadata Documentation available.</param>
        /// <param name="taskPercentLateFinish">No Metadata Documentation available.</param>
        /// <param name="taskPercentNotStart">No Metadata Documentation available.</param>
        /// <param name="taskPercentLateStart">No Metadata Documentation available.</param>
        /// <param name="estimatePoints">No Metadata Documentation available.</param>
        /// <param name="estimatedEffort">No Metadata Documentation available.</param>
        /// <param name="isExpanded">No Metadata Documentation available.</param>
        /// <param name="isVisible">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Requirement_Insert(Nullable<int> projectId, Nullable<int> releaseId, Nullable<int> statusId, Nullable<int> typeId, Nullable<int> authorId, Nullable<int> ownerId, Nullable<int> importanceId, Nullable<int> componentId, string name, string description, Nullable<System.DateTime> creationDate, Nullable<System.DateTime> lastUpdateDate, Nullable<System.DateTime> concurrencyDate, string indentLevel, Nullable<bool> isSummary, Nullable<int> coverageCountTotal, Nullable<int> coverageCountPassed, Nullable<int> coverageCountFailed, Nullable<int> coverageCountCaution, Nullable<int> coverageCountBlocked, Nullable<bool> isAttachments, Nullable<int> taskCount, Nullable<int> taskPercentOnTime, Nullable<int> taskPercentLateFinish, Nullable<int> taskPercentNotStart, Nullable<int> taskPercentLateStart, Nullable<decimal> estimatePoints, Nullable<int> estimatedEffort, Nullable<bool> isExpanded, Nullable<bool> isVisible, Nullable<int> userId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter statusIdParameter;
    
            if (statusId.HasValue)
            {
                statusIdParameter = new ObjectParameter("StatusId", statusId);
            }
            else
            {
                statusIdParameter = new ObjectParameter("StatusId", typeof(int));
            }
    
            ObjectParameter typeIdParameter;
    
            if (typeId.HasValue)
            {
                typeIdParameter = new ObjectParameter("TypeId", typeId);
            }
            else
            {
                typeIdParameter = new ObjectParameter("TypeId", typeof(int));
            }
    
            ObjectParameter authorIdParameter;
    
            if (authorId.HasValue)
            {
                authorIdParameter = new ObjectParameter("AuthorId", authorId);
            }
            else
            {
                authorIdParameter = new ObjectParameter("AuthorId", typeof(int));
            }
    
            ObjectParameter ownerIdParameter;
    
            if (ownerId.HasValue)
            {
                ownerIdParameter = new ObjectParameter("OwnerId", ownerId);
            }
            else
            {
                ownerIdParameter = new ObjectParameter("OwnerId", typeof(int));
            }
    
            ObjectParameter importanceIdParameter;
    
            if (importanceId.HasValue)
            {
                importanceIdParameter = new ObjectParameter("ImportanceId", importanceId);
            }
            else
            {
                importanceIdParameter = new ObjectParameter("ImportanceId", typeof(int));
            }
    
            ObjectParameter componentIdParameter;
    
            if (componentId.HasValue)
            {
                componentIdParameter = new ObjectParameter("ComponentId", componentId);
            }
            else
            {
                componentIdParameter = new ObjectParameter("ComponentId", typeof(int));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter creationDateParameter;
    
            if (creationDate.HasValue)
            {
                creationDateParameter = new ObjectParameter("CreationDate", creationDate);
            }
            else
            {
                creationDateParameter = new ObjectParameter("CreationDate", typeof(System.DateTime));
            }
    
            ObjectParameter lastUpdateDateParameter;
    
            if (lastUpdateDate.HasValue)
            {
                lastUpdateDateParameter = new ObjectParameter("LastUpdateDate", lastUpdateDate);
            }
            else
            {
                lastUpdateDateParameter = new ObjectParameter("LastUpdateDate", typeof(System.DateTime));
            }
    
            ObjectParameter concurrencyDateParameter;
    
            if (concurrencyDate.HasValue)
            {
                concurrencyDateParameter = new ObjectParameter("ConcurrencyDate", concurrencyDate);
            }
            else
            {
                concurrencyDateParameter = new ObjectParameter("ConcurrencyDate", typeof(System.DateTime));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
    
            ObjectParameter isSummaryParameter;
    
            if (isSummary.HasValue)
            {
                isSummaryParameter = new ObjectParameter("IsSummary", isSummary);
            }
            else
            {
                isSummaryParameter = new ObjectParameter("IsSummary", typeof(bool));
            }
    
            ObjectParameter coverageCountTotalParameter;
    
            if (coverageCountTotal.HasValue)
            {
                coverageCountTotalParameter = new ObjectParameter("CoverageCountTotal", coverageCountTotal);
            }
            else
            {
                coverageCountTotalParameter = new ObjectParameter("CoverageCountTotal", typeof(int));
            }
    
            ObjectParameter coverageCountPassedParameter;
    
            if (coverageCountPassed.HasValue)
            {
                coverageCountPassedParameter = new ObjectParameter("CoverageCountPassed", coverageCountPassed);
            }
            else
            {
                coverageCountPassedParameter = new ObjectParameter("CoverageCountPassed", typeof(int));
            }
    
            ObjectParameter coverageCountFailedParameter;
    
            if (coverageCountFailed.HasValue)
            {
                coverageCountFailedParameter = new ObjectParameter("CoverageCountFailed", coverageCountFailed);
            }
            else
            {
                coverageCountFailedParameter = new ObjectParameter("CoverageCountFailed", typeof(int));
            }
    
            ObjectParameter coverageCountCautionParameter;
    
            if (coverageCountCaution.HasValue)
            {
                coverageCountCautionParameter = new ObjectParameter("CoverageCountCaution", coverageCountCaution);
            }
            else
            {
                coverageCountCautionParameter = new ObjectParameter("CoverageCountCaution", typeof(int));
            }
    
            ObjectParameter coverageCountBlockedParameter;
    
            if (coverageCountBlocked.HasValue)
            {
                coverageCountBlockedParameter = new ObjectParameter("CoverageCountBlocked", coverageCountBlocked);
            }
            else
            {
                coverageCountBlockedParameter = new ObjectParameter("CoverageCountBlocked", typeof(int));
            }
    
            ObjectParameter isAttachmentsParameter;
    
            if (isAttachments.HasValue)
            {
                isAttachmentsParameter = new ObjectParameter("IsAttachments", isAttachments);
            }
            else
            {
                isAttachmentsParameter = new ObjectParameter("IsAttachments", typeof(bool));
            }
    
            ObjectParameter taskCountParameter;
    
            if (taskCount.HasValue)
            {
                taskCountParameter = new ObjectParameter("TaskCount", taskCount);
            }
            else
            {
                taskCountParameter = new ObjectParameter("TaskCount", typeof(int));
            }
    
            ObjectParameter taskPercentOnTimeParameter;
    
            if (taskPercentOnTime.HasValue)
            {
                taskPercentOnTimeParameter = new ObjectParameter("TaskPercentOnTime", taskPercentOnTime);
            }
            else
            {
                taskPercentOnTimeParameter = new ObjectParameter("TaskPercentOnTime", typeof(int));
            }
    
            ObjectParameter taskPercentLateFinishParameter;
    
            if (taskPercentLateFinish.HasValue)
            {
                taskPercentLateFinishParameter = new ObjectParameter("TaskPercentLateFinish", taskPercentLateFinish);
            }
            else
            {
                taskPercentLateFinishParameter = new ObjectParameter("TaskPercentLateFinish", typeof(int));
            }
    
            ObjectParameter taskPercentNotStartParameter;
    
            if (taskPercentNotStart.HasValue)
            {
                taskPercentNotStartParameter = new ObjectParameter("TaskPercentNotStart", taskPercentNotStart);
            }
            else
            {
                taskPercentNotStartParameter = new ObjectParameter("TaskPercentNotStart", typeof(int));
            }
    
            ObjectParameter taskPercentLateStartParameter;
    
            if (taskPercentLateStart.HasValue)
            {
                taskPercentLateStartParameter = new ObjectParameter("TaskPercentLateStart", taskPercentLateStart);
            }
            else
            {
                taskPercentLateStartParameter = new ObjectParameter("TaskPercentLateStart", typeof(int));
            }
    
            ObjectParameter estimatePointsParameter;
    
            if (estimatePoints.HasValue)
            {
                estimatePointsParameter = new ObjectParameter("EstimatePoints", estimatePoints);
            }
            else
            {
                estimatePointsParameter = new ObjectParameter("EstimatePoints", typeof(decimal));
            }
    
            ObjectParameter estimatedEffortParameter;
    
            if (estimatedEffort.HasValue)
            {
                estimatedEffortParameter = new ObjectParameter("EstimatedEffort", estimatedEffort);
            }
            else
            {
                estimatedEffortParameter = new ObjectParameter("EstimatedEffort", typeof(int));
            }
    
            ObjectParameter isExpandedParameter;
    
            if (isExpanded.HasValue)
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", isExpanded);
            }
            else
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", typeof(bool));
            }
    
            ObjectParameter isVisibleParameter;
    
            if (isVisible.HasValue)
            {
                isVisibleParameter = new ObjectParameter("IsVisible", isVisible);
            }
            else
            {
                isVisibleParameter = new ObjectParameter("IsVisible", typeof(bool));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Requirement_Insert", projectIdParameter, releaseIdParameter, statusIdParameter, typeIdParameter, authorIdParameter, ownerIdParameter, importanceIdParameter, componentIdParameter, nameParameter, descriptionParameter, creationDateParameter, lastUpdateDateParameter, concurrencyDateParameter, indentLevelParameter, isSummaryParameter, coverageCountTotalParameter, coverageCountPassedParameter, coverageCountFailedParameter, coverageCountCautionParameter, coverageCountBlockedParameter, isAttachmentsParameter, taskCountParameter, taskPercentOnTimeParameter, taskPercentLateFinishParameter, taskPercentNotStartParameter, taskPercentLateStartParameter, estimatePointsParameter, estimatedEffortParameter, isExpandedParameter, isVisibleParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Requirement_Count(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Requirement_Count", userIdParameter, projectIdParameter, filtersParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        /// <param name="requirementStatusesToIgnore">No Metadata Documentation available.</param>
        /// <param name="activeReleasesOnly">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementCoverageSummary> Requirement_RetrieveGroupCoverage(Nullable<int> projectGroupId, string requirementStatusesToIgnore, Nullable<bool> activeReleasesOnly, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
    
            ObjectParameter requirementStatusesToIgnoreParameter;
    
            if (requirementStatusesToIgnore != null)
            {
                requirementStatusesToIgnoreParameter = new ObjectParameter("RequirementStatusesToIgnore", requirementStatusesToIgnore);
            }
            else
            {
                requirementStatusesToIgnoreParameter = new ObjectParameter("RequirementStatusesToIgnore", typeof(string));
            }
    
            ObjectParameter activeReleasesOnlyParameter;
    
            if (activeReleasesOnly.HasValue)
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", activeReleasesOnly);
            }
            else
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", typeof(bool));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<RequirementCoverageSummary>("Requirement_RetrieveGroupCoverage", projectGroupIdParameter, requirementStatusesToIgnoreParameter, activeReleasesOnlyParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="requirementStatusesToIgnore">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<double>> Requirement_RetrieveNotCoveredCount(Nullable<int> projectId, Nullable<int> releaseId, string requirementStatusesToIgnore)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter requirementStatusesToIgnoreParameter;
    
            if (requirementStatusesToIgnore != null)
            {
                requirementStatusesToIgnoreParameter = new ObjectParameter("RequirementStatusesToIgnore", requirementStatusesToIgnore);
            }
            else
            {
                requirementStatusesToIgnoreParameter = new ObjectParameter("RequirementStatusesToIgnore", typeof(string));
            }
            return base.ExecuteFunction<Nullable<double>>("Requirement_RetrieveNotCoveredCount", projectIdParameter, releaseIdParameter, requirementStatusesToIgnoreParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementCoverageSummary> Requirement_RetrieveCoverageSummary(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<RequirementCoverageSummary>("Requirement_RetrieveCoverageSummary", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="numberOfRows">No Metadata Documentation available.</param>
        /// <param name="onlyIncludeWithOpenIncidents">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementIncidentCount> Requirement_RetrieveIncidentCount(Nullable<int> projectId, Nullable<int> releaseId, Nullable<int> numberOfRows, Nullable<bool> onlyIncludeWithOpenIncidents)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter numberOfRowsParameter;
    
            if (numberOfRows.HasValue)
            {
                numberOfRowsParameter = new ObjectParameter("NumberOfRows", numberOfRows);
            }
            else
            {
                numberOfRowsParameter = new ObjectParameter("NumberOfRows", typeof(int));
            }
    
            ObjectParameter onlyIncludeWithOpenIncidentsParameter;
    
            if (onlyIncludeWithOpenIncidents.HasValue)
            {
                onlyIncludeWithOpenIncidentsParameter = new ObjectParameter("OnlyIncludeWithOpenIncidents", onlyIncludeWithOpenIncidents);
            }
            else
            {
                onlyIncludeWithOpenIncidentsParameter = new ObjectParameter("OnlyIncludeWithOpenIncidents", typeof(bool));
            }
            return base.ExecuteFunction<RequirementIncidentCount>("Requirement_RetrieveIncidentCount", projectIdParameter, releaseIdParameter, numberOfRowsParameter, onlyIncludeWithOpenIncidentsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Requirement_CountNonSummary(Nullable<int> projectId, string filters, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Requirement_CountNonSummary", projectIdParameter, filtersParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<string> Requirement_GetPreviousPeer(Nullable<int> projectId, string indentLevel, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<string>("Requirement_GetPreviousPeer", projectIdParameter, indentLevelParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Requirement_GetSelfAndChildren(Nullable<int> projectId, Nullable<int> requirementId, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Requirement_GetSelfAndChildren", projectIdParameter, requirementIdParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="summaryRequirementId">No Metadata Documentation available.</param>
        public virtual int Requirement_Collapse(Nullable<int> userId, Nullable<int> projectId, Nullable<int> summaryRequirementId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter summaryRequirementIdParameter;
    
            if (summaryRequirementId.HasValue)
            {
                summaryRequirementIdParameter = new ObjectParameter("SummaryRequirementId", summaryRequirementId);
            }
            else
            {
                summaryRequirementIdParameter = new ObjectParameter("SummaryRequirementId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_Collapse", userIdParameter, projectIdParameter, summaryRequirementIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Requirement_Expand(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Requirement_Expand", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="level">No Metadata Documentation available.</param>
        public virtual int Requirement_ExpandToLevel(Nullable<int> userId, Nullable<int> projectId, Nullable<int> level)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter levelParameter;
    
            if (level.HasValue)
            {
                levelParameter = new ObjectParameter("Level", level);
            }
            else
            {
                levelParameter = new ObjectParameter("Level", typeof(int));
            }
            return base.ExecuteFunction("Requirement_ExpandToLevel", userIdParameter, projectIdParameter, levelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        public virtual int Requirement_Delete(Nullable<int> requirementId)
        {
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_Delete", requirementIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual int Requirement_DeleteNavigationData(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_DeleteNavigationData", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Requirement_InsertFiller(Nullable<int> projectId, string name, string indentLevel)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Requirement_InsertFiller", projectIdParameter, nameParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="isExpanded">No Metadata Documentation available.</param>
        /// <param name="isVisible">No Metadata Documentation available.</param>
        /// <param name="isSummary">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Requirement_UpdatePositional(Nullable<int> requirementId, Nullable<int> userId, Nullable<bool> isExpanded, Nullable<bool> isVisible, Nullable<bool> isSummary, string indentLevel)
        {
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter isExpandedParameter;
    
            if (isExpanded.HasValue)
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", isExpanded);
            }
            else
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", typeof(bool));
            }
    
            ObjectParameter isVisibleParameter;
    
            if (isVisible.HasValue)
            {
                isVisibleParameter = new ObjectParameter("IsVisible", isVisible);
            }
            else
            {
                isVisibleParameter = new ObjectParameter("IsVisible", typeof(bool));
            }
    
            ObjectParameter isSummaryParameter;
    
            if (isSummary.HasValue)
            {
                isSummaryParameter = new ObjectParameter("IsSummary", isSummary);
            }
            else
            {
                isSummaryParameter = new ObjectParameter("IsSummary", typeof(bool));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Requirement_UpdatePositional", requirementIdParameter, userIdParameter, isExpandedParameter, isVisibleParameter, isSummaryParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        /// <param name="changeStatusFromTasks">No Metadata Documentation available.</param>
        /// <param name="changeStatusFromTestCases">No Metadata Documentation available.</param>
        public virtual int Requirement_RefreshTaskTestInfo(Nullable<int> projectId, Nullable<int> requirementId, string indentLevel, Nullable<bool> changeStatusFromTasks, Nullable<bool> changeStatusFromTestCases)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
    
            ObjectParameter changeStatusFromTasksParameter;
    
            if (changeStatusFromTasks.HasValue)
            {
                changeStatusFromTasksParameter = new ObjectParameter("ChangeStatusFromTasks", changeStatusFromTasks);
            }
            else
            {
                changeStatusFromTasksParameter = new ObjectParameter("ChangeStatusFromTasks", typeof(bool));
            }
    
            ObjectParameter changeStatusFromTestCasesParameter;
    
            if (changeStatusFromTestCases.HasValue)
            {
                changeStatusFromTestCasesParameter = new ObjectParameter("ChangeStatusFromTestCases", changeStatusFromTestCases);
            }
            else
            {
                changeStatusFromTestCasesParameter = new ObjectParameter("ChangeStatusFromTestCases", typeof(bool));
            }
            return base.ExecuteFunction("Requirement_RefreshTaskTestInfo", projectIdParameter, requirementIdParameter, indentLevelParameter, changeStatusFromTasksParameter, changeStatusFromTestCasesParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="importanceId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementStatusCountInfo> Requirement_RetrieveCountByImportance(Nullable<int> projectId, Nullable<int> importanceId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter importanceIdParameter;
    
            if (importanceId.HasValue)
            {
                importanceIdParameter = new ObjectParameter("ImportanceId", importanceId);
            }
            else
            {
                importanceIdParameter = new ObjectParameter("ImportanceId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<RequirementStatusCountInfo>("Requirement_RetrieveCountByImportance", projectIdParameter, importanceIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        public virtual int Requirement_FocusOn(Nullable<int> userId, Nullable<int> requirementId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
            return base.ExecuteFunction("Requirement_FocusOn", userIdParameter, requirementIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="taskId">No Metadata Documentation available.</param>
        public virtual int Task_Delete(Nullable<int> taskId)
        {
    
            ObjectParameter taskIdParameter;
    
            if (taskId.HasValue)
            {
                taskIdParameter = new ObjectParameter("TaskId", taskId);
            }
            else
            {
                taskIdParameter = new ObjectParameter("TaskId", typeof(int));
            }
            return base.ExecuteFunction("Task_Delete", taskIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        /// <param name="activeReleasesOnly">No Metadata Documentation available.</param>
        public virtual ObjectResult<Task_GroupSummary> Task_RetrieveGroupSummary(Nullable<int> projectGroupId, Nullable<bool> activeReleasesOnly)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
    
            ObjectParameter activeReleasesOnlyParameter;
    
            if (activeReleasesOnly.HasValue)
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", activeReleasesOnly);
            }
            else
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", typeof(bool));
            }
            return base.ExecuteFunction<Task_GroupSummary>("Task_RetrieveGroupSummary", projectGroupIdParameter, activeReleasesOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="purgeDateTime">No Metadata Documentation available.</param>
        /// <param name="includeUnread">No Metadata Documentation available.</param>
        public virtual int Message_PurgeOld(Nullable<System.DateTime> purgeDateTime, Nullable<bool> includeUnread)
        {
    
            ObjectParameter purgeDateTimeParameter;
    
            if (purgeDateTime.HasValue)
            {
                purgeDateTimeParameter = new ObjectParameter("PurgeDateTime", purgeDateTime);
            }
            else
            {
                purgeDateTimeParameter = new ObjectParameter("PurgeDateTime", typeof(System.DateTime));
            }
    
            ObjectParameter includeUnreadParameter;
    
            if (includeUnread.HasValue)
            {
                includeUnreadParameter = new ObjectParameter("IncludeUnread", includeUnread);
            }
            else
            {
                includeUnreadParameter = new ObjectParameter("IncludeUnread", typeof(bool));
            }
            return base.ExecuteFunction("Message_PurgeOld", purgeDateTimeParameter, includeUnreadParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> TestCase_GetTotalReleaseDuration(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("TestCase_GetTotalReleaseDuration", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Requirement_GetReleaseEstimate(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Requirement_GetReleaseEstimate", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="incidentId">No Metadata Documentation available.</param>
        public virtual int Incident_Delete(Nullable<int> incidentId)
        {
    
            ObjectParameter incidentIdParameter;
    
            if (incidentId.HasValue)
            {
                incidentIdParameter = new ObjectParameter("IncidentId", incidentId);
            }
            else
            {
                incidentIdParameter = new ObjectParameter("IncidentId", typeof(int));
            }
            return base.ExecuteFunction("Incident_Delete", incidentIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentTestCoverage> Incident_RetrieveTestCoverage(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<IncidentTestCoverage>("Incident_RetrieveTestCoverage", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="useSeverity">No Metadata Documentation available.</param>
        /// <param name="useResolvedRelease">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentOpenCountByPrioritySeverity> Incident_RetrieveOpenCountByPrioritySeverity(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> useSeverity, Nullable<bool> useResolvedRelease)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter useSeverityParameter;
    
            if (useSeverity.HasValue)
            {
                useSeverityParameter = new ObjectParameter("UseSeverity", useSeverity);
            }
            else
            {
                useSeverityParameter = new ObjectParameter("UseSeverity", typeof(bool));
            }
    
            ObjectParameter useResolvedReleaseParameter;
    
            if (useResolvedRelease.HasValue)
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", useResolvedRelease);
            }
            else
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", typeof(bool));
            }
            return base.ExecuteFunction<IncidentOpenCountByPrioritySeverity>("Incident_RetrieveOpenCountByPrioritySeverity", projectIdParameter, releaseIdParameter, useSeverityParameter, useResolvedReleaseParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentAgeCount> Incident_RetrieveGroupAgingCount(Nullable<int> projectGroupId)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
            return base.ExecuteFunction<IncidentAgeCount>("Incident_RetrieveGroupAgingCount", projectGroupIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="priorityId">No Metadata Documentation available.</param>
        /// <param name="incidentTypeId">No Metadata Documentation available.</param>
        /// <param name="useResolvedRelease">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentStatusCount> Incident_RetrieveCountByPriority(Nullable<int> projectId, Nullable<int> releaseId, Nullable<int> priorityId, Nullable<int> incidentTypeId, Nullable<bool> useResolvedRelease, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter priorityIdParameter;
    
            if (priorityId.HasValue)
            {
                priorityIdParameter = new ObjectParameter("PriorityId", priorityId);
            }
            else
            {
                priorityIdParameter = new ObjectParameter("PriorityId", typeof(int));
            }
    
            ObjectParameter incidentTypeIdParameter;
    
            if (incidentTypeId.HasValue)
            {
                incidentTypeIdParameter = new ObjectParameter("IncidentTypeId", incidentTypeId);
            }
            else
            {
                incidentTypeIdParameter = new ObjectParameter("IncidentTypeId", typeof(int));
            }
    
            ObjectParameter useResolvedReleaseParameter;
    
            if (useResolvedRelease.HasValue)
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", useResolvedRelease);
            }
            else
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", typeof(bool));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<IncidentStatusCount>("Incident_RetrieveCountByPriority", projectIdParameter, releaseIdParameter, priorityIdParameter, incidentTypeIdParameter, useResolvedReleaseParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="severityId">No Metadata Documentation available.</param>
        /// <param name="incidentTypeId">No Metadata Documentation available.</param>
        /// <param name="useResolvedRelease">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentStatusCount> Incident_RetrieveCountBySeverity(Nullable<int> projectId, Nullable<int> releaseId, Nullable<int> severityId, Nullable<int> incidentTypeId, Nullable<bool> useResolvedRelease, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter severityIdParameter;
    
            if (severityId.HasValue)
            {
                severityIdParameter = new ObjectParameter("SeverityId", severityId);
            }
            else
            {
                severityIdParameter = new ObjectParameter("SeverityId", typeof(int));
            }
    
            ObjectParameter incidentTypeIdParameter;
    
            if (incidentTypeId.HasValue)
            {
                incidentTypeIdParameter = new ObjectParameter("IncidentTypeId", incidentTypeId);
            }
            else
            {
                incidentTypeIdParameter = new ObjectParameter("IncidentTypeId", typeof(int));
            }
    
            ObjectParameter useResolvedReleaseParameter;
    
            if (useResolvedRelease.HasValue)
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", useResolvedRelease);
            }
            else
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", typeof(bool));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<IncidentStatusCount>("Incident_RetrieveCountBySeverity", projectIdParameter, releaseIdParameter, severityIdParameter, incidentTypeIdParameter, useResolvedReleaseParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentAgeCount> Incident_RetrieveProjectAgingCount(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<IncidentAgeCount>("Incident_RetrieveProjectAgingCount", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        /// <param name="isOpenOnly">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentView> Incident_RetrieveByTestCase(Nullable<int> testCaseId, Nullable<bool> isOpenOnly)
        {
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
    
            ObjectParameter isOpenOnlyParameter;
    
            if (isOpenOnly.HasValue)
            {
                isOpenOnlyParameter = new ObjectParameter("IsOpenOnly", isOpenOnly);
            }
            else
            {
                isOpenOnlyParameter = new ObjectParameter("IsOpenOnly", typeof(bool));
            }
            return base.ExecuteFunction<IncidentView>("Incident_RetrieveByTestCase", testCaseIdParameter, isOpenOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        /// <param name="isOpenOnly">No Metadata Documentation available.</param>
        public ObjectResult<IncidentView> Incident_RetrieveByTestCase(Nullable<int> testCaseId, Nullable<bool> isOpenOnly, MergeOption mergeOption)
        {
            ObjectParameter testCaseIdParameter;
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
    
            ObjectParameter isOpenOnlyParameter;
            if (isOpenOnly.HasValue)
            {
                isOpenOnlyParameter = new ObjectParameter("IsOpenOnly", isOpenOnly);
            }
            else
            {
                isOpenOnlyParameter = new ObjectParameter("IsOpenOnly", typeof(bool));
            }
    
            return base.ExecuteFunction<IncidentView>("Incident_RetrieveByTestCase", mergeOption, testCaseIdParameter, isOpenOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        public virtual int ArtifactLink_DeleteByArtifact(Nullable<int> artifactTypeId, Nullable<int> artifactId)
        {
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
            return base.ExecuteFunction("ArtifactLink_DeleteByArtifact", artifactTypeIdParameter, artifactIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactLinkView> ArtifactLink_RetrieveByArtifact(Nullable<int> artifactTypeId, Nullable<int> artifactId)
        {
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
            return base.ExecuteFunction<ArtifactLinkView>("ArtifactLink_RetrieveByArtifact", artifactTypeIdParameter, artifactIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        public ObjectResult<ArtifactLinkView> ArtifactLink_RetrieveByArtifact(Nullable<int> artifactTypeId, Nullable<int> artifactId, MergeOption mergeOption)
        {
            ObjectParameter artifactTypeIdParameter;
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
    
            return base.ExecuteFunction<ArtifactLinkView>("ArtifactLink_RetrieveByArtifact", mergeOption, artifactTypeIdParameter, artifactIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sourceArtifactTypeId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="destArtifactTypeId">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactLinkView> ArtifactLink_RetrieveByArtifactWithDestType(Nullable<int> sourceArtifactTypeId, Nullable<int> sourceArtifactId, Nullable<int> destArtifactTypeId)
        {
    
            ObjectParameter sourceArtifactTypeIdParameter;
    
            if (sourceArtifactTypeId.HasValue)
            {
                sourceArtifactTypeIdParameter = new ObjectParameter("SourceArtifactTypeId", sourceArtifactTypeId);
            }
            else
            {
                sourceArtifactTypeIdParameter = new ObjectParameter("SourceArtifactTypeId", typeof(int));
            }
    
            ObjectParameter sourceArtifactIdParameter;
    
            if (sourceArtifactId.HasValue)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(int));
            }
    
            ObjectParameter destArtifactTypeIdParameter;
    
            if (destArtifactTypeId.HasValue)
            {
                destArtifactTypeIdParameter = new ObjectParameter("DestArtifactTypeId", destArtifactTypeId);
            }
            else
            {
                destArtifactTypeIdParameter = new ObjectParameter("DestArtifactTypeId", typeof(int));
            }
            return base.ExecuteFunction<ArtifactLinkView>("ArtifactLink_RetrieveByArtifactWithDestType", sourceArtifactTypeIdParameter, sourceArtifactIdParameter, destArtifactTypeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sourceArtifactTypeId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="destArtifactTypeId">No Metadata Documentation available.</param>
        public ObjectResult<ArtifactLinkView> ArtifactLink_RetrieveByArtifactWithDestType(Nullable<int> sourceArtifactTypeId, Nullable<int> sourceArtifactId, Nullable<int> destArtifactTypeId, MergeOption mergeOption)
        {
            ObjectParameter sourceArtifactTypeIdParameter;
            if (sourceArtifactTypeId.HasValue)
            {
                sourceArtifactTypeIdParameter = new ObjectParameter("SourceArtifactTypeId", sourceArtifactTypeId);
            }
            else
            {
                sourceArtifactTypeIdParameter = new ObjectParameter("SourceArtifactTypeId", typeof(int));
            }
    
            ObjectParameter sourceArtifactIdParameter;
            if (sourceArtifactId.HasValue)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(int));
            }
    
            ObjectParameter destArtifactTypeIdParameter;
            if (destArtifactTypeId.HasValue)
            {
                destArtifactTypeIdParameter = new ObjectParameter("DestArtifactTypeId", destArtifactTypeId);
            }
            else
            {
                destArtifactTypeIdParameter = new ObjectParameter("DestArtifactTypeId", typeof(int));
            }
    
            return base.ExecuteFunction<ArtifactLinkView>("ArtifactLink_RetrieveByArtifactWithDestType", mergeOption, sourceArtifactTypeIdParameter, sourceArtifactIdParameter, destArtifactTypeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="requirementIds">No Metadata Documentation available.</param>
        /// <param name="existingRank">No Metadata Documentation available.</param>
        public virtual int Requirement_UpdateRanks(Nullable<int> projectId, string requirementIds, Nullable<int> existingRank)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter requirementIdsParameter;
    
            if (requirementIds != null)
            {
                requirementIdsParameter = new ObjectParameter("RequirementIds", requirementIds);
            }
            else
            {
                requirementIdsParameter = new ObjectParameter("RequirementIds", typeof(string));
            }
    
            ObjectParameter existingRankParameter;
    
            if (existingRank.HasValue)
            {
                existingRankParameter = new ObjectParameter("ExistingRank", existingRank);
            }
            else
            {
                existingRankParameter = new ObjectParameter("ExistingRank", typeof(int));
            }
            return base.ExecuteFunction("Requirement_UpdateRanks", projectIdParameter, requirementIdsParameter, existingRankParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="incidentIds">No Metadata Documentation available.</param>
        /// <param name="existingRank">No Metadata Documentation available.</param>
        public virtual int Incident_UpdateRanks(Nullable<int> projectId, string incidentIds, Nullable<int> existingRank)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter incidentIdsParameter;
    
            if (incidentIds != null)
            {
                incidentIdsParameter = new ObjectParameter("IncidentIds", incidentIds);
            }
            else
            {
                incidentIdsParameter = new ObjectParameter("IncidentIds", typeof(string));
            }
    
            ObjectParameter existingRankParameter;
    
            if (existingRank.HasValue)
            {
                existingRankParameter = new ObjectParameter("ExistingRank", existingRank);
            }
            else
            {
                existingRankParameter = new ObjectParameter("ExistingRank", typeof(int));
            }
            return base.ExecuteFunction("Incident_UpdateRanks", projectIdParameter, incidentIdsParameter, existingRankParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        /// <param name="includeInherited">No Metadata Documentation available.</param>
        /// <param name="includeAlreadySet">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestCaseParameter> TestCase_RetrieveParameters(Nullable<int> testCaseId, Nullable<bool> includeInherited, Nullable<bool> includeAlreadySet)
        {
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
    
            ObjectParameter includeInheritedParameter;
    
            if (includeInherited.HasValue)
            {
                includeInheritedParameter = new ObjectParameter("IncludeInherited", includeInherited);
            }
            else
            {
                includeInheritedParameter = new ObjectParameter("IncludeInherited", typeof(bool));
            }
    
            ObjectParameter includeAlreadySetParameter;
    
            if (includeAlreadySet.HasValue)
            {
                includeAlreadySetParameter = new ObjectParameter("IncludeAlreadySet", includeAlreadySet);
            }
            else
            {
                includeAlreadySetParameter = new ObjectParameter("IncludeAlreadySet", typeof(bool));
            }
            return base.ExecuteFunction<TestCaseParameter>("TestCase_RetrieveParameters", testCaseIdParameter, includeInheritedParameter, includeAlreadySetParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        /// <param name="includeInherited">No Metadata Documentation available.</param>
        /// <param name="includeAlreadySet">No Metadata Documentation available.</param>
        public ObjectResult<TestCaseParameter> TestCase_RetrieveParameters(Nullable<int> testCaseId, Nullable<bool> includeInherited, Nullable<bool> includeAlreadySet, MergeOption mergeOption)
        {
            ObjectParameter testCaseIdParameter;
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
    
            ObjectParameter includeInheritedParameter;
            if (includeInherited.HasValue)
            {
                includeInheritedParameter = new ObjectParameter("IncludeInherited", includeInherited);
            }
            else
            {
                includeInheritedParameter = new ObjectParameter("IncludeInherited", typeof(bool));
            }
    
            ObjectParameter includeAlreadySetParameter;
            if (includeAlreadySet.HasValue)
            {
                includeAlreadySetParameter = new ObjectParameter("IncludeAlreadySet", includeAlreadySet);
            }
            else
            {
                includeAlreadySetParameter = new ObjectParameter("IncludeAlreadySet", typeof(bool));
            }
    
            return base.ExecuteFunction<TestCaseParameter>("TestCase_RetrieveParameters", mergeOption, testCaseIdParameter, includeInheritedParameter, includeAlreadySetParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="requirementId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="recordHistory">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual int TestCase_AddToRequirementRelease(Nullable<int> projectId, Nullable<int> requirementId, Nullable<int> releaseId, Nullable<bool> recordHistory, Nullable<int> userId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter requirementIdParameter;
    
            if (requirementId.HasValue)
            {
                requirementIdParameter = new ObjectParameter("RequirementId", requirementId);
            }
            else
            {
                requirementIdParameter = new ObjectParameter("RequirementId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter recordHistoryParameter;
    
            if (recordHistory.HasValue)
            {
                recordHistoryParameter = new ObjectParameter("RecordHistory", recordHistory);
            }
            else
            {
                recordHistoryParameter = new ObjectParameter("RecordHistory", typeof(bool));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_AddToRequirementRelease", projectIdParameter, requirementIdParameter, releaseIdParameter, recordHistoryParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProjectResourceView> Project_RetrieveResourcesByRelease(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<ProjectResourceView>("Project_RetrieveResourcesByRelease", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public ObjectResult<ProjectResourceView> Project_RetrieveResourcesByRelease(Nullable<int> projectId, Nullable<int> releaseId, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            return base.ExecuteFunction<ProjectResourceView>("Project_RetrieveResourcesByRelease", mergeOption, projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        /// <param name="hasAttachments">No Metadata Documentation available.</param>
        public virtual int Attachment_UpdateArtifactFlag(Nullable<int> artifactTypeId, Nullable<int> artifactId, Nullable<bool> hasAttachments)
        {
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
    
            ObjectParameter hasAttachmentsParameter;
    
            if (hasAttachments.HasValue)
            {
                hasAttachmentsParameter = new ObjectParameter("HasAttachments", hasAttachments);
            }
            else
            {
                hasAttachmentsParameter = new ObjectParameter("HasAttachments", typeof(bool));
            }
            return base.ExecuteFunction("Attachment_UpdateArtifactFlag", artifactTypeIdParameter, artifactIdParameter, hasAttachmentsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        /// <param name="attachmentId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Attachment_RemoveFromArtifact(Nullable<int> artifactTypeId, Nullable<int> artifactId, Nullable<int> attachmentId, Nullable<int> projectId)
        {
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
    
            ObjectParameter attachmentIdParameter;
    
            if (attachmentId.HasValue)
            {
                attachmentIdParameter = new ObjectParameter("AttachmentId", attachmentId);
            }
            else
            {
                attachmentIdParameter = new ObjectParameter("AttachmentId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Attachment_RemoveFromArtifact", artifactTypeIdParameter, artifactIdParameter, attachmentIdParameter, projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attachmentId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Attachment_Delete(Nullable<int> attachmentId, Nullable<int> projectId)
        {
    
            ObjectParameter attachmentIdParameter;
    
            if (attachmentId.HasValue)
            {
                attachmentIdParameter = new ObjectParameter("AttachmentId", attachmentId);
            }
            else
            {
                attachmentIdParameter = new ObjectParameter("AttachmentId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Attachment_Delete", attachmentIdParameter, projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Attachment_DeleteTypesFoldersForProject(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Attachment_DeleteTypesFoldersForProject", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectRoleId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteProjectRole(Nullable<int> projectRoleId)
        {
    
            ObjectParameter projectRoleIdParameter;
    
            if (projectRoleId.HasValue)
            {
                projectRoleIdParameter = new ObjectParameter("ProjectRoleId", projectRoleId);
            }
            else
            {
                projectRoleIdParameter = new ObjectParameter("ProjectRoleId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteProjectRole", projectRoleIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteAssociations(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteAssociations", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteDataMappings(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteDataMappings", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteIncidents(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteIncidents", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteTestRuns(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteTestRuns", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteTestSets(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteTestSets", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteTestCasesTasks(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteTestCasesTasks", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteRequirements(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteRequirements", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteCustomProperties(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteCustomProperties", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_Delete(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_Delete", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteReports(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteReports", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteReleasesAutomation(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteReleasesAutomation", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProjectViewPermission> Project_RetrieveViewPermissions(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<ProjectViewPermission>("Project_RetrieveViewPermissions", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int History_DeleteChangeSets(Nullable<int> artifactTypeId, Nullable<int> artifactId, Nullable<int> projectId)
        {
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("History_DeleteChangeSets", artifactTypeIdParameter, artifactIdParameter, projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="incDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<ReleaseView> Release_Retrieve(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> incDeleted)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
    
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter incDeletedParameter;
    
            if (incDeleted.HasValue)
            {
                incDeletedParameter = new ObjectParameter("IncDeleted", incDeleted);
            }
            else
            {
                incDeletedParameter = new ObjectParameter("IncDeleted", typeof(bool));
            }
            return base.ExecuteFunction<ReleaseView>("Release_Retrieve", userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, incDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="incDeleted">No Metadata Documentation available.</param>
        public ObjectResult<ReleaseView> Release_Retrieve(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<int> startRow, Nullable<int> numRows, Nullable<bool> incDeleted, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter startRowParameter;
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter incDeletedParameter;
            if (incDeleted.HasValue)
            {
                incDeletedParameter = new ObjectParameter("IncDeleted", incDeleted);
            }
            else
            {
                incDeletedParameter = new ObjectParameter("IncDeleted", typeof(bool));
            }
    
            return base.ExecuteFunction<ReleaseView>("Release_Retrieve", mergeOption, userIdParameter, projectIdParameter, filtersParameter, startRowParameter, numRowsParameter, incDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filterSort">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        /// <param name="onlyShowVisible">No Metadata Documentation available.</param>
        public virtual ObjectResult<ReleaseView> Release_RetrieveCustom(Nullable<int> userId, Nullable<int> projectId, string filterSort, Nullable<int> numRows, Nullable<bool> includeDeleted, Nullable<bool> onlyShowVisible)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filterSortParameter;
    
            if (filterSort != null)
            {
                filterSortParameter = new ObjectParameter("FilterSort", filterSort);
            }
            else
            {
                filterSortParameter = new ObjectParameter("FilterSort", typeof(string));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            ObjectParameter onlyShowVisibleParameter;
    
            if (onlyShowVisible.HasValue)
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", onlyShowVisible);
            }
            else
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", typeof(bool));
            }
            return base.ExecuteFunction<ReleaseView>("Release_RetrieveCustom", userIdParameter, projectIdParameter, filterSortParameter, numRowsParameter, includeDeletedParameter, onlyShowVisibleParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filterSort">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        /// <param name="onlyShowVisible">No Metadata Documentation available.</param>
        public ObjectResult<ReleaseView> Release_RetrieveCustom(Nullable<int> userId, Nullable<int> projectId, string filterSort, Nullable<int> numRows, Nullable<bool> includeDeleted, Nullable<bool> onlyShowVisible, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filterSortParameter;
            if (filterSort != null)
            {
                filterSortParameter = new ObjectParameter("FilterSort", filterSort);
            }
            else
            {
                filterSortParameter = new ObjectParameter("FilterSort", typeof(string));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            ObjectParameter onlyShowVisibleParameter;
            if (onlyShowVisible.HasValue)
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", onlyShowVisible);
            }
            else
            {
                onlyShowVisibleParameter = new ObjectParameter("OnlyShowVisible", typeof(bool));
            }
    
            return base.ExecuteFunction<ReleaseView>("Release_RetrieveCustom", mergeOption, userIdParameter, projectIdParameter, filterSortParameter, numRowsParameter, includeDeletedParameter, onlyShowVisibleParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="filters">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Release_Count(Nullable<int> userId, Nullable<int> projectId, string filters, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter filtersParameter;
    
            if (filters != null)
            {
                filtersParameter = new ObjectParameter("Filters", filters);
            }
            else
            {
                filtersParameter = new ObjectParameter("Filters", typeof(string));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Release_Count", userIdParameter, projectIdParameter, filtersParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Release_GetSelfAndIterations(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Release_GetSelfAndIterations", projectIdParameter, releaseIdParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<string> Release_GetPreviousPeer(Nullable<int> projectId, string indentLevel, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<string>("Release_GetPreviousPeer", projectIdParameter, indentLevelParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="summaryReleaseId">No Metadata Documentation available.</param>
        public virtual int Release_Collapse(Nullable<int> userId, Nullable<int> projectId, Nullable<int> summaryReleaseId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter summaryReleaseIdParameter;
    
            if (summaryReleaseId.HasValue)
            {
                summaryReleaseIdParameter = new ObjectParameter("SummaryReleaseId", summaryReleaseId);
            }
            else
            {
                summaryReleaseIdParameter = new ObjectParameter("SummaryReleaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_Collapse", userIdParameter, projectIdParameter, summaryReleaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Release_Expand(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Release_Expand", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="level">No Metadata Documentation available.</param>
        public virtual int Release_ExpandToLevel(Nullable<int> userId, Nullable<int> projectId, Nullable<int> level)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter levelParameter;
    
            if (level.HasValue)
            {
                levelParameter = new ObjectParameter("Level", level);
            }
            else
            {
                levelParameter = new ObjectParameter("Level", typeof(int));
            }
            return base.ExecuteFunction("Release_ExpandToLevel", userIdParameter, projectIdParameter, levelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual int Release_DeleteNavigationData(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction("Release_DeleteNavigationData", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual int Release_Delete(Nullable<int> releaseId)
        {
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_Delete", releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual int Release_RefreshTestStatus(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_RefreshTestStatus", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="isExpanded">No Metadata Documentation available.</param>
        /// <param name="isVisible">No Metadata Documentation available.</param>
        /// <param name="isSummary">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Release_UpdatePositional(Nullable<int> releaseId, Nullable<int> userId, Nullable<bool> isExpanded, Nullable<bool> isVisible, Nullable<bool> isSummary, string indentLevel)
        {
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter isExpandedParameter;
    
            if (isExpanded.HasValue)
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", isExpanded);
            }
            else
            {
                isExpandedParameter = new ObjectParameter("IsExpanded", typeof(bool));
            }
    
            ObjectParameter isVisibleParameter;
    
            if (isVisible.HasValue)
            {
                isVisibleParameter = new ObjectParameter("IsVisible", isVisible);
            }
            else
            {
                isVisibleParameter = new ObjectParameter("IsVisible", typeof(bool));
            }
    
            ObjectParameter isSummaryParameter;
    
            if (isSummary.HasValue)
            {
                isSummaryParameter = new ObjectParameter("IsSummary", isSummary);
            }
            else
            {
                isSummaryParameter = new ObjectParameter("IsSummary", typeof(bool));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Release_UpdatePositional", releaseIdParameter, userIdParameter, isExpandedParameter, isVisibleParameter, isSummaryParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int Release_SaveTestCoverageDelete(Nullable<int> releaseId, Nullable<int> testCaseId)
        {
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_SaveTestCoverageDelete", releaseIdParameter, testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int Release_SaveTestCoverageInsert(Nullable<int> releaseId, Nullable<int> testCaseId)
        {
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_SaveTestCoverageInsert", releaseIdParameter, testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        /// <param name="versionNumber">No Metadata Documentation available.</param>
        public virtual int Release_InsertFiller(Nullable<int> projectId, string name, string indentLevel, string versionNumber)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
    
            ObjectParameter versionNumberParameter;
    
            if (versionNumber != null)
            {
                versionNumberParameter = new ObjectParameter("VersionNumber", versionNumber);
            }
            else
            {
                versionNumberParameter = new ObjectParameter("VersionNumber", typeof(string));
            }
            return base.ExecuteFunction("Release_InsertFiller", projectIdParameter, nameParameter, indentLevelParameter, versionNumberParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int TestCase_Delete(Nullable<int> testCaseId)
        {
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_Delete", testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseParameterId">No Metadata Documentation available.</param>
        public virtual int TestCase_DeleteParameter(Nullable<int> testCaseParameterId)
        {
    
            ObjectParameter testCaseParameterIdParameter;
    
            if (testCaseParameterId.HasValue)
            {
                testCaseParameterIdParameter = new ObjectParameter("TestCaseParameterId", testCaseParameterId);
            }
            else
            {
                testCaseParameterIdParameter = new ObjectParameter("TestCaseParameterId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_DeleteParameter", testCaseParameterIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int TestCase_DeleteParameterByTest(Nullable<int> testCaseId)
        {
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_DeleteParameterByTest", testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testStepId">No Metadata Documentation available.</param>
        public virtual int TestCase_DeleteStep(Nullable<int> testStepId)
        {
    
            ObjectParameter testStepIdParameter;
    
            if (testStepId.HasValue)
            {
                testStepIdParameter = new ObjectParameter("TestStepId", testStepId);
            }
            else
            {
                testStepIdParameter = new ObjectParameter("TestStepId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_DeleteStep", testStepIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<RequirementTestCase> Requirement_RetrieveTestCasesByRelease(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<RequirementTestCase>("Requirement_RetrieveTestCasesByRelease", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestCaseFolderHierarchyView> TestCase_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TestCaseFolderHierarchyView>("TestCase_RetrieveParentFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TestCaseFolderHierarchyView> TestCase_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TestCaseFolderHierarchyView>("TestCase_RetrieveParentFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual int System_RefreshIndexes()
        {
            return base.ExecuteFunction("System_RefreshIndexes");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testRunId">No Metadata Documentation available.</param>
        public virtual int TestRun_Delete(Nullable<int> testRunId)
        {
    
            ObjectParameter testRunIdParameter;
    
            if (testRunId.HasValue)
            {
                testRunIdParameter = new ObjectParameter("TestRunId", testRunId);
            }
            else
            {
                testRunIdParameter = new ObjectParameter("TestRunId", typeof(int));
            }
            return base.ExecuteFunction("TestRun_Delete", testRunIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        public virtual int TestRun_DeleteByTestCase(Nullable<int> testCaseId, Nullable<int> artifactTypeId)
        {
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
            return base.ExecuteFunction("TestRun_DeleteByTestCase", testCaseIdParameter, artifactTypeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestSetFolderHierarchyView> TestSet_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TestSetFolderHierarchyView>("TestSet_RetrieveParentFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TestSetFolderHierarchyView> TestSet_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TestSetFolderHierarchyView>("TestSet_RetrieveParentFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testSetId">No Metadata Documentation available.</param>
        public virtual int TestSet_RefreshExecutionData(Nullable<int> projectId, Nullable<int> testSetId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testSetIdParameter;
    
            if (testSetId.HasValue)
            {
                testSetIdParameter = new ObjectParameter("TestSetId", testSetId);
            }
            else
            {
                testSetIdParameter = new ObjectParameter("TestSetId", typeof(int));
            }
            return base.ExecuteFunction("TestSet_RefreshExecutionData", projectIdParameter, testSetIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        public virtual ObjectResult<DataSyncArtifactMapping> DataSync_RetrieveArtifactMappings(Nullable<int> projectId, Nullable<int> artifactTypeId, Nullable<int> artifactId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter artifactTypeIdParameter;
    
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
    
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
            return base.ExecuteFunction<DataSyncArtifactMapping>("DataSync_RetrieveArtifactMappings", projectIdParameter, artifactTypeIdParameter, artifactIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="artifactTypeId">No Metadata Documentation available.</param>
        /// <param name="artifactId">No Metadata Documentation available.</param>
        public ObjectResult<DataSyncArtifactMapping> DataSync_RetrieveArtifactMappings(Nullable<int> projectId, Nullable<int> artifactTypeId, Nullable<int> artifactId, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter artifactTypeIdParameter;
            if (artifactTypeId.HasValue)
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", artifactTypeId);
            }
            else
            {
                artifactTypeIdParameter = new ObjectParameter("ArtifactTypeId", typeof(int));
            }
    
            ObjectParameter artifactIdParameter;
            if (artifactId.HasValue)
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", artifactId);
            }
            else
            {
                artifactIdParameter = new ObjectParameter("ArtifactId", typeof(int));
            }
    
            return base.ExecuteFunction<DataSyncArtifactMapping>("DataSync_RetrieveArtifactMappings", mergeOption, projectIdParameter, artifactTypeIdParameter, artifactIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="automationEngineId">No Metadata Documentation available.</param>
        public virtual int Automation_DeleteEngine(Nullable<int> automationEngineId)
        {
    
            ObjectParameter automationEngineIdParameter;
    
            if (automationEngineId.HasValue)
            {
                automationEngineIdParameter = new ObjectParameter("AutomationEngineId", automationEngineId);
            }
            else
            {
                automationEngineIdParameter = new ObjectParameter("AutomationEngineId", typeof(int));
            }
            return base.ExecuteFunction("Automation_DeleteEngine", automationEngineIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="automationHostId">No Metadata Documentation available.</param>
        public virtual int Automation_DeleteHost(Nullable<int> automationHostId)
        {
    
            ObjectParameter automationHostIdParameter;
    
            if (automationHostId.HasValue)
            {
                automationHostIdParameter = new ObjectParameter("AutomationHostId", automationHostId);
            }
            else
            {
                automationHostIdParameter = new ObjectParameter("AutomationHostId", typeof(int));
            }
            return base.ExecuteFunction("Automation_DeleteHost", automationHostIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        /// <param name="activeReleasesOnly">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestCase_ExecutionStatusSummary> TestCase_RetrieveExecutionStatusSummary_Group(Nullable<int> projectGroupId, Nullable<bool> activeReleasesOnly)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
    
            ObjectParameter activeReleasesOnlyParameter;
    
            if (activeReleasesOnly.HasValue)
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", activeReleasesOnly);
            }
            else
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", typeof(bool));
            }
            return base.ExecuteFunction<TestCase_ExecutionStatusSummary>("TestCase_RetrieveExecutionStatusSummary_Group", projectGroupIdParameter, activeReleasesOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestCase_ExecutionStatusSummary> TestCase_RetrieveExecutionStatusSummary_Project(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction<TestCase_ExecutionStatusSummary>("TestCase_RetrieveExecutionStatusSummary_Project", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="utcOffsetHours">No Metadata Documentation available.</param>
        /// <param name="utcOffsetMinutes">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestRun_DailyCount> TestRun_RetrieveDailyCount(Nullable<int> projectId, Nullable<int> releaseId, Nullable<int> utcOffsetHours, Nullable<int> utcOffsetMinutes)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter utcOffsetHoursParameter;
    
            if (utcOffsetHours.HasValue)
            {
                utcOffsetHoursParameter = new ObjectParameter("UtcOffsetHours", utcOffsetHours);
            }
            else
            {
                utcOffsetHoursParameter = new ObjectParameter("UtcOffsetHours", typeof(int));
            }
    
            ObjectParameter utcOffsetMinutesParameter;
    
            if (utcOffsetMinutes.HasValue)
            {
                utcOffsetMinutesParameter = new ObjectParameter("UtcOffsetMinutes", utcOffsetMinutes);
            }
            else
            {
                utcOffsetMinutesParameter = new ObjectParameter("UtcOffsetMinutes", typeof(int));
            }
            return base.ExecuteFunction<TestRun_DailyCount>("TestRun_RetrieveDailyCount", projectIdParameter, releaseIdParameter, utcOffsetHoursParameter, utcOffsetMinutesParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestSet_ExecutionStatusSummary> TestSet_RetrieveSummaryData(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<TestSet_ExecutionStatusSummary>("TestSet_RetrieveSummaryData", projectIdParameter, releaseIdParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testSetId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestSetTestCaseView> TestSet_RetrieveTestCases(Nullable<int> projectId, Nullable<int> testSetId, Nullable<int> releaseId, Nullable<bool> includeDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testSetIdParameter;
    
            if (testSetId.HasValue)
            {
                testSetIdParameter = new ObjectParameter("TestSetId", testSetId);
            }
            else
            {
                testSetIdParameter = new ObjectParameter("TestSetId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
    
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
            return base.ExecuteFunction<TestSetTestCaseView>("TestSet_RetrieveTestCases", projectIdParameter, testSetIdParameter, releaseIdParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testSetId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeDeleted">No Metadata Documentation available.</param>
        public ObjectResult<TestSetTestCaseView> TestSet_RetrieveTestCases(Nullable<int> projectId, Nullable<int> testSetId, Nullable<int> releaseId, Nullable<bool> includeDeleted, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testSetIdParameter;
            if (testSetId.HasValue)
            {
                testSetIdParameter = new ObjectParameter("TestSetId", testSetId);
            }
            else
            {
                testSetIdParameter = new ObjectParameter("TestSetId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeDeletedParameter;
            if (includeDeleted.HasValue)
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", includeDeleted);
            }
            else
            {
                includeDeletedParameter = new ObjectParameter("IncludeDeleted", typeof(bool));
            }
    
            return base.ExecuteFunction<TestSetTestCaseView>("TestSet_RetrieveTestCases", mergeOption, projectIdParameter, testSetIdParameter, releaseIdParameter, includeDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testSetId">No Metadata Documentation available.</param>
        public virtual int TestSet_Delete(Nullable<int> testSetId)
        {
    
            ObjectParameter testSetIdParameter;
    
            if (testSetId.HasValue)
            {
                testSetIdParameter = new ObjectParameter("TestSetId", testSetId);
            }
            else
            {
                testSetIdParameter = new ObjectParameter("TestSetId", typeof(int));
            }
            return base.ExecuteFunction("TestSet_Delete", testSetIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testSetTestCaseId">No Metadata Documentation available.</param>
        public virtual int TestSet_DeleteTestCase(Nullable<int> testSetTestCaseId)
        {
    
            ObjectParameter testSetTestCaseIdParameter;
    
            if (testSetTestCaseId.HasValue)
            {
                testSetTestCaseIdParameter = new ObjectParameter("TestSetTestCaseId", testSetTestCaseId);
            }
            else
            {
                testSetTestCaseIdParameter = new ObjectParameter("TestSetTestCaseId", typeof(int));
            }
            return base.ExecuteFunction("TestSet_DeleteTestCase", testSetTestCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testRunsPendingId">No Metadata Documentation available.</param>
        public virtual int TestRun_RefreshTestCaseExecutionStatus(Nullable<int> projectId, Nullable<int> testRunsPendingId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testRunsPendingIdParameter;
    
            if (testRunsPendingId.HasValue)
            {
                testRunsPendingIdParameter = new ObjectParameter("TestRunsPendingId", testRunsPendingId);
            }
            else
            {
                testRunsPendingIdParameter = new ObjectParameter("TestRunsPendingId", typeof(int));
            }
            return base.ExecuteFunction("TestRun_RefreshTestCaseExecutionStatus", projectIdParameter, testRunsPendingIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TaskFolderHierarchyView> Task_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TaskFolderHierarchyView>("Task_RetrieveParentFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TaskFolderHierarchyView> Task_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TaskFolderHierarchyView>("Task_RetrieveParentFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="linkedTestCaseId">No Metadata Documentation available.</param>
        /// <param name="linkedTestCaseDeleted">No Metadata Documentation available.</param>
        public virtual int TestCase_UpdateParentTestStepsFlag(Nullable<int> projectId, Nullable<int> linkedTestCaseId, Nullable<bool> linkedTestCaseDeleted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter linkedTestCaseIdParameter;
    
            if (linkedTestCaseId.HasValue)
            {
                linkedTestCaseIdParameter = new ObjectParameter("LinkedTestCaseId", linkedTestCaseId);
            }
            else
            {
                linkedTestCaseIdParameter = new ObjectParameter("LinkedTestCaseId", typeof(int));
            }
    
            ObjectParameter linkedTestCaseDeletedParameter;
    
            if (linkedTestCaseDeleted.HasValue)
            {
                linkedTestCaseDeletedParameter = new ObjectParameter("LinkedTestCaseDeleted", linkedTestCaseDeleted);
            }
            else
            {
                linkedTestCaseDeletedParameter = new ObjectParameter("LinkedTestCaseDeleted", typeof(bool));
            }
            return base.ExecuteFunction("TestCase_UpdateParentTestStepsFlag", projectIdParameter, linkedTestCaseIdParameter, linkedTestCaseDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testCaseFolderId">No Metadata Documentation available.</param>
        public virtual int TestCase_RefreshFolderExecutionStatus(Nullable<int> projectId, Nullable<int> testCaseFolderId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testCaseFolderIdParameter;
    
            if (testCaseFolderId.HasValue)
            {
                testCaseFolderIdParameter = new ObjectParameter("TestCaseFolderId", testCaseFolderId);
            }
            else
            {
                testCaseFolderIdParameter = new ObjectParameter("TestCaseFolderId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_RefreshFolderExecutionStatus", projectIdParameter, testCaseFolderIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testRunId">No Metadata Documentation available.</param>
        public virtual int TestRun_RefreshTestCaseExecutionStatus2(Nullable<int> projectId, Nullable<int> testRunId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testRunIdParameter;
    
            if (testRunId.HasValue)
            {
                testRunIdParameter = new ObjectParameter("TestRunId", testRunId);
            }
            else
            {
                testRunIdParameter = new ObjectParameter("TestRunId", typeof(int));
            }
            return base.ExecuteFunction("TestRun_RefreshTestCaseExecutionStatus2", projectIdParameter, testRunIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int TestRun_RefreshTestCaseExecutionStatus3(Nullable<int> projectId, Nullable<int> testCaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("TestRun_RefreshTestCaseExecutionStatus3", projectIdParameter, testCaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testSetFolderId">No Metadata Documentation available.</param>
        public virtual int TestSet_RefreshFolderExecutionStatus(Nullable<int> projectId, Nullable<int> testSetFolderId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testSetFolderIdParameter;
    
            if (testSetFolderId.HasValue)
            {
                testSetFolderIdParameter = new ObjectParameter("TestSetFolderId", testSetFolderId);
            }
            else
            {
                testSetFolderIdParameter = new ObjectParameter("TestSetFolderId", typeof(int));
            }
            return base.ExecuteFunction("TestSet_RefreshFolderExecutionStatus", projectIdParameter, testSetFolderIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestCaseFolderHierarchyView> TestCase_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TestCaseFolderHierarchyView>("TestCase_RetrieveChildFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TestCaseFolderHierarchyView> TestCase_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TestCaseFolderHierarchyView>("TestCase_RetrieveChildFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestSetFolderHierarchyView> TestSet_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TestSetFolderHierarchyView>("TestSet_RetrieveChildFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TestSetFolderHierarchyView> TestSet_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TestSetFolderHierarchyView>("TestSet_RetrieveChildFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dataSyncSystemId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="customListId">No Metadata Documentation available.</param>
        /// <param name="includeUnmapped">No Metadata Documentation available.</param>
        public virtual ObjectResult<DataSyncCustomPropertyValueMappingView> DataSync_RetrieveCustomPropertyValueMappings(Nullable<int> dataSyncSystemId, Nullable<int> projectId, Nullable<int> customListId, Nullable<bool> includeUnmapped)
        {
    
            ObjectParameter dataSyncSystemIdParameter;
    
            if (dataSyncSystemId.HasValue)
            {
                dataSyncSystemIdParameter = new ObjectParameter("DataSyncSystemId", dataSyncSystemId);
            }
            else
            {
                dataSyncSystemIdParameter = new ObjectParameter("DataSyncSystemId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter customListIdParameter;
    
            if (customListId.HasValue)
            {
                customListIdParameter = new ObjectParameter("CustomListId", customListId);
            }
            else
            {
                customListIdParameter = new ObjectParameter("CustomListId", typeof(int));
            }
    
            ObjectParameter includeUnmappedParameter;
    
            if (includeUnmapped.HasValue)
            {
                includeUnmappedParameter = new ObjectParameter("IncludeUnmapped", includeUnmapped);
            }
            else
            {
                includeUnmappedParameter = new ObjectParameter("IncludeUnmapped", typeof(bool));
            }
            return base.ExecuteFunction<DataSyncCustomPropertyValueMappingView>("DataSync_RetrieveCustomPropertyValueMappings", dataSyncSystemIdParameter, projectIdParameter, customListIdParameter, includeUnmappedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="dataSyncSystemId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="artifactFieldId">No Metadata Documentation available.</param>
        /// <param name="includeUnmapped">No Metadata Documentation available.</param>
        public virtual ObjectResult<DataSyncFieldValueMappingView> DataSync_RetrieveFieldValueMappings(Nullable<int> dataSyncSystemId, Nullable<int> projectId, Nullable<int> artifactFieldId, Nullable<bool> includeUnmapped)
        {
    
            ObjectParameter dataSyncSystemIdParameter;
    
            if (dataSyncSystemId.HasValue)
            {
                dataSyncSystemIdParameter = new ObjectParameter("DataSyncSystemId", dataSyncSystemId);
            }
            else
            {
                dataSyncSystemIdParameter = new ObjectParameter("DataSyncSystemId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter artifactFieldIdParameter;
    
            if (artifactFieldId.HasValue)
            {
                artifactFieldIdParameter = new ObjectParameter("ArtifactFieldId", artifactFieldId);
            }
            else
            {
                artifactFieldIdParameter = new ObjectParameter("ArtifactFieldId", typeof(int));
            }
    
            ObjectParameter includeUnmappedParameter;
    
            if (includeUnmapped.HasValue)
            {
                includeUnmappedParameter = new ObjectParameter("IncludeUnmapped", includeUnmapped);
            }
            else
            {
                includeUnmappedParameter = new ObjectParameter("IncludeUnmapped", typeof(bool));
            }
            return base.ExecuteFunction<DataSyncFieldValueMappingView>("DataSync_RetrieveFieldValueMappings", dataSyncSystemIdParameter, projectIdParameter, artifactFieldIdParameter, includeUnmappedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual ObjectResult<DataSyncUserMappingView> DataSync_RetrieveUserMappings(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<DataSyncUserMappingView>("DataSync_RetrieveUserMappings", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="searchString">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        public virtual ObjectResult<ArtifactView> Artifact_RetrieveByKeywordFreetext(string searchString, string projectArtifactList, Nullable<int> startRow, Nullable<int> numRows)
        {
    
            ObjectParameter searchStringParameter;
    
            if (searchString != null)
            {
                searchStringParameter = new ObjectParameter("SearchString", searchString);
            }
            else
            {
                searchStringParameter = new ObjectParameter("SearchString", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
    
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
    
            ObjectParameter startRowParameter;
    
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
    
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
            return base.ExecuteFunction<ArtifactView>("Artifact_RetrieveByKeywordFreetext", searchStringParameter, projectArtifactListParameter, startRowParameter, numRowsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="searchString">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        /// <param name="startRow">No Metadata Documentation available.</param>
        /// <param name="numRows">No Metadata Documentation available.</param>
        public ObjectResult<ArtifactView> Artifact_RetrieveByKeywordFreetext(string searchString, string projectArtifactList, Nullable<int> startRow, Nullable<int> numRows, MergeOption mergeOption)
        {
            ObjectParameter searchStringParameter;
            if (searchString != null)
            {
                searchStringParameter = new ObjectParameter("SearchString", searchString);
            }
            else
            {
                searchStringParameter = new ObjectParameter("SearchString", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
    
            ObjectParameter startRowParameter;
            if (startRow.HasValue)
            {
                startRowParameter = new ObjectParameter("StartRow", startRow);
            }
            else
            {
                startRowParameter = new ObjectParameter("StartRow", typeof(int));
            }
    
            ObjectParameter numRowsParameter;
            if (numRows.HasValue)
            {
                numRowsParameter = new ObjectParameter("NumRows", numRows);
            }
            else
            {
                numRowsParameter = new ObjectParameter("NumRows", typeof(int));
            }
    
            return base.ExecuteFunction<ArtifactView>("Artifact_RetrieveByKeywordFreetext", mergeOption, searchStringParameter, projectArtifactListParameter, startRowParameter, numRowsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="searchString">No Metadata Documentation available.</param>
        /// <param name="projectArtifactList">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Artifact_CountByKeywordFreetext(string searchString, string projectArtifactList)
        {
    
            ObjectParameter searchStringParameter;
    
            if (searchString != null)
            {
                searchStringParameter = new ObjectParameter("SearchString", searchString);
            }
            else
            {
                searchStringParameter = new ObjectParameter("SearchString", typeof(string));
            }
    
            ObjectParameter projectArtifactListParameter;
    
            if (projectArtifactList != null)
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", projectArtifactList);
            }
            else
            {
                projectArtifactListParameter = new ObjectParameter("ProjectArtifactList", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("Artifact_CountByKeywordFreetext", searchStringParameter, projectArtifactListParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ObjectResult<Nullable<bool>> System_CheckFullTextIndexing()
        {
            return base.ExecuteFunction<Nullable<bool>>("System_CheckFullTextIndexing");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeMajorBranches">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Release_GetSelfAndChildren(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> includeMajorBranches)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeMajorBranchesParameter;
    
            if (includeMajorBranches.HasValue)
            {
                includeMajorBranchesParameter = new ObjectParameter("IncludeMajorBranches", includeMajorBranches);
            }
            else
            {
                includeMajorBranchesParameter = new ObjectParameter("IncludeMajorBranches", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("Release_GetSelfAndChildren", projectIdParameter, releaseIdParameter, includeMajorBranchesParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="useResolvedRelease">No Metadata Documentation available.</param>
        public virtual ObjectResult<IncidentOpenClosedCount> Incident_RetrieveOpenClosedCount(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> useResolvedRelease)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter useResolvedReleaseParameter;
    
            if (useResolvedRelease.HasValue)
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", useResolvedRelease);
            }
            else
            {
                useResolvedReleaseParameter = new ObjectParameter("UseResolvedRelease", typeof(bool));
            }
            return base.ExecuteFunction<IncidentOpenClosedCount>("Incident_RetrieveOpenClosedCount", projectIdParameter, releaseIdParameter, useResolvedReleaseParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testConfigurationSetId">No Metadata Documentation available.</param>
        public virtual ObjectResult<TestConfigurationEntry> TestConfiguration_RetrieveConfigValues(Nullable<int> testConfigurationSetId)
        {
    
            ObjectParameter testConfigurationSetIdParameter;
    
            if (testConfigurationSetId.HasValue)
            {
                testConfigurationSetIdParameter = new ObjectParameter("TestConfigurationSetId", testConfigurationSetId);
            }
            else
            {
                testConfigurationSetIdParameter = new ObjectParameter("TestConfigurationSetId", typeof(int));
            }
            return base.ExecuteFunction<TestConfigurationEntry>("TestConfiguration_RetrieveConfigValues", testConfigurationSetIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="testConfigurationSetId">No Metadata Documentation available.</param>
        public virtual int TestConfiguration_DeleteConfigValues(Nullable<int> testConfigurationSetId)
        {
    
            ObjectParameter testConfigurationSetIdParameter;
    
            if (testConfigurationSetId.HasValue)
            {
                testConfigurationSetIdParameter = new ObjectParameter("TestConfigurationSetId", testConfigurationSetId);
            }
            else
            {
                testConfigurationSetIdParameter = new ObjectParameter("TestConfigurationSetId", typeof(int));
            }
            return base.ExecuteFunction("TestConfiguration_DeleteConfigValues", testConfigurationSetIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProjectAttachmentFolderHierarchyView> Attachment_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<ProjectAttachmentFolderHierarchyView>("Attachment_RetrieveParentFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<ProjectAttachmentFolderHierarchyView> Attachment_RetrieveParentFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<ProjectAttachmentFolderHierarchyView>("Attachment_RetrieveParentFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual int Release_RefreshTestCaseCounts(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_RefreshTestCaseCounts", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_RefreshTestCache(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_RefreshTestCache", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public virtual ObjectResult<TaskFolderHierarchyView> Task_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
    
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
    
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
            return base.ExecuteFunction<TaskFolderHierarchyView>("Task_RetrieveChildFolders", projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="folderId">No Metadata Documentation available.</param>
        /// <param name="isIncludeSelf">No Metadata Documentation available.</param>
        public ObjectResult<TaskFolderHierarchyView> Task_RetrieveChildFolders(Nullable<int> projectId, Nullable<int> folderId, Nullable<bool> isIncludeSelf, MergeOption mergeOption)
        {
            ObjectParameter projectIdParameter;
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter folderIdParameter;
            if (folderId.HasValue)
            {
                folderIdParameter = new ObjectParameter("FolderId", folderId);
            }
            else
            {
                folderIdParameter = new ObjectParameter("FolderId", typeof(int));
            }
    
            ObjectParameter isIncludeSelfParameter;
            if (isIncludeSelf.HasValue)
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", isIncludeSelf);
            }
            else
            {
                isIncludeSelfParameter = new ObjectParameter("IsIncludeSelf", typeof(bool));
            }
    
            return base.ExecuteFunction<TaskFolderHierarchyView>("Task_RetrieveChildFolders", mergeOption, projectIdParameter, folderIdParameter, isIncludeSelfParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_DeleteCustomProperties(Nullable<int> projectTemplateId)
        {
    
            ObjectParameter projectTemplateIdParameter;
    
            if (projectTemplateId.HasValue)
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", projectTemplateId);
            }
            else
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_DeleteCustomProperties", projectTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ObjectResult<SysInfoResult> ManagerBase_SysInfo()
        {
            return base.ExecuteFunction<SysInfoResult>("ManagerBase_SysInfo");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectTemplateId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<bool>> Template_IsAuthorizedToEdit(Nullable<int> userId, Nullable<int> projectTemplateId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectTemplateIdParameter;
    
            if (projectTemplateId.HasValue)
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", projectTemplateId);
            }
            else
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("Template_IsAuthorizedToEdit", userIdParameter, projectTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectTemplateId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<bool>> Template_IsAuthorizedToView(Nullable<int> userId, Nullable<int> projectTemplateId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectTemplateIdParameter;
    
            if (projectTemplateId.HasValue)
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", projectTemplateId);
            }
            else
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("Template_IsAuthorizedToView", userIdParameter, projectTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProjectTemplate> Template_RetrieveByOwner(Nullable<int> userId)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
            return base.ExecuteFunction<ProjectTemplate>("Template_RetrieveByOwner", userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<ProjectTemplate> Template_RetrieveByOwner(Nullable<int> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            return base.ExecuteFunction<ProjectTemplate>("Template_RetrieveByOwner", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_DeleteConfigurableTypes(Nullable<int> projectTemplateId)
        {
    
            ObjectParameter projectTemplateIdParameter;
    
            if (projectTemplateId.HasValue)
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", projectTemplateId);
            }
            else
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_DeleteConfigurableTypes", projectTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectTemplateId">No Metadata Documentation available.</param>
        public virtual int Notification_DeleteAllForProjectTemplate(Nullable<int> projectTemplateId)
        {
    
            ObjectParameter projectTemplateIdParameter;
    
            if (projectTemplateId.HasValue)
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", projectTemplateId);
            }
            else
            {
                projectTemplateIdParameter = new ObjectParameter("ProjectTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Notification_DeleteAllForProjectTemplate", projectTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_DeleteRisks(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_DeleteRisks", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapDocumentFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapDocumentFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapIncidentFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapIncidentFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapRequirementFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapRequirementFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapTaskFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapTaskFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapTestCaseFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapTestCaseFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual int Template_RemapRiskFields(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapRiskFields", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="oldTemplateId">No Metadata Documentation available.</param>
        /// <param name="newTemplateId">No Metadata Documentation available.</param>
        public virtual ObjectResult<TemplateRemapStandardFieldsInfo> Template_RemapStandardFieldsInformation(Nullable<int> projectId, Nullable<int> oldTemplateId, Nullable<int> newTemplateId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter oldTemplateIdParameter;
    
            if (oldTemplateId.HasValue)
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", oldTemplateId);
            }
            else
            {
                oldTemplateIdParameter = new ObjectParameter("OldTemplateId", typeof(int));
            }
    
            ObjectParameter newTemplateIdParameter;
    
            if (newTemplateId.HasValue)
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", newTemplateId);
            }
            else
            {
                newTemplateIdParameter = new ObjectParameter("NewTemplateId", typeof(int));
            }
            return base.ExecuteFunction<TemplateRemapStandardFieldsInfo>("Template_RemapStandardFieldsInformation", projectIdParameter, oldTemplateIdParameter, newTemplateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Template_RemapClearUserSettings(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Template_RemapClearUserSettings", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        public virtual int Release_RefreshRequirementCompletion(Nullable<int> projectId, Nullable<int> releaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
            return base.ExecuteFunction("Release_RefreshRequirementCompletion", projectIdParameter, releaseIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Project_RefreshRequirementCompletion(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Project_RefreshRequirementCompletion", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="ignoreLastInserted">No Metadata Documentation available.</param>
        public virtual ObjectResult<string> Release_GetNextAvailableIndentLevel(Nullable<int> projectId, Nullable<int> userId, Nullable<bool> ignoreLastInserted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter ignoreLastInsertedParameter;
    
            if (ignoreLastInserted.HasValue)
            {
                ignoreLastInsertedParameter = new ObjectParameter("IgnoreLastInserted", ignoreLastInserted);
            }
            else
            {
                ignoreLastInsertedParameter = new ObjectParameter("IgnoreLastInserted", typeof(bool));
            }
            return base.ExecuteFunction<string>("Release_GetNextAvailableIndentLevel", projectIdParameter, userIdParameter, ignoreLastInsertedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Release_ReorderReleasesAfterDelete(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Release_ReorderReleasesAfterDelete", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Release_ReorderReleasesBeforeInsert(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Release_ReorderReleasesBeforeInsert", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Requirement_ReorderRequirementsAfterDelete(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Requirement_ReorderRequirementsAfterDelete", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="indentLevel">No Metadata Documentation available.</param>
        public virtual int Requirement_ReorderRequirementsBeforeInsert(Nullable<int> userId, Nullable<int> projectId, string indentLevel)
        {
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter indentLevelParameter;
    
            if (indentLevel != null)
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", indentLevel);
            }
            else
            {
                indentLevelParameter = new ObjectParameter("IndentLevel", typeof(string));
            }
            return base.ExecuteFunction("Requirement_ReorderRequirementsBeforeInsert", userIdParameter, projectIdParameter, indentLevelParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="releaseId">No Metadata Documentation available.</param>
        /// <param name="includeTaskEffort">No Metadata Documentation available.</param>
        /// <param name="includeIncidentEffort">No Metadata Documentation available.</param>
        /// <param name="includeTestCaseEffort">No Metadata Documentation available.</param>
        public virtual int Release_RefreshProgressAndEffort(Nullable<int> projectId, Nullable<int> releaseId, Nullable<bool> includeTaskEffort, Nullable<bool> includeIncidentEffort, Nullable<bool> includeTestCaseEffort)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter releaseIdParameter;
    
            if (releaseId.HasValue)
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", releaseId);
            }
            else
            {
                releaseIdParameter = new ObjectParameter("ReleaseId", typeof(int));
            }
    
            ObjectParameter includeTaskEffortParameter;
    
            if (includeTaskEffort.HasValue)
            {
                includeTaskEffortParameter = new ObjectParameter("IncludeTaskEffort", includeTaskEffort);
            }
            else
            {
                includeTaskEffortParameter = new ObjectParameter("IncludeTaskEffort", typeof(bool));
            }
    
            ObjectParameter includeIncidentEffortParameter;
    
            if (includeIncidentEffort.HasValue)
            {
                includeIncidentEffortParameter = new ObjectParameter("IncludeIncidentEffort", includeIncidentEffort);
            }
            else
            {
                includeIncidentEffortParameter = new ObjectParameter("IncludeIncidentEffort", typeof(bool));
            }
    
            ObjectParameter includeTestCaseEffortParameter;
    
            if (includeTestCaseEffort.HasValue)
            {
                includeTestCaseEffortParameter = new ObjectParameter("IncludeTestCaseEffort", includeTestCaseEffort);
            }
            else
            {
                includeTestCaseEffortParameter = new ObjectParameter("IncludeTestCaseEffort", typeof(bool));
            }
            return base.ExecuteFunction("Release_RefreshProgressAndEffort", projectIdParameter, releaseIdParameter, includeTaskEffortParameter, includeIncidentEffortParameter, includeTestCaseEffortParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        public virtual int ProjectGroup_RefreshRequirementCompletion(Nullable<int> projectGroupId)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
            return base.ExecuteFunction("ProjectGroup_RefreshRequirementCompletion", projectGroupIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="portfolioId">No Metadata Documentation available.</param>
        public virtual int Portfolio_RefreshRequirementCompletion(Nullable<int> portfolioId)
        {
    
            ObjectParameter portfolioIdParameter;
    
            if (portfolioId.HasValue)
            {
                portfolioIdParameter = new ObjectParameter("PortfolioId", portfolioId);
            }
            else
            {
                portfolioIdParameter = new ObjectParameter("PortfolioId", typeof(int));
            }
            return base.ExecuteFunction("Portfolio_RefreshRequirementCompletion", portfolioIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="releaseOrIterationId">No Metadata Documentation available.</param>
        public virtual ObjectResult<Nullable<int>> Release_GetParentReleaseId(Nullable<int> releaseOrIterationId)
        {
    
            ObjectParameter releaseOrIterationIdParameter;
    
            if (releaseOrIterationId.HasValue)
            {
                releaseOrIterationIdParameter = new ObjectParameter("ReleaseOrIterationId", releaseOrIterationId);
            }
            else
            {
                releaseOrIterationIdParameter = new ObjectParameter("ReleaseOrIterationId", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Release_GetParentReleaseId", releaseOrIterationIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        /// <param name="activeReleasesOnly">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProjectTaskProgressEntryView> Task_RetrieveGroupSummaryByProject(Nullable<int> projectGroupId, Nullable<bool> activeReleasesOnly)
        {
    
            ObjectParameter projectGroupIdParameter;
    
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
    
            ObjectParameter activeReleasesOnlyParameter;
    
            if (activeReleasesOnly.HasValue)
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", activeReleasesOnly);
            }
            else
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", typeof(bool));
            }
            return base.ExecuteFunction<ProjectTaskProgressEntryView>("Task_RetrieveGroupSummaryByProject", projectGroupIdParameter, activeReleasesOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="projectGroupId">No Metadata Documentation available.</param>
        /// <param name="activeReleasesOnly">No Metadata Documentation available.</param>
        public ObjectResult<ProjectTaskProgressEntryView> Task_RetrieveGroupSummaryByProject(Nullable<int> projectGroupId, Nullable<bool> activeReleasesOnly, MergeOption mergeOption)
        {
            ObjectParameter projectGroupIdParameter;
            if (projectGroupId.HasValue)
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", projectGroupId);
            }
            else
            {
                projectGroupIdParameter = new ObjectParameter("ProjectGroupId", typeof(int));
            }
    
            ObjectParameter activeReleasesOnlyParameter;
            if (activeReleasesOnly.HasValue)
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", activeReleasesOnly);
            }
            else
            {
                activeReleasesOnlyParameter = new ObjectParameter("ActiveReleasesOnly", typeof(bool));
            }
    
            return base.ExecuteFunction<ProjectTaskProgressEntryView>("Task_RetrieveGroupSummaryByProject", mergeOption, projectGroupIdParameter, activeReleasesOnlyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int TestCase_RefreshFolderHierarchy(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_RefreshFolderHierarchy", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Attachment_RefreshFolderHierarchy(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Attachment_RefreshFolderHierarchy", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int Task_RefreshFolderHierarchy(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("Task_RefreshFolderHierarchy", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int TestSet_RefreshFolderHierarchy(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("TestSet_RefreshFolderHierarchy", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int TestCase_RefreshParameterHierarchy(Nullable<int> projectId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_RefreshParameterHierarchy", projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="versionControlSystemId">No Metadata Documentation available.</param>
        /// <param name="projectId">No Metadata Documentation available.</param>
        public virtual int SourceCode_DeleteProjectCache(Nullable<int> versionControlSystemId, Nullable<int> projectId)
        {
    
            ObjectParameter versionControlSystemIdParameter;
    
            if (versionControlSystemId.HasValue)
            {
                versionControlSystemIdParameter = new ObjectParameter("VersionControlSystemId", versionControlSystemId);
            }
            else
            {
                versionControlSystemIdParameter = new ObjectParameter("VersionControlSystemId", typeof(int));
            }
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
            return base.ExecuteFunction("SourceCode_DeleteProjectCache", versionControlSystemIdParameter, projectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual int Migration_PopulateRequirementCompletion()
        {
            return base.ExecuteFunction("Migration_PopulateRequirementCompletion");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="ignoreLastInserted">No Metadata Documentation available.</param>
        public virtual ObjectResult<string> Requirement_GetNextAvailableIndentLevel(Nullable<int> projectId, Nullable<int> userId, Nullable<bool> ignoreLastInserted)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter userIdParameter;
    
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(int));
            }
    
            ObjectParameter ignoreLastInsertedParameter;
    
            if (ignoreLastInserted.HasValue)
            {
                ignoreLastInsertedParameter = new ObjectParameter("IgnoreLastInserted", ignoreLastInserted);
            }
            else
            {
                ignoreLastInsertedParameter = new ObjectParameter("IgnoreLastInserted", typeof(bool));
            }
            return base.ExecuteFunction<string>("Requirement_GetNextAvailableIndentLevel", projectIdParameter, userIdParameter, ignoreLastInsertedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="projectId">No Metadata Documentation available.</param>
        /// <param name="testCaseId">No Metadata Documentation available.</param>
        public virtual int TestCase_RefreshParameterHierarchyForTestCase(Nullable<int> projectId, Nullable<int> testCaseId)
        {
    
            ObjectParameter projectIdParameter;
    
            if (projectId.HasValue)
            {
                projectIdParameter = new ObjectParameter("ProjectId", projectId);
            }
            else
            {
                projectIdParameter = new ObjectParameter("ProjectId", typeof(int));
            }
    
            ObjectParameter testCaseIdParameter;
    
            if (testCaseId.HasValue)
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", testCaseId);
            }
            else
            {
                testCaseIdParameter = new ObjectParameter("TestCaseId", typeof(int));
            }
            return base.ExecuteFunction("TestCase_RefreshParameterHierarchyForTestCase", projectIdParameter, testCaseIdParameter);
        }

        #endregion

    }
}
