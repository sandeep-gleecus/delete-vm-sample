//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WorkflowCustomProperty))]
    [KnownType(typeof(WorkflowField))]
    [KnownType(typeof(RequirementWorkflowCustomProperty))]
    [KnownType(typeof(RequirementWorkflowField))]
    [KnownType(typeof(TaskWorkflowCustomProperty))]
    [KnownType(typeof(TaskWorkflowField))]
    [KnownType(typeof(ReleaseWorkflowCustomProperty))]
    [KnownType(typeof(ReleaseWorkflowField))]
    [KnownType(typeof(TestCaseWorkflowCustomProperty))]
    [KnownType(typeof(TestCaseWorkflowField))]
    [KnownType(typeof(DocumentWorkflowCustomProperty))]
    [KnownType(typeof(DocumentWorkflowField))]
    [KnownType(typeof(RiskWorkflowCustomProperty))]
    [KnownType(typeof(RiskWorkflowField))]
    public partial class WorkflowFieldState: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int WorkflowFieldStateId
        {
            get { return _workflowFieldStateId; }
            set
            {
                if (_workflowFieldStateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkflowFieldStateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workflowFieldStateId = value;
                    OnPropertyChanged("WorkflowFieldStateId");
                }
            }
        }
        private int _workflowFieldStateId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<WorkflowCustomProperty> IncidentCustomProperties
        {
            get
            {
                if (_incidentCustomProperties == null)
                {
                    _incidentCustomProperties = new TrackableCollection<WorkflowCustomProperty>();
                    _incidentCustomProperties.CollectionChanged += FixupIncidentCustomProperties;
                }
                return _incidentCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_incidentCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentCustomProperties != null)
                    {
                        _incidentCustomProperties.CollectionChanged -= FixupIncidentCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowCustomProperty item in _incidentCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentCustomProperties = value;
                    if (_incidentCustomProperties != null)
                    {
                        _incidentCustomProperties.CollectionChanged += FixupIncidentCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowCustomProperty item in _incidentCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentCustomProperties");
                }
            }
        }
        private TrackableCollection<WorkflowCustomProperty> _incidentCustomProperties;
    
        [DataMember]
        public TrackableCollection<WorkflowField> IncidentFields
        {
            get
            {
                if (_incidentFields == null)
                {
                    _incidentFields = new TrackableCollection<WorkflowField>();
                    _incidentFields.CollectionChanged += FixupIncidentFields;
                }
                return _incidentFields;
            }
            set
            {
                if (!ReferenceEquals(_incidentFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentFields != null)
                    {
                        _incidentFields.CollectionChanged -= FixupIncidentFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowField item in _incidentFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentFields = value;
                    if (_incidentFields != null)
                    {
                        _incidentFields.CollectionChanged += FixupIncidentFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowField item in _incidentFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentFields");
                }
            }
        }
        private TrackableCollection<WorkflowField> _incidentFields;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflowCustomProperty> RequirementCustomProperties
        {
            get
            {
                if (_requirementCustomProperties == null)
                {
                    _requirementCustomProperties = new TrackableCollection<RequirementWorkflowCustomProperty>();
                    _requirementCustomProperties.CollectionChanged += FixupRequirementCustomProperties;
                }
                return _requirementCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_requirementCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementCustomProperties != null)
                    {
                        _requirementCustomProperties.CollectionChanged -= FixupRequirementCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflowCustomProperty item in _requirementCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementCustomProperties = value;
                    if (_requirementCustomProperties != null)
                    {
                        _requirementCustomProperties.CollectionChanged += FixupRequirementCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflowCustomProperty item in _requirementCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementCustomProperties");
                }
            }
        }
        private TrackableCollection<RequirementWorkflowCustomProperty> _requirementCustomProperties;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflowField> RequirementFields
        {
            get
            {
                if (_requirementFields == null)
                {
                    _requirementFields = new TrackableCollection<RequirementWorkflowField>();
                    _requirementFields.CollectionChanged += FixupRequirementFields;
                }
                return _requirementFields;
            }
            set
            {
                if (!ReferenceEquals(_requirementFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementFields != null)
                    {
                        _requirementFields.CollectionChanged -= FixupRequirementFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflowField item in _requirementFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementFields = value;
                    if (_requirementFields != null)
                    {
                        _requirementFields.CollectionChanged += FixupRequirementFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflowField item in _requirementFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementFields");
                }
            }
        }
        private TrackableCollection<RequirementWorkflowField> _requirementFields;
    
        [DataMember]
        public TrackableCollection<TaskWorkflowCustomProperty> TaskCustomProperties
        {
            get
            {
                if (_taskCustomProperties == null)
                {
                    _taskCustomProperties = new TrackableCollection<TaskWorkflowCustomProperty>();
                    _taskCustomProperties.CollectionChanged += FixupTaskCustomProperties;
                }
                return _taskCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_taskCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskCustomProperties != null)
                    {
                        _taskCustomProperties.CollectionChanged -= FixupTaskCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskWorkflowCustomProperty item in _taskCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskCustomProperties = value;
                    if (_taskCustomProperties != null)
                    {
                        _taskCustomProperties.CollectionChanged += FixupTaskCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskWorkflowCustomProperty item in _taskCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskCustomProperties");
                }
            }
        }
        private TrackableCollection<TaskWorkflowCustomProperty> _taskCustomProperties;
    
        [DataMember]
        public TrackableCollection<TaskWorkflowField> TaskFields
        {
            get
            {
                if (_taskFields == null)
                {
                    _taskFields = new TrackableCollection<TaskWorkflowField>();
                    _taskFields.CollectionChanged += FixupTaskFields;
                }
                return _taskFields;
            }
            set
            {
                if (!ReferenceEquals(_taskFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskFields != null)
                    {
                        _taskFields.CollectionChanged -= FixupTaskFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskWorkflowField item in _taskFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskFields = value;
                    if (_taskFields != null)
                    {
                        _taskFields.CollectionChanged += FixupTaskFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskWorkflowField item in _taskFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskFields");
                }
            }
        }
        private TrackableCollection<TaskWorkflowField> _taskFields;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflowCustomProperty> ReleaseCustomProperties
        {
            get
            {
                if (_releaseCustomProperties == null)
                {
                    _releaseCustomProperties = new TrackableCollection<ReleaseWorkflowCustomProperty>();
                    _releaseCustomProperties.CollectionChanged += FixupReleaseCustomProperties;
                }
                return _releaseCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_releaseCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseCustomProperties != null)
                    {
                        _releaseCustomProperties.CollectionChanged -= FixupReleaseCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseWorkflowCustomProperty item in _releaseCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseCustomProperties = value;
                    if (_releaseCustomProperties != null)
                    {
                        _releaseCustomProperties.CollectionChanged += FixupReleaseCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseWorkflowCustomProperty item in _releaseCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseCustomProperties");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflowCustomProperty> _releaseCustomProperties;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflowField> ReleaseFields
        {
            get
            {
                if (_releaseFields == null)
                {
                    _releaseFields = new TrackableCollection<ReleaseWorkflowField>();
                    _releaseFields.CollectionChanged += FixupReleaseFields;
                }
                return _releaseFields;
            }
            set
            {
                if (!ReferenceEquals(_releaseFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseFields != null)
                    {
                        _releaseFields.CollectionChanged -= FixupReleaseFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseWorkflowField item in _releaseFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseFields = value;
                    if (_releaseFields != null)
                    {
                        _releaseFields.CollectionChanged += FixupReleaseFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseWorkflowField item in _releaseFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseFields");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflowField> _releaseFields;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflowCustomProperty> TestCaseCustomProperties
        {
            get
            {
                if (_testCaseCustomProperties == null)
                {
                    _testCaseCustomProperties = new TrackableCollection<TestCaseWorkflowCustomProperty>();
                    _testCaseCustomProperties.CollectionChanged += FixupTestCaseCustomProperties;
                }
                return _testCaseCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_testCaseCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseCustomProperties != null)
                    {
                        _testCaseCustomProperties.CollectionChanged -= FixupTestCaseCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseWorkflowCustomProperty item in _testCaseCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseCustomProperties = value;
                    if (_testCaseCustomProperties != null)
                    {
                        _testCaseCustomProperties.CollectionChanged += FixupTestCaseCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseWorkflowCustomProperty item in _testCaseCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseCustomProperties");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflowCustomProperty> _testCaseCustomProperties;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflowField> TestCaseFields
        {
            get
            {
                if (_testCaseFields == null)
                {
                    _testCaseFields = new TrackableCollection<TestCaseWorkflowField>();
                    _testCaseFields.CollectionChanged += FixupTestCaseFields;
                }
                return _testCaseFields;
            }
            set
            {
                if (!ReferenceEquals(_testCaseFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseFields != null)
                    {
                        _testCaseFields.CollectionChanged -= FixupTestCaseFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseWorkflowField item in _testCaseFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseFields = value;
                    if (_testCaseFields != null)
                    {
                        _testCaseFields.CollectionChanged += FixupTestCaseFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseWorkflowField item in _testCaseFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseFields");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflowField> _testCaseFields;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowCustomProperty> DocumentCustomProperties
        {
            get
            {
                if (_documentCustomProperties == null)
                {
                    _documentCustomProperties = new TrackableCollection<DocumentWorkflowCustomProperty>();
                    _documentCustomProperties.CollectionChanged += FixupDocumentCustomProperties;
                }
                return _documentCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_documentCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentCustomProperties != null)
                    {
                        _documentCustomProperties.CollectionChanged -= FixupDocumentCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowCustomProperty item in _documentCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentCustomProperties = value;
                    if (_documentCustomProperties != null)
                    {
                        _documentCustomProperties.CollectionChanged += FixupDocumentCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowCustomProperty item in _documentCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentCustomProperties");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowCustomProperty> _documentCustomProperties;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowField> DocumentFields
        {
            get
            {
                if (_documentFields == null)
                {
                    _documentFields = new TrackableCollection<DocumentWorkflowField>();
                    _documentFields.CollectionChanged += FixupDocumentFields;
                }
                return _documentFields;
            }
            set
            {
                if (!ReferenceEquals(_documentFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentFields != null)
                    {
                        _documentFields.CollectionChanged -= FixupDocumentFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowField item in _documentFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentFields = value;
                    if (_documentFields != null)
                    {
                        _documentFields.CollectionChanged += FixupDocumentFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowField item in _documentFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentFields");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowField> _documentFields;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowCustomProperty> RiskCustomProperties
        {
            get
            {
                if (_riskCustomProperties == null)
                {
                    _riskCustomProperties = new TrackableCollection<RiskWorkflowCustomProperty>();
                    _riskCustomProperties.CollectionChanged += FixupRiskCustomProperties;
                }
                return _riskCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_riskCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskCustomProperties != null)
                    {
                        _riskCustomProperties.CollectionChanged -= FixupRiskCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowCustomProperty item in _riskCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskCustomProperties = value;
                    if (_riskCustomProperties != null)
                    {
                        _riskCustomProperties.CollectionChanged += FixupRiskCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowCustomProperty item in _riskCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskCustomProperties");
                }
            }
        }
        private TrackableCollection<RiskWorkflowCustomProperty> _riskCustomProperties;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowField> RiskFields
        {
            get
            {
                if (_riskFields == null)
                {
                    _riskFields = new TrackableCollection<RiskWorkflowField>();
                    _riskFields.CollectionChanged += FixupRiskFields;
                }
                return _riskFields;
            }
            set
            {
                if (!ReferenceEquals(_riskFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskFields != null)
                    {
                        _riskFields.CollectionChanged -= FixupRiskFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowField item in _riskFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskFields = value;
                    if (_riskFields != null)
                    {
                        _riskFields.CollectionChanged += FixupRiskFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowField item in _riskFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskFields");
                }
            }
        }
        private TrackableCollection<RiskWorkflowField> _riskFields;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            IncidentCustomProperties.Clear();
            IncidentFields.Clear();
            RequirementCustomProperties.Clear();
            RequirementFields.Clear();
            TaskCustomProperties.Clear();
            TaskFields.Clear();
            ReleaseCustomProperties.Clear();
            ReleaseFields.Clear();
            TestCaseCustomProperties.Clear();
            TestCaseFields.Clear();
            DocumentCustomProperties.Clear();
            DocumentFields.Clear();
            RiskCustomProperties.Clear();
            RiskFields.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupIncidentCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowCustomProperty item in e.NewItems)
                {
                    item.State = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.State, this))
                    {
                        item.State = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowField item in e.NewItems)
                {
                    item.State = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.State, this))
                    {
                        item.State = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupReleaseCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupReleaseFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDocumentCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDocumentFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowCustomProperty item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRiskFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowField item in e.NewItems)
                {
                    item.FieldState = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowField item in e.OldItems)
                {
                    if (ReferenceEquals(item.FieldState, this))
                    {
                        item.FieldState = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
