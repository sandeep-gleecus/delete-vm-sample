//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GlobalCustomPropertyList))]
    public partial class GlobalCustomPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomPropertyValueId
        {
            get { return _customPropertyValueId; }
            set
            {
                if (_customPropertyValueId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomPropertyValueId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customPropertyValueId = value;
                    OnPropertyChanged("CustomPropertyValueId");
                }
            }
        }
        private int _customPropertyValueId;
    
        [DataMember]
        public int CustomPropertyListId
        {
            get { return _customPropertyListId; }
            set
            {
                if (_customPropertyListId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyListId", _customPropertyListId);
                    if (!IsDeserializing)
                    {
                        if (List != null && List.CustomPropertyListId != value)
                        {
                            List = null;
                        }
                    }
                    _customPropertyListId = value;
                    OnPropertyChanged("CustomPropertyListId");
                }
            }
        }
        private int _customPropertyListId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public GlobalCustomPropertyList List
        {
            get { return _list; }
            set
            {
                if (!ReferenceEquals(_list, value))
                {
                    var previousValue = _list;
                    _list = value;
                    FixupList(previousValue);
                    OnNavigationPropertyChanged("List");
                }
            }
        }
        private GlobalCustomPropertyList _list;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            List = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupList(GlobalCustomPropertyList previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Values.Contains(this))
            {
                previousValue.Values.Remove(this);
            }
    
            if (List != null)
            {
                if (!List.Values.Contains(this))
                {
                    List.Values.Add(this);
                }
    
                CustomPropertyListId = List.CustomPropertyListId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("List")
                    && (ChangeTracker.OriginalValues["List"] == List))
                {
                    ChangeTracker.OriginalValues.Remove("List");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("List", previousValue);
                }
                if (List != null && !List.ChangeTracker.ChangeTrackingEnabled)
                {
                    List.StartTracking();
                }
            }
        }

        #endregion

    }
}
