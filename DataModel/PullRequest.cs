//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class PullRequest: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TaskId
        {
            get { return _taskId; }
            set
            {
                if (_taskId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskId = value;
                    OnPropertyChanged("TaskId");
                }
            }
        }
        private int _taskId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Name' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> TaskFolderId
        {
            get { return _taskFolderId; }
            set
            {
                if (_taskFolderId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskFolderId", _taskFolderId);
                    _taskFolderId = value;
                    OnPropertyChanged("TaskFolderId");
                }
            }
        }
        private Nullable<int> _taskFolderId;
    
        [DataMember]
        public int TaskStatusId
        {
            get { return _taskStatusId; }
            set
            {
                if (_taskStatusId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskStatusId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskStatusId = value;
                    OnPropertyChanged("TaskStatusId");
                }
            }
        }
        private int _taskStatusId;
    
        [DataMember]
        public int TaskTypeId
        {
            get { return _taskTypeId; }
            set
            {
                if (_taskTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskTypeId = value;
                    OnPropertyChanged("TaskTypeId");
                }
            }
        }
        private int _taskTypeId;
    
        [DataMember]
        public Nullable<int> TaskPriorityId
        {
            get { return _taskPriorityId; }
            set
            {
                if (_taskPriorityId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPriorityId", _taskPriorityId);
                    _taskPriorityId = value;
                    OnPropertyChanged("TaskPriorityId");
                }
            }
        }
        private Nullable<int> _taskPriorityId;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreationDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LastUpdateDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ConcurrencyDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsAttachments' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsDeleted' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string TaskStatusName
        {
            get { return _taskStatusName; }
            set
            {
                if (_taskStatusName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskStatusName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskStatusName = value;
                    OnPropertyChanged("TaskStatusName");
                }
            }
        }
        private string _taskStatusName;
    
        [DataMember]
        public string OwnerName
        {
            get { return _ownerName; }
            set
            {
                if (_ownerName != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerName", _ownerName);
                    _ownerName = value;
                    OnPropertyChanged("OwnerName");
                }
            }
        }
        private string _ownerName;
    
        [DataMember]
        public string CreatorName
        {
            get { return _creatorName; }
            set
            {
                if (_creatorName != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorName", _creatorName);
                    _creatorName = value;
                    OnPropertyChanged("CreatorName");
                }
            }
        }
        private string _creatorName;
    
        [DataMember]
        public string TaskPriorityName
        {
            get { return _taskPriorityName; }
            set
            {
                if (_taskPriorityName != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPriorityName", _taskPriorityName);
                    _taskPriorityName = value;
                    OnPropertyChanged("TaskPriorityName");
                }
            }
        }
        private string _taskPriorityName;
    
        [DataMember]
        public string TaskPriorityColor
        {
            get { return _taskPriorityColor; }
            set
            {
                if (_taskPriorityColor != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPriorityColor", _taskPriorityColor);
                    _taskPriorityColor = value;
                    OnPropertyChanged("TaskPriorityColor");
                }
            }
        }
        private string _taskPriorityColor;
    
        [DataMember]
        public string ProjectName
        {
            get { return _projectName; }
            set
            {
                if (_projectName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectName = value;
                    OnPropertyChanged("ProjectName");
                }
            }
        }
        private string _projectName;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectTemplateId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public string ReleaseVersionNumber
        {
            get { return _releaseVersionNumber; }
            set
            {
                if (_releaseVersionNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseVersionNumber", _releaseVersionNumber);
                    _releaseVersionNumber = value;
                    OnPropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        private string _releaseVersionNumber;
    
        [DataMember]
        public string TaskTypeName
        {
            get { return _taskTypeName; }
            set
            {
                if (_taskTypeName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskTypeName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskTypeName = value;
                    OnPropertyChanged("TaskTypeName");
                }
            }
        }
        private string _taskTypeName;
    
        [DataMember]
        public Nullable<int> SourceBranchId
        {
            get { return _sourceBranchId; }
            set
            {
                if (_sourceBranchId != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceBranchId", _sourceBranchId);
                    _sourceBranchId = value;
                    OnPropertyChanged("SourceBranchId");
                }
            }
        }
        private Nullable<int> _sourceBranchId;
    
        [DataMember]
        public string SourceBranchName
        {
            get { return _sourceBranchName; }
            set
            {
                if (_sourceBranchName != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceBranchName", _sourceBranchName);
                    _sourceBranchName = value;
                    OnPropertyChanged("SourceBranchName");
                }
            }
        }
        private string _sourceBranchName;
    
        [DataMember]
        public Nullable<int> DestBranchId
        {
            get { return _destBranchId; }
            set
            {
                if (_destBranchId != value)
                {
                    ChangeTracker.RecordOriginalValue("DestBranchId", _destBranchId);
                    _destBranchId = value;
                    OnPropertyChanged("DestBranchId");
                }
            }
        }
        private Nullable<int> _destBranchId;
    
        [DataMember]
        public string DestBranchName
        {
            get { return _destBranchName; }
            set
            {
                if (_destBranchName != value)
                {
                    ChangeTracker.RecordOriginalValue("DestBranchName", _destBranchName);
                    _destBranchName = value;
                    OnPropertyChanged("DestBranchName");
                }
            }
        }
        private string _destBranchName;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreatorId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
