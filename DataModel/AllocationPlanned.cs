//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AllocationActual))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(ResourceCategory))]
    [KnownType(typeof(ResourceTrack))]
    public partial class AllocationPlanned: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int AllocationId
        {
            get { return _allocationId; }
            set
            {
                if (_allocationId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AllocationId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _allocationId = value;
                    OnPropertyChanged("AllocationId");
                }
            }
        }
        private int _allocationId;
    
        [DataMember]
        public int ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private int _releaseId;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public int PercentAllocated
        {
            get { return _percentAllocated; }
            set
            {
                if (_percentAllocated != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentAllocated", _percentAllocated);
                    _percentAllocated = value;
                    OnPropertyChanged("PercentAllocated");
                }
            }
        }
        private int _percentAllocated;
    
        [DataMember]
        public Nullable<int> ResourceCategoryId
        {
            get { return _resourceCategoryId; }
            set
            {
                if (_resourceCategoryId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResourceCategoryId", _resourceCategoryId);
                    if (!IsDeserializing)
                    {
                        if (ResourceCategory != null && ResourceCategory.ResourceCategoryId != value)
                        {
                            ResourceCategory = null;
                        }
                    }
                    _resourceCategoryId = value;
                    OnPropertyChanged("ResourceCategoryId");
                }
            }
        }
        private Nullable<int> _resourceCategoryId;
    
        [DataMember]
        public Nullable<int> ResourceTrackId
        {
            get { return _resourceTrackId; }
            set
            {
                if (_resourceTrackId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResourceTrackId", _resourceTrackId);
                    if (!IsDeserializing)
                    {
                        if (ResourceTrack != null && ResourceTrack.ResourceTrackId != value)
                        {
                            ResourceTrack = null;
                        }
                    }
                    _resourceTrackId = value;
                    OnPropertyChanged("ResourceTrackId");
                }
            }
        }
        private Nullable<int> _resourceTrackId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AllocationActual> ActualAllocations
        {
            get
            {
                if (_actualAllocations == null)
                {
                    _actualAllocations = new TrackableCollection<AllocationActual>();
                    _actualAllocations.CollectionChanged += FixupActualAllocations;
                }
                return _actualAllocations;
            }
            set
            {
                if (!ReferenceEquals(_actualAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_actualAllocations != null)
                    {
                        _actualAllocations.CollectionChanged -= FixupActualAllocations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AllocationActual item in _actualAllocations)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _actualAllocations = value;
                    if (_actualAllocations != null)
                    {
                        _actualAllocations.CollectionChanged += FixupActualAllocations;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AllocationActual item in _actualAllocations)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ActualAllocations");
                }
            }
        }
        private TrackableCollection<AllocationActual> _actualAllocations;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public ResourceCategory ResourceCategory
        {
            get { return _resourceCategory; }
            set
            {
                if (!ReferenceEquals(_resourceCategory, value))
                {
                    var previousValue = _resourceCategory;
                    _resourceCategory = value;
                    FixupResourceCategory(previousValue);
                    OnNavigationPropertyChanged("ResourceCategory");
                }
            }
        }
        private ResourceCategory _resourceCategory;
    
        [DataMember]
        public ResourceTrack ResourceTrack
        {
            get { return _resourceTrack; }
            set
            {
                if (!ReferenceEquals(_resourceTrack, value))
                {
                    var previousValue = _resourceTrack;
                    _resourceTrack = value;
                    FixupResourceTrack(previousValue);
                    OnNavigationPropertyChanged("ResourceTrack");
                }
            }
        }
        private ResourceTrack _resourceTrack;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ActualAllocations.Clear();
            Release = null;
            ResourceCategory = null;
            ResourceTrack = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupRelease(Release previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PlannedAllocations.Contains(this))
            {
                previousValue.PlannedAllocations.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.PlannedAllocations.Contains(this))
                {
                    Release.PlannedAllocations.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupResourceCategory(ResourceCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PlannedAllocations.Contains(this))
            {
                previousValue.PlannedAllocations.Remove(this);
            }
    
            if (ResourceCategory != null)
            {
                if (!ResourceCategory.PlannedAllocations.Contains(this))
                {
                    ResourceCategory.PlannedAllocations.Add(this);
                }
    
                ResourceCategoryId = ResourceCategory.ResourceCategoryId;
            }
            else if (!skipKeys)
            {
                ResourceCategoryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResourceCategory")
                    && (ChangeTracker.OriginalValues["ResourceCategory"] == ResourceCategory))
                {
                    ChangeTracker.OriginalValues.Remove("ResourceCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResourceCategory", previousValue);
                }
                if (ResourceCategory != null && !ResourceCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResourceCategory.StartTracking();
                }
            }
        }
    
        private void FixupResourceTrack(ResourceTrack previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PlannedAllocations.Contains(this))
            {
                previousValue.PlannedAllocations.Remove(this);
            }
    
            if (ResourceTrack != null)
            {
                if (!ResourceTrack.PlannedAllocations.Contains(this))
                {
                    ResourceTrack.PlannedAllocations.Add(this);
                }
    
                ResourceTrackId = ResourceTrack.ResourceTrackId;
            }
            else if (!skipKeys)
            {
                ResourceTrackId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResourceTrack")
                    && (ChangeTracker.OriginalValues["ResourceTrack"] == ResourceTrack))
                {
                    ChangeTracker.OriginalValues.Remove("ResourceTrack");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResourceTrack", previousValue);
                }
                if (ResourceTrack != null && !ResourceTrack.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResourceTrack.StartTracking();
                }
            }
        }
    
        private void FixupActualAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AllocationActual item in e.NewItems)
                {
                    item.PlannedAllocation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ActualAllocations", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AllocationActual item in e.OldItems)
                {
                    if (ReferenceEquals(item.PlannedAllocation, this))
                    {
                        item.PlannedAllocation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ActualAllocations", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
