//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Project))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(TaskPriority))]
    [KnownType(typeof(TaskStatus))]
    [KnownType(typeof(TaskFolder))]
    [KnownType(typeof(TaskType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TaskDiscussion))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(VersionControlPullRequest))]
    [KnownType(typeof(Risk))]
    public partial class Task: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TaskId
        {
            get { return _taskId; }
            set
            {
                if (_taskId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskId = value;
                    OnPropertyChanged("TaskId");
                }
            }
        }
        private int _taskId;
    
        [DataMember]
        public int TaskStatusId
        {
            get { return _taskStatusId; }
            set
            {
                if (_taskStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskStatusId", _taskStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.TaskStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _taskStatusId = value;
                    OnPropertyChanged("TaskStatusId");
                }
            }
        }
        private int _taskStatusId;
    
        [DataMember]
        public int TaskTypeId
        {
            get { return _taskTypeId; }
            set
            {
                if (_taskTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskTypeId", _taskTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.TaskTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _taskTypeId = value;
                    OnPropertyChanged("TaskTypeId");
                }
            }
        }
        private int _taskTypeId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public Nullable<int> RequirementId
        {
            get { return _requirementId; }
            set
            {
                if (_requirementId != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementId", _requirementId);
                    if (!IsDeserializing)
                    {
                        if (Requirement != null && Requirement.RequirementId != value)
                        {
                            Requirement = null;
                        }
                    }
                    _requirementId = value;
                    OnPropertyChanged("RequirementId");
                }
            }
        }
        private Nullable<int> _requirementId;
    
        [DataMember]
        public Nullable<int> ReleaseId
        {
            get { return _releaseId; }
            set
            {
                if (_releaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReleaseId", _releaseId);
                    if (!IsDeserializing)
                    {
                        if (Release != null && Release.ReleaseId != value)
                        {
                            Release = null;
                        }
                    }
                    _releaseId = value;
                    OnPropertyChanged("ReleaseId");
                }
            }
        }
        private Nullable<int> _releaseId;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorId", _creatorId);
                    if (!IsDeserializing)
                    {
                        if (Creator != null && Creator.UserId != value)
                        {
                            Creator = null;
                        }
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public Nullable<int> TaskFolderId
        {
            get { return _taskFolderId; }
            set
            {
                if (_taskFolderId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskFolderId", _taskFolderId);
                    if (!IsDeserializing)
                    {
                        if (Folder != null && Folder.TaskFolderId != value)
                        {
                            Folder = null;
                        }
                    }
                    _taskFolderId = value;
                    OnPropertyChanged("TaskFolderId");
                }
            }
        }
        private Nullable<int> _taskFolderId;
    
        [DataMember]
        public Nullable<int> TaskPriorityId
        {
            get { return _taskPriorityId; }
            set
            {
                if (_taskPriorityId != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskPriorityId", _taskPriorityId);
                    if (!IsDeserializing)
                    {
                        if (Priority != null && Priority.TaskPriorityId != value)
                        {
                            Priority = null;
                        }
                    }
                    _taskPriorityId = value;
                    OnPropertyChanged("TaskPriorityId");
                }
            }
        }
        private Nullable<int> _taskPriorityId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public int CompletionPercent
        {
            get { return _completionPercent; }
            set
            {
                if (_completionPercent != value)
                {
                    ChangeTracker.RecordOriginalValue("CompletionPercent", _completionPercent);
                    _completionPercent = value;
                    OnPropertyChanged("CompletionPercent");
                }
            }
        }
        private int _completionPercent;
    
        [DataMember]
        public Nullable<int> EstimatedEffort
        {
            get { return _estimatedEffort; }
            set
            {
                if (_estimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedEffort", _estimatedEffort);
                    _estimatedEffort = value;
                    OnPropertyChanged("EstimatedEffort");
                }
            }
        }
        private Nullable<int> _estimatedEffort;
    
        [DataMember]
        public Nullable<int> ActualEffort
        {
            get { return _actualEffort; }
            set
            {
                if (_actualEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualEffort", _actualEffort);
                    _actualEffort = value;
                    OnPropertyChanged("ActualEffort");
                }
            }
        }
        private Nullable<int> _actualEffort;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public Nullable<int> ProjectedEffort
        {
            get { return _projectedEffort; }
            set
            {
                if (_projectedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectedEffort", _projectedEffort);
                    _projectedEffort = value;
                    OnPropertyChanged("ProjectedEffort");
                }
            }
        }
        private Nullable<int> _projectedEffort;
    
        [DataMember]
        public Nullable<int> RemainingEffort
        {
            get { return _remainingEffort; }
            set
            {
                if (_remainingEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("RemainingEffort", _remainingEffort);
                    _remainingEffort = value;
                    OnPropertyChanged("RemainingEffort");
                }
            }
        }
        private Nullable<int> _remainingEffort;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<int> RiskId
        {
            get { return _riskId; }
            set
            {
                if (_riskId != value)
                {
                    ChangeTracker.RecordOriginalValue("RiskId", _riskId);
                    if (!IsDeserializing)
                    {
                        if (TST_RISK != null && TST_RISK.RiskId != value)
                        {
                            TST_RISK = null;
                        }
                    }
                    _riskId = value;
                    OnPropertyChanged("RiskId");
                }
            }
        }
        private Nullable<int> _riskId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public Requirement Requirement
        {
            get { return _requirement; }
            set
            {
                if (!ReferenceEquals(_requirement, value))
                {
                    var previousValue = _requirement;
                    _requirement = value;
                    FixupRequirement(previousValue);
                    OnNavigationPropertyChanged("Requirement");
                }
            }
        }
        private Requirement _requirement;
    
        [DataMember]
        public TaskPriority Priority
        {
            get { return _priority; }
            set
            {
                if (!ReferenceEquals(_priority, value))
                {
                    var previousValue = _priority;
                    _priority = value;
                    FixupPriority(previousValue);
                    OnNavigationPropertyChanged("Priority");
                }
            }
        }
        private TaskPriority _priority;
    
        [DataMember]
        public TaskStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private TaskStatus _status;
    
        [DataMember]
        public TaskFolder Folder
        {
            get { return _folder; }
            set
            {
                if (!ReferenceEquals(_folder, value))
                {
                    var previousValue = _folder;
                    _folder = value;
                    FixupFolder(previousValue);
                    OnNavigationPropertyChanged("Folder");
                }
            }
        }
        private TaskFolder _folder;
    
        [DataMember]
        public TaskType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private TaskType _type;
    
        [DataMember]
        public User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                    OnNavigationPropertyChanged("Creator");
                }
            }
        }
        private User _creator;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public TrackableCollection<TaskDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<TaskDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<TaskDiscussion> _discussions;
    
        [DataMember]
        public Release Release
        {
            get { return _release; }
            set
            {
                if (!ReferenceEquals(_release, value))
                {
                    var previousValue = _release;
                    _release = value;
                    FixupRelease(previousValue);
                    OnNavigationPropertyChanged("Release");
                }
            }
        }
        private Release _release;
    
        [DataMember]
        public TrackableCollection<VersionControlPullRequest> PullRequests
        {
            get
            {
                if (_pullRequests == null)
                {
                    _pullRequests = new TrackableCollection<VersionControlPullRequest>();
                    _pullRequests.CollectionChanged += FixupPullRequests;
                }
                return _pullRequests;
            }
            set
            {
                if (!ReferenceEquals(_pullRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pullRequests != null)
                    {
                        _pullRequests.CollectionChanged -= FixupPullRequests;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (VersionControlPullRequest item in _pullRequests)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pullRequests = value;
                    if (_pullRequests != null)
                    {
                        _pullRequests.CollectionChanged += FixupPullRequests;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (VersionControlPullRequest item in _pullRequests)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PullRequests");
                }
            }
        }
        private TrackableCollection<VersionControlPullRequest> _pullRequests;
    
        [DataMember]
        public Risk TST_RISK
        {
            get { return _tST_RISK; }
            set
            {
                if (!ReferenceEquals(_tST_RISK, value))
                {
                    var previousValue = _tST_RISK;
                    _tST_RISK = value;
                    FixupTST_RISK(previousValue);
                    OnNavigationPropertyChanged("TST_RISK");
                }
            }
        }
        private Risk _tST_RISK;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Project = null;
            Requirement = null;
            Priority = null;
            Status = null;
            Folder = null;
            Type = null;
            Creator = null;
            Owner = null;
            Discussions.Clear();
            Release = null;
            PullRequests.Clear();
            TST_RISK = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Tasks.Contains(this))
                {
                    Project.Tasks.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupRequirement(Requirement previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Requirement != null)
            {
                if (!Requirement.Tasks.Contains(this))
                {
                    Requirement.Tasks.Add(this);
                }
    
                RequirementId = Requirement.RequirementId;
            }
            else if (!skipKeys)
            {
                RequirementId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Requirement")
                    && (ChangeTracker.OriginalValues["Requirement"] == Requirement))
                {
                    ChangeTracker.OriginalValues.Remove("Requirement");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Requirement", previousValue);
                }
                if (Requirement != null && !Requirement.ChangeTracker.ChangeTrackingEnabled)
                {
                    Requirement.StartTracking();
                }
            }
        }
    
        private void FixupPriority(TaskPriority previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Priority != null)
            {
                if (!Priority.Tasks.Contains(this))
                {
                    Priority.Tasks.Add(this);
                }
    
                TaskPriorityId = Priority.TaskPriorityId;
            }
            else if (!skipKeys)
            {
                TaskPriorityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Priority")
                    && (ChangeTracker.OriginalValues["Priority"] == Priority))
                {
                    ChangeTracker.OriginalValues.Remove("Priority");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Priority", previousValue);
                }
                if (Priority != null && !Priority.ChangeTracker.ChangeTrackingEnabled)
                {
                    Priority.StartTracking();
                }
            }
        }
    
        private void FixupStatus(TaskStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Tasks.Contains(this))
                {
                    Status.Tasks.Add(this);
                }
    
                TaskStatusId = Status.TaskStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupFolder(TaskFolder previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Folder != null)
            {
                if (!Folder.Tasks.Contains(this))
                {
                    Folder.Tasks.Add(this);
                }
    
                TaskFolderId = Folder.TaskFolderId;
            }
            else if (!skipKeys)
            {
                TaskFolderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Folder")
                    && (ChangeTracker.OriginalValues["Folder"] == Folder))
                {
                    ChangeTracker.OriginalValues.Remove("Folder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Folder", previousValue);
                }
                if (Folder != null && !Folder.ChangeTracker.ChangeTrackingEnabled)
                {
                    Folder.StartTracking();
                }
            }
        }
    
        private void FixupType(TaskType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Tasks.Contains(this))
                {
                    Type.Tasks.Add(this);
                }
    
                TaskTypeId = Type.TaskTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CreatedTasks.Contains(this))
            {
                previousValue.CreatedTasks.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.CreatedTasks.Contains(this))
                {
                    Creator.CreatedTasks.Add(this);
                }
    
                CreatorId = Creator.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Creator")
                    && (ChangeTracker.OriginalValues["Creator"] == Creator))
                {
                    ChangeTracker.OriginalValues.Remove("Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Creator", previousValue);
                }
                if (Creator != null && !Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Creator.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedTasks.Contains(this))
            {
                previousValue.OwnedTasks.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedTasks.Contains(this))
                {
                    Owner.OwnedTasks.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Release != null)
            {
                if (!Release.Tasks.Contains(this))
                {
                    Release.Tasks.Add(this);
                }
    
                ReleaseId = Release.ReleaseId;
            }
            else if (!skipKeys)
            {
                ReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Release")
                    && (ChangeTracker.OriginalValues["Release"] == Release))
                {
                    ChangeTracker.OriginalValues.Remove("Release");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Release", previousValue);
                }
                if (Release != null && !Release.ChangeTracker.ChangeTrackingEnabled)
                {
                    Release.StartTracking();
                }
            }
        }
    
        private void FixupTST_RISK(Risk previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (TST_RISK != null)
            {
                if (!TST_RISK.Tasks.Contains(this))
                {
                    TST_RISK.Tasks.Add(this);
                }
    
                RiskId = TST_RISK.RiskId;
            }
            else if (!skipKeys)
            {
                RiskId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_RISK")
                    && (ChangeTracker.OriginalValues["TST_RISK"] == TST_RISK))
                {
                    ChangeTracker.OriginalValues.Remove("TST_RISK");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_RISK", previousValue);
                }
                if (TST_RISK != null && !TST_RISK.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_RISK.StartTracking();
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskDiscussion item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupPullRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlPullRequest item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PullRequests", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlPullRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PullRequests", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
