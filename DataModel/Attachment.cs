//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactAttachment))]
    [KnownType(typeof(AttachmentVersion))]
    [KnownType(typeof(ProjectAttachment))]
    [KnownType(typeof(AttachmentType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(DocumentDiscussion))]
    [KnownType(typeof(DocumentStatus))]
    [KnownType(typeof(ProjectGroup))]
    public partial class Attachment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int AttachmentId
        {
            get { return _attachmentId; }
            set
            {
                if (_attachmentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttachmentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _attachmentId = value;
                    OnPropertyChanged("AttachmentId");
                }
            }
        }
        private int _attachmentId;
    
        [DataMember]
        public int AttachmentTypeId
        {
            get { return _attachmentTypeId; }
            set
            {
                if (_attachmentTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("AttachmentTypeId", _attachmentTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.AttachmentTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _attachmentTypeId = value;
                    OnPropertyChanged("AttachmentTypeId");
                }
            }
        }
        private int _attachmentTypeId;
    
        [DataMember]
        public int AuthorId
        {
            get { return _authorId; }
            set
            {
                if (_authorId != value)
                {
                    ChangeTracker.RecordOriginalValue("AuthorId", _authorId);
                    if (!IsDeserializing)
                    {
                        if (Editor != null && Editor.UserId != value)
                        {
                            Editor = null;
                        }
                    }
                    _authorId = value;
                    OnPropertyChanged("AuthorId");
                }
            }
        }
        private int _authorId;
    
        [DataMember]
        public int EditorId
        {
            get { return _editorId; }
            set
            {
                if (_editorId != value)
                {
                    ChangeTracker.RecordOriginalValue("EditorId", _editorId);
                    if (!IsDeserializing)
                    {
                        if (Author != null && Author.UserId != value)
                        {
                            Author = null;
                        }
                    }
                    _editorId = value;
                    OnPropertyChanged("EditorId");
                }
            }
        }
        private int _editorId;
    
        [DataMember]
        public string Filename
        {
            get { return _filename; }
            set
            {
                if (_filename != value)
                {
                    ChangeTracker.RecordOriginalValue("Filename", _filename);
                    _filename = value;
                    OnPropertyChanged("Filename");
                }
            }
        }
        private string _filename;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime UploadDate
        {
            get { return _uploadDate; }
            set
            {
                if (_uploadDate != value)
                {
                    ChangeTracker.RecordOriginalValue("UploadDate", _uploadDate);
                    _uploadDate = value;
                    OnPropertyChanged("UploadDate");
                }
            }
        }
        private System.DateTime _uploadDate;
    
        [DataMember]
        public System.DateTime EditedDate
        {
            get { return _editedDate; }
            set
            {
                if (_editedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EditedDate", _editedDate);
                    _editedDate = value;
                    OnPropertyChanged("EditedDate");
                }
            }
        }
        private System.DateTime _editedDate;
    
        [DataMember]
        public int Size
        {
            get { return _size; }
            set
            {
                if (_size != value)
                {
                    ChangeTracker.RecordOriginalValue("Size", _size);
                    _size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        private int _size;
    
        [DataMember]
        public string CurrentVersion
        {
            get { return _currentVersion; }
            set
            {
                if (_currentVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrentVersion", _currentVersion);
                    _currentVersion = value;
                    OnPropertyChanged("CurrentVersion");
                }
            }
        }
        private string _currentVersion;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public int DocumentStatusId
        {
            get { return _documentStatusId; }
            set
            {
                if (_documentStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentStatusId", _documentStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.DocumentStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _documentStatusId = value;
                    OnPropertyChanged("DocumentStatusId");
                }
            }
        }
        private int _documentStatusId;
    
        [DataMember]
        public bool IS_DELETED
        {
            get { return _iS_DELETED; }
            set
            {
                if (_iS_DELETED != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_DELETED", _iS_DELETED);
                    _iS_DELETED = value;
                    OnPropertyChanged("IS_DELETED");
                }
            }
        }
        private bool _iS_DELETED;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ArtifactAttachment> Artifacts
        {
            get
            {
                if (_artifacts == null)
                {
                    _artifacts = new TrackableCollection<ArtifactAttachment>();
                    _artifacts.CollectionChanged += FixupArtifacts;
                }
                return _artifacts;
            }
            set
            {
                if (!ReferenceEquals(_artifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifacts != null)
                    {
                        _artifacts.CollectionChanged -= FixupArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ArtifactAttachment item in _artifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifacts = value;
                    if (_artifacts != null)
                    {
                        _artifacts.CollectionChanged += FixupArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ArtifactAttachment item in _artifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Artifacts");
                }
            }
        }
        private TrackableCollection<ArtifactAttachment> _artifacts;
    
        [DataMember]
        public TrackableCollection<AttachmentVersion> Versions
        {
            get
            {
                if (_versions == null)
                {
                    _versions = new TrackableCollection<AttachmentVersion>();
                    _versions.CollectionChanged += FixupVersions;
                }
                return _versions;
            }
            set
            {
                if (!ReferenceEquals(_versions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_versions != null)
                    {
                        _versions.CollectionChanged -= FixupVersions;
                    }
                    _versions = value;
                    if (_versions != null)
                    {
                        _versions.CollectionChanged += FixupVersions;
                    }
                    OnNavigationPropertyChanged("Versions");
                }
            }
        }
        private TrackableCollection<AttachmentVersion> _versions;
    
        [DataMember]
        public TrackableCollection<ProjectAttachment> ProjectAttachments
        {
            get
            {
                if (_projectAttachments == null)
                {
                    _projectAttachments = new TrackableCollection<ProjectAttachment>();
                    _projectAttachments.CollectionChanged += FixupProjectAttachments;
                }
                return _projectAttachments;
            }
            set
            {
                if (!ReferenceEquals(_projectAttachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectAttachments != null)
                    {
                        _projectAttachments.CollectionChanged -= FixupProjectAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectAttachment item in _projectAttachments)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectAttachments = value;
                    if (_projectAttachments != null)
                    {
                        _projectAttachments.CollectionChanged += FixupProjectAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectAttachment item in _projectAttachments)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectAttachments");
                }
            }
        }
        private TrackableCollection<ProjectAttachment> _projectAttachments;
    
        [DataMember]
        public AttachmentType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private AttachmentType _type;
    
        [DataMember]
        public User Author
        {
            get { return _author; }
            set
            {
                if (!ReferenceEquals(_author, value))
                {
                    var previousValue = _author;
                    _author = value;
                    FixupAuthor(previousValue);
                    OnNavigationPropertyChanged("Author");
                }
            }
        }
        private User _author;
    
        [DataMember]
        public User Editor
        {
            get { return _editor; }
            set
            {
                if (!ReferenceEquals(_editor, value))
                {
                    var previousValue = _editor;
                    _editor = value;
                    FixupEditor(previousValue);
                    OnNavigationPropertyChanged("Editor");
                }
            }
        }
        private User _editor;
    
        [DataMember]
        public TrackableCollection<TestCase> TestCases
        {
            get
            {
                if (_testCases == null)
                {
                    _testCases = new TrackableCollection<TestCase>();
                    _testCases.CollectionChanged += FixupTestCases;
                }
                return _testCases;
            }
            set
            {
                if (!ReferenceEquals(_testCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged -= FixupTestCases;
                    }
                    _testCases = value;
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged += FixupTestCases;
                    }
                    OnNavigationPropertyChanged("TestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _testCases;
    
        [DataMember]
        public TrackableCollection<DocumentDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<DocumentDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<DocumentDiscussion> _discussions;
    
        [DataMember]
        public DocumentStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private DocumentStatus _status;
    
        [DataMember]
        public TrackableCollection<ProjectGroup> ProjectGroups
        {
            get
            {
                if (_projectGroups == null)
                {
                    _projectGroups = new TrackableCollection<ProjectGroup>();
                    _projectGroups.CollectionChanged += FixupProjectGroups;
                }
                return _projectGroups;
            }
            set
            {
                if (!ReferenceEquals(_projectGroups, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged -= FixupProjectGroups;
                    }
                    _projectGroups = value;
                    if (_projectGroups != null)
                    {
                        _projectGroups.CollectionChanged += FixupProjectGroups;
                    }
                    OnNavigationPropertyChanged("ProjectGroups");
                }
            }
        }
        private TrackableCollection<ProjectGroup> _projectGroups;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Artifacts.Clear();
            Versions.Clear();
            ProjectAttachments.Clear();
            Type = null;
            Author = null;
            Editor = null;
            TestCases.Clear();
            Discussions.Clear();
            Status = null;
            ProjectGroups.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupType(AttachmentType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Attachments.Contains(this))
            {
                previousValue.Attachments.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Attachments.Contains(this))
                {
                    Type.Attachments.Add(this);
                }
    
                AttachmentTypeId = Type.AttachmentTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupAuthor(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuthoredAttachments.Contains(this))
            {
                previousValue.AuthoredAttachments.Remove(this);
            }
    
            if (Author != null)
            {
                if (!Author.AuthoredAttachments.Contains(this))
                {
                    Author.AuthoredAttachments.Add(this);
                }
    
                EditorId = Author.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Author")
                    && (ChangeTracker.OriginalValues["Author"] == Author))
                {
                    ChangeTracker.OriginalValues.Remove("Author");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Author", previousValue);
                }
                if (Author != null && !Author.ChangeTracker.ChangeTrackingEnabled)
                {
                    Author.StartTracking();
                }
            }
        }
    
        private void FixupEditor(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EditedAttachments.Contains(this))
            {
                previousValue.EditedAttachments.Remove(this);
            }
    
            if (Editor != null)
            {
                if (!Editor.EditedAttachments.Contains(this))
                {
                    Editor.EditedAttachments.Add(this);
                }
    
                AuthorId = Editor.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Editor")
                    && (ChangeTracker.OriginalValues["Editor"] == Editor))
                {
                    ChangeTracker.OriginalValues.Remove("Editor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Editor", previousValue);
                }
                if (Editor != null && !Editor.ChangeTracker.ChangeTrackingEnabled)
                {
                    Editor.StartTracking();
                }
            }
        }
    
        private void FixupStatus(DocumentStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Documents.Contains(this))
            {
                previousValue.Documents.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Documents.Contains(this))
                {
                    Status.Documents.Add(this);
                }
    
                DocumentStatusId = Status.DocumentStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactAttachment item in e.NewItems)
                {
                    item.Attachment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Artifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Artifacts", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttachmentVersion item in e.NewItems)
                {
                    item.Attachment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Versions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttachmentVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Versions", item);
                    }
                }
            }
        }
    
        private void FixupProjectAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectAttachment item in e.NewItems)
                {
                    item.Attachment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectAttachments", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectAttachments", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    item.Attachments = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachments, this))
                    {
                        item.Attachments = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCases", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentDiscussion item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupProjectGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGroup item in e.NewItems)
                {
                    if (!item.Documents.Contains(this))
                    {
                        item.Documents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectGroups", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGroup item in e.OldItems)
                {
                    if (item.Documents.Contains(this))
                    {
                        item.Documents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectGroups", item);
                    }
                }
            }
        }

        #endregion

    }
}
