//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DataSyncArtifactFieldValueMapping))]
    [KnownType(typeof(DataSyncArtifactMapping))]
    [KnownType(typeof(DataSyncCustomPropertyMapping))]
    [KnownType(typeof(DataSyncCustomPropertyValueMapping))]
    [KnownType(typeof(DataSyncSystem))]
    [KnownType(typeof(Project))]
    public partial class DataSyncProject: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DataSyncSystemId
        {
            get { return _dataSyncSystemId; }
            set
            {
                if (_dataSyncSystemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DataSyncSystemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (System != null && System.DataSyncSystemId != value)
                        {
                            System = null;
                        }
                    }
                    _dataSyncSystemId = value;
                    OnPropertyChanged("DataSyncSystemId");
                }
            }
        }
        private int _dataSyncSystemId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public string ExternalKey
        {
            get { return _externalKey; }
            set
            {
                if (_externalKey != value)
                {
                    ChangeTracker.RecordOriginalValue("ExternalKey", _externalKey);
                    _externalKey = value;
                    OnPropertyChanged("ExternalKey");
                }
            }
        }
        private string _externalKey;
    
        [DataMember]
        public string ActiveYn
        {
            get { return _activeYn; }
            set
            {
                if (_activeYn != value)
                {
                    ChangeTracker.RecordOriginalValue("ActiveYn", _activeYn);
                    _activeYn = value;
                    OnPropertyChanged("ActiveYn");
                }
            }
        }
        private string _activeYn;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DataSyncArtifactFieldValueMapping> ArtifactFieldValueMappings
        {
            get
            {
                if (_artifactFieldValueMappings == null)
                {
                    _artifactFieldValueMappings = new TrackableCollection<DataSyncArtifactFieldValueMapping>();
                    _artifactFieldValueMappings.CollectionChanged += FixupArtifactFieldValueMappings;
                }
                return _artifactFieldValueMappings;
            }
            set
            {
                if (!ReferenceEquals(_artifactFieldValueMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactFieldValueMappings != null)
                    {
                        _artifactFieldValueMappings.CollectionChanged -= FixupArtifactFieldValueMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncArtifactFieldValueMapping item in _artifactFieldValueMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactFieldValueMappings = value;
                    if (_artifactFieldValueMappings != null)
                    {
                        _artifactFieldValueMappings.CollectionChanged += FixupArtifactFieldValueMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncArtifactFieldValueMapping item in _artifactFieldValueMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactFieldValueMappings");
                }
            }
        }
        private TrackableCollection<DataSyncArtifactFieldValueMapping> _artifactFieldValueMappings;
    
        [DataMember]
        public TrackableCollection<DataSyncArtifactMapping> ArtifactMappings
        {
            get
            {
                if (_artifactMappings == null)
                {
                    _artifactMappings = new TrackableCollection<DataSyncArtifactMapping>();
                    _artifactMappings.CollectionChanged += FixupArtifactMappings;
                }
                return _artifactMappings;
            }
            set
            {
                if (!ReferenceEquals(_artifactMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactMappings != null)
                    {
                        _artifactMappings.CollectionChanged -= FixupArtifactMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncArtifactMapping item in _artifactMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactMappings = value;
                    if (_artifactMappings != null)
                    {
                        _artifactMappings.CollectionChanged += FixupArtifactMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncArtifactMapping item in _artifactMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactMappings");
                }
            }
        }
        private TrackableCollection<DataSyncArtifactMapping> _artifactMappings;
    
        [DataMember]
        public TrackableCollection<DataSyncCustomPropertyMapping> CustomPropertyMappings
        {
            get
            {
                if (_customPropertyMappings == null)
                {
                    _customPropertyMappings = new TrackableCollection<DataSyncCustomPropertyMapping>();
                    _customPropertyMappings.CollectionChanged += FixupCustomPropertyMappings;
                }
                return _customPropertyMappings;
            }
            set
            {
                if (!ReferenceEquals(_customPropertyMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customPropertyMappings != null)
                    {
                        _customPropertyMappings.CollectionChanged -= FixupCustomPropertyMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncCustomPropertyMapping item in _customPropertyMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _customPropertyMappings = value;
                    if (_customPropertyMappings != null)
                    {
                        _customPropertyMappings.CollectionChanged += FixupCustomPropertyMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncCustomPropertyMapping item in _customPropertyMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CustomPropertyMappings");
                }
            }
        }
        private TrackableCollection<DataSyncCustomPropertyMapping> _customPropertyMappings;
    
        [DataMember]
        public TrackableCollection<DataSyncCustomPropertyValueMapping> CustomPropertyValueMappings
        {
            get
            {
                if (_customPropertyValueMappings == null)
                {
                    _customPropertyValueMappings = new TrackableCollection<DataSyncCustomPropertyValueMapping>();
                    _customPropertyValueMappings.CollectionChanged += FixupCustomPropertyValueMappings;
                }
                return _customPropertyValueMappings;
            }
            set
            {
                if (!ReferenceEquals(_customPropertyValueMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customPropertyValueMappings != null)
                    {
                        _customPropertyValueMappings.CollectionChanged -= FixupCustomPropertyValueMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncCustomPropertyValueMapping item in _customPropertyValueMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _customPropertyValueMappings = value;
                    if (_customPropertyValueMappings != null)
                    {
                        _customPropertyValueMappings.CollectionChanged += FixupCustomPropertyValueMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncCustomPropertyValueMapping item in _customPropertyValueMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CustomPropertyValueMappings");
                }
            }
        }
        private TrackableCollection<DataSyncCustomPropertyValueMapping> _customPropertyValueMappings;
    
        [DataMember]
        public DataSyncSystem System
        {
            get { return _system; }
            set
            {
                if (!ReferenceEquals(_system, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (DataSyncSystemId != value.DataSyncSystemId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _system;
                    _system = value;
                    FixupSystem(previousValue);
                    OnNavigationPropertyChanged("System");
                }
            }
        }
        private DataSyncSystem _system;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProjectId != value.ProjectId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactFieldValueMappings.Clear();
            ArtifactMappings.Clear();
            CustomPropertyMappings.Clear();
            CustomPropertyValueMappings.Clear();
            System = null;
            Project = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSystem(DataSyncSystem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProjectMappings.Contains(this))
            {
                previousValue.ProjectMappings.Remove(this);
            }
    
            if (System != null)
            {
                if (!System.ProjectMappings.Contains(this))
                {
                    System.ProjectMappings.Add(this);
                }
    
                DataSyncSystemId = System.DataSyncSystemId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("System")
                    && (ChangeTracker.OriginalValues["System"] == System))
                {
                    ChangeTracker.OriginalValues.Remove("System");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("System", previousValue);
                }
                if (System != null && !System.ChangeTracker.ChangeTrackingEnabled)
                {
                    System.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DataSyncMappings.Contains(this))
            {
                previousValue.DataSyncMappings.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.DataSyncMappings.Contains(this))
                {
                    Project.DataSyncMappings.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupArtifactFieldValueMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncArtifactFieldValueMapping item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactFieldValueMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncArtifactFieldValueMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactFieldValueMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncArtifactMapping item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncArtifactMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCustomPropertyMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncCustomPropertyMapping item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomPropertyMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncCustomPropertyMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomPropertyMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCustomPropertyValueMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncCustomPropertyValueMapping item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomPropertyValueMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncCustomPropertyValueMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomPropertyValueMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
