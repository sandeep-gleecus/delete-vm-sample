//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class SysInfoResult : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string BuildClrVersion
        {
            get { return _buildClrVersion; }
            set
            {
                if (_buildClrVersion != value)
                {
                    OnComplexPropertyChanging();
                    _buildClrVersion = value;
                    OnPropertyChanged("BuildClrVersion");
                }
            }
        }
        private string _buildClrVersion;
    
        [DataMember]
        public string Collation
        {
            get { return _collation; }
            set
            {
                if (_collation != value)
                {
                    OnComplexPropertyChanging();
                    _collation = value;
                    OnPropertyChanged("Collation");
                }
            }
        }
        private string _collation;
    
        [DataMember]
        public Nullable<long> CollationId
        {
            get { return _collationId; }
            set
            {
                if (_collationId != value)
                {
                    OnComplexPropertyChanging();
                    _collationId = value;
                    OnPropertyChanged("CollationId");
                }
            }
        }
        private Nullable<long> _collationId;
    
        [DataMember]
        public Nullable<long> ComparisonStyle
        {
            get { return _comparisonStyle; }
            set
            {
                if (_comparisonStyle != value)
                {
                    OnComplexPropertyChanging();
                    _comparisonStyle = value;
                    OnPropertyChanged("ComparisonStyle");
                }
            }
        }
        private Nullable<long> _comparisonStyle;
    
        [DataMember]
        public string ComputerNamePhysicalNetBIOS
        {
            get { return _computerNamePhysicalNetBIOS; }
            set
            {
                if (_computerNamePhysicalNetBIOS != value)
                {
                    OnComplexPropertyChanging();
                    _computerNamePhysicalNetBIOS = value;
                    OnPropertyChanged("ComputerNamePhysicalNetBIOS");
                }
            }
        }
        private string _computerNamePhysicalNetBIOS;
    
        [DataMember]
        public string Edition
        {
            get { return _edition; }
            set
            {
                if (_edition != value)
                {
                    OnComplexPropertyChanging();
                    _edition = value;
                    OnPropertyChanged("Edition");
                }
            }
        }
        private string _edition;
    
        [DataMember]
        public Nullable<long> EditionId
        {
            get { return _editionId; }
            set
            {
                if (_editionId != value)
                {
                    OnComplexPropertyChanging();
                    _editionId = value;
                    OnPropertyChanged("EditionId");
                }
            }
        }
        private Nullable<long> _editionId;
    
        [DataMember]
        public Nullable<int> EngineEdition
        {
            get { return _engineEdition; }
            set
            {
                if (_engineEdition != value)
                {
                    OnComplexPropertyChanging();
                    _engineEdition = value;
                    OnPropertyChanged("EngineEdition");
                }
            }
        }
        private Nullable<int> _engineEdition;
    
        [DataMember]
        public Nullable<short> HadrManagerStatus
        {
            get { return _hadrManagerStatus; }
            set
            {
                if (_hadrManagerStatus != value)
                {
                    OnComplexPropertyChanging();
                    _hadrManagerStatus = value;
                    OnPropertyChanged("HadrManagerStatus");
                }
            }
        }
        private Nullable<short> _hadrManagerStatus;
    
        [DataMember]
        public string InstanceDefaultDataPath
        {
            get { return _instanceDefaultDataPath; }
            set
            {
                if (_instanceDefaultDataPath != value)
                {
                    OnComplexPropertyChanging();
                    _instanceDefaultDataPath = value;
                    OnPropertyChanged("InstanceDefaultDataPath");
                }
            }
        }
        private string _instanceDefaultDataPath;
    
        [DataMember]
        public string InstanceDefaultLogPath
        {
            get { return _instanceDefaultLogPath; }
            set
            {
                if (_instanceDefaultLogPath != value)
                {
                    OnComplexPropertyChanging();
                    _instanceDefaultLogPath = value;
                    OnPropertyChanged("InstanceDefaultLogPath");
                }
            }
        }
        private string _instanceDefaultLogPath;
    
        [DataMember]
        public string InstanceName
        {
            get { return _instanceName; }
            set
            {
                if (_instanceName != value)
                {
                    OnComplexPropertyChanging();
                    _instanceName = value;
                    OnPropertyChanged("InstanceName");
                }
            }
        }
        private string _instanceName;
    
        [DataMember]
        public Nullable<bool> IsAdvancedAnalyticsInstalled
        {
            get { return _isAdvancedAnalyticsInstalled; }
            set
            {
                if (_isAdvancedAnalyticsInstalled != value)
                {
                    OnComplexPropertyChanging();
                    _isAdvancedAnalyticsInstalled = value;
                    OnPropertyChanged("IsAdvancedAnalyticsInstalled");
                }
            }
        }
        private Nullable<bool> _isAdvancedAnalyticsInstalled;
    
        [DataMember]
        public Nullable<bool> IsClustered
        {
            get { return _isClustered; }
            set
            {
                if (_isClustered != value)
                {
                    OnComplexPropertyChanging();
                    _isClustered = value;
                    OnPropertyChanged("IsClustered");
                }
            }
        }
        private Nullable<bool> _isClustered;
    
        [DataMember]
        public Nullable<bool> IsFullTextInstalled
        {
            get { return _isFullTextInstalled; }
            set
            {
                if (_isFullTextInstalled != value)
                {
                    OnComplexPropertyChanging();
                    _isFullTextInstalled = value;
                    OnPropertyChanged("IsFullTextInstalled");
                }
            }
        }
        private Nullable<bool> _isFullTextInstalled;
    
        [DataMember]
        public Nullable<bool> IsHadrEnabled
        {
            get { return _isHadrEnabled; }
            set
            {
                if (_isHadrEnabled != value)
                {
                    OnComplexPropertyChanging();
                    _isHadrEnabled = value;
                    OnPropertyChanged("IsHadrEnabled");
                }
            }
        }
        private Nullable<bool> _isHadrEnabled;
    
        [DataMember]
        public Nullable<bool> IsIntegratedSecurityOnly
        {
            get { return _isIntegratedSecurityOnly; }
            set
            {
                if (_isIntegratedSecurityOnly != value)
                {
                    OnComplexPropertyChanging();
                    _isIntegratedSecurityOnly = value;
                    OnPropertyChanged("IsIntegratedSecurityOnly");
                }
            }
        }
        private Nullable<bool> _isIntegratedSecurityOnly;
    
        [DataMember]
        public Nullable<bool> IsLocalDB
        {
            get { return _isLocalDB; }
            set
            {
                if (_isLocalDB != value)
                {
                    OnComplexPropertyChanging();
                    _isLocalDB = value;
                    OnPropertyChanged("IsLocalDB");
                }
            }
        }
        private Nullable<bool> _isLocalDB;
    
        [DataMember]
        public Nullable<bool> IsPolybaseInstalled
        {
            get { return _isPolybaseInstalled; }
            set
            {
                if (_isPolybaseInstalled != value)
                {
                    OnComplexPropertyChanging();
                    _isPolybaseInstalled = value;
                    OnPropertyChanged("IsPolybaseInstalled");
                }
            }
        }
        private Nullable<bool> _isPolybaseInstalled;
    
        [DataMember]
        public Nullable<bool> IsSingleUser
        {
            get { return _isSingleUser; }
            set
            {
                if (_isSingleUser != value)
                {
                    OnComplexPropertyChanging();
                    _isSingleUser = value;
                    OnPropertyChanged("IsSingleUser");
                }
            }
        }
        private Nullable<bool> _isSingleUser;
    
        [DataMember]
        public Nullable<bool> IsXTPSupported
        {
            get { return _isXTPSupported; }
            set
            {
                if (_isXTPSupported != value)
                {
                    OnComplexPropertyChanging();
                    _isXTPSupported = value;
                    OnPropertyChanged("IsXTPSupported");
                }
            }
        }
        private Nullable<bool> _isXTPSupported;
    
        [DataMember]
        public Nullable<int> LCID
        {
            get { return _lCID; }
            set
            {
                if (_lCID != value)
                {
                    OnComplexPropertyChanging();
                    _lCID = value;
                    OnPropertyChanged("LCID");
                }
            }
        }
        private Nullable<int> _lCID;
    
        [DataMember]
        public string LicenseType
        {
            get { return _licenseType; }
            set
            {
                if (_licenseType != value)
                {
                    OnComplexPropertyChanging();
                    _licenseType = value;
                    OnPropertyChanged("LicenseType");
                }
            }
        }
        private string _licenseType;
    
        [DataMember]
        public string MachineName
        {
            get { return _machineName; }
            set
            {
                if (_machineName != value)
                {
                    OnComplexPropertyChanging();
                    _machineName = value;
                    OnPropertyChanged("MachineName");
                }
            }
        }
        private string _machineName;
    
        [DataMember]
        public Nullable<int> NumLicenses
        {
            get { return _numLicenses; }
            set
            {
                if (_numLicenses != value)
                {
                    OnComplexPropertyChanging();
                    _numLicenses = value;
                    OnPropertyChanged("NumLicenses");
                }
            }
        }
        private Nullable<int> _numLicenses;
    
        [DataMember]
        public Nullable<long> ProcessID
        {
            get { return _processID; }
            set
            {
                if (_processID != value)
                {
                    OnComplexPropertyChanging();
                    _processID = value;
                    OnPropertyChanged("ProcessID");
                }
            }
        }
        private Nullable<long> _processID;
    
        [DataMember]
        public Nullable<long> ProductBuild
        {
            get { return _productBuild; }
            set
            {
                if (_productBuild != value)
                {
                    OnComplexPropertyChanging();
                    _productBuild = value;
                    OnPropertyChanged("ProductBuild");
                }
            }
        }
        private Nullable<long> _productBuild;
    
        [DataMember]
        public string ProductBuildType
        {
            get { return _productBuildType; }
            set
            {
                if (_productBuildType != value)
                {
                    OnComplexPropertyChanging();
                    _productBuildType = value;
                    OnPropertyChanged("ProductBuildType");
                }
            }
        }
        private string _productBuildType;
    
        [DataMember]
        public string ProductLevel
        {
            get { return _productLevel; }
            set
            {
                if (_productLevel != value)
                {
                    OnComplexPropertyChanging();
                    _productLevel = value;
                    OnPropertyChanged("ProductLevel");
                }
            }
        }
        private string _productLevel;
    
        [DataMember]
        public Nullable<int> ProductMajorVersion
        {
            get { return _productMajorVersion; }
            set
            {
                if (_productMajorVersion != value)
                {
                    OnComplexPropertyChanging();
                    _productMajorVersion = value;
                    OnPropertyChanged("ProductMajorVersion");
                }
            }
        }
        private Nullable<int> _productMajorVersion;
    
        [DataMember]
        public Nullable<int> ProductMinorVersion
        {
            get { return _productMinorVersion; }
            set
            {
                if (_productMinorVersion != value)
                {
                    OnComplexPropertyChanging();
                    _productMinorVersion = value;
                    OnPropertyChanged("ProductMinorVersion");
                }
            }
        }
        private Nullable<int> _productMinorVersion;
    
        [DataMember]
        public string ProductUpdateLevel
        {
            get { return _productUpdateLevel; }
            set
            {
                if (_productUpdateLevel != value)
                {
                    OnComplexPropertyChanging();
                    _productUpdateLevel = value;
                    OnPropertyChanged("ProductUpdateLevel");
                }
            }
        }
        private string _productUpdateLevel;
    
        [DataMember]
        public string ProductUpdateReference
        {
            get { return _productUpdateReference; }
            set
            {
                if (_productUpdateReference != value)
                {
                    OnComplexPropertyChanging();
                    _productUpdateReference = value;
                    OnPropertyChanged("ProductUpdateReference");
                }
            }
        }
        private string _productUpdateReference;
    
        [DataMember]
        public string ProductVersion
        {
            get { return _productVersion; }
            set
            {
                if (_productVersion != value)
                {
                    OnComplexPropertyChanging();
                    _productVersion = value;
                    OnPropertyChanged("ProductVersion");
                }
            }
        }
        private string _productVersion;
    
        [DataMember]
        public Nullable<System.DateTime> ResourceLastUpdateDateTime
        {
            get { return _resourceLastUpdateDateTime; }
            set
            {
                if (_resourceLastUpdateDateTime != value)
                {
                    OnComplexPropertyChanging();
                    _resourceLastUpdateDateTime = value;
                    OnPropertyChanged("ResourceLastUpdateDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _resourceLastUpdateDateTime;
    
        [DataMember]
        public string ResourceVersion
        {
            get { return _resourceVersion; }
            set
            {
                if (_resourceVersion != value)
                {
                    OnComplexPropertyChanging();
                    _resourceVersion = value;
                    OnPropertyChanged("ResourceVersion");
                }
            }
        }
        private string _resourceVersion;
    
        [DataMember]
        public string ServerName
        {
            get { return _serverName; }
            set
            {
                if (_serverName != value)
                {
                    OnComplexPropertyChanging();
                    _serverName = value;
                    OnPropertyChanged("ServerName");
                }
            }
        }
        private string _serverName;
    
        [DataMember]
        public Nullable<short> SqlCharSet
        {
            get { return _sqlCharSet; }
            set
            {
                if (_sqlCharSet != value)
                {
                    OnComplexPropertyChanging();
                    _sqlCharSet = value;
                    OnPropertyChanged("SqlCharSet");
                }
            }
        }
        private Nullable<short> _sqlCharSet;
    
        [DataMember]
        public string SqlCharSetName
        {
            get { return _sqlCharSetName; }
            set
            {
                if (_sqlCharSetName != value)
                {
                    OnComplexPropertyChanging();
                    _sqlCharSetName = value;
                    OnPropertyChanged("SqlCharSetName");
                }
            }
        }
        private string _sqlCharSetName;
    
        [DataMember]
        public Nullable<short> SqlSortOrder
        {
            get { return _sqlSortOrder; }
            set
            {
                if (_sqlSortOrder != value)
                {
                    OnComplexPropertyChanging();
                    _sqlSortOrder = value;
                    OnPropertyChanged("SqlSortOrder");
                }
            }
        }
        private Nullable<short> _sqlSortOrder;
    
        [DataMember]
        public string SqlSortOrderName
        {
            get { return _sqlSortOrderName; }
            set
            {
                if (_sqlSortOrderName != value)
                {
                    OnComplexPropertyChanging();
                    _sqlSortOrderName = value;
                    OnPropertyChanged("SqlSortOrderName");
                }
            }
        }
        private string _sqlSortOrderName;
    
        [DataMember]
        public string FilestreamShareName
        {
            get { return _filestreamShareName; }
            set
            {
                if (_filestreamShareName != value)
                {
                    OnComplexPropertyChanging();
                    _filestreamShareName = value;
                    OnPropertyChanged("FilestreamShareName");
                }
            }
        }
        private string _filestreamShareName;
    
        [DataMember]
        public Nullable<int> FilestreamConfiguredLevel
        {
            get { return _filestreamConfiguredLevel; }
            set
            {
                if (_filestreamConfiguredLevel != value)
                {
                    OnComplexPropertyChanging();
                    _filestreamConfiguredLevel = value;
                    OnPropertyChanged("FilestreamConfiguredLevel");
                }
            }
        }
        private Nullable<int> _filestreamConfiguredLevel;
    
        [DataMember]
        public Nullable<int> FilestreamEffectiveLevel
        {
            get { return _filestreamEffectiveLevel; }
            set
            {
                if (_filestreamEffectiveLevel != value)
                {
                    OnComplexPropertyChanging();
                    _filestreamEffectiveLevel = value;
                    OnPropertyChanged("FilestreamEffectiveLevel");
                }
            }
        }
        private Nullable<int> _filestreamEffectiveLevel;
    
        [DataMember]
        public string SysServerName
        {
            get { return _sysServerName; }
            set
            {
                if (_sysServerName != value)
                {
                    OnComplexPropertyChanging();
                    _sysServerName = value;
                    OnPropertyChanged("SysServerName");
                }
            }
        }
        private string _sysServerName;
    
        [DataMember]
        public string SysFullVersion
        {
            get { return _sysFullVersion; }
            set
            {
                if (_sysFullVersion != value)
                {
                    OnComplexPropertyChanging();
                    _sysFullVersion = value;
                    OnPropertyChanged("SysFullVersion");
                }
            }
        }
        private string _sysFullVersion;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SysInfoResult complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.BuildClrVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.BuildClrVersion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Collation", parentPropertyName), complexObject == null ? null : (object)complexObject.Collation);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CollationId", parentPropertyName), complexObject == null ? null : (object)complexObject.CollationId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ComparisonStyle", parentPropertyName), complexObject == null ? null : (object)complexObject.ComparisonStyle);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ComputerNamePhysicalNetBIOS", parentPropertyName), complexObject == null ? null : (object)complexObject.ComputerNamePhysicalNetBIOS);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Edition", parentPropertyName), complexObject == null ? null : (object)complexObject.Edition);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.EditionId", parentPropertyName), complexObject == null ? null : (object)complexObject.EditionId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.EngineEdition", parentPropertyName), complexObject == null ? null : (object)complexObject.EngineEdition);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.HadrManagerStatus", parentPropertyName), complexObject == null ? null : (object)complexObject.HadrManagerStatus);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InstanceDefaultDataPath", parentPropertyName), complexObject == null ? null : (object)complexObject.InstanceDefaultDataPath);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InstanceDefaultLogPath", parentPropertyName), complexObject == null ? null : (object)complexObject.InstanceDefaultLogPath);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.InstanceName", parentPropertyName), complexObject == null ? null : (object)complexObject.InstanceName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsAdvancedAnalyticsInstalled", parentPropertyName), complexObject == null ? null : (object)complexObject.IsAdvancedAnalyticsInstalled);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsClustered", parentPropertyName), complexObject == null ? null : (object)complexObject.IsClustered);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsFullTextInstalled", parentPropertyName), complexObject == null ? null : (object)complexObject.IsFullTextInstalled);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsHadrEnabled", parentPropertyName), complexObject == null ? null : (object)complexObject.IsHadrEnabled);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsIntegratedSecurityOnly", parentPropertyName), complexObject == null ? null : (object)complexObject.IsIntegratedSecurityOnly);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsLocalDB", parentPropertyName), complexObject == null ? null : (object)complexObject.IsLocalDB);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsPolybaseInstalled", parentPropertyName), complexObject == null ? null : (object)complexObject.IsPolybaseInstalled);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsSingleUser", parentPropertyName), complexObject == null ? null : (object)complexObject.IsSingleUser);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsXTPSupported", parentPropertyName), complexObject == null ? null : (object)complexObject.IsXTPSupported);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.LCID", parentPropertyName), complexObject == null ? null : (object)complexObject.LCID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.LicenseType", parentPropertyName), complexObject == null ? null : (object)complexObject.LicenseType);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.MachineName", parentPropertyName), complexObject == null ? null : (object)complexObject.MachineName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NumLicenses", parentPropertyName), complexObject == null ? null : (object)complexObject.NumLicenses);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProcessID", parentPropertyName), complexObject == null ? null : (object)complexObject.ProcessID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductBuild", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductBuild);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductBuildType", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductBuildType);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductLevel", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductLevel);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductMajorVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductMajorVersion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductMinorVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductMinorVersion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductUpdateLevel", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductUpdateLevel);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductUpdateReference", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductUpdateReference);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProductVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.ProductVersion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ResourceLastUpdateDateTime", parentPropertyName), complexObject == null ? null : (object)complexObject.ResourceLastUpdateDateTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ResourceVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.ResourceVersion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ServerName", parentPropertyName), complexObject == null ? null : (object)complexObject.ServerName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SqlCharSet", parentPropertyName), complexObject == null ? null : (object)complexObject.SqlCharSet);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SqlCharSetName", parentPropertyName), complexObject == null ? null : (object)complexObject.SqlCharSetName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SqlSortOrder", parentPropertyName), complexObject == null ? null : (object)complexObject.SqlSortOrder);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SqlSortOrderName", parentPropertyName), complexObject == null ? null : (object)complexObject.SqlSortOrderName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FilestreamShareName", parentPropertyName), complexObject == null ? null : (object)complexObject.FilestreamShareName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FilestreamConfiguredLevel", parentPropertyName), complexObject == null ? null : (object)complexObject.FilestreamConfiguredLevel);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FilestreamEffectiveLevel", parentPropertyName), complexObject == null ? null : (object)complexObject.FilestreamEffectiveLevel);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SysServerName", parentPropertyName), complexObject == null ? null : (object)complexObject.SysServerName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SysFullVersion", parentPropertyName), complexObject == null ? null : (object)complexObject.SysFullVersion);
        }

        #endregion

    }
}
