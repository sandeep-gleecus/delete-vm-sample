//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DashboardCustomPermission))]
    [KnownType(typeof(DashboardCustomType))]
    public partial class DashboardCustom: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DashboardCustomId
        {
            get { return _dashboardCustomId; }
            set
            {
                if (_dashboardCustomId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DashboardCustomId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dashboardCustomId = value;
                    OnPropertyChanged("DashboardCustomId");
                }
            }
        }
        private int _dashboardCustomId;
    
        [DataMember]
        public int DashboardCustomTypeId
        {
            get { return _dashboardCustomTypeId; }
            set
            {
                if (_dashboardCustomTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("DashboardCustomTypeId", _dashboardCustomTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.DashboardCustomTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _dashboardCustomTypeId = value;
                    OnPropertyChanged("DashboardCustomTypeId");
                }
            }
        }
        private int _dashboardCustomTypeId;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    ChangeTracker.RecordOriginalValue("Code", _code);
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string Author
        {
            get { return _author; }
            set
            {
                if (_author != value)
                {
                    ChangeTracker.RecordOriginalValue("Author", _author);
                    _author = value;
                    OnPropertyChanged("Author");
                }
            }
        }
        private string _author;
    
        [DataMember]
        public string Copyright
        {
            get { return _copyright; }
            set
            {
                if (_copyright != value)
                {
                    ChangeTracker.RecordOriginalValue("Copyright", _copyright);
                    _copyright = value;
                    OnPropertyChanged("Copyright");
                }
            }
        }
        private string _copyright;
    
        [DataMember]
        public string Usage
        {
            get { return _usage; }
            set
            {
                if (_usage != value)
                {
                    ChangeTracker.RecordOriginalValue("Usage", _usage);
                    _usage = value;
                    OnPropertyChanged("Usage");
                }
            }
        }
        private string _usage;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DashboardCustomPermission> Permissions
        {
            get
            {
                if (_permissions == null)
                {
                    _permissions = new TrackableCollection<DashboardCustomPermission>();
                    _permissions.CollectionChanged += FixupPermissions;
                }
                return _permissions;
            }
            set
            {
                if (!ReferenceEquals(_permissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_permissions != null)
                    {
                        _permissions.CollectionChanged -= FixupPermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DashboardCustomPermission item in _permissions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _permissions = value;
                    if (_permissions != null)
                    {
                        _permissions.CollectionChanged += FixupPermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DashboardCustomPermission item in _permissions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Permissions");
                }
            }
        }
        private TrackableCollection<DashboardCustomPermission> _permissions;
    
        [DataMember]
        public DashboardCustomType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private DashboardCustomType _type;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Permissions.Clear();
            Type = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupType(DashboardCustomType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Dashboards.Contains(this))
            {
                previousValue.Dashboards.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Dashboards.Contains(this))
                {
                    Type.Dashboards.Add(this);
                }
    
                DashboardCustomTypeId = Type.DashboardCustomTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DashboardCustomPermission item in e.NewItems)
                {
                    item.Dashboard = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Permissions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DashboardCustomPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.Dashboard, this))
                    {
                        item.Dashboard = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Permissions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
