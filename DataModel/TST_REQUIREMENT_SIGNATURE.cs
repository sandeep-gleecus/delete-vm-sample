//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(TST_REQUIREMENT_APPROVAL_WORKFLOW))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Project))]
    public partial class TST_REQUIREMENT_SIGNATURE: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TST_REQUIREMENT_SIGNATURE_ID
        {
            get { return _tST_REQUIREMENT_SIGNATURE_ID; }
            set
            {
                if (_tST_REQUIREMENT_SIGNATURE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TST_REQUIREMENT_SIGNATURE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tST_REQUIREMENT_SIGNATURE_ID = value;
                    OnPropertyChanged("TST_REQUIREMENT_SIGNATURE_ID");
                }
            }
        }
        private int _tST_REQUIREMENT_SIGNATURE_ID;
    
        [DataMember]
        public int REQUIREMENT_ID
        {
            get { return _rEQUIREMENT_ID; }
            set
            {
                if (_rEQUIREMENT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUIREMENT_ID", _rEQUIREMENT_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_REQUIREMENT != null && TST_REQUIREMENT.RequirementId != value)
                        {
                            TST_REQUIREMENT = null;
                        }
                    }
                    _rEQUIREMENT_ID = value;
                    OnPropertyChanged("REQUIREMENT_ID");
                }
            }
        }
        private int _rEQUIREMENT_ID;
    
        [DataMember]
        public int USER_ID
        {
            get { return _uSER_ID; }
            set
            {
                if (_uSER_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("USER_ID", _uSER_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_USER != null && TST_USER.UserId != value)
                        {
                            TST_USER = null;
                        }
                    }
                    _uSER_ID = value;
                    OnPropertyChanged("USER_ID");
                }
            }
        }
        private int _uSER_ID;
    
        [DataMember]
        public int STATUS_ID
        {
            get { return _sTATUS_ID; }
            set
            {
                if (_sTATUS_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("STATUS_ID", _sTATUS_ID);
                    _sTATUS_ID = value;
                    OnPropertyChanged("STATUS_ID");
                }
            }
        }
        private int _sTATUS_ID;
    
        [DataMember]
        public Nullable<System.DateTime> REQUESTED_DATE
        {
            get { return _rEQUESTED_DATE; }
            set
            {
                if (_rEQUESTED_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUESTED_DATE", _rEQUESTED_DATE);
                    _rEQUESTED_DATE = value;
                    OnPropertyChanged("REQUESTED_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _rEQUESTED_DATE;
    
        [DataMember]
        public string MEANING
        {
            get { return _mEANING; }
            set
            {
                if (_mEANING != value)
                {
                    ChangeTracker.RecordOriginalValue("MEANING", _mEANING);
                    _mEANING = value;
                    OnPropertyChanged("MEANING");
                }
            }
        }
        private string _mEANING;
    
        [DataMember]
        public System.DateTime UPDATE_DATE
        {
            get { return _uPDATE_DATE; }
            set
            {
                if (_uPDATE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("UPDATE_DATE", _uPDATE_DATE);
                    _uPDATE_DATE = value;
                    OnPropertyChanged("UPDATE_DATE");
                }
            }
        }
        private System.DateTime _uPDATE_DATE;
    
        [DataMember]
        public int REQUIREMENT_APPROVAL_WORKFLOW_ID
        {
            get { return _rEQUIREMENT_APPROVAL_WORKFLOW_ID; }
            set
            {
                if (_rEQUIREMENT_APPROVAL_WORKFLOW_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUIREMENT_APPROVAL_WORKFLOW_ID", _rEQUIREMENT_APPROVAL_WORKFLOW_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_REQUIREMENT_APPROVAL_WORKFLOW != null && TST_REQUIREMENT_APPROVAL_WORKFLOW.REQUIREMENT_APPROVAL_WORKFLOW_ID != value)
                        {
                            TST_REQUIREMENT_APPROVAL_WORKFLOW = null;
                        }
                    }
                    _rEQUIREMENT_APPROVAL_WORKFLOW_ID = value;
                    OnPropertyChanged("REQUIREMENT_APPROVAL_WORKFLOW_ID");
                }
            }
        }
        private int _rEQUIREMENT_APPROVAL_WORKFLOW_ID;
    
        [DataMember]
        public Nullable<int> PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("PROJECT_ID", _pROJECT_ID);
                    if (!IsDeserializing)
                    {
                        if (TST_PROJECT != null && TST_PROJECT.ProjectId != value)
                        {
                            TST_PROJECT = null;
                        }
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private Nullable<int> _pROJECT_ID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Requirement TST_REQUIREMENT
        {
            get { return _tST_REQUIREMENT; }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT, value))
                {
                    var previousValue = _tST_REQUIREMENT;
                    _tST_REQUIREMENT = value;
                    FixupTST_REQUIREMENT(previousValue);
                    OnNavigationPropertyChanged("TST_REQUIREMENT");
                }
            }
        }
        private Requirement _tST_REQUIREMENT;
    
        [DataMember]
        public TST_REQUIREMENT_APPROVAL_WORKFLOW TST_REQUIREMENT_APPROVAL_WORKFLOW
        {
            get { return _tST_REQUIREMENT_APPROVAL_WORKFLOW; }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_APPROVAL_WORKFLOW, value))
                {
                    var previousValue = _tST_REQUIREMENT_APPROVAL_WORKFLOW;
                    _tST_REQUIREMENT_APPROVAL_WORKFLOW = value;
                    FixupTST_REQUIREMENT_APPROVAL_WORKFLOW(previousValue);
                    OnNavigationPropertyChanged("TST_REQUIREMENT_APPROVAL_WORKFLOW");
                }
            }
        }
        private TST_REQUIREMENT_APPROVAL_WORKFLOW _tST_REQUIREMENT_APPROVAL_WORKFLOW;
    
        [DataMember]
        public User TST_USER
        {
            get { return _tST_USER; }
            set
            {
                if (!ReferenceEquals(_tST_USER, value))
                {
                    var previousValue = _tST_USER;
                    _tST_USER = value;
                    FixupTST_USER(previousValue);
                    OnNavigationPropertyChanged("TST_USER");
                }
            }
        }
        private User _tST_USER;
    
        [DataMember]
        public Project TST_PROJECT
        {
            get { return _tST_PROJECT; }
            set
            {
                if (!ReferenceEquals(_tST_PROJECT, value))
                {
                    var previousValue = _tST_PROJECT;
                    _tST_PROJECT = value;
                    FixupTST_PROJECT(previousValue);
                    OnNavigationPropertyChanged("TST_PROJECT");
                }
            }
        }
        private Project _tST_PROJECT;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_REQUIREMENT = null;
            TST_REQUIREMENT_APPROVAL_WORKFLOW = null;
            TST_USER = null;
            TST_PROJECT = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_REQUIREMENT(Requirement previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REQUIREMENT_SIGNATURE.Contains(this))
            {
                previousValue.TST_REQUIREMENT_SIGNATURE.Remove(this);
            }
    
            if (TST_REQUIREMENT != null)
            {
                if (!TST_REQUIREMENT.TST_REQUIREMENT_SIGNATURE.Contains(this))
                {
                    TST_REQUIREMENT.TST_REQUIREMENT_SIGNATURE.Add(this);
                }
    
                REQUIREMENT_ID = TST_REQUIREMENT.RequirementId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_REQUIREMENT")
                    && (ChangeTracker.OriginalValues["TST_REQUIREMENT"] == TST_REQUIREMENT))
                {
                    ChangeTracker.OriginalValues.Remove("TST_REQUIREMENT");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_REQUIREMENT", previousValue);
                }
                if (TST_REQUIREMENT != null && !TST_REQUIREMENT.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_REQUIREMENT.StartTracking();
                }
            }
        }
    
        private void FixupTST_REQUIREMENT_APPROVAL_WORKFLOW(TST_REQUIREMENT_APPROVAL_WORKFLOW previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REQUIREMENT_SIGNATURE.Contains(this))
            {
                previousValue.TST_REQUIREMENT_SIGNATURE.Remove(this);
            }
    
            if (TST_REQUIREMENT_APPROVAL_WORKFLOW != null)
            {
                if (!TST_REQUIREMENT_APPROVAL_WORKFLOW.TST_REQUIREMENT_SIGNATURE.Contains(this))
                {
                    TST_REQUIREMENT_APPROVAL_WORKFLOW.TST_REQUIREMENT_SIGNATURE.Add(this);
                }
    
                REQUIREMENT_APPROVAL_WORKFLOW_ID = TST_REQUIREMENT_APPROVAL_WORKFLOW.REQUIREMENT_APPROVAL_WORKFLOW_ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_REQUIREMENT_APPROVAL_WORKFLOW")
                    && (ChangeTracker.OriginalValues["TST_REQUIREMENT_APPROVAL_WORKFLOW"] == TST_REQUIREMENT_APPROVAL_WORKFLOW))
                {
                    ChangeTracker.OriginalValues.Remove("TST_REQUIREMENT_APPROVAL_WORKFLOW");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_REQUIREMENT_APPROVAL_WORKFLOW", previousValue);
                }
                if (TST_REQUIREMENT_APPROVAL_WORKFLOW != null && !TST_REQUIREMENT_APPROVAL_WORKFLOW.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_REQUIREMENT_APPROVAL_WORKFLOW.StartTracking();
                }
            }
        }
    
        private void FixupTST_USER(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REQUIREMENT_SIGNATURE.Contains(this))
            {
                previousValue.TST_REQUIREMENT_SIGNATURE.Remove(this);
            }
    
            if (TST_USER != null)
            {
                if (!TST_USER.TST_REQUIREMENT_SIGNATURE.Contains(this))
                {
                    TST_USER.TST_REQUIREMENT_SIGNATURE.Add(this);
                }
    
                USER_ID = TST_USER.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_USER")
                    && (ChangeTracker.OriginalValues["TST_USER"] == TST_USER))
                {
                    ChangeTracker.OriginalValues.Remove("TST_USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_USER", previousValue);
                }
                if (TST_USER != null && !TST_USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_USER.StartTracking();
                }
            }
        }
    
        private void FixupTST_PROJECT(Project previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REQUIREMENT_SIGNATURE.Contains(this))
            {
                previousValue.TST_REQUIREMENT_SIGNATURE.Remove(this);
            }
    
            if (TST_PROJECT != null)
            {
                if (!TST_PROJECT.TST_REQUIREMENT_SIGNATURE.Contains(this))
                {
                    TST_PROJECT.TST_REQUIREMENT_SIGNATURE.Add(this);
                }
    
                PROJECT_ID = TST_PROJECT.ProjectId;
            }
            else if (!skipKeys)
            {
                PROJECT_ID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_PROJECT")
                    && (ChangeTracker.OriginalValues["TST_PROJECT"] == TST_PROJECT))
                {
                    ChangeTracker.OriginalValues.Remove("TST_PROJECT");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_PROJECT", previousValue);
                }
                if (TST_PROJECT != null && !TST_PROJECT.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_PROJECT.StartTracking();
                }
            }
        }

        #endregion

    }
}
