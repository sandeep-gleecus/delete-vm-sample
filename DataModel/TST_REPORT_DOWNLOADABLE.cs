//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ReportCategory))]
    [KnownType(typeof(User))]
    public partial class TST_REPORT_DOWNLOADABLE: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long DOWNLOADABLE_REPORT_ID
        {
            get { return _dOWNLOADABLE_REPORT_ID; }
            set
            {
                if (_dOWNLOADABLE_REPORT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DOWNLOADABLE_REPORT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dOWNLOADABLE_REPORT_ID = value;
                    OnPropertyChanged("DOWNLOADABLE_REPORT_ID");
                }
            }
        }
        private long _dOWNLOADABLE_REPORT_ID;
    
        [DataMember]
        public string REPORT_NUMBER
        {
            get { return _rEPORT_NUMBER; }
            set
            {
                if (_rEPORT_NUMBER != value)
                {
                    ChangeTracker.RecordOriginalValue("REPORT_NUMBER", _rEPORT_NUMBER);
                    _rEPORT_NUMBER = value;
                    OnPropertyChanged("REPORT_NUMBER");
                }
            }
        }
        private string _rEPORT_NUMBER;
    
        [DataMember]
        public string REPORT_NAME
        {
            get { return _rEPORT_NAME; }
            set
            {
                if (_rEPORT_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("REPORT_NAME", _rEPORT_NAME);
                    _rEPORT_NAME = value;
                    OnPropertyChanged("REPORT_NAME");
                }
            }
        }
        private string _rEPORT_NAME;
    
        [DataMember]
        public int REPORT_CATEGORYID
        {
            get { return _rEPORT_CATEGORYID; }
            set
            {
                if (_rEPORT_CATEGORYID != value)
                {
                    ChangeTracker.RecordOriginalValue("REPORT_CATEGORYID", _rEPORT_CATEGORYID);
                    if (!IsDeserializing)
                    {
                        if (TST_REPORT_CATEGORY != null && TST_REPORT_CATEGORY.ReportCategoryId != value)
                        {
                            TST_REPORT_CATEGORY = null;
                        }
                    }
                    _rEPORT_CATEGORYID = value;
                    OnPropertyChanged("REPORT_CATEGORYID");
                }
            }
        }
        private int _rEPORT_CATEGORYID;
    
        [DataMember]
        public bool APPROVED
        {
            get { return _aPPROVED; }
            set
            {
                if (_aPPROVED != value)
                {
                    ChangeTracker.RecordOriginalValue("APPROVED", _aPPROVED);
                    _aPPROVED = value;
                    OnPropertyChanged("APPROVED");
                }
            }
        }
        private bool _aPPROVED;
    
        [DataMember]
        public int REPORT_OWNERID
        {
            get { return _rEPORT_OWNERID; }
            set
            {
                if (_rEPORT_OWNERID != value)
                {
                    ChangeTracker.RecordOriginalValue("REPORT_OWNERID", _rEPORT_OWNERID);
                    if (!IsDeserializing)
                    {
                        if (TST_USER1 != null && TST_USER1.UserId != value)
                        {
                            TST_USER1 = null;
                        }
                    }
                    _rEPORT_OWNERID = value;
                    OnPropertyChanged("REPORT_OWNERID");
                }
            }
        }
        private int _rEPORT_OWNERID;
    
        [DataMember]
        public Nullable<System.DateTime> EFFECTIVE_DATE
        {
            get { return _eFFECTIVE_DATE; }
            set
            {
                if (_eFFECTIVE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("EFFECTIVE_DATE", _eFFECTIVE_DATE);
                    _eFFECTIVE_DATE = value;
                    OnPropertyChanged("EFFECTIVE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _eFFECTIVE_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> APPROVAL_DATE
        {
            get { return _aPPROVAL_DATE; }
            set
            {
                if (_aPPROVAL_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("APPROVAL_DATE", _aPPROVAL_DATE);
                    _aPPROVAL_DATE = value;
                    OnPropertyChanged("APPROVAL_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _aPPROVAL_DATE;
    
        [DataMember]
        public int CREATED_BY
        {
            get { return _cREATED_BY; }
            set
            {
                if (_cREATED_BY != value)
                {
                    ChangeTracker.RecordOriginalValue("CREATED_BY", _cREATED_BY);
                    if (!IsDeserializing)
                    {
                        if (TST_USER != null && TST_USER.UserId != value)
                        {
                            TST_USER = null;
                        }
                    }
                    _cREATED_BY = value;
                    OnPropertyChanged("CREATED_BY");
                }
            }
        }
        private int _cREATED_BY;
    
        [DataMember]
        public System.DateTime CREATED_DATE
        {
            get { return _cREATED_DATE; }
            set
            {
                if (_cREATED_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("CREATED_DATE", _cREATED_DATE);
                    _cREATED_DATE = value;
                    OnPropertyChanged("CREATED_DATE");
                }
            }
        }
        private System.DateTime _cREATED_DATE;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ReportCategory TST_REPORT_CATEGORY
        {
            get { return _tST_REPORT_CATEGORY; }
            set
            {
                if (!ReferenceEquals(_tST_REPORT_CATEGORY, value))
                {
                    var previousValue = _tST_REPORT_CATEGORY;
                    _tST_REPORT_CATEGORY = value;
                    FixupTST_REPORT_CATEGORY(previousValue);
                    OnNavigationPropertyChanged("TST_REPORT_CATEGORY");
                }
            }
        }
        private ReportCategory _tST_REPORT_CATEGORY;
    
        [DataMember]
        public User TST_USER
        {
            get { return _tST_USER; }
            set
            {
                if (!ReferenceEquals(_tST_USER, value))
                {
                    var previousValue = _tST_USER;
                    _tST_USER = value;
                    FixupTST_USER(previousValue);
                    OnNavigationPropertyChanged("TST_USER");
                }
            }
        }
        private User _tST_USER;
    
        [DataMember]
        public User TST_USER1
        {
            get { return _tST_USER1; }
            set
            {
                if (!ReferenceEquals(_tST_USER1, value))
                {
                    var previousValue = _tST_USER1;
                    _tST_USER1 = value;
                    FixupTST_USER1(previousValue);
                    OnNavigationPropertyChanged("TST_USER1");
                }
            }
        }
        private User _tST_USER1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_REPORT_CATEGORY = null;
            TST_USER = null;
            TST_USER1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_REPORT_CATEGORY(ReportCategory previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REPORT_DOWNLOADABLE.Contains(this))
            {
                previousValue.TST_REPORT_DOWNLOADABLE.Remove(this);
            }
    
            if (TST_REPORT_CATEGORY != null)
            {
                if (!TST_REPORT_CATEGORY.TST_REPORT_DOWNLOADABLE.Contains(this))
                {
                    TST_REPORT_CATEGORY.TST_REPORT_DOWNLOADABLE.Add(this);
                }
    
                REPORT_CATEGORYID = TST_REPORT_CATEGORY.ReportCategoryId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_REPORT_CATEGORY")
                    && (ChangeTracker.OriginalValues["TST_REPORT_CATEGORY"] == TST_REPORT_CATEGORY))
                {
                    ChangeTracker.OriginalValues.Remove("TST_REPORT_CATEGORY");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_REPORT_CATEGORY", previousValue);
                }
                if (TST_REPORT_CATEGORY != null && !TST_REPORT_CATEGORY.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_REPORT_CATEGORY.StartTracking();
                }
            }
        }
    
        private void FixupTST_USER(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REPORT_DOWNLOADABLE.Contains(this))
            {
                previousValue.TST_REPORT_DOWNLOADABLE.Remove(this);
            }
    
            if (TST_USER != null)
            {
                if (!TST_USER.TST_REPORT_DOWNLOADABLE.Contains(this))
                {
                    TST_USER.TST_REPORT_DOWNLOADABLE.Add(this);
                }
    
                CREATED_BY = TST_USER.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_USER")
                    && (ChangeTracker.OriginalValues["TST_USER"] == TST_USER))
                {
                    ChangeTracker.OriginalValues.Remove("TST_USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_USER", previousValue);
                }
                if (TST_USER != null && !TST_USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_USER.StartTracking();
                }
            }
        }
    
        private void FixupTST_USER1(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_REPORT_DOWNLOADABLE1.Contains(this))
            {
                previousValue.TST_REPORT_DOWNLOADABLE1.Remove(this);
            }
    
            if (TST_USER1 != null)
            {
                if (!TST_USER1.TST_REPORT_DOWNLOADABLE1.Contains(this))
                {
                    TST_USER1.TST_REPORT_DOWNLOADABLE1.Add(this);
                }
    
                REPORT_OWNERID = TST_USER1.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TST_USER1")
                    && (ChangeTracker.OriginalValues["TST_USER1"] == TST_USER1))
                {
                    ChangeTracker.OriginalValues.Remove("TST_USER1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TST_USER1", previousValue);
                }
                if (TST_USER1 != null && !TST_USER1.ChangeTracker.ChangeTrackingEnabled)
                {
                    TST_USER1.StartTracking();
                }
            }
        }

        #endregion

    }
}
