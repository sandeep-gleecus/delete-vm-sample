//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DocumentStatus))]
    [KnownType(typeof(DocumentWorkflow))]
    [KnownType(typeof(DocumentWorkflowTransitionRole))]
    public partial class DocumentWorkflowTransition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int WorkflowTransitionId
        {
            get { return _workflowTransitionId; }
            set
            {
                if (_workflowTransitionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkflowTransitionId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workflowTransitionId = value;
                    OnPropertyChanged("WorkflowTransitionId");
                }
            }
        }
        private int _workflowTransitionId;
    
        [DataMember]
        public int DocumentWorkflowId
        {
            get { return _documentWorkflowId; }
            set
            {
                if (_documentWorkflowId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentWorkflowId", _documentWorkflowId);
                    if (!IsDeserializing)
                    {
                        if (Workflow != null && Workflow.DocumentWorkflowId != value)
                        {
                            Workflow = null;
                        }
                    }
                    _documentWorkflowId = value;
                    OnPropertyChanged("DocumentWorkflowId");
                }
            }
        }
        private int _documentWorkflowId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsExecuteByAuthor
        {
            get { return _isExecuteByAuthor; }
            set
            {
                if (_isExecuteByAuthor != value)
                {
                    ChangeTracker.RecordOriginalValue("IsExecuteByAuthor", _isExecuteByAuthor);
                    _isExecuteByAuthor = value;
                    OnPropertyChanged("IsExecuteByAuthor");
                }
            }
        }
        private bool _isExecuteByAuthor;
    
        [DataMember]
        public bool IsExecuteByEditor
        {
            get { return _isExecuteByEditor; }
            set
            {
                if (_isExecuteByEditor != value)
                {
                    ChangeTracker.RecordOriginalValue("IsExecuteByEditor", _isExecuteByEditor);
                    _isExecuteByEditor = value;
                    OnPropertyChanged("IsExecuteByEditor");
                }
            }
        }
        private bool _isExecuteByEditor;
    
        [DataMember]
        public bool IsSignatureRequired
        {
            get { return _isSignatureRequired; }
            set
            {
                if (_isSignatureRequired != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSignatureRequired", _isSignatureRequired);
                    _isSignatureRequired = value;
                    OnPropertyChanged("IsSignatureRequired");
                }
            }
        }
        private bool _isSignatureRequired;
    
        [DataMember]
        public int InputDocumentStatusId
        {
            get { return _inputDocumentStatusId; }
            set
            {
                if (_inputDocumentStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("InputDocumentStatusId", _inputDocumentStatusId);
                    if (!IsDeserializing)
                    {
                        if (InputDocumentStatus != null && InputDocumentStatus.DocumentStatusId != value)
                        {
                            InputDocumentStatus = null;
                        }
                    }
                    _inputDocumentStatusId = value;
                    OnPropertyChanged("InputDocumentStatusId");
                }
            }
        }
        private int _inputDocumentStatusId;
    
        [DataMember]
        public int OutputDocumentStatusId
        {
            get { return _outputDocumentStatusId; }
            set
            {
                if (_outputDocumentStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("OutputDocumentStatusId", _outputDocumentStatusId);
                    if (!IsDeserializing)
                    {
                        if (OutputDocumentStatus != null && OutputDocumentStatus.DocumentStatusId != value)
                        {
                            OutputDocumentStatus = null;
                        }
                    }
                    _outputDocumentStatusId = value;
                    OnPropertyChanged("OutputDocumentStatusId");
                }
            }
        }
        private int _outputDocumentStatusId;
    
        [DataMember]
        public bool IsBlankOwner
        {
            get { return _isBlankOwner; }
            set
            {
                if (_isBlankOwner != value)
                {
                    ChangeTracker.RecordOriginalValue("IsBlankOwner", _isBlankOwner);
                    _isBlankOwner = value;
                    OnPropertyChanged("IsBlankOwner");
                }
            }
        }
        private bool _isBlankOwner;
    
        [DataMember]
        public bool IsNotifyCreator
        {
            get { return _isNotifyCreator; }
            set
            {
                if (_isNotifyCreator != value)
                {
                    ChangeTracker.RecordOriginalValue("IsNotifyCreator", _isNotifyCreator);
                    _isNotifyCreator = value;
                    OnPropertyChanged("IsNotifyCreator");
                }
            }
        }
        private bool _isNotifyCreator;
    
        [DataMember]
        public bool IsNotifyOwner
        {
            get { return _isNotifyOwner; }
            set
            {
                if (_isNotifyOwner != value)
                {
                    ChangeTracker.RecordOriginalValue("IsNotifyOwner", _isNotifyOwner);
                    _isNotifyOwner = value;
                    OnPropertyChanged("IsNotifyOwner");
                }
            }
        }
        private bool _isNotifyOwner;
    
        [DataMember]
        public string NotifySubject
        {
            get { return _notifySubject; }
            set
            {
                if (_notifySubject != value)
                {
                    ChangeTracker.RecordOriginalValue("NotifySubject", _notifySubject);
                    _notifySubject = value;
                    OnPropertyChanged("NotifySubject");
                }
            }
        }
        private string _notifySubject;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DocumentStatus InputDocumentStatus
        {
            get { return _inputDocumentStatus; }
            set
            {
                if (!ReferenceEquals(_inputDocumentStatus, value))
                {
                    var previousValue = _inputDocumentStatus;
                    _inputDocumentStatus = value;
                    FixupInputDocumentStatus(previousValue);
                    OnNavigationPropertyChanged("InputDocumentStatus");
                }
            }
        }
        private DocumentStatus _inputDocumentStatus;
    
        [DataMember]
        public DocumentStatus OutputDocumentStatus
        {
            get { return _outputDocumentStatus; }
            set
            {
                if (!ReferenceEquals(_outputDocumentStatus, value))
                {
                    var previousValue = _outputDocumentStatus;
                    _outputDocumentStatus = value;
                    FixupOutputDocumentStatus(previousValue);
                    OnNavigationPropertyChanged("OutputDocumentStatus");
                }
            }
        }
        private DocumentStatus _outputDocumentStatus;
    
        [DataMember]
        public DocumentWorkflow Workflow
        {
            get { return _workflow; }
            set
            {
                if (!ReferenceEquals(_workflow, value))
                {
                    var previousValue = _workflow;
                    _workflow = value;
                    FixupWorkflow(previousValue);
                    OnNavigationPropertyChanged("Workflow");
                }
            }
        }
        private DocumentWorkflow _workflow;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowTransitionRole> TransitionRoles
        {
            get
            {
                if (_transitionRoles == null)
                {
                    _transitionRoles = new TrackableCollection<DocumentWorkflowTransitionRole>();
                    _transitionRoles.CollectionChanged += FixupTransitionRoles;
                }
                return _transitionRoles;
            }
            set
            {
                if (!ReferenceEquals(_transitionRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_transitionRoles != null)
                    {
                        _transitionRoles.CollectionChanged -= FixupTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowTransitionRole item in _transitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _transitionRoles = value;
                    if (_transitionRoles != null)
                    {
                        _transitionRoles.CollectionChanged += FixupTransitionRoles;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowTransitionRole item in _transitionRoles)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TransitionRoles");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowTransitionRole> _transitionRoles;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InputDocumentStatus = null;
            OutputDocumentStatus = null;
            Workflow = null;
            TransitionRoles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInputDocumentStatus(DocumentStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkflowTransitionsInput.Contains(this))
            {
                previousValue.WorkflowTransitionsInput.Remove(this);
            }
    
            if (InputDocumentStatus != null)
            {
                if (!InputDocumentStatus.WorkflowTransitionsInput.Contains(this))
                {
                    InputDocumentStatus.WorkflowTransitionsInput.Add(this);
                }
    
                InputDocumentStatusId = InputDocumentStatus.DocumentStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InputDocumentStatus")
                    && (ChangeTracker.OriginalValues["InputDocumentStatus"] == InputDocumentStatus))
                {
                    ChangeTracker.OriginalValues.Remove("InputDocumentStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InputDocumentStatus", previousValue);
                }
                if (InputDocumentStatus != null && !InputDocumentStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    InputDocumentStatus.StartTracking();
                }
            }
        }
    
        private void FixupOutputDocumentStatus(DocumentStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkflowTransitionsOutput.Contains(this))
            {
                previousValue.WorkflowTransitionsOutput.Remove(this);
            }
    
            if (OutputDocumentStatus != null)
            {
                if (!OutputDocumentStatus.WorkflowTransitionsOutput.Contains(this))
                {
                    OutputDocumentStatus.WorkflowTransitionsOutput.Add(this);
                }
    
                OutputDocumentStatusId = OutputDocumentStatus.DocumentStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OutputDocumentStatus")
                    && (ChangeTracker.OriginalValues["OutputDocumentStatus"] == OutputDocumentStatus))
                {
                    ChangeTracker.OriginalValues.Remove("OutputDocumentStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OutputDocumentStatus", previousValue);
                }
                if (OutputDocumentStatus != null && !OutputDocumentStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    OutputDocumentStatus.StartTracking();
                }
            }
        }
    
        private void FixupWorkflow(DocumentWorkflow previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Transitions.Contains(this))
            {
                previousValue.Transitions.Remove(this);
            }
    
            if (Workflow != null)
            {
                if (!Workflow.Transitions.Contains(this))
                {
                    Workflow.Transitions.Add(this);
                }
    
                DocumentWorkflowId = Workflow.DocumentWorkflowId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Workflow")
                    && (ChangeTracker.OriginalValues["Workflow"] == Workflow))
                {
                    ChangeTracker.OriginalValues.Remove("Workflow");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Workflow", previousValue);
                }
                if (Workflow != null && !Workflow.ChangeTracker.ChangeTrackingEnabled)
                {
                    Workflow.StartTracking();
                }
            }
        }
    
        private void FixupTransitionRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowTransitionRole item in e.NewItems)
                {
                    item.WorkflowTransition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TransitionRoles", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowTransitionRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkflowTransition, this))
                    {
                        item.WorkflowTransition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TransitionRoles", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
