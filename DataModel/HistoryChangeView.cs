//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class HistoryChangeView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ArtifactHistoryId
        {
            get { return _artifactHistoryId; }
            set
            {
                if (_artifactHistoryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactHistoryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactHistoryId = value;
                    OnPropertyChanged("ArtifactHistoryId");
                }
            }
        }
        private long _artifactHistoryId;
    
        [DataMember]
        public string FieldName
        {
            get { return _fieldName; }
            set
            {
                if (_fieldName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FieldName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fieldName = value;
                    OnPropertyChanged("FieldName");
                }
            }
        }
        private string _fieldName;
    
        [DataMember]
        public string OldValue
        {
            get { return _oldValue; }
            set
            {
                if (_oldValue != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValue", _oldValue);
                    _oldValue = value;
                    OnPropertyChanged("OldValue");
                }
            }
        }
        private string _oldValue;
    
        [DataMember]
        public string FieldCaption
        {
            get { return _fieldCaption; }
            set
            {
                if (_fieldCaption != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FieldCaption' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fieldCaption = value;
                    OnPropertyChanged("FieldCaption");
                }
            }
        }
        private string _fieldCaption;
    
        [DataMember]
        public string NewValue
        {
            get { return _newValue; }
            set
            {
                if (_newValue != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValue", _newValue);
                    _newValue = value;
                    OnPropertyChanged("NewValue");
                }
            }
        }
        private string _newValue;
    
        [DataMember]
        public Nullable<int> OldValueInt
        {
            get { return _oldValueInt; }
            set
            {
                if (_oldValueInt != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValueInt", _oldValueInt);
                    _oldValueInt = value;
                    OnPropertyChanged("OldValueInt");
                }
            }
        }
        private Nullable<int> _oldValueInt;
    
        [DataMember]
        public Nullable<System.DateTime> OldValueDate
        {
            get { return _oldValueDate; }
            set
            {
                if (_oldValueDate != value)
                {
                    ChangeTracker.RecordOriginalValue("OldValueDate", _oldValueDate);
                    _oldValueDate = value;
                    OnPropertyChanged("OldValueDate");
                }
            }
        }
        private Nullable<System.DateTime> _oldValueDate;
    
        [DataMember]
        public Nullable<int> NewValueInt
        {
            get { return _newValueInt; }
            set
            {
                if (_newValueInt != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValueInt", _newValueInt);
                    _newValueInt = value;
                    OnPropertyChanged("NewValueInt");
                }
            }
        }
        private Nullable<int> _newValueInt;
    
        [DataMember]
        public Nullable<System.DateTime> NewValueDate
        {
            get { return _newValueDate; }
            set
            {
                if (_newValueDate != value)
                {
                    ChangeTracker.RecordOriginalValue("NewValueDate", _newValueDate);
                    _newValueDate = value;
                    OnPropertyChanged("NewValueDate");
                }
            }
        }
        private Nullable<System.DateTime> _newValueDate;
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeSetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public Nullable<int> FieldId
        {
            get { return _fieldId; }
            set
            {
                if (_fieldId != value)
                {
                    ChangeTracker.RecordOriginalValue("FieldId", _fieldId);
                    _fieldId = value;
                    OnPropertyChanged("FieldId");
                }
            }
        }
        private Nullable<int> _fieldId;
    
        [DataMember]
        public Nullable<int> CustomPropertyId
        {
            get { return _customPropertyId; }
            set
            {
                if (_customPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyId", _customPropertyId);
                    _customPropertyId = value;
                    OnPropertyChanged("CustomPropertyId");
                }
            }
        }
        private Nullable<int> _customPropertyId;
    
        [DataMember]
        public int ArtifactId
        {
            get { return _artifactId; }
            set
            {
                if (_artifactId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactId = value;
                    OnPropertyChanged("ArtifactId");
                }
            }
        }
        private int _artifactId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public System.DateTime ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private System.DateTime _changeDate;
    
        [DataMember]
        public string ChangerName
        {
            get { return _changerName; }
            set
            {
                if (_changerName != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangerName", _changerName);
                    _changerName = value;
                    OnPropertyChanged("ChangerName");
                }
            }
        }
        private string _changerName;
    
        [DataMember]
        public string ChangeName
        {
            get { return _changeName; }
            set
            {
                if (_changeName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeName = value;
                    OnPropertyChanged("ChangeName");
                }
            }
        }
        private string _changeName;
    
        [DataMember]
        public int ChangeTypeId
        {
            get { return _changeTypeId; }
            set
            {
                if (_changeTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeTypeId = value;
                    OnPropertyChanged("ChangeTypeId");
                }
            }
        }
        private int _changeTypeId;
    
        [DataMember]
        public Nullable<int> ArtifactFieldTypeId
        {
            get { return _artifactFieldTypeId; }
            set
            {
                if (_artifactFieldTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactFieldTypeId", _artifactFieldTypeId);
                    _artifactFieldTypeId = value;
                    OnPropertyChanged("ArtifactFieldTypeId");
                }
            }
        }
        private Nullable<int> _artifactFieldTypeId;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
