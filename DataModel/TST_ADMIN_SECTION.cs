//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TST_ADMIN_HISTORY_CHANGESET))]
    [KnownType(typeof(TST_USER_HISTORY_CHANGESET))]
    public partial class TST_ADMIN_SECTION: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ADMIN_SECTION_ID
        {
            get { return _aDMIN_SECTION_ID; }
            set
            {
                if (_aDMIN_SECTION_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ADMIN_SECTION_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aDMIN_SECTION_ID = value;
                    OnPropertyChanged("ADMIN_SECTION_ID");
                }
            }
        }
        private int _aDMIN_SECTION_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    ChangeTracker.RecordOriginalValue("NAME", _nAME);
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public Nullable<int> PARENT_ID
        {
            get { return _pARENT_ID; }
            set
            {
                if (_pARENT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("PARENT_ID", _pARENT_ID);
                    _pARENT_ID = value;
                    OnPropertyChanged("PARENT_ID");
                }
            }
        }
        private Nullable<int> _pARENT_ID;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_ACTIVE", _iS_ACTIVE);
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_CHANGESET> TST_ADMIN_HISTORY_CHANGESET
        {
            get
            {
                if (_tST_ADMIN_HISTORY_CHANGESET == null)
                {
                    _tST_ADMIN_HISTORY_CHANGESET = new TrackableCollection<TST_ADMIN_HISTORY_CHANGESET>();
                    _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged += FixupTST_ADMIN_HISTORY_CHANGESET;
                }
                return _tST_ADMIN_HISTORY_CHANGESET;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_CHANGESET, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_CHANGESET != null)
                    {
                        _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged -= FixupTST_ADMIN_HISTORY_CHANGESET;
                    }
                    _tST_ADMIN_HISTORY_CHANGESET = value;
                    if (_tST_ADMIN_HISTORY_CHANGESET != null)
                    {
                        _tST_ADMIN_HISTORY_CHANGESET.CollectionChanged += FixupTST_ADMIN_HISTORY_CHANGESET;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_CHANGESET");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_CHANGESET> _tST_ADMIN_HISTORY_CHANGESET;
    
        [DataMember]
        public TrackableCollection<TST_USER_HISTORY_CHANGESET> TST_USER_HISTORY_CHANGESET
        {
            get
            {
                if (_tST_USER_HISTORY_CHANGESET == null)
                {
                    _tST_USER_HISTORY_CHANGESET = new TrackableCollection<TST_USER_HISTORY_CHANGESET>();
                    _tST_USER_HISTORY_CHANGESET.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET;
                }
                return _tST_USER_HISTORY_CHANGESET;
            }
            set
            {
                if (!ReferenceEquals(_tST_USER_HISTORY_CHANGESET, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_USER_HISTORY_CHANGESET != null)
                    {
                        _tST_USER_HISTORY_CHANGESET.CollectionChanged -= FixupTST_USER_HISTORY_CHANGESET;
                    }
                    _tST_USER_HISTORY_CHANGESET = value;
                    if (_tST_USER_HISTORY_CHANGESET != null)
                    {
                        _tST_USER_HISTORY_CHANGESET.CollectionChanged += FixupTST_USER_HISTORY_CHANGESET;
                    }
                    OnNavigationPropertyChanged("TST_USER_HISTORY_CHANGESET");
                }
            }
        }
        private TrackableCollection<TST_USER_HISTORY_CHANGESET> _tST_USER_HISTORY_CHANGESET;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_ADMIN_HISTORY_CHANGESET.Clear();
            TST_USER_HISTORY_CHANGESET.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_ADMIN_HISTORY_CHANGESET(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_CHANGESET item in e.NewItems)
                {
                    item.TST_ADMIN_SECTION = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_CHANGESET", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_CHANGESET item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_ADMIN_SECTION, this))
                    {
                        item.TST_ADMIN_SECTION = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_CHANGESET", item);
                    }
                }
            }
        }
    
        private void FixupTST_USER_HISTORY_CHANGESET(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.NewItems)
                {
                    item.TST_ADMIN_SECTION = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_USER_HISTORY_CHANGESET", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_USER_HISTORY_CHANGESET item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_ADMIN_SECTION, this))
                    {
                        item.TST_ADMIN_SECTION = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_USER_HISTORY_CHANGESET", item);
                    }
                }
            }
        }

        #endregion

    }
}
