//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_ReleaseTestCase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int RELEASE_ID
        {
            get { return _rELEASE_ID; }
            set
            {
                if (_rELEASE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RELEASE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rELEASE_ID = value;
                    OnPropertyChanged("RELEASE_ID");
                }
            }
        }
        private int _rELEASE_ID;
    
        [DataMember]
        public int TEST_CASE_ID
        {
            get { return _tEST_CASE_ID; }
            set
            {
                if (_tEST_CASE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_ID = value;
                    OnPropertyChanged("TEST_CASE_ID");
                }
            }
        }
        private int _tEST_CASE_ID;
    
        [DataMember]
        public string RELEASE_NAME
        {
            get { return _rELEASE_NAME; }
            set
            {
                if (_rELEASE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RELEASE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rELEASE_NAME = value;
                    OnPropertyChanged("RELEASE_NAME");
                }
            }
        }
        private string _rELEASE_NAME;
    
        [DataMember]
        public string RELEASE_VERSION_NUMBER
        {
            get { return _rELEASE_VERSION_NUMBER; }
            set
            {
                if (_rELEASE_VERSION_NUMBER != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RELEASE_VERSION_NUMBER' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rELEASE_VERSION_NUMBER = value;
                    OnPropertyChanged("RELEASE_VERSION_NUMBER");
                }
            }
        }
        private string _rELEASE_VERSION_NUMBER;
    
        [DataMember]
        public string TEST_CASE_NAME
        {
            get { return _tEST_CASE_NAME; }
            set
            {
                if (_tEST_CASE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TEST_CASE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tEST_CASE_NAME = value;
                    OnPropertyChanged("TEST_CASE_NAME");
                }
            }
        }
        private string _tEST_CASE_NAME;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public int RELEASE_TYPE_ID
        {
            get { return _rELEASE_TYPE_ID; }
            set
            {
                if (_rELEASE_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RELEASE_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rELEASE_TYPE_ID = value;
                    OnPropertyChanged("RELEASE_TYPE_ID");
                }
            }
        }
        private int _rELEASE_TYPE_ID;
    
        [DataMember]
        public string RELEASE_TYPE_NAME
        {
            get { return _rELEASE_TYPE_NAME; }
            set
            {
                if (_rELEASE_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RELEASE_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rELEASE_TYPE_NAME = value;
                    OnPropertyChanged("RELEASE_TYPE_NAME");
                }
            }
        }
        private string _rELEASE_TYPE_NAME;
    
        [DataMember]
        public int EXECUTION_STATUS_ID
        {
            get { return _eXECUTION_STATUS_ID; }
            set
            {
                if (_eXECUTION_STATUS_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EXECUTION_STATUS_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eXECUTION_STATUS_ID = value;
                    OnPropertyChanged("EXECUTION_STATUS_ID");
                }
            }
        }
        private int _eXECUTION_STATUS_ID;
    
        [DataMember]
        public Nullable<System.DateTime> EXECUTION_DATE
        {
            get { return _eXECUTION_DATE; }
            set
            {
                if (_eXECUTION_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("EXECUTION_DATE", _eXECUTION_DATE);
                    _eXECUTION_DATE = value;
                    OnPropertyChanged("EXECUTION_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _eXECUTION_DATE;
    
        [DataMember]
        public Nullable<int> ACTUAL_DURATION
        {
            get { return _aCTUAL_DURATION; }
            set
            {
                if (_aCTUAL_DURATION != value)
                {
                    ChangeTracker.RecordOriginalValue("ACTUAL_DURATION", _aCTUAL_DURATION);
                    _aCTUAL_DURATION = value;
                    OnPropertyChanged("ACTUAL_DURATION");
                }
            }
        }
        private Nullable<int> _aCTUAL_DURATION;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
