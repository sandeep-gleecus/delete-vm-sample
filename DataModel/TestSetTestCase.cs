//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(TestSet))]
    [KnownType(typeof(TestSetTestCaseParameter))]
    [KnownType(typeof(User))]
    public partial class TestSetTestCase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestSetTestCaseId
        {
            get { return _testSetTestCaseId; }
            set
            {
                if (_testSetTestCaseId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestSetTestCaseId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testSetTestCaseId = value;
                    OnPropertyChanged("TestSetTestCaseId");
                }
            }
        }
        private int _testSetTestCaseId;
    
        [DataMember]
        public int TestSetId
        {
            get { return _testSetId; }
            set
            {
                if (_testSetId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestSetId", _testSetId);
                    if (!IsDeserializing)
                    {
                        if (TestSet != null && TestSet.TestSetId != value)
                        {
                            TestSet = null;
                        }
                    }
                    _testSetId = value;
                    OnPropertyChanged("TestSetId");
                }
            }
        }
        private int _testSetId;
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public Nullable<System.DateTime> PlannedDate
        {
            get { return _plannedDate; }
            set
            {
                if (_plannedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("PlannedDate", _plannedDate);
                    _plannedDate = value;
                    OnPropertyChanged("PlannedDate");
                }
            }
        }
        private Nullable<System.DateTime> _plannedDate;
    
        [DataMember]
        public bool IsSetupTeardown
        {
            get { return _isSetupTeardown; }
            set
            {
                if (_isSetupTeardown != value)
                {
                    ChangeTracker.RecordOriginalValue("IsSetupTeardown", _isSetupTeardown);
                    _isSetupTeardown = value;
                    OnPropertyChanged("IsSetupTeardown");
                }
            }
        }
        private bool _isSetupTeardown;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TestSet TestSet
        {
            get { return _testSet; }
            set
            {
                if (!ReferenceEquals(_testSet, value))
                {
                    var previousValue = _testSet;
                    _testSet = value;
                    FixupTestSet(previousValue);
                    OnNavigationPropertyChanged("TestSet");
                }
            }
        }
        private TestSet _testSet;
    
        [DataMember]
        public TrackableCollection<TestSetTestCaseParameter> ParameterValues
        {
            get
            {
                if (_parameterValues == null)
                {
                    _parameterValues = new TrackableCollection<TestSetTestCaseParameter>();
                    _parameterValues.CollectionChanged += FixupParameterValues;
                }
                return _parameterValues;
            }
            set
            {
                if (!ReferenceEquals(_parameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged -= FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetTestCaseParameter item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _parameterValues = value;
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged += FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetTestCaseParameter item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ParameterValues");
                }
            }
        }
        private TrackableCollection<TestSetTestCaseParameter> _parameterValues;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TestCase = null;
            TestRuns.Clear();
            TestSet = null;
            ParameterValues.Clear();
            Owner = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTestCase(TestCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSetTestCases.Contains(this))
            {
                previousValue.TestSetTestCases.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.TestSetTestCases.Contains(this))
                {
                    TestCase.TestSetTestCases.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupTestSet(TestSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSetTestCases.Contains(this))
            {
                previousValue.TestSetTestCases.Remove(this);
            }
    
            if (TestSet != null)
            {
                if (!TestSet.TestSetTestCases.Contains(this))
                {
                    TestSet.TestSetTestCases.Add(this);
                }
    
                TestSetId = TestSet.TestSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestSet")
                    && (ChangeTracker.OriginalValues["TestSet"] == TestSet))
                {
                    ChangeTracker.OriginalValues.Remove("TestSet");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestSet", previousValue);
                }
                if (TestSet != null && !TestSet.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestSet.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedTestSetTestCases.Contains(this))
            {
                previousValue.OwnedTestSetTestCases.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedTestSetTestCases.Contains(this))
                {
                    Owner.OwnedTestSetTestCases.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.TestSetTestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSetTestCase, this))
                    {
                        item.TestSetTestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetTestCaseParameter item in e.NewItems)
                {
                    item.TestSetTestCase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetTestCaseParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestSetTestCase, this))
                    {
                        item.TestSetTestCase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
