//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ExecutionStatus))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestStepParameter))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(TestRunStep))]
    public partial class TestStep: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestStepId
        {
            get { return _testStepId; }
            set
            {
                if (_testStepId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestStepId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testStepId = value;
                    OnPropertyChanged("TestStepId");
                }
            }
        }
        private int _testStepId;
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public int ExecutionStatusId
        {
            get { return _executionStatusId; }
            set
            {
                if (_executionStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatusId", _executionStatusId);
                    if (!IsDeserializing)
                    {
                        if (ExecutionStatus != null && ExecutionStatus.ExecutionStatusId != value)
                        {
                            ExecutionStatus = null;
                        }
                    }
                    _executionStatusId = value;
                    OnPropertyChanged("ExecutionStatusId");
                }
            }
        }
        private int _executionStatusId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> LinkedTestCaseId
        {
            get { return _linkedTestCaseId; }
            set
            {
                if (_linkedTestCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("LinkedTestCaseId", _linkedTestCaseId);
                    if (!IsDeserializing)
                    {
                        if (LinkedTestCase != null && LinkedTestCase.TestCaseId != value)
                        {
                            LinkedTestCase = null;
                        }
                    }
                    _linkedTestCaseId = value;
                    OnPropertyChanged("LinkedTestCaseId");
                }
            }
        }
        private Nullable<int> _linkedTestCaseId;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public string ExpectedResult
        {
            get { return _expectedResult; }
            set
            {
                if (_expectedResult != value)
                {
                    ChangeTracker.RecordOriginalValue("ExpectedResult", _expectedResult);
                    _expectedResult = value;
                    OnPropertyChanged("ExpectedResult");
                }
            }
        }
        private string _expectedResult;
    
        [DataMember]
        public string SampleData
        {
            get { return _sampleData; }
            set
            {
                if (_sampleData != value)
                {
                    ChangeTracker.RecordOriginalValue("SampleData", _sampleData);
                    _sampleData = value;
                    OnPropertyChanged("SampleData");
                }
            }
        }
        private string _sampleData;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public string Precondition
        {
            get { return _precondition; }
            set
            {
                if (_precondition != value)
                {
                    ChangeTracker.RecordOriginalValue("Precondition", _precondition);
                    _precondition = value;
                    OnPropertyChanged("Precondition");
                }
            }
        }
        private string _precondition;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ExecutionStatus ExecutionStatus
        {
            get { return _executionStatus; }
            set
            {
                if (!ReferenceEquals(_executionStatus, value))
                {
                    var previousValue = _executionStatus;
                    _executionStatus = value;
                    FixupExecutionStatus(previousValue);
                    OnNavigationPropertyChanged("ExecutionStatus");
                }
            }
        }
        private ExecutionStatus _executionStatus;
    
        [DataMember]
        public TestCase LinkedTestCase
        {
            get { return _linkedTestCase; }
            set
            {
                if (!ReferenceEquals(_linkedTestCase, value))
                {
                    var previousValue = _linkedTestCase;
                    _linkedTestCase = value;
                    FixupLinkedTestCase(previousValue);
                    OnNavigationPropertyChanged("LinkedTestCase");
                }
            }
        }
        private TestCase _linkedTestCase;
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public TrackableCollection<TestStepParameter> Parameters
        {
            get
            {
                if (_parameters == null)
                {
                    _parameters = new TrackableCollection<TestStepParameter>();
                    _parameters.CollectionChanged += FixupParameters;
                }
                return _parameters;
            }
            set
            {
                if (!ReferenceEquals(_parameters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parameters != null)
                    {
                        _parameters.CollectionChanged -= FixupParameters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestStepParameter item in _parameters)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _parameters = value;
                    if (_parameters != null)
                    {
                        _parameters.CollectionChanged += FixupParameters;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestStepParameter item in _parameters)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Parameters");
                }
            }
        }
        private TrackableCollection<TestStepParameter> _parameters;
    
        [DataMember]
        public TrackableCollection<Requirement> Requirements
        {
            get
            {
                if (_requirements == null)
                {
                    _requirements = new TrackableCollection<Requirement>();
                    _requirements.CollectionChanged += FixupRequirements;
                }
                return _requirements;
            }
            set
            {
                if (!ReferenceEquals(_requirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged -= FixupRequirements;
                    }
                    _requirements = value;
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged += FixupRequirements;
                    }
                    OnNavigationPropertyChanged("Requirements");
                }
            }
        }
        private TrackableCollection<Requirement> _requirements;
    
        [DataMember]
        public TrackableCollection<TestRunStep> TestRunSteps
        {
            get
            {
                if (_testRunSteps == null)
                {
                    _testRunSteps = new TrackableCollection<TestRunStep>();
                    _testRunSteps.CollectionChanged += FixupTestRunSteps;
                }
                return _testRunSteps;
            }
            set
            {
                if (!ReferenceEquals(_testRunSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged -= FixupTestRunSteps;
                    }
                    _testRunSteps = value;
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged += FixupTestRunSteps;
                    }
                    OnNavigationPropertyChanged("TestRunSteps");
                }
            }
        }
        private TrackableCollection<TestRunStep> _testRunSteps;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ExecutionStatus = null;
            LinkedTestCase = null;
            TestCase = null;
            Parameters.Clear();
            Requirements.Clear();
            TestRunSteps.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupExecutionStatus(ExecutionStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSteps.Contains(this))
            {
                previousValue.TestSteps.Remove(this);
            }
    
            if (ExecutionStatus != null)
            {
                if (!ExecutionStatus.TestSteps.Contains(this))
                {
                    ExecutionStatus.TestSteps.Add(this);
                }
    
                ExecutionStatusId = ExecutionStatus.ExecutionStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ExecutionStatus")
                    && (ChangeTracker.OriginalValues["ExecutionStatus"] == ExecutionStatus))
                {
                    ChangeTracker.OriginalValues.Remove("ExecutionStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ExecutionStatus", previousValue);
                }
                if (ExecutionStatus != null && !ExecutionStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    ExecutionStatus.StartTracking();
                }
            }
        }
    
        private void FixupLinkedTestCase(TestCase previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ParentLinkedTestStep.Contains(this))
            {
                previousValue.ParentLinkedTestStep.Remove(this);
            }
    
            if (LinkedTestCase != null)
            {
                if (!LinkedTestCase.ParentLinkedTestStep.Contains(this))
                {
                    LinkedTestCase.ParentLinkedTestStep.Add(this);
                }
    
                LinkedTestCaseId = LinkedTestCase.TestCaseId;
            }
            else if (!skipKeys)
            {
                LinkedTestCaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LinkedTestCase")
                    && (ChangeTracker.OriginalValues["LinkedTestCase"] == LinkedTestCase))
                {
                    ChangeTracker.OriginalValues.Remove("LinkedTestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LinkedTestCase", previousValue);
                }
                if (LinkedTestCase != null && !LinkedTestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    LinkedTestCase.StartTracking();
                }
            }
        }
    
        private void FixupTestCase(TestCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestSteps.Contains(this))
            {
                previousValue.TestSteps.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.TestSteps.Contains(this))
                {
                    TestCase.TestSteps.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupParameters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestStepParameter item in e.NewItems)
                {
                    item.TestStep = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Parameters", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestStepParameter item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestStep, this))
                    {
                        item.TestStep = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Parameters", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    if (!item.TestSteps.Contains(this))
                    {
                        item.TestSteps.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (item.TestSteps.Contains(this))
                    {
                        item.TestSteps.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
                    }
                }
            }
        }
    
        private void FixupTestRunSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunStep item in e.NewItems)
                {
                    item.TestStep = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRunSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunStep item in e.OldItems)
                {
                    if (ReferenceEquals(item.TestStep, this))
                    {
                        item.TestStep = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRunSteps", item);
                    }
                }
            }
        }

        #endregion

    }
}
