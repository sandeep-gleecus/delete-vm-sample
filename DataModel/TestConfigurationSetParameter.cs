//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TestCaseParameter))]
    [KnownType(typeof(TestConfigurationParameterValue))]
    [KnownType(typeof(TestConfigurationSet))]
    public partial class TestConfigurationSetParameter: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestConfigurationSetId
        {
            get { return _testConfigurationSetId; }
            set
            {
                if (_testConfigurationSetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestConfigurationSetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Set != null && Set.TestConfigurationSetId != value)
                        {
                            Set = null;
                        }
                    }
                    _testConfigurationSetId = value;
                    OnPropertyChanged("TestConfigurationSetId");
                }
            }
        }
        private int _testConfigurationSetId;
    
        [DataMember]
        public int TestCaseParameterId
        {
            get { return _testCaseParameterId; }
            set
            {
                if (_testCaseParameterId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestCaseParameterId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (TestCaseParameter != null && TestCaseParameter.TestCaseParameterId != value)
                        {
                            TestCaseParameter = null;
                        }
                    }
                    _testCaseParameterId = value;
                    OnPropertyChanged("TestCaseParameterId");
                }
            }
        }
        private int _testCaseParameterId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TestCaseParameter TestCaseParameter
        {
            get { return _testCaseParameter; }
            set
            {
                if (!ReferenceEquals(_testCaseParameter, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (TestCaseParameterId != value.TestCaseParameterId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _testCaseParameter;
                    _testCaseParameter = value;
                    FixupTestCaseParameter(previousValue);
                    OnNavigationPropertyChanged("TestCaseParameter");
                }
            }
        }
        private TestCaseParameter _testCaseParameter;
    
        [DataMember]
        public TrackableCollection<TestConfigurationParameterValue> ParameterValues
        {
            get
            {
                if (_parameterValues == null)
                {
                    _parameterValues = new TrackableCollection<TestConfigurationParameterValue>();
                    _parameterValues.CollectionChanged += FixupParameterValues;
                }
                return _parameterValues;
            }
            set
            {
                if (!ReferenceEquals(_parameterValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged -= FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestConfigurationParameterValue item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _parameterValues = value;
                    if (_parameterValues != null)
                    {
                        _parameterValues.CollectionChanged += FixupParameterValues;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestConfigurationParameterValue item in _parameterValues)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ParameterValues");
                }
            }
        }
        private TrackableCollection<TestConfigurationParameterValue> _parameterValues;
    
        [DataMember]
        public TestConfigurationSet Set
        {
            get { return _set; }
            set
            {
                if (!ReferenceEquals(_set, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (TestConfigurationSetId != value.TestConfigurationSetId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _set;
                    _set = value;
                    FixupSet(previousValue);
                    OnNavigationPropertyChanged("Set");
                }
            }
        }
        private TestConfigurationSet _set;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TestCaseParameter = null;
            ParameterValues.Clear();
            Set = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTestCaseParameter(TestCaseParameter previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TestConfigurationSetParameters.Contains(this))
            {
                previousValue.TestConfigurationSetParameters.Remove(this);
            }
    
            if (TestCaseParameter != null)
            {
                if (!TestCaseParameter.TestConfigurationSetParameters.Contains(this))
                {
                    TestCaseParameter.TestConfigurationSetParameters.Add(this);
                }
    
                TestCaseParameterId = TestCaseParameter.TestCaseParameterId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCaseParameter")
                    && (ChangeTracker.OriginalValues["TestCaseParameter"] == TestCaseParameter))
                {
                    ChangeTracker.OriginalValues.Remove("TestCaseParameter");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCaseParameter", previousValue);
                }
                if (TestCaseParameter != null && !TestCaseParameter.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCaseParameter.StartTracking();
                }
            }
        }
    
        private void FixupSet(TestConfigurationSet previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Parameters.Contains(this))
            {
                previousValue.Parameters.Remove(this);
            }
    
            if (Set != null)
            {
                if (!Set.Parameters.Contains(this))
                {
                    Set.Parameters.Add(this);
                }
    
                TestConfigurationSetId = Set.TestConfigurationSetId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Set")
                    && (ChangeTracker.OriginalValues["Set"] == Set))
                {
                    ChangeTracker.OriginalValues.Remove("Set");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Set", previousValue);
                }
                if (Set != null && !Set.ChangeTracker.ChangeTrackingEnabled)
                {
                    Set.StartTracking();
                }
            }
        }
    
        private void FixupParameterValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestConfigurationParameterValue item in e.NewItems)
                {
                    item.SetParameter = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParameterValues", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestConfigurationParameterValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.SetParameter, this))
                    {
                        item.SetParameter = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParameterValues", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
