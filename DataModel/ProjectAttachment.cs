//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Attachment))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ProjectAttachmentFolder))]
    [KnownType(typeof(DocumentType))]
    public partial class ProjectAttachment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int AttachmentId
        {
            get { return _attachmentId; }
            set
            {
                if (_attachmentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttachmentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Attachment != null && Attachment.AttachmentId != value)
                        {
                            Attachment = null;
                        }
                    }
                    _attachmentId = value;
                    OnPropertyChanged("AttachmentId");
                }
            }
        }
        private int _attachmentId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int ProjectAttachmentFolderId
        {
            get { return _projectAttachmentFolderId; }
            set
            {
                if (_projectAttachmentFolderId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectAttachmentFolderId", _projectAttachmentFolderId);
                    if (!IsDeserializing)
                    {
                        if (ProjectAttachmentFolder != null && ProjectAttachmentFolder.ProjectAttachmentFolderId != value)
                        {
                            ProjectAttachmentFolder = null;
                        }
                    }
                    _projectAttachmentFolderId = value;
                    OnPropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        private int _projectAttachmentFolderId;
    
        [DataMember]
        public int DocumentTypeId
        {
            get { return _documentTypeId; }
            set
            {
                if (_documentTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentTypeId", _documentTypeId);
                    if (!IsDeserializing)
                    {
                        if (DocumentType != null && DocumentType.DocumentTypeId != value)
                        {
                            DocumentType = null;
                        }
                    }
                    _documentTypeId = value;
                    OnPropertyChanged("DocumentTypeId");
                }
            }
        }
        private int _documentTypeId;
    
        [DataMember]
        public bool IsKeyDocument
        {
            get { return _isKeyDocument; }
            set
            {
                if (_isKeyDocument != value)
                {
                    ChangeTracker.RecordOriginalValue("IsKeyDocument", _isKeyDocument);
                    _isKeyDocument = value;
                    OnPropertyChanged("IsKeyDocument");
                }
            }
        }
        private bool _isKeyDocument;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Attachment Attachment
        {
            get { return _attachment; }
            set
            {
                if (!ReferenceEquals(_attachment, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (AttachmentId != value.AttachmentId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _attachment;
                    _attachment = value;
                    FixupAttachment(previousValue);
                    OnNavigationPropertyChanged("Attachment");
                }
            }
        }
        private Attachment _attachment;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProjectId != value.ProjectId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public ProjectAttachmentFolder ProjectAttachmentFolder
        {
            get { return _projectAttachmentFolder; }
            set
            {
                if (!ReferenceEquals(_projectAttachmentFolder, value))
                {
                    var previousValue = _projectAttachmentFolder;
                    _projectAttachmentFolder = value;
                    FixupProjectAttachmentFolder(previousValue);
                    OnNavigationPropertyChanged("ProjectAttachmentFolder");
                }
            }
        }
        private ProjectAttachmentFolder _projectAttachmentFolder;
    
        [DataMember]
        public DocumentType DocumentType
        {
            get { return _documentType; }
            set
            {
                if (!ReferenceEquals(_documentType, value))
                {
                    var previousValue = _documentType;
                    _documentType = value;
                    FixupDocumentType(previousValue);
                    OnNavigationPropertyChanged("DocumentType");
                }
            }
        }
        private DocumentType _documentType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Attachment = null;
            Project = null;
            ProjectAttachmentFolder = null;
            DocumentType = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttachment(Attachment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProjectAttachments.Contains(this))
            {
                previousValue.ProjectAttachments.Remove(this);
            }
    
            if (Attachment != null)
            {
                if (!Attachment.ProjectAttachments.Contains(this))
                {
                    Attachment.ProjectAttachments.Add(this);
                }
    
                AttachmentId = Attachment.AttachmentId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Attachment")
                    && (ChangeTracker.OriginalValues["Attachment"] == Attachment))
                {
                    ChangeTracker.OriginalValues.Remove("Attachment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Attachment", previousValue);
                }
                if (Attachment != null && !Attachment.ChangeTracker.ChangeTrackingEnabled)
                {
                    Attachment.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Attachments.Contains(this))
            {
                previousValue.Attachments.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Attachments.Contains(this))
                {
                    Project.Attachments.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupProjectAttachmentFolder(ProjectAttachmentFolder previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Attachments.Contains(this))
            {
                previousValue.Attachments.Remove(this);
            }
    
            if (ProjectAttachmentFolder != null)
            {
                if (!ProjectAttachmentFolder.Attachments.Contains(this))
                {
                    ProjectAttachmentFolder.Attachments.Add(this);
                }
    
                ProjectAttachmentFolderId = ProjectAttachmentFolder.ProjectAttachmentFolderId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectAttachmentFolder")
                    && (ChangeTracker.OriginalValues["ProjectAttachmentFolder"] == ProjectAttachmentFolder))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectAttachmentFolder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectAttachmentFolder", previousValue);
                }
                if (ProjectAttachmentFolder != null && !ProjectAttachmentFolder.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectAttachmentFolder.StartTracking();
                }
            }
        }
    
        private void FixupDocumentType(DocumentType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProjectDocuments.Contains(this))
            {
                previousValue.ProjectDocuments.Remove(this);
            }
    
            if (DocumentType != null)
            {
                if (!DocumentType.ProjectDocuments.Contains(this))
                {
                    DocumentType.ProjectDocuments.Add(this);
                }
    
                DocumentTypeId = DocumentType.DocumentTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DocumentType")
                    && (ChangeTracker.OriginalValues["DocumentType"] == DocumentType))
                {
                    ChangeTracker.OriginalValues.Remove("DocumentType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DocumentType", previousValue);
                }
                if (DocumentType != null && !DocumentType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DocumentType.StartTracking();
                }
            }
        }

        #endregion

    }
}
