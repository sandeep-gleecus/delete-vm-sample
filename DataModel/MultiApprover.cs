//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(MultiApproverExecuted))]
    [KnownType(typeof(MultiApproverType))]
    public partial class MultiApprover: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MultiApproverId
        {
            get { return _multiApproverId; }
            set
            {
                if (_multiApproverId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MultiApproverId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _multiApproverId = value;
                    OnPropertyChanged("MultiApproverId");
                }
            }
        }
        private int _multiApproverId;
    
        [DataMember]
        public int WorkflowTransitionId
        {
            get { return _workflowTransitionId; }
            set
            {
                if (_workflowTransitionId != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkflowTransitionId", _workflowTransitionId);
                    _workflowTransitionId = value;
                    OnPropertyChanged("WorkflowTransitionId");
                }
            }
        }
        private int _workflowTransitionId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public int MultiApproverTypeId
        {
            get { return _multiApproverTypeId; }
            set
            {
                if (_multiApproverTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("MultiApproverTypeId", _multiApproverTypeId);
                    if (!IsDeserializing)
                    {
                        if (ApproverType != null && ApproverType.MultiApproverTypeId != value)
                        {
                            ApproverType = null;
                        }
                    }
                    _multiApproverTypeId = value;
                    OnPropertyChanged("MultiApproverTypeId");
                }
            }
        }
        private int _multiApproverTypeId;
    
        [DataMember]
        public bool IsRequired
        {
            get { return _isRequired; }
            set
            {
                if (_isRequired != value)
                {
                    ChangeTracker.RecordOriginalValue("IsRequired", _isRequired);
                    _isRequired = value;
                    OnPropertyChanged("IsRequired");
                }
            }
        }
        private bool _isRequired;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<MultiApproverExecuted> ExecutedApprovals
        {
            get
            {
                if (_executedApprovals == null)
                {
                    _executedApprovals = new TrackableCollection<MultiApproverExecuted>();
                    _executedApprovals.CollectionChanged += FixupExecutedApprovals;
                }
                return _executedApprovals;
            }
            set
            {
                if (!ReferenceEquals(_executedApprovals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_executedApprovals != null)
                    {
                        _executedApprovals.CollectionChanged -= FixupExecutedApprovals;
                    }
                    _executedApprovals = value;
                    if (_executedApprovals != null)
                    {
                        _executedApprovals.CollectionChanged += FixupExecutedApprovals;
                    }
                    OnNavigationPropertyChanged("ExecutedApprovals");
                }
            }
        }
        private TrackableCollection<MultiApproverExecuted> _executedApprovals;
    
        [DataMember]
        public MultiApproverType ApproverType
        {
            get { return _approverType; }
            set
            {
                if (!ReferenceEquals(_approverType, value))
                {
                    var previousValue = _approverType;
                    _approverType = value;
                    FixupApproverType(previousValue);
                    OnNavigationPropertyChanged("ApproverType");
                }
            }
        }
        private MultiApproverType _approverType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            ExecutedApprovals.Clear();
            ApproverType = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MultiApprovers.Contains(this))
            {
                previousValue.MultiApprovers.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.MultiApprovers.Contains(this))
                {
                    ArtifactType.MultiApprovers.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupApproverType(MultiApproverType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Approvals.Contains(this))
            {
                previousValue.Approvals.Remove(this);
            }
    
            if (ApproverType != null)
            {
                if (!ApproverType.Approvals.Contains(this))
                {
                    ApproverType.Approvals.Add(this);
                }
    
                MultiApproverTypeId = ApproverType.MultiApproverTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ApproverType")
                    && (ChangeTracker.OriginalValues["ApproverType"] == ApproverType))
                {
                    ChangeTracker.OriginalValues.Remove("ApproverType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ApproverType", previousValue);
                }
                if (ApproverType != null && !ApproverType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ApproverType.StartTracking();
                }
            }
        }
    
        private void FixupExecutedApprovals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MultiApproverExecuted item in e.NewItems)
                {
                    item.MultiApprover = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ExecutedApprovals", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MultiApproverExecuted item in e.OldItems)
                {
                    if (ReferenceEquals(item.MultiApprover, this))
                    {
                        item.MultiApprover = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ExecutedApprovals", item);
                    }
                }
            }
        }

        #endregion

    }
}
