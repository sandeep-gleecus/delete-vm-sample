//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProjectGroupGoal))]
    [KnownType(typeof(ProjectGroupMilestone))]
    [KnownType(typeof(ProjectGroupRoadmap))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(ThemePriority))]
    [KnownType(typeof(ThemeStatus))]
    public partial class ProjectGroupTheme: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ThemeId
        {
            get { return _themeId; }
            set
            {
                if (_themeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ThemeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _themeId = value;
                    OnPropertyChanged("ThemeId");
                }
            }
        }
        private int _themeId;
    
        [DataMember]
        public int RoadmapId
        {
            get { return _roadmapId; }
            set
            {
                if (_roadmapId != value)
                {
                    ChangeTracker.RecordOriginalValue("RoadmapId", _roadmapId);
                    if (!IsDeserializing)
                    {
                        if (Roadmap != null && Roadmap.RoadmapId != value)
                        {
                            Roadmap = null;
                        }
                    }
                    _roadmapId = value;
                    OnPropertyChanged("RoadmapId");
                }
            }
        }
        private int _roadmapId;
    
        [DataMember]
        public Nullable<int> MilestoneId
        {
            get { return _milestoneId; }
            set
            {
                if (_milestoneId != value)
                {
                    ChangeTracker.RecordOriginalValue("MilestoneId", _milestoneId);
                    if (!IsDeserializing)
                    {
                        if (Milestone != null && Milestone.MilestoneId != value)
                        {
                            Milestone = null;
                        }
                    }
                    _milestoneId = value;
                    OnPropertyChanged("MilestoneId");
                }
            }
        }
        private Nullable<int> _milestoneId;
    
        [DataMember]
        public int ThemeStatusId
        {
            get { return _themeStatusId; }
            set
            {
                if (_themeStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("ThemeStatusId", _themeStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.ThemeStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _themeStatusId = value;
                    OnPropertyChanged("ThemeStatusId");
                }
            }
        }
        private int _themeStatusId;
    
        [DataMember]
        public Nullable<int> ThemePriorityId
        {
            get { return _themePriorityId; }
            set
            {
                if (_themePriorityId != value)
                {
                    ChangeTracker.RecordOriginalValue("ThemePriorityId", _themePriorityId);
                    if (!IsDeserializing)
                    {
                        if (Priority != null && Priority.ThemePriorityId != value)
                        {
                            Priority = null;
                        }
                    }
                    _themePriorityId = value;
                    OnPropertyChanged("ThemePriorityId");
                }
            }
        }
        private Nullable<int> _themePriorityId;
    
        [DataMember]
        public Nullable<int> GoalId
        {
            get { return _goalId; }
            set
            {
                if (_goalId != value)
                {
                    ChangeTracker.RecordOriginalValue("GoalId", _goalId);
                    if (!IsDeserializing)
                    {
                        if (Goal != null && Goal.GoalId != value)
                        {
                            Goal = null;
                        }
                    }
                    _goalId = value;
                    OnPropertyChanged("GoalId");
                }
            }
        }
        private Nullable<int> _goalId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ProjectGroupGoal Goal
        {
            get { return _goal; }
            set
            {
                if (!ReferenceEquals(_goal, value))
                {
                    var previousValue = _goal;
                    _goal = value;
                    FixupGoal(previousValue);
                    OnNavigationPropertyChanged("Goal");
                }
            }
        }
        private ProjectGroupGoal _goal;
    
        [DataMember]
        public ProjectGroupMilestone Milestone
        {
            get { return _milestone; }
            set
            {
                if (!ReferenceEquals(_milestone, value))
                {
                    var previousValue = _milestone;
                    _milestone = value;
                    FixupMilestone(previousValue);
                    OnNavigationPropertyChanged("Milestone");
                }
            }
        }
        private ProjectGroupMilestone _milestone;
    
        [DataMember]
        public ProjectGroupRoadmap Roadmap
        {
            get { return _roadmap; }
            set
            {
                if (!ReferenceEquals(_roadmap, value))
                {
                    var previousValue = _roadmap;
                    _roadmap = value;
                    FixupRoadmap(previousValue);
                    OnNavigationPropertyChanged("Roadmap");
                }
            }
        }
        private ProjectGroupRoadmap _roadmap;
    
        [DataMember]
        public TrackableCollection<Requirement> Requirements
        {
            get
            {
                if (_requirements == null)
                {
                    _requirements = new TrackableCollection<Requirement>();
                    _requirements.CollectionChanged += FixupRequirements;
                }
                return _requirements;
            }
            set
            {
                if (!ReferenceEquals(_requirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged -= FixupRequirements;
                    }
                    _requirements = value;
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged += FixupRequirements;
                    }
                    OnNavigationPropertyChanged("Requirements");
                }
            }
        }
        private TrackableCollection<Requirement> _requirements;
    
        [DataMember]
        public ThemePriority Priority
        {
            get { return _priority; }
            set
            {
                if (!ReferenceEquals(_priority, value))
                {
                    var previousValue = _priority;
                    _priority = value;
                    FixupPriority(previousValue);
                    OnNavigationPropertyChanged("Priority");
                }
            }
        }
        private ThemePriority _priority;
    
        [DataMember]
        public ThemeStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private ThemeStatus _status;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Goal = null;
            Milestone = null;
            Roadmap = null;
            Requirements.Clear();
            Priority = null;
            Status = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupGoal(ProjectGroupGoal previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Themes.Contains(this))
            {
                previousValue.Themes.Remove(this);
            }
    
            if (Goal != null)
            {
                if (!Goal.Themes.Contains(this))
                {
                    Goal.Themes.Add(this);
                }
    
                GoalId = Goal.GoalId;
            }
            else if (!skipKeys)
            {
                GoalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Goal")
                    && (ChangeTracker.OriginalValues["Goal"] == Goal))
                {
                    ChangeTracker.OriginalValues.Remove("Goal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Goal", previousValue);
                }
                if (Goal != null && !Goal.ChangeTracker.ChangeTrackingEnabled)
                {
                    Goal.StartTracking();
                }
            }
        }
    
        private void FixupMilestone(ProjectGroupMilestone previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Themes.Contains(this))
            {
                previousValue.Themes.Remove(this);
            }
    
            if (Milestone != null)
            {
                if (!Milestone.Themes.Contains(this))
                {
                    Milestone.Themes.Add(this);
                }
    
                MilestoneId = Milestone.MilestoneId;
            }
            else if (!skipKeys)
            {
                MilestoneId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Milestone")
                    && (ChangeTracker.OriginalValues["Milestone"] == Milestone))
                {
                    ChangeTracker.OriginalValues.Remove("Milestone");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Milestone", previousValue);
                }
                if (Milestone != null && !Milestone.ChangeTracker.ChangeTrackingEnabled)
                {
                    Milestone.StartTracking();
                }
            }
        }
    
        private void FixupRoadmap(ProjectGroupRoadmap previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Themes.Contains(this))
            {
                previousValue.Themes.Remove(this);
            }
    
            if (Roadmap != null)
            {
                if (!Roadmap.Themes.Contains(this))
                {
                    Roadmap.Themes.Add(this);
                }
    
                RoadmapId = Roadmap.RoadmapId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Roadmap")
                    && (ChangeTracker.OriginalValues["Roadmap"] == Roadmap))
                {
                    ChangeTracker.OriginalValues.Remove("Roadmap");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Roadmap", previousValue);
                }
                if (Roadmap != null && !Roadmap.ChangeTracker.ChangeTrackingEnabled)
                {
                    Roadmap.StartTracking();
                }
            }
        }
    
        private void FixupPriority(ThemePriority previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Themes.Contains(this))
            {
                previousValue.Themes.Remove(this);
            }
    
            if (Priority != null)
            {
                if (!Priority.Themes.Contains(this))
                {
                    Priority.Themes.Add(this);
                }
    
                ThemePriorityId = Priority.ThemePriorityId;
            }
            else if (!skipKeys)
            {
                ThemePriorityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Priority")
                    && (ChangeTracker.OriginalValues["Priority"] == Priority))
                {
                    ChangeTracker.OriginalValues.Remove("Priority");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Priority", previousValue);
                }
                if (Priority != null && !Priority.ChangeTracker.ChangeTrackingEnabled)
                {
                    Priority.StartTracking();
                }
            }
        }
    
        private void FixupStatus(ThemeStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Themes.Contains(this))
            {
                previousValue.Themes.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Themes.Contains(this))
                {
                    Status.Themes.Add(this);
                }
    
                ThemeStatusId = Status.ThemeStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    item.Theme = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Theme, this))
                    {
                        item.Theme = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
                    }
                }
            }
        }

        #endregion

    }
}
