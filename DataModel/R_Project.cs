//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_Project: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public int PROJECT_GROUP_ID
        {
            get { return _pROJECT_GROUP_ID; }
            set
            {
                if (_pROJECT_GROUP_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_GROUP_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_GROUP_ID = value;
                    OnPropertyChanged("PROJECT_GROUP_ID");
                }
            }
        }
        private int _pROJECT_GROUP_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public System.DateTime CREATION_DATE
        {
            get { return _cREATION_DATE; }
            set
            {
                if (_cREATION_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATION_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATION_DATE = value;
                    OnPropertyChanged("CREATION_DATE");
                }
            }
        }
        private System.DateTime _cREATION_DATE;
    
        [DataMember]
        public string WEBSITE
        {
            get { return _wEBSITE; }
            set
            {
                if (_wEBSITE != value)
                {
                    ChangeTracker.RecordOriginalValue("WEBSITE", _wEBSITE);
                    _wEBSITE = value;
                    OnPropertyChanged("WEBSITE");
                }
            }
        }
        private string _wEBSITE;
    
        [DataMember]
        public int WORKING_HOURS
        {
            get { return _wORKING_HOURS; }
            set
            {
                if (_wORKING_HOURS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WORKING_HOURS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _wORKING_HOURS = value;
                    OnPropertyChanged("WORKING_HOURS");
                }
            }
        }
        private int _wORKING_HOURS;
    
        [DataMember]
        public int WORKING_DAYS
        {
            get { return _wORKING_DAYS; }
            set
            {
                if (_wORKING_DAYS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WORKING_DAYS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _wORKING_DAYS = value;
                    OnPropertyChanged("WORKING_DAYS");
                }
            }
        }
        private int _wORKING_DAYS;
    
        [DataMember]
        public int NON_WORKING_HOURS
        {
            get { return _nON_WORKING_HOURS; }
            set
            {
                if (_nON_WORKING_HOURS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NON_WORKING_HOURS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nON_WORKING_HOURS = value;
                    OnPropertyChanged("NON_WORKING_HOURS");
                }
            }
        }
        private int _nON_WORKING_HOURS;
    
        [DataMember]
        public Nullable<int> TASK_DEFAULT_EFFORT
        {
            get { return _tASK_DEFAULT_EFFORT; }
            set
            {
                if (_tASK_DEFAULT_EFFORT != value)
                {
                    ChangeTracker.RecordOriginalValue("TASK_DEFAULT_EFFORT", _tASK_DEFAULT_EFFORT);
                    _tASK_DEFAULT_EFFORT = value;
                    OnPropertyChanged("TASK_DEFAULT_EFFORT");
                }
            }
        }
        private Nullable<int> _tASK_DEFAULT_EFFORT;
    
        [DataMember]
        public string PROJECT_GROUP_NAME
        {
            get { return _pROJECT_GROUP_NAME; }
            set
            {
                if (_pROJECT_GROUP_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_GROUP_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_GROUP_NAME = value;
                    OnPropertyChanged("PROJECT_GROUP_NAME");
                }
            }
        }
        private string _pROJECT_GROUP_NAME;
    
        [DataMember]
        public string PROJECT_GROUP_DESCRIPTION
        {
            get { return _pROJECT_GROUP_DESCRIPTION; }
            set
            {
                if (_pROJECT_GROUP_DESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("PROJECT_GROUP_DESCRIPTION", _pROJECT_GROUP_DESCRIPTION);
                    _pROJECT_GROUP_DESCRIPTION = value;
                    OnPropertyChanged("PROJECT_GROUP_DESCRIPTION");
                }
            }
        }
        private string _pROJECT_GROUP_DESCRIPTION;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public bool IS_TIME_TRACK_INCIDENTS
        {
            get { return _iS_TIME_TRACK_INCIDENTS; }
            set
            {
                if (_iS_TIME_TRACK_INCIDENTS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_TIME_TRACK_INCIDENTS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_TIME_TRACK_INCIDENTS = value;
                    OnPropertyChanged("IS_TIME_TRACK_INCIDENTS");
                }
            }
        }
        private bool _iS_TIME_TRACK_INCIDENTS;
    
        [DataMember]
        public bool IS_TIME_TRACK_TASKS
        {
            get { return _iS_TIME_TRACK_TASKS; }
            set
            {
                if (_iS_TIME_TRACK_TASKS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_TIME_TRACK_TASKS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_TIME_TRACK_TASKS = value;
                    OnPropertyChanged("IS_TIME_TRACK_TASKS");
                }
            }
        }
        private bool _iS_TIME_TRACK_TASKS;
    
        [DataMember]
        public bool IS_EFFORT_INCIDENTS
        {
            get { return _iS_EFFORT_INCIDENTS; }
            set
            {
                if (_iS_EFFORT_INCIDENTS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_EFFORT_INCIDENTS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_EFFORT_INCIDENTS = value;
                    OnPropertyChanged("IS_EFFORT_INCIDENTS");
                }
            }
        }
        private bool _iS_EFFORT_INCIDENTS;
    
        [DataMember]
        public bool IS_EFFORT_TASKS
        {
            get { return _iS_EFFORT_TASKS; }
            set
            {
                if (_iS_EFFORT_TASKS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_EFFORT_TASKS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_EFFORT_TASKS = value;
                    OnPropertyChanged("IS_EFFORT_TASKS");
                }
            }
        }
        private bool _iS_EFFORT_TASKS;
    
        [DataMember]
        public bool IS_TASKS_AUTO_CREATE
        {
            get { return _iS_TASKS_AUTO_CREATE; }
            set
            {
                if (_iS_TASKS_AUTO_CREATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_TASKS_AUTO_CREATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_TASKS_AUTO_CREATE = value;
                    OnPropertyChanged("IS_TASKS_AUTO_CREATE");
                }
            }
        }
        private bool _iS_TASKS_AUTO_CREATE;
    
        [DataMember]
        public Nullable<decimal> REQ_DEFAULT_ESTIMATE
        {
            get { return _rEQ_DEFAULT_ESTIMATE; }
            set
            {
                if (_rEQ_DEFAULT_ESTIMATE != value)
                {
                    ChangeTracker.RecordOriginalValue("REQ_DEFAULT_ESTIMATE", _rEQ_DEFAULT_ESTIMATE);
                    _rEQ_DEFAULT_ESTIMATE = value;
                    OnPropertyChanged("REQ_DEFAULT_ESTIMATE");
                }
            }
        }
        private Nullable<decimal> _rEQ_DEFAULT_ESTIMATE;
    
        [DataMember]
        public int REQ_POINT_EFFORT
        {
            get { return _rEQ_POINT_EFFORT; }
            set
            {
                if (_rEQ_POINT_EFFORT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'REQ_POINT_EFFORT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rEQ_POINT_EFFORT = value;
                    OnPropertyChanged("REQ_POINT_EFFORT");
                }
            }
        }
        private int _rEQ_POINT_EFFORT;
    
        [DataMember]
        public bool IS_REQ_STATUS_BY_TASKS
        {
            get { return _iS_REQ_STATUS_BY_TASKS; }
            set
            {
                if (_iS_REQ_STATUS_BY_TASKS != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_REQ_STATUS_BY_TASKS' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_REQ_STATUS_BY_TASKS = value;
                    OnPropertyChanged("IS_REQ_STATUS_BY_TASKS");
                }
            }
        }
        private bool _iS_REQ_STATUS_BY_TASKS;
    
        [DataMember]
        public bool IS_REQ_STATUS_BY_TEST_CASES
        {
            get { return _iS_REQ_STATUS_BY_TEST_CASES; }
            set
            {
                if (_iS_REQ_STATUS_BY_TEST_CASES != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_REQ_STATUS_BY_TEST_CASES' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_REQ_STATUS_BY_TEST_CASES = value;
                    OnPropertyChanged("IS_REQ_STATUS_BY_TEST_CASES");
                }
            }
        }
        private bool _iS_REQ_STATUS_BY_TEST_CASES;
    
        [DataMember]
        public bool IS_EFFORT_TEST_CASES
        {
            get { return _iS_EFFORT_TEST_CASES; }
            set
            {
                if (_iS_EFFORT_TEST_CASES != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_EFFORT_TEST_CASES' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_EFFORT_TEST_CASES = value;
                    OnPropertyChanged("IS_EFFORT_TEST_CASES");
                }
            }
        }
        private bool _iS_EFFORT_TEST_CASES;
    
        [DataMember]
        public bool IS_REQ_STATUS_AUTO_PLANNED
        {
            get { return _iS_REQ_STATUS_AUTO_PLANNED; }
            set
            {
                if (_iS_REQ_STATUS_AUTO_PLANNED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_REQ_STATUS_AUTO_PLANNED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_REQ_STATUS_AUTO_PLANNED = value;
                    OnPropertyChanged("IS_REQ_STATUS_AUTO_PLANNED");
                }
            }
        }
        private bool _iS_REQ_STATUS_AUTO_PLANNED;
    
        [DataMember]
        public int PROJECT_TEMPLATE_ID
        {
            get { return _pROJECT_TEMPLATE_ID; }
            set
            {
                if (_pROJECT_TEMPLATE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_TEMPLATE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_TEMPLATE_ID = value;
                    OnPropertyChanged("PROJECT_TEMPLATE_ID");
                }
            }
        }
        private int _pROJECT_TEMPLATE_ID;
    
        [DataMember]
        public Nullable<System.DateTime> START_DATE
        {
            get { return _sTART_DATE; }
            set
            {
                if (_sTART_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("START_DATE", _sTART_DATE);
                    _sTART_DATE = value;
                    OnPropertyChanged("START_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _sTART_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> END_DATE
        {
            get { return _eND_DATE; }
            set
            {
                if (_eND_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("END_DATE", _eND_DATE);
                    _eND_DATE = value;
                    OnPropertyChanged("END_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _eND_DATE;
    
        [DataMember]
        public int PERCENT_COMPLETE
        {
            get { return _pERCENT_COMPLETE; }
            set
            {
                if (_pERCENT_COMPLETE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PERCENT_COMPLETE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pERCENT_COMPLETE = value;
                    OnPropertyChanged("PERCENT_COMPLETE");
                }
            }
        }
        private int _pERCENT_COMPLETE;
    
        [DataMember]
        public int REQUIREMENT_COUNT
        {
            get { return _rEQUIREMENT_COUNT; }
            set
            {
                if (_rEQUIREMENT_COUNT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'REQUIREMENT_COUNT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rEQUIREMENT_COUNT = value;
                    OnPropertyChanged("REQUIREMENT_COUNT");
                }
            }
        }
        private int _rEQUIREMENT_COUNT;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
