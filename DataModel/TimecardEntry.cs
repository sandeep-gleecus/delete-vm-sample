//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(ResourceCategory))]
    [KnownType(typeof(Timecard))]
    [KnownType(typeof(TimecardEntryType))]
    [KnownType(typeof(User))]
    public partial class TimecardEntry: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TimecardEntryId
        {
            get { return _timecardEntryId; }
            set
            {
                if (_timecardEntryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TimecardEntryId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _timecardEntryId = value;
                    OnPropertyChanged("TimecardEntryId");
                }
            }
        }
        private int _timecardEntryId;
    
        [DataMember]
        public Nullable<int> TimecardId
        {
            get { return _timecardId; }
            set
            {
                if (_timecardId != value)
                {
                    ChangeTracker.RecordOriginalValue("TimecardId", _timecardId);
                    if (!IsDeserializing)
                    {
                        if (Timecard != null && Timecard.TimecardId != value)
                        {
                            Timecard = null;
                        }
                    }
                    _timecardId = value;
                    OnPropertyChanged("TimecardId");
                }
            }
        }
        private Nullable<int> _timecardId;
    
        [DataMember]
        public Nullable<int> ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroupId", _projectGroupId);
                    if (!IsDeserializing)
                    {
                        if (ProjectGroup != null && ProjectGroup.ProjectGroupId != value)
                        {
                            ProjectGroup = null;
                        }
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private Nullable<int> _projectGroupId;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public Nullable<int> ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private Nullable<int> _artifactTypeId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public Nullable<int> TimecardEntryTypeId
        {
            get { return _timecardEntryTypeId; }
            set
            {
                if (_timecardEntryTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TimecardEntryTypeId", _timecardEntryTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.TimecardEntryTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _timecardEntryTypeId = value;
                    OnPropertyChanged("TimecardEntryTypeId");
                }
            }
        }
        private Nullable<int> _timecardEntryTypeId;
    
        [DataMember]
        public Nullable<int> ResourceCategoryId
        {
            get { return _resourceCategoryId; }
            set
            {
                if (_resourceCategoryId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResourceCategoryId", _resourceCategoryId);
                    if (!IsDeserializing)
                    {
                        if (ResourceCategory != null && ResourceCategory.ResourceCategoryId != value)
                        {
                            ResourceCategory = null;
                        }
                    }
                    _resourceCategoryId = value;
                    OnPropertyChanged("ResourceCategoryId");
                }
            }
        }
        private Nullable<int> _resourceCategoryId;
    
        [DataMember]
        public int ArtifactId
        {
            get { return _artifactId; }
            set
            {
                if (_artifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactId", _artifactId);
                    _artifactId = value;
                    OnPropertyChanged("ArtifactId");
                }
            }
        }
        private int _artifactId;
    
        [DataMember]
        public int Effort
        {
            get { return _effort; }
            set
            {
                if (_effort != value)
                {
                    ChangeTracker.RecordOriginalValue("Effort", _effort);
                    _effort = value;
                    OnPropertyChanged("Effort");
                }
            }
        }
        private int _effort;
    
        [DataMember]
        public System.DateTime EffortDate
        {
            get { return _effortDate; }
            set
            {
                if (_effortDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EffortDate", _effortDate);
                    _effortDate = value;
                    OnPropertyChanged("EffortDate");
                }
            }
        }
        private System.DateTime _effortDate;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public ProjectGroup ProjectGroup
        {
            get { return _projectGroup; }
            set
            {
                if (!ReferenceEquals(_projectGroup, value))
                {
                    var previousValue = _projectGroup;
                    _projectGroup = value;
                    FixupProjectGroup(previousValue);
                    OnNavigationPropertyChanged("ProjectGroup");
                }
            }
        }
        private ProjectGroup _projectGroup;
    
        [DataMember]
        public ResourceCategory ResourceCategory
        {
            get { return _resourceCategory; }
            set
            {
                if (!ReferenceEquals(_resourceCategory, value))
                {
                    var previousValue = _resourceCategory;
                    _resourceCategory = value;
                    FixupResourceCategory(previousValue);
                    OnNavigationPropertyChanged("ResourceCategory");
                }
            }
        }
        private ResourceCategory _resourceCategory;
    
        [DataMember]
        public Timecard Timecard
        {
            get { return _timecard; }
            set
            {
                if (!ReferenceEquals(_timecard, value))
                {
                    var previousValue = _timecard;
                    _timecard = value;
                    FixupTimecard(previousValue);
                    OnNavigationPropertyChanged("Timecard");
                }
            }
        }
        private Timecard _timecard;
    
        [DataMember]
        public TimecardEntryType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private TimecardEntryType _type;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            Project = null;
            ProjectGroup = null;
            ResourceCategory = null;
            Timecard = null;
            Type = null;
            User = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.TimecardEntries.Contains(this))
                {
                    ArtifactType.TimecardEntries.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            else if (!skipKeys)
            {
                ArtifactTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.TimecardEntries.Contains(this))
                {
                    Project.TimecardEntries.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            else if (!skipKeys)
            {
                ProjectId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupProjectGroup(ProjectGroup previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (ProjectGroup != null)
            {
                if (!ProjectGroup.TimecardEntries.Contains(this))
                {
                    ProjectGroup.TimecardEntries.Add(this);
                }
    
                ProjectGroupId = ProjectGroup.ProjectGroupId;
            }
            else if (!skipKeys)
            {
                ProjectGroupId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectGroup")
                    && (ChangeTracker.OriginalValues["ProjectGroup"] == ProjectGroup))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroup", previousValue);
                }
                if (ProjectGroup != null && !ProjectGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectGroup.StartTracking();
                }
            }
        }
    
        private void FixupResourceCategory(ResourceCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (ResourceCategory != null)
            {
                if (!ResourceCategory.TimecardEntries.Contains(this))
                {
                    ResourceCategory.TimecardEntries.Add(this);
                }
    
                ResourceCategoryId = ResourceCategory.ResourceCategoryId;
            }
            else if (!skipKeys)
            {
                ResourceCategoryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResourceCategory")
                    && (ChangeTracker.OriginalValues["ResourceCategory"] == ResourceCategory))
                {
                    ChangeTracker.OriginalValues.Remove("ResourceCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResourceCategory", previousValue);
                }
                if (ResourceCategory != null && !ResourceCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResourceCategory.StartTracking();
                }
            }
        }
    
        private void FixupTimecard(Timecard previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Entries.Contains(this))
            {
                previousValue.Entries.Remove(this);
            }
    
            if (Timecard != null)
            {
                if (!Timecard.Entries.Contains(this))
                {
                    Timecard.Entries.Add(this);
                }
    
                TimecardId = Timecard.TimecardId;
            }
            else if (!skipKeys)
            {
                TimecardId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Timecard")
                    && (ChangeTracker.OriginalValues["Timecard"] == Timecard))
                {
                    ChangeTracker.OriginalValues.Remove("Timecard");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Timecard", previousValue);
                }
                if (Timecard != null && !Timecard.ChangeTracker.ChangeTrackingEnabled)
                {
                    Timecard.StartTracking();
                }
            }
        }
    
        private void FixupType(TimecardEntryType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.TimecardEntries.Contains(this))
                {
                    Type.TimecardEntries.Add(this);
                }
    
                TimecardEntryTypeId = Type.TimecardEntryTypeId;
            }
            else if (!skipKeys)
            {
                TimecardEntryTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TimecardEntries.Contains(this))
            {
                previousValue.TimecardEntries.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.TimecardEntries.Contains(this))
                {
                    User.TimecardEntries.Add(this);
                }
    
                UserId = User.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }

        #endregion

    }
}
