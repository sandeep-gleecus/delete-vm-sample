//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Project))]
    [KnownType(typeof(VersionControlSystem))]
    [KnownType(typeof(VersionControlBranch))]
    [KnownType(typeof(SourceCodeCommit))]
    public partial class VersionControlProject: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int VersionControlSystemId
        {
            get { return _versionControlSystemId; }
            set
            {
                if (_versionControlSystemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'VersionControlSystemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (VersionControlSystem != null && VersionControlSystem.VersionControlSystemId != value)
                        {
                            VersionControlSystem = null;
                        }
                    }
                    _versionControlSystemId = value;
                    OnPropertyChanged("VersionControlSystemId");
                }
            }
        }
        private int _versionControlSystemId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string ConnectionString
        {
            get { return _connectionString; }
            set
            {
                if (_connectionString != value)
                {
                    ChangeTracker.RecordOriginalValue("ConnectionString", _connectionString);
                    _connectionString = value;
                    OnPropertyChanged("ConnectionString");
                }
            }
        }
        private string _connectionString;
    
        [DataMember]
        public string Login
        {
            get { return _login; }
            set
            {
                if (_login != value)
                {
                    ChangeTracker.RecordOriginalValue("Login", _login);
                    _login = value;
                    OnPropertyChanged("Login");
                }
            }
        }
        private string _login;
    
        [DataMember]
        public string EncryptedPassword
        {
            get { return _encryptedPassword; }
            set
            {
                if (_encryptedPassword != value)
                {
                    ChangeTracker.RecordOriginalValue("EncryptedPassword", _encryptedPassword);
                    _encryptedPassword = value;
                    OnPropertyChanged("EncryptedPassword");
                }
            }
        }
        private string _encryptedPassword;
    
        [DataMember]
        public string Domain
        {
            get { return _domain; }
            set
            {
                if (_domain != value)
                {
                    ChangeTracker.RecordOriginalValue("Domain", _domain);
                    _domain = value;
                    OnPropertyChanged("Domain");
                }
            }
        }
        private string _domain;
    
        [DataMember]
        public string Custom01
        {
            get { return _custom01; }
            set
            {
                if (_custom01 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom01", _custom01);
                    _custom01 = value;
                    OnPropertyChanged("Custom01");
                }
            }
        }
        private string _custom01;
    
        [DataMember]
        public string Custom02
        {
            get { return _custom02; }
            set
            {
                if (_custom02 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom02", _custom02);
                    _custom02 = value;
                    OnPropertyChanged("Custom02");
                }
            }
        }
        private string _custom02;
    
        [DataMember]
        public string Custom03
        {
            get { return _custom03; }
            set
            {
                if (_custom03 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom03", _custom03);
                    _custom03 = value;
                    OnPropertyChanged("Custom03");
                }
            }
        }
        private string _custom03;
    
        [DataMember]
        public string Custom04
        {
            get { return _custom04; }
            set
            {
                if (_custom04 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom04", _custom04);
                    _custom04 = value;
                    OnPropertyChanged("Custom04");
                }
            }
        }
        private string _custom04;
    
        [DataMember]
        public string Custom05
        {
            get { return _custom05; }
            set
            {
                if (_custom05 != value)
                {
                    ChangeTracker.RecordOriginalValue("Custom05", _custom05);
                    _custom05 = value;
                    OnPropertyChanged("Custom05");
                }
            }
        }
        private string _custom05;
    
        [DataMember]
        public bool IsEncrypted
        {
            get { return _isEncrypted; }
            set
            {
                if (_isEncrypted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEncrypted", _isEncrypted);
                    _isEncrypted = value;
                    OnPropertyChanged("IsEncrypted");
                }
            }
        }
        private bool _isEncrypted;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProjectId != value.ProjectId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public VersionControlSystem VersionControlSystem
        {
            get { return _versionControlSystem; }
            set
            {
                if (!ReferenceEquals(_versionControlSystem, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (VersionControlSystemId != value.VersionControlSystemId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _versionControlSystem;
                    _versionControlSystem = value;
                    FixupVersionControlSystem(previousValue);
                    OnNavigationPropertyChanged("VersionControlSystem");
                }
            }
        }
        private VersionControlSystem _versionControlSystem;
    
        [DataMember]
        public TrackableCollection<VersionControlBranch> Branches
        {
            get
            {
                if (_branches == null)
                {
                    _branches = new TrackableCollection<VersionControlBranch>();
                    _branches.CollectionChanged += FixupBranches;
                }
                return _branches;
            }
            set
            {
                if (!ReferenceEquals(_branches, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_branches != null)
                    {
                        _branches.CollectionChanged -= FixupBranches;
                    }
                    _branches = value;
                    if (_branches != null)
                    {
                        _branches.CollectionChanged += FixupBranches;
                    }
                    OnNavigationPropertyChanged("Branches");
                }
            }
        }
        private TrackableCollection<VersionControlBranch> _branches;
    
        [DataMember]
        public TrackableCollection<SourceCodeCommit> Commits
        {
            get
            {
                if (_commits == null)
                {
                    _commits = new TrackableCollection<SourceCodeCommit>();
                    _commits.CollectionChanged += FixupCommits;
                }
                return _commits;
            }
            set
            {
                if (!ReferenceEquals(_commits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commits != null)
                    {
                        _commits.CollectionChanged -= FixupCommits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SourceCodeCommit item in _commits)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _commits = value;
                    if (_commits != null)
                    {
                        _commits.CollectionChanged += FixupCommits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SourceCodeCommit item in _commits)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Commits");
                }
            }
        }
        private TrackableCollection<SourceCodeCommit> _commits;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Project = null;
            VersionControlSystem = null;
            Branches.Clear();
            Commits.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VersionControlProjects.Contains(this))
            {
                previousValue.VersionControlProjects.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.VersionControlProjects.Contains(this))
                {
                    Project.VersionControlProjects.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupVersionControlSystem(VersionControlSystem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VersionControlProjects.Contains(this))
            {
                previousValue.VersionControlProjects.Remove(this);
            }
    
            if (VersionControlSystem != null)
            {
                if (!VersionControlSystem.VersionControlProjects.Contains(this))
                {
                    VersionControlSystem.VersionControlProjects.Add(this);
                }
    
                VersionControlSystemId = VersionControlSystem.VersionControlSystemId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VersionControlSystem")
                    && (ChangeTracker.OriginalValues["VersionControlSystem"] == VersionControlSystem))
                {
                    ChangeTracker.OriginalValues.Remove("VersionControlSystem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VersionControlSystem", previousValue);
                }
                if (VersionControlSystem != null && !VersionControlSystem.ChangeTracker.ChangeTrackingEnabled)
                {
                    VersionControlSystem.StartTracking();
                }
            }
        }
    
        private void FixupBranches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlBranch item in e.NewItems)
                {
                    item.VersionControlProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Branches", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlBranch item in e.OldItems)
                {
                    if (ReferenceEquals(item.VersionControlProject, this))
                    {
                        item.VersionControlProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Branches", item);
                    }
                }
            }
        }
    
        private void FixupCommits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SourceCodeCommit item in e.NewItems)
                {
                    item.VersionControlProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Commits", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SourceCodeCommit item in e.OldItems)
                {
                    if (ReferenceEquals(item.VersionControlProject, this))
                    {
                        item.VersionControlProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Commits", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
