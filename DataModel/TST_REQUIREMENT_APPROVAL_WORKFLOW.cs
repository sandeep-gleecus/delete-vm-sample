//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TST_REQUIREMENT_SIGNATURE))]
    public partial class TST_REQUIREMENT_APPROVAL_WORKFLOW: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int REQUIREMENT_APPROVAL_WORKFLOW_ID
        {
            get { return _rEQUIREMENT_APPROVAL_WORKFLOW_ID; }
            set
            {
                if (_rEQUIREMENT_APPROVAL_WORKFLOW_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'REQUIREMENT_APPROVAL_WORKFLOW_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rEQUIREMENT_APPROVAL_WORKFLOW_ID = value;
                    OnPropertyChanged("REQUIREMENT_APPROVAL_WORKFLOW_ID");
                }
            }
        }
        private int _rEQUIREMENT_APPROVAL_WORKFLOW_ID;
    
        [DataMember]
        public int REQUIREMENT_ID
        {
            get { return _rEQUIREMENT_ID; }
            set
            {
                if (_rEQUIREMENT_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("REQUIREMENT_ID", _rEQUIREMENT_ID);
                    _rEQUIREMENT_ID = value;
                    OnPropertyChanged("REQUIREMENT_ID");
                }
            }
        }
        private int _rEQUIREMENT_ID;
    
        [DataMember]
        public bool IS_ACTIVE
        {
            get { return _iS_ACTIVE; }
            set
            {
                if (_iS_ACTIVE != value)
                {
                    ChangeTracker.RecordOriginalValue("IS_ACTIVE", _iS_ACTIVE);
                    _iS_ACTIVE = value;
                    OnPropertyChanged("IS_ACTIVE");
                }
            }
        }
        private bool _iS_ACTIVE;
    
        [DataMember]
        public System.DateTime UPDATE_DATE
        {
            get { return _uPDATE_DATE; }
            set
            {
                if (_uPDATE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("UPDATE_DATE", _uPDATE_DATE);
                    _uPDATE_DATE = value;
                    OnPropertyChanged("UPDATE_DATE");
                }
            }
        }
        private System.DateTime _uPDATE_DATE;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TST_REQUIREMENT_SIGNATURE> TST_REQUIREMENT_SIGNATURE
        {
            get
            {
                if (_tST_REQUIREMENT_SIGNATURE == null)
                {
                    _tST_REQUIREMENT_SIGNATURE = new TrackableCollection<TST_REQUIREMENT_SIGNATURE>();
                    _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                }
                return _tST_REQUIREMENT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged -= FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    _tST_REQUIREMENT_SIGNATURE = value;
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_REQUIREMENT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_REQUIREMENT_SIGNATURE> _tST_REQUIREMENT_SIGNATURE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TST_REQUIREMENT_SIGNATURE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTST_REQUIREMENT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.NewItems)
                {
                    item.TST_REQUIREMENT_APPROVAL_WORKFLOW = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_REQUIREMENT_APPROVAL_WORKFLOW, this))
                    {
                        item.TST_REQUIREMENT_APPROVAL_WORKFLOW = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
