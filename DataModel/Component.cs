//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
	[DataContract(IsReference = true)]
	[KnownType(typeof(Requirement))]
	[KnownType(typeof(Project))]
	[KnownType(typeof(Risk))]
	public partial class Component : IObjectWithChangeTracker, INotifyPropertyChanged
	{
		#region Primitive Properties

		[DataMember]
		public int ComponentId
		{
			get { return _componentId; }
			set
			{
				if (_componentId != value)
				{
					if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
					{
						throw new InvalidOperationException("The property 'ComponentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
					}
					_componentId = value;
					OnPropertyChanged("ComponentId");
				}
			}
		}
		private int _componentId;

		[DataMember]
		public int ProjectId
		{
			get { return _projectId; }
			set
			{
				if (_projectId != value)
				{
					ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
					if (!IsDeserializing)
					{
						if (Project != null && Project.ProjectId != value)
						{
							Project = null;
						}
					}
					_projectId = value;
					OnPropertyChanged("ProjectId");
				}
			}
		}
		private int _projectId;

		[DataMember]
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					ChangeTracker.RecordOriginalValue("Name", _name);
					_name = value;
					OnPropertyChanged("Name");
				}
			}
		}
		private string _name;

		[DataMember]
		public bool IsDeleted
		{
			get { return _isDeleted; }
			set
			{
				if (_isDeleted != value)
				{
					ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
					_isDeleted = value;
					OnPropertyChanged("IsDeleted");
				}
			}
		}
		private bool _isDeleted;

		[DataMember]
		public bool IsActive
		{
			get { return _isActive; }
			set
			{
				if (_isActive != value)
				{
					ChangeTracker.RecordOriginalValue("IsActive", _isActive);
					_isActive = value;
					OnPropertyChanged("IsActive");
				}
			}
		}
		private bool _isActive;
		[DataMember]
		public string FullName
		{
			get { return _fullName; }
			set
			{
				if (_fullName != value)
				{
					if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
					{
						throw new InvalidOperationException("The property 'FullName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
					}
					_fullName = value;
					OnPropertyChanged("FullName");
				}
			}
		}
		private string _fullName;
		public string IndentLevel
		{
			get { return _indentLevel; }
			set
			{
				if (_indentLevel != value)
				{
					if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
					{
						throw new InvalidOperationException("The property 'IndentLevel' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
					}
					_indentLevel = value;
					OnPropertyChanged("IndentLevel");
				}
			}
		}
		private string _indentLevel;
		[DataMember]
		public bool IsSummary
		{
			get { return _isSummary; }
			set
			{
				if (_isSummary != value)
				{
					if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
					{
						throw new InvalidOperationException("The property 'IsSummary' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
					}
					_isSummary = value;
					OnPropertyChanged("IsSummary");
				}
			}
		}
		private bool _isSummary;
		public bool IsIterationOrPhase
		{
			get
			{
				return (ComponentId == (int)Release.ReleaseTypeEnum.Iteration || ComponentId == (int)Release.ReleaseTypeEnum.Phase);
			}
		}
		#endregion

		#region Navigation Properties

		[DataMember]
		public TrackableCollection<Requirement> Requirements
		{
			get
			{
				if (_requirements == null)
				{
					_requirements = new TrackableCollection<Requirement>();
					_requirements.CollectionChanged += FixupRequirements;
				}
				return _requirements;
			}
			set
			{
				if (!ReferenceEquals(_requirements, value))
				{
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
					}
					if (_requirements != null)
					{
						_requirements.CollectionChanged -= FixupRequirements;
					}
					_requirements = value;
					if (_requirements != null)
					{
						_requirements.CollectionChanged += FixupRequirements;
					}
					OnNavigationPropertyChanged("Requirements");
				}
			}
		}
		private TrackableCollection<Requirement> _requirements;

		[DataMember]
		public Project Project
		{
			get { return _project; }
			set
			{
				if (!ReferenceEquals(_project, value))
				{
					var previousValue = _project;
					_project = value;
					FixupProject(previousValue);
					OnNavigationPropertyChanged("Project");
				}
			}
		}
		private Project _project;

		[DataMember]
		public TrackableCollection<Risk> Risks
		{
			get
			{
				if (_risks == null)
				{
					_risks = new TrackableCollection<Risk>();
					_risks.CollectionChanged += FixupRisks;
				}
				return _risks;
			}
			set
			{
				if (!ReferenceEquals(_risks, value))
				{
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
					}
					if (_risks != null)
					{
						_risks.CollectionChanged -= FixupRisks;
					}
					_risks = value;
					if (_risks != null)
					{
						_risks.CollectionChanged += FixupRisks;
					}
					OnNavigationPropertyChanged("Risks");
				}
			}
		}
		private TrackableCollection<Risk> _risks;

		#endregion

		#region ChangeTracking

		protected virtual void OnPropertyChanged(String propertyName)
		{
			if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
			{
				ChangeTracker.State = ObjectState.Modified;
			}
			if (_propertyChanged != null)
			{
				_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected virtual void OnNavigationPropertyChanged(String propertyName)
		{
			if (_propertyChanged != null)
			{
				_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
		private event PropertyChangedEventHandler _propertyChanged;
		private ObjectChangeTracker _changeTracker;

		[DataMember]
		public ObjectChangeTracker ChangeTracker
		{
			get
			{
				if (_changeTracker == null)
				{
					_changeTracker = new ObjectChangeTracker();
					_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
				}
				return _changeTracker;
			}
			set
			{
				if (_changeTracker != null)
				{
					_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
				}
				_changeTracker = value;
				if (_changeTracker != null)
				{
					_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
				}
			}
		}

		private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
		{
			if (e.NewState == ObjectState.Deleted)
			{
				ClearNavigationProperties();
			}
		}

		protected bool IsDeserializing { get; private set; }

		[OnDeserializing]
		public void OnDeserializingMethod(StreamingContext context)
		{
			IsDeserializing = true;
		}

		[OnDeserialized]
		public void OnDeserializedMethod(StreamingContext context)
		{
			IsDeserializing = false;
			ChangeTracker.ChangeTrackingEnabled = true;
		}

		protected virtual void ClearNavigationProperties()
		{
			Requirements.Clear();
			Project = null;
			Risks.Clear();
		}

		#endregion

		#region Association Fixup

		private void FixupProject(Project previousValue)
		{
			if (IsDeserializing)
			{
				return;
			}

			if (previousValue != null && previousValue.Components.Contains(this))
			{
				previousValue.Components.Remove(this);
			}

			if (Project != null)
			{
				if (!Project.Components.Contains(this))
				{
					Project.Components.Add(this);
				}

				ProjectId = Project.ProjectId;
			}
			if (ChangeTracker.ChangeTrackingEnabled)
			{
				if (ChangeTracker.OriginalValues.ContainsKey("Project")
					&& (ChangeTracker.OriginalValues["Project"] == Project))
				{
					ChangeTracker.OriginalValues.Remove("Project");
				}
				else
				{
					ChangeTracker.RecordOriginalValue("Project", previousValue);
				}
				if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
				{
					Project.StartTracking();
				}
			}
		}

		private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
		{
			if (IsDeserializing)
			{
				return;
			}

			if (e.NewItems != null)
			{
				foreach (Requirement item in e.NewItems)
				{
					item.Component = this;
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						if (!item.ChangeTracker.ChangeTrackingEnabled)
						{
							item.StartTracking();
						}
						ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
					}
				}
			}

			if (e.OldItems != null)
			{
				foreach (Requirement item in e.OldItems)
				{
					if (ReferenceEquals(item.Component, this))
					{
						item.Component = null;
					}
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
					}
				}
			}
		}

		private void FixupRisks(object sender, NotifyCollectionChangedEventArgs e)
		{
			if (IsDeserializing)
			{
				return;
			}

			if (e.NewItems != null)
			{
				foreach (Risk item in e.NewItems)
				{
					item.Component = this;
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						if (!item.ChangeTracker.ChangeTrackingEnabled)
						{
							item.StartTracking();
						}
						ChangeTracker.RecordAdditionToCollectionProperties("Risks", item);
					}
				}
			}

			if (e.OldItems != null)
			{
				foreach (Risk item in e.OldItems)
				{
					if (ReferenceEquals(item.Component, this))
					{
						item.Component = null;
					}
					if (ChangeTracker.ChangeTrackingEnabled)
					{
						ChangeTracker.RecordRemovalFromCollectionProperties("Risks", item);
					}
				}
			}
		}

		#endregion

	}
}
