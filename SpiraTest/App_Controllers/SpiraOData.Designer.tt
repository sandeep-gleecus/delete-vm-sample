<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)\DataModel\$(OutDir)$(ConfigurationName)\DataModel.dll" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Query;

using Inflectra.SpiraTest.Business;
using Inflectra.SpiraTest.DataModel;
using Inflectra.SpiraTest.Common;

namespace Inflectra.SpiraTest.Web.App_Controllers
{
<#
	//Get the list of reportable entities
	Dictionary<string, string> reportableEntities = Inflectra.SpiraTest.DataModel.ReportableEntities.ReportableEntitiesManager.GetReportableEntities();
#>
	/// <summary>
	/// Autogenerated ODATA Get methods from the .EDMX XML
	/// </summary>
	public partial class SpiraODataController
	{
<#
	foreach (KeyValuePair<string, string> reportableEntity in reportableEntities)
	{
		//e.g. Key="SpiraTestEntities.R_RequirementIncidents", Value="Requirement Incidents"
		//Remove any spaces in the display name
		string entitySet = reportableEntity.Key.Replace("SpiraTestEntities.", ""); 
		string displayName = reportableEntity.Value.Replace(" ", "");
		//The entity type is the same as the set, minus the final 's'
		string entityType = entitySet;
		if (entityType.EndsWith("ies"))
		{
			entityType = entityType.Replace("ies", "y");
		}
		else if (entityType.EndsWith("Statuses"))
		{
			entityType = entityType.Replace("Statuses", "Status");
		}
		else if (entityType.EndsWith("Membership"))
		{
			//do nothing - no difference between singular and plural
		}
		else if (entityType.EndsWith("s"))
		{
			entityType = entityType.Substring(0, entityType.Length - 1);
		}
#>
		/// <summary>
		/// Queries the <#=displayName#> reportable entity
		/// </summary>
		/// <param name="queryOptions">The query options</param>
		/// <returns>Returns the list of <#=displayName#></returns>
		[EnableQuery(PageSize = 50)]
		public IQueryable<<#=entityType#>> Get<#=displayName#>()
		{
			const string METHOD_NAME = "Get<#=displayName#>";

			Logger.LogEnteringEvent(CLASS_NAME + METHOD_NAME);

			try
			{
				AuthenticateAndAuthorizeUser();

				ReportManager reportManager = new ReportManager();
				IQueryable<<#=entityType#>> queryable = reportManager.QueryReportableEntity<<#=entityType#>>("<#=entitySet#>");
				Logger.LogExitingEvent(CLASS_NAME + METHOD_NAME);
				return queryable;
			}
			catch (System.Exception exception)
			{
				Logger.LogErrorEvent(CLASS_NAME + METHOD_NAME, exception);
				Logger.Flush();
				throw;
			}
		}
<#
	}
#>
	}
}
