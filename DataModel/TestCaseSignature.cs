//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(User))]
    [KnownType(typeof(TestCaseApprovalWorkflow))]
    public partial class TestCaseSignature: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestCaseSignatureId
        {
            get { return _testCaseSignatureId; }
            set
            {
                if (_testCaseSignatureId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TestCaseSignatureId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _testCaseSignatureId = value;
                    OnPropertyChanged("TestCaseSignatureId");
                }
            }
        }
        private int _testCaseSignatureId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public int StatusId
        {
            get { return _statusId; }
            set
            {
                if (_statusId != value)
                {
                    ChangeTracker.RecordOriginalValue("StatusId", _statusId);
                    _statusId = value;
                    OnPropertyChanged("StatusId");
                }
            }
        }
        private int _statusId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateDate", _updateDate);
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public int TestCaseId
        {
            get { return _testCaseId; }
            set
            {
                if (_testCaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("TestCaseId", _testCaseId);
                    if (!IsDeserializing)
                    {
                        if (TestCase != null && TestCase.TestCaseId != value)
                        {
                            TestCase = null;
                        }
                    }
                    _testCaseId = value;
                    OnPropertyChanged("TestCaseId");
                }
            }
        }
        private int _testCaseId;
    
        [DataMember]
        public int ApprovalWorkflowId
        {
            get { return _approvalWorkflowId; }
            set
            {
                if (_approvalWorkflowId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalWorkflowId", _approvalWorkflowId);
                    if (!IsDeserializing)
                    {
                        if (TestCaseWorkflowApproval != null && TestCaseWorkflowApproval.TestCaseApprovalWorkflowId != value)
                        {
                            TestCaseWorkflowApproval = null;
                        }
                    }
                    _approvalWorkflowId = value;
                    OnPropertyChanged("ApprovalWorkflowId");
                }
            }
        }
        private int _approvalWorkflowId;
    
        [DataMember]
        public Nullable<System.DateTime> RequestedDate
        {
            get { return _requestedDate; }
            set
            {
                if (_requestedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("RequestedDate", _requestedDate);
                    _requestedDate = value;
                    OnPropertyChanged("RequestedDate");
                }
            }
        }
        private Nullable<System.DateTime> _requestedDate;
    
        [DataMember]
        public string Meaning
        {
            get { return _meaning; }
            set
            {
                if (_meaning != value)
                {
                    ChangeTracker.RecordOriginalValue("Meaning", _meaning);
                    _meaning = value;
                    OnPropertyChanged("Meaning");
                }
            }
        }
        private string _meaning;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TestCase TestCase
        {
            get { return _testCase; }
            set
            {
                if (!ReferenceEquals(_testCase, value))
                {
                    var previousValue = _testCase;
                    _testCase = value;
                    FixupTestCase(previousValue);
                    OnNavigationPropertyChanged("TestCase");
                }
            }
        }
        private TestCase _testCase;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TestCaseApprovalWorkflow TestCaseWorkflowApproval
        {
            get { return _testCaseWorkflowApproval; }
            set
            {
                if (!ReferenceEquals(_testCaseWorkflowApproval, value))
                {
                    var previousValue = _testCaseWorkflowApproval;
                    _testCaseWorkflowApproval = value;
                    FixupTestCaseWorkflowApproval(previousValue);
                    OnNavigationPropertyChanged("TestCaseWorkflowApproval");
                }
            }
        }
        private TestCaseApprovalWorkflow _testCaseWorkflowApproval;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TestCase = null;
            User = null;
            TestCaseWorkflowApproval = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTestCase(TestCase previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_TEST_CASE_SIGNATURE.Contains(this))
            {
                previousValue.TST_TEST_CASE_SIGNATURE.Remove(this);
            }
    
            if (TestCase != null)
            {
                if (!TestCase.TST_TEST_CASE_SIGNATURE.Contains(this))
                {
                    TestCase.TST_TEST_CASE_SIGNATURE.Add(this);
                }
    
                TestCaseId = TestCase.TestCaseId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCase")
                    && (ChangeTracker.OriginalValues["TestCase"] == TestCase))
                {
                    ChangeTracker.OriginalValues.Remove("TestCase");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCase", previousValue);
                }
                if (TestCase != null && !TestCase.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCase.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TST_TEST_CASE_SIGNATURE.Contains(this))
            {
                previousValue.TST_TEST_CASE_SIGNATURE.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.TST_TEST_CASE_SIGNATURE.Contains(this))
                {
                    User.TST_TEST_CASE_SIGNATURE.Add(this);
                }
    
                UserId = User.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupTestCaseWorkflowApproval(TestCaseApprovalWorkflow previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Signatures.Contains(this))
            {
                previousValue.Signatures.Remove(this);
            }
    
            if (TestCaseWorkflowApproval != null)
            {
                if (!TestCaseWorkflowApproval.Signatures.Contains(this))
                {
                    TestCaseWorkflowApproval.Signatures.Add(this);
                }
    
                ApprovalWorkflowId = TestCaseWorkflowApproval.TestCaseApprovalWorkflowId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TestCaseWorkflowApproval")
                    && (ChangeTracker.OriginalValues["TestCaseWorkflowApproval"] == TestCaseWorkflowApproval))
                {
                    ChangeTracker.OriginalValues.Remove("TestCaseWorkflowApproval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TestCaseWorkflowApproval", previousValue);
                }
                if (TestCaseWorkflowApproval != null && !TestCaseWorkflowApproval.ChangeTracker.ChangeTrackingEnabled)
                {
                    TestCaseWorkflowApproval.StartTracking();
                }
            }
        }

        #endregion

    }
}
