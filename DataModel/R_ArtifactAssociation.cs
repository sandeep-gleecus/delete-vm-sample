//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_ArtifactAssociation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ARTIFACT_LINK_ID
        {
            get { return _aRTIFACT_LINK_ID; }
            set
            {
                if (_aRTIFACT_LINK_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_LINK_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_LINK_ID = value;
                    OnPropertyChanged("ARTIFACT_LINK_ID");
                }
            }
        }
        private int _aRTIFACT_LINK_ID;
    
        [DataMember]
        public int ARTIFACT_LINK_TYPE_ID
        {
            get { return _aRTIFACT_LINK_TYPE_ID; }
            set
            {
                if (_aRTIFACT_LINK_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_LINK_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_LINK_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_LINK_TYPE_ID");
                }
            }
        }
        private int _aRTIFACT_LINK_TYPE_ID;
    
        [DataMember]
        public int SOURCE_ARTIFACT_ID
        {
            get { return _sOURCE_ARTIFACT_ID; }
            set
            {
                if (_sOURCE_ARTIFACT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SOURCE_ARTIFACT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sOURCE_ARTIFACT_ID = value;
                    OnPropertyChanged("SOURCE_ARTIFACT_ID");
                }
            }
        }
        private int _sOURCE_ARTIFACT_ID;
    
        [DataMember]
        public int SOURCE_ARTIFACT_TYPE_ID
        {
            get { return _sOURCE_ARTIFACT_TYPE_ID; }
            set
            {
                if (_sOURCE_ARTIFACT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SOURCE_ARTIFACT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sOURCE_ARTIFACT_TYPE_ID = value;
                    OnPropertyChanged("SOURCE_ARTIFACT_TYPE_ID");
                }
            }
        }
        private int _sOURCE_ARTIFACT_TYPE_ID;
    
        [DataMember]
        public int DEST_ARTIFACT_ID
        {
            get { return _dEST_ARTIFACT_ID; }
            set
            {
                if (_dEST_ARTIFACT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DEST_ARTIFACT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dEST_ARTIFACT_ID = value;
                    OnPropertyChanged("DEST_ARTIFACT_ID");
                }
            }
        }
        private int _dEST_ARTIFACT_ID;
    
        [DataMember]
        public int DEST_ARTIFACT_TYPE_ID
        {
            get { return _dEST_ARTIFACT_TYPE_ID; }
            set
            {
                if (_dEST_ARTIFACT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DEST_ARTIFACT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dEST_ARTIFACT_TYPE_ID = value;
                    OnPropertyChanged("DEST_ARTIFACT_TYPE_ID");
                }
            }
        }
        private int _dEST_ARTIFACT_TYPE_ID;
    
        [DataMember]
        public int CREATOR_ID
        {
            get { return _cREATOR_ID; }
            set
            {
                if (_cREATOR_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATOR_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATOR_ID = value;
                    OnPropertyChanged("CREATOR_ID");
                }
            }
        }
        private int _cREATOR_ID;
    
        [DataMember]
        public System.DateTime CREATION_DATE
        {
            get { return _cREATION_DATE; }
            set
            {
                if (_cREATION_DATE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CREATION_DATE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cREATION_DATE = value;
                    OnPropertyChanged("CREATION_DATE");
                }
            }
        }
        private System.DateTime _cREATION_DATE;
    
        [DataMember]
        public string COMMENT
        {
            get { return _cOMMENT; }
            set
            {
                if (_cOMMENT != value)
                {
                    ChangeTracker.RecordOriginalValue("COMMENT", _cOMMENT);
                    _cOMMENT = value;
                    OnPropertyChanged("COMMENT");
                }
            }
        }
        private string _cOMMENT;
    
        [DataMember]
        public string SOURCE_ARTIFACT_TYPE_NAME
        {
            get { return _sOURCE_ARTIFACT_TYPE_NAME; }
            set
            {
                if (_sOURCE_ARTIFACT_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SOURCE_ARTIFACT_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sOURCE_ARTIFACT_TYPE_NAME = value;
                    OnPropertyChanged("SOURCE_ARTIFACT_TYPE_NAME");
                }
            }
        }
        private string _sOURCE_ARTIFACT_TYPE_NAME;
    
        [DataMember]
        public string DEST_ARTIFACT_TYPE_NAME
        {
            get { return _dEST_ARTIFACT_TYPE_NAME; }
            set
            {
                if (_dEST_ARTIFACT_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DEST_ARTIFACT_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dEST_ARTIFACT_TYPE_NAME = value;
                    OnPropertyChanged("DEST_ARTIFACT_TYPE_NAME");
                }
            }
        }
        private string _dEST_ARTIFACT_TYPE_NAME;
    
        [DataMember]
        public string CREATOR_NAME
        {
            get { return _cREATOR_NAME; }
            set
            {
                if (_cREATOR_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("CREATOR_NAME", _cREATOR_NAME);
                    _cREATOR_NAME = value;
                    OnPropertyChanged("CREATOR_NAME");
                }
            }
        }
        private string _cREATOR_NAME;
    
        [DataMember]
        public string ARTIFACT_LINK_TYPE_NAME
        {
            get { return _aRTIFACT_LINK_TYPE_NAME; }
            set
            {
                if (_aRTIFACT_LINK_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_LINK_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_LINK_TYPE_NAME = value;
                    OnPropertyChanged("ARTIFACT_LINK_TYPE_NAME");
                }
            }
        }
        private string _aRTIFACT_LINK_TYPE_NAME;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
