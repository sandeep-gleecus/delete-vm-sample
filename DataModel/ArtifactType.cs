//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactCustomProperty))]
    [KnownType(typeof(CustomProperty))]
    [KnownType(typeof(ArtifactField))]
    [KnownType(typeof(ReportCategory))]
    [KnownType(typeof(ReportSection))]
    [KnownType(typeof(ReportElement))]
    [KnownType(typeof(SavedFilter))]
    [KnownType(typeof(ArtifactSourceCodeFile))]
    [KnownType(typeof(ArtifactSourceCodeRevision))]
    [KnownType(typeof(ArtifactLink))]
    [KnownType(typeof(ArtifactAttachment))]
    [KnownType(typeof(ProjectRolePermission))]
    [KnownType(typeof(HistoryChangeSet))]
    [KnownType(typeof(DataSyncArtifactMapping))]
    [KnownType(typeof(DashboardCustomPermission))]
    [KnownType(typeof(Graph))]
    [KnownType(typeof(ProjectArtifactSharing))]
    [KnownType(typeof(NotificationUserSubscription))]
    [KnownType(typeof(ArtifactMessage))]
    [KnownType(typeof(NotificationArtifactTemplate))]
    [KnownType(typeof(NotificationEvent))]
    [KnownType(typeof(GlobalArtifactCustomProperty))]
    [KnownType(typeof(GlobalCustomProperty))]
    [KnownType(typeof(HistoryAssociation))]
    [KnownType(typeof(HistoryPosition))]
    [KnownType(typeof(TimecardEntry))]
    [KnownType(typeof(ProjectTemplateArtifactDefault))]
    [KnownType(typeof(ArtifactTag))]
    [KnownType(typeof(GlobalTag))]
    [KnownType(typeof(HistoryDiscussion))]
    [KnownType(typeof(MultiApprover))]
    [KnownType(typeof(MultiApproverExecuted))]
    [KnownType(typeof(MultiApproverType))]
    [KnownType(typeof(SourceCodeCommitArtifact))]
    [KnownType(typeof(UserRecentArtifact))]
    [KnownType(typeof(TST_ARTIFACT_SIGNATURE))]
    public partial class ArtifactType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Prefix
        {
            get { return _prefix; }
            set
            {
                if (_prefix != value)
                {
                    ChangeTracker.RecordOriginalValue("Prefix", _prefix);
                    _prefix = value;
                    OnPropertyChanged("Prefix");
                }
            }
        }
        private string _prefix;
    
        [DataMember]
        public bool IsNotify
        {
            get { return _isNotify; }
            set
            {
                if (_isNotify != value)
                {
                    ChangeTracker.RecordOriginalValue("IsNotify", _isNotify);
                    _isNotify = value;
                    OnPropertyChanged("IsNotify");
                }
            }
        }
        private bool _isNotify;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsDataSync
        {
            get { return _isDataSync; }
            set
            {
                if (_isDataSync != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDataSync", _isDataSync);
                    _isDataSync = value;
                    OnPropertyChanged("IsDataSync");
                }
            }
        }
        private bool _isDataSync;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public bool IsCustomProperties
        {
            get { return _isCustomProperties; }
            set
            {
                if (_isCustomProperties != value)
                {
                    ChangeTracker.RecordOriginalValue("IsCustomProperties", _isCustomProperties);
                    _isCustomProperties = value;
                    OnPropertyChanged("IsCustomProperties");
                }
            }
        }
        private bool _isCustomProperties;
    
        [DataMember]
        public bool IsGlobalItem
        {
            get { return _isGlobalItem; }
            set
            {
                if (_isGlobalItem != value)
                {
                    ChangeTracker.RecordOriginalValue("IsGlobalItem", _isGlobalItem);
                    _isGlobalItem = value;
                    OnPropertyChanged("IsGlobalItem");
                }
            }
        }
        private bool _isGlobalItem;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ArtifactCustomProperty> ArtifactCustomProperties
        {
            get
            {
                if (_artifactCustomProperties == null)
                {
                    _artifactCustomProperties = new TrackableCollection<ArtifactCustomProperty>();
                    _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                }
                return _artifactCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_artifactCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged -= FixupArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ArtifactCustomProperty item in _artifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactCustomProperties = value;
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ArtifactCustomProperty item in _artifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactCustomProperties");
                }
            }
        }
        private TrackableCollection<ArtifactCustomProperty> _artifactCustomProperties;
    
        [DataMember]
        public TrackableCollection<CustomProperty> CustomProperties
        {
            get
            {
                if (_customProperties == null)
                {
                    _customProperties = new TrackableCollection<CustomProperty>();
                    _customProperties.CollectionChanged += FixupCustomProperties;
                }
                return _customProperties;
            }
            set
            {
                if (!ReferenceEquals(_customProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged -= FixupCustomProperties;
                    }
                    _customProperties = value;
                    if (_customProperties != null)
                    {
                        _customProperties.CollectionChanged += FixupCustomProperties;
                    }
                    OnNavigationPropertyChanged("CustomProperties");
                }
            }
        }
        private TrackableCollection<CustomProperty> _customProperties;
    
        [DataMember]
        public TrackableCollection<ArtifactField> Fields
        {
            get
            {
                if (_fields == null)
                {
                    _fields = new TrackableCollection<ArtifactField>();
                    _fields.CollectionChanged += FixupFields;
                }
                return _fields;
            }
            set
            {
                if (!ReferenceEquals(_fields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fields != null)
                    {
                        _fields.CollectionChanged -= FixupFields;
                    }
                    _fields = value;
                    if (_fields != null)
                    {
                        _fields.CollectionChanged += FixupFields;
                    }
                    OnNavigationPropertyChanged("Fields");
                }
            }
        }
        private TrackableCollection<ArtifactField> _fields;
    
        [DataMember]
        public TrackableCollection<ReportCategory> ReportCategories
        {
            get
            {
                if (_reportCategories == null)
                {
                    _reportCategories = new TrackableCollection<ReportCategory>();
                    _reportCategories.CollectionChanged += FixupReportCategories;
                }
                return _reportCategories;
            }
            set
            {
                if (!ReferenceEquals(_reportCategories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reportCategories != null)
                    {
                        _reportCategories.CollectionChanged -= FixupReportCategories;
                    }
                    _reportCategories = value;
                    if (_reportCategories != null)
                    {
                        _reportCategories.CollectionChanged += FixupReportCategories;
                    }
                    OnNavigationPropertyChanged("ReportCategories");
                }
            }
        }
        private TrackableCollection<ReportCategory> _reportCategories;
    
        [DataMember]
        public TrackableCollection<ReportSection> ReportSections
        {
            get
            {
                if (_reportSections == null)
                {
                    _reportSections = new TrackableCollection<ReportSection>();
                    _reportSections.CollectionChanged += FixupReportSections;
                }
                return _reportSections;
            }
            set
            {
                if (!ReferenceEquals(_reportSections, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reportSections != null)
                    {
                        _reportSections.CollectionChanged -= FixupReportSections;
                    }
                    _reportSections = value;
                    if (_reportSections != null)
                    {
                        _reportSections.CollectionChanged += FixupReportSections;
                    }
                    OnNavigationPropertyChanged("ReportSections");
                }
            }
        }
        private TrackableCollection<ReportSection> _reportSections;
    
        [DataMember]
        public TrackableCollection<ReportElement> ReportElements
        {
            get
            {
                if (_reportElements == null)
                {
                    _reportElements = new TrackableCollection<ReportElement>();
                    _reportElements.CollectionChanged += FixupReportElements;
                }
                return _reportElements;
            }
            set
            {
                if (!ReferenceEquals(_reportElements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reportElements != null)
                    {
                        _reportElements.CollectionChanged -= FixupReportElements;
                    }
                    _reportElements = value;
                    if (_reportElements != null)
                    {
                        _reportElements.CollectionChanged += FixupReportElements;
                    }
                    OnNavigationPropertyChanged("ReportElements");
                }
            }
        }
        private TrackableCollection<ReportElement> _reportElements;
    
        [DataMember]
        public TrackableCollection<SavedFilter> SavedFilters
        {
            get
            {
                if (_savedFilters == null)
                {
                    _savedFilters = new TrackableCollection<SavedFilter>();
                    _savedFilters.CollectionChanged += FixupSavedFilters;
                }
                return _savedFilters;
            }
            set
            {
                if (!ReferenceEquals(_savedFilters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged -= FixupSavedFilters;
                    }
                    _savedFilters = value;
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged += FixupSavedFilters;
                    }
                    OnNavigationPropertyChanged("SavedFilters");
                }
            }
        }
        private TrackableCollection<SavedFilter> _savedFilters;
    
        [DataMember]
        public TrackableCollection<ArtifactSourceCodeFile> SourceCodeFiles
        {
            get
            {
                if (_sourceCodeFiles == null)
                {
                    _sourceCodeFiles = new TrackableCollection<ArtifactSourceCodeFile>();
                    _sourceCodeFiles.CollectionChanged += FixupSourceCodeFiles;
                }
                return _sourceCodeFiles;
            }
            set
            {
                if (!ReferenceEquals(_sourceCodeFiles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sourceCodeFiles != null)
                    {
                        _sourceCodeFiles.CollectionChanged -= FixupSourceCodeFiles;
                    }
                    _sourceCodeFiles = value;
                    if (_sourceCodeFiles != null)
                    {
                        _sourceCodeFiles.CollectionChanged += FixupSourceCodeFiles;
                    }
                    OnNavigationPropertyChanged("SourceCodeFiles");
                }
            }
        }
        private TrackableCollection<ArtifactSourceCodeFile> _sourceCodeFiles;
    
        [DataMember]
        public TrackableCollection<ArtifactSourceCodeRevision> SourceCodeRevisions
        {
            get
            {
                if (_sourceCodeRevisions == null)
                {
                    _sourceCodeRevisions = new TrackableCollection<ArtifactSourceCodeRevision>();
                    _sourceCodeRevisions.CollectionChanged += FixupSourceCodeRevisions;
                }
                return _sourceCodeRevisions;
            }
            set
            {
                if (!ReferenceEquals(_sourceCodeRevisions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sourceCodeRevisions != null)
                    {
                        _sourceCodeRevisions.CollectionChanged -= FixupSourceCodeRevisions;
                    }
                    _sourceCodeRevisions = value;
                    if (_sourceCodeRevisions != null)
                    {
                        _sourceCodeRevisions.CollectionChanged += FixupSourceCodeRevisions;
                    }
                    OnNavigationPropertyChanged("SourceCodeRevisions");
                }
            }
        }
        private TrackableCollection<ArtifactSourceCodeRevision> _sourceCodeRevisions;
    
        [DataMember]
        public TrackableCollection<ArtifactLink> DestArtifactLinks
        {
            get
            {
                if (_destArtifactLinks == null)
                {
                    _destArtifactLinks = new TrackableCollection<ArtifactLink>();
                    _destArtifactLinks.CollectionChanged += FixupDestArtifactLinks;
                }
                return _destArtifactLinks;
            }
            set
            {
                if (!ReferenceEquals(_destArtifactLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_destArtifactLinks != null)
                    {
                        _destArtifactLinks.CollectionChanged -= FixupDestArtifactLinks;
                    }
                    _destArtifactLinks = value;
                    if (_destArtifactLinks != null)
                    {
                        _destArtifactLinks.CollectionChanged += FixupDestArtifactLinks;
                    }
                    OnNavigationPropertyChanged("DestArtifactLinks");
                }
            }
        }
        private TrackableCollection<ArtifactLink> _destArtifactLinks;
    
        [DataMember]
        public TrackableCollection<ArtifactLink> SourceArtifactLinks
        {
            get
            {
                if (_sourceArtifactLinks == null)
                {
                    _sourceArtifactLinks = new TrackableCollection<ArtifactLink>();
                    _sourceArtifactLinks.CollectionChanged += FixupSourceArtifactLinks;
                }
                return _sourceArtifactLinks;
            }
            set
            {
                if (!ReferenceEquals(_sourceArtifactLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sourceArtifactLinks != null)
                    {
                        _sourceArtifactLinks.CollectionChanged -= FixupSourceArtifactLinks;
                    }
                    _sourceArtifactLinks = value;
                    if (_sourceArtifactLinks != null)
                    {
                        _sourceArtifactLinks.CollectionChanged += FixupSourceArtifactLinks;
                    }
                    OnNavigationPropertyChanged("SourceArtifactLinks");
                }
            }
        }
        private TrackableCollection<ArtifactLink> _sourceArtifactLinks;
    
        [DataMember]
        public TrackableCollection<ArtifactAttachment> Attachments
        {
            get
            {
                if (_attachments == null)
                {
                    _attachments = new TrackableCollection<ArtifactAttachment>();
                    _attachments.CollectionChanged += FixupAttachments;
                }
                return _attachments;
            }
            set
            {
                if (!ReferenceEquals(_attachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged -= FixupAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ArtifactAttachment item in _attachments)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _attachments = value;
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged += FixupAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ArtifactAttachment item in _attachments)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Attachments");
                }
            }
        }
        private TrackableCollection<ArtifactAttachment> _attachments;
    
        [DataMember]
        public TrackableCollection<ProjectRolePermission> ProjectRolePermissions
        {
            get
            {
                if (_projectRolePermissions == null)
                {
                    _projectRolePermissions = new TrackableCollection<ProjectRolePermission>();
                    _projectRolePermissions.CollectionChanged += FixupProjectRolePermissions;
                }
                return _projectRolePermissions;
            }
            set
            {
                if (!ReferenceEquals(_projectRolePermissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectRolePermissions != null)
                    {
                        _projectRolePermissions.CollectionChanged -= FixupProjectRolePermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectRolePermission item in _projectRolePermissions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectRolePermissions = value;
                    if (_projectRolePermissions != null)
                    {
                        _projectRolePermissions.CollectionChanged += FixupProjectRolePermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectRolePermission item in _projectRolePermissions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectRolePermissions");
                }
            }
        }
        private TrackableCollection<ProjectRolePermission> _projectRolePermissions;
    
        [DataMember]
        public TrackableCollection<HistoryChangeSet> HistoryChangesets
        {
            get
            {
                if (_historyChangesets == null)
                {
                    _historyChangesets = new TrackableCollection<HistoryChangeSet>();
                    _historyChangesets.CollectionChanged += FixupHistoryChangesets;
                }
                return _historyChangesets;
            }
            set
            {
                if (!ReferenceEquals(_historyChangesets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyChangesets != null)
                    {
                        _historyChangesets.CollectionChanged -= FixupHistoryChangesets;
                    }
                    _historyChangesets = value;
                    if (_historyChangesets != null)
                    {
                        _historyChangesets.CollectionChanged += FixupHistoryChangesets;
                    }
                    OnNavigationPropertyChanged("HistoryChangesets");
                }
            }
        }
        private TrackableCollection<HistoryChangeSet> _historyChangesets;
    
        [DataMember]
        public TrackableCollection<DataSyncArtifactMapping> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncArtifactMapping>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncArtifactMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncArtifactMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncArtifactMapping> _dataSyncMappings;
    
        [DataMember]
        public TrackableCollection<DashboardCustomPermission> DashboardPermissions
        {
            get
            {
                if (_dashboardPermissions == null)
                {
                    _dashboardPermissions = new TrackableCollection<DashboardCustomPermission>();
                    _dashboardPermissions.CollectionChanged += FixupDashboardPermissions;
                }
                return _dashboardPermissions;
            }
            set
            {
                if (!ReferenceEquals(_dashboardPermissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dashboardPermissions != null)
                    {
                        _dashboardPermissions.CollectionChanged -= FixupDashboardPermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DashboardCustomPermission item in _dashboardPermissions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dashboardPermissions = value;
                    if (_dashboardPermissions != null)
                    {
                        _dashboardPermissions.CollectionChanged += FixupDashboardPermissions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DashboardCustomPermission item in _dashboardPermissions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DashboardPermissions");
                }
            }
        }
        private TrackableCollection<DashboardCustomPermission> _dashboardPermissions;
    
        [DataMember]
        public TrackableCollection<Graph> Graphs
        {
            get
            {
                if (_graphs == null)
                {
                    _graphs = new TrackableCollection<Graph>();
                    _graphs.CollectionChanged += FixupGraphs;
                }
                return _graphs;
            }
            set
            {
                if (!ReferenceEquals(_graphs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_graphs != null)
                    {
                        _graphs.CollectionChanged -= FixupGraphs;
                    }
                    _graphs = value;
                    if (_graphs != null)
                    {
                        _graphs.CollectionChanged += FixupGraphs;
                    }
                    OnNavigationPropertyChanged("Graphs");
                }
            }
        }
        private TrackableCollection<Graph> _graphs;
    
        [DataMember]
        public TrackableCollection<ProjectArtifactSharing> ProjectSharings
        {
            get
            {
                if (_projectSharings == null)
                {
                    _projectSharings = new TrackableCollection<ProjectArtifactSharing>();
                    _projectSharings.CollectionChanged += FixupProjectSharings;
                }
                return _projectSharings;
            }
            set
            {
                if (!ReferenceEquals(_projectSharings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectSharings != null)
                    {
                        _projectSharings.CollectionChanged -= FixupProjectSharings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectArtifactSharing item in _projectSharings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectSharings = value;
                    if (_projectSharings != null)
                    {
                        _projectSharings.CollectionChanged += FixupProjectSharings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectArtifactSharing item in _projectSharings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectSharings");
                }
            }
        }
        private TrackableCollection<ProjectArtifactSharing> _projectSharings;
    
        [DataMember]
        public TrackableCollection<NotificationUserSubscription> UserSubscriptions
        {
            get
            {
                if (_userSubscriptions == null)
                {
                    _userSubscriptions = new TrackableCollection<NotificationUserSubscription>();
                    _userSubscriptions.CollectionChanged += FixupUserSubscriptions;
                }
                return _userSubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_userSubscriptions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userSubscriptions != null)
                    {
                        _userSubscriptions.CollectionChanged -= FixupUserSubscriptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (NotificationUserSubscription item in _userSubscriptions)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userSubscriptions = value;
                    if (_userSubscriptions != null)
                    {
                        _userSubscriptions.CollectionChanged += FixupUserSubscriptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (NotificationUserSubscription item in _userSubscriptions)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserSubscriptions");
                }
            }
        }
        private TrackableCollection<NotificationUserSubscription> _userSubscriptions;
    
        [DataMember]
        public TrackableCollection<ArtifactMessage> Messages
        {
            get
            {
                if (_messages == null)
                {
                    _messages = new TrackableCollection<ArtifactMessage>();
                    _messages.CollectionChanged += FixupMessages;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_messages != null)
                    {
                        _messages.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    if (_messages != null)
                    {
                        _messages.CollectionChanged += FixupMessages;
                    }
                    OnNavigationPropertyChanged("Messages");
                }
            }
        }
        private TrackableCollection<ArtifactMessage> _messages;
    
        [DataMember]
        public TrackableCollection<NotificationArtifactTemplate> NotificationTemplate
        {
            get
            {
                if (_notificationTemplate == null)
                {
                    _notificationTemplate = new TrackableCollection<NotificationArtifactTemplate>();
                    _notificationTemplate.CollectionChanged += FixupNotificationTemplate;
                }
                return _notificationTemplate;
            }
            set
            {
                if (!ReferenceEquals(_notificationTemplate, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationTemplate != null)
                    {
                        _notificationTemplate.CollectionChanged -= FixupNotificationTemplate;
                    }
                    _notificationTemplate = value;
                    if (_notificationTemplate != null)
                    {
                        _notificationTemplate.CollectionChanged += FixupNotificationTemplate;
                    }
                    OnNavigationPropertyChanged("NotificationTemplate");
                }
            }
        }
        private TrackableCollection<NotificationArtifactTemplate> _notificationTemplate;
    
        [DataMember]
        public TrackableCollection<NotificationEvent> NotificationEvents
        {
            get
            {
                if (_notificationEvents == null)
                {
                    _notificationEvents = new TrackableCollection<NotificationEvent>();
                    _notificationEvents.CollectionChanged += FixupNotificationEvents;
                }
                return _notificationEvents;
            }
            set
            {
                if (!ReferenceEquals(_notificationEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged -= FixupNotificationEvents;
                    }
                    _notificationEvents = value;
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged += FixupNotificationEvents;
                    }
                    OnNavigationPropertyChanged("NotificationEvents");
                }
            }
        }
        private TrackableCollection<NotificationEvent> _notificationEvents;
    
        [DataMember]
        public TrackableCollection<GlobalArtifactCustomProperty> GlobalArtifactCustomProperties
        {
            get
            {
                if (_globalArtifactCustomProperties == null)
                {
                    _globalArtifactCustomProperties = new TrackableCollection<GlobalArtifactCustomProperty>();
                    _globalArtifactCustomProperties.CollectionChanged += FixupGlobalArtifactCustomProperties;
                }
                return _globalArtifactCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_globalArtifactCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_globalArtifactCustomProperties != null)
                    {
                        _globalArtifactCustomProperties.CollectionChanged -= FixupGlobalArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (GlobalArtifactCustomProperty item in _globalArtifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _globalArtifactCustomProperties = value;
                    if (_globalArtifactCustomProperties != null)
                    {
                        _globalArtifactCustomProperties.CollectionChanged += FixupGlobalArtifactCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (GlobalArtifactCustomProperty item in _globalArtifactCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("GlobalArtifactCustomProperties");
                }
            }
        }
        private TrackableCollection<GlobalArtifactCustomProperty> _globalArtifactCustomProperties;
    
        [DataMember]
        public TrackableCollection<GlobalCustomProperty> GlobalCustomProperties
        {
            get
            {
                if (_globalCustomProperties == null)
                {
                    _globalCustomProperties = new TrackableCollection<GlobalCustomProperty>();
                    _globalCustomProperties.CollectionChanged += FixupGlobalCustomProperties;
                }
                return _globalCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_globalCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_globalCustomProperties != null)
                    {
                        _globalCustomProperties.CollectionChanged -= FixupGlobalCustomProperties;
                    }
                    _globalCustomProperties = value;
                    if (_globalCustomProperties != null)
                    {
                        _globalCustomProperties.CollectionChanged += FixupGlobalCustomProperties;
                    }
                    OnNavigationPropertyChanged("GlobalCustomProperties");
                }
            }
        }
        private TrackableCollection<GlobalCustomProperty> _globalCustomProperties;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> AssociationHistoryEntriesDest
        {
            get
            {
                if (_associationHistoryEntriesDest == null)
                {
                    _associationHistoryEntriesDest = new TrackableCollection<HistoryAssociation>();
                    _associationHistoryEntriesDest.CollectionChanged += FixupAssociationHistoryEntriesDest;
                }
                return _associationHistoryEntriesDest;
            }
            set
            {
                if (!ReferenceEquals(_associationHistoryEntriesDest, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_associationHistoryEntriesDest != null)
                    {
                        _associationHistoryEntriesDest.CollectionChanged -= FixupAssociationHistoryEntriesDest;
                    }
                    _associationHistoryEntriesDest = value;
                    if (_associationHistoryEntriesDest != null)
                    {
                        _associationHistoryEntriesDest.CollectionChanged += FixupAssociationHistoryEntriesDest;
                    }
                    OnNavigationPropertyChanged("AssociationHistoryEntriesDest");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _associationHistoryEntriesDest;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> AssociationHistoryEntriesSource
        {
            get
            {
                if (_associationHistoryEntriesSource == null)
                {
                    _associationHistoryEntriesSource = new TrackableCollection<HistoryAssociation>();
                    _associationHistoryEntriesSource.CollectionChanged += FixupAssociationHistoryEntriesSource;
                }
                return _associationHistoryEntriesSource;
            }
            set
            {
                if (!ReferenceEquals(_associationHistoryEntriesSource, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_associationHistoryEntriesSource != null)
                    {
                        _associationHistoryEntriesSource.CollectionChanged -= FixupAssociationHistoryEntriesSource;
                    }
                    _associationHistoryEntriesSource = value;
                    if (_associationHistoryEntriesSource != null)
                    {
                        _associationHistoryEntriesSource.CollectionChanged += FixupAssociationHistoryEntriesSource;
                    }
                    OnNavigationPropertyChanged("AssociationHistoryEntriesSource");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _associationHistoryEntriesSource;
    
        [DataMember]
        public TrackableCollection<HistoryPosition> PositionHistoryEntriesChild
        {
            get
            {
                if (_positionHistoryEntriesChild == null)
                {
                    _positionHistoryEntriesChild = new TrackableCollection<HistoryPosition>();
                    _positionHistoryEntriesChild.CollectionChanged += FixupPositionHistoryEntriesChild;
                }
                return _positionHistoryEntriesChild;
            }
            set
            {
                if (!ReferenceEquals(_positionHistoryEntriesChild, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_positionHistoryEntriesChild != null)
                    {
                        _positionHistoryEntriesChild.CollectionChanged -= FixupPositionHistoryEntriesChild;
                    }
                    _positionHistoryEntriesChild = value;
                    if (_positionHistoryEntriesChild != null)
                    {
                        _positionHistoryEntriesChild.CollectionChanged += FixupPositionHistoryEntriesChild;
                    }
                    OnNavigationPropertyChanged("PositionHistoryEntriesChild");
                }
            }
        }
        private TrackableCollection<HistoryPosition> _positionHistoryEntriesChild;
    
        [DataMember]
        public TrackableCollection<TimecardEntry> TimecardEntries
        {
            get
            {
                if (_timecardEntries == null)
                {
                    _timecardEntries = new TrackableCollection<TimecardEntry>();
                    _timecardEntries.CollectionChanged += FixupTimecardEntries;
                }
                return _timecardEntries;
            }
            set
            {
                if (!ReferenceEquals(_timecardEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged -= FixupTimecardEntries;
                    }
                    _timecardEntries = value;
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged += FixupTimecardEntries;
                    }
                    OnNavigationPropertyChanged("TimecardEntries");
                }
            }
        }
        private TrackableCollection<TimecardEntry> _timecardEntries;
    
        [DataMember]
        public TrackableCollection<ProjectTemplateArtifactDefault> ProjectTemplateDefaults
        {
            get
            {
                if (_projectTemplateDefaults == null)
                {
                    _projectTemplateDefaults = new TrackableCollection<ProjectTemplateArtifactDefault>();
                    _projectTemplateDefaults.CollectionChanged += FixupProjectTemplateDefaults;
                }
                return _projectTemplateDefaults;
            }
            set
            {
                if (!ReferenceEquals(_projectTemplateDefaults, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectTemplateDefaults != null)
                    {
                        _projectTemplateDefaults.CollectionChanged -= FixupProjectTemplateDefaults;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectTemplateArtifactDefault item in _projectTemplateDefaults)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectTemplateDefaults = value;
                    if (_projectTemplateDefaults != null)
                    {
                        _projectTemplateDefaults.CollectionChanged += FixupProjectTemplateDefaults;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectTemplateArtifactDefault item in _projectTemplateDefaults)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectTemplateDefaults");
                }
            }
        }
        private TrackableCollection<ProjectTemplateArtifactDefault> _projectTemplateDefaults;
    
        [DataMember]
        public TrackableCollection<ArtifactTag> ArtifactTags
        {
            get
            {
                if (_artifactTags == null)
                {
                    _artifactTags = new TrackableCollection<ArtifactTag>();
                    _artifactTags.CollectionChanged += FixupArtifactTags;
                }
                return _artifactTags;
            }
            set
            {
                if (!ReferenceEquals(_artifactTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactTags != null)
                    {
                        _artifactTags.CollectionChanged -= FixupArtifactTags;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ArtifactTag item in _artifactTags)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactTags = value;
                    if (_artifactTags != null)
                    {
                        _artifactTags.CollectionChanged += FixupArtifactTags;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ArtifactTag item in _artifactTags)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactTags");
                }
            }
        }
        private TrackableCollection<ArtifactTag> _artifactTags;
    
        [DataMember]
        public TrackableCollection<GlobalTag> GlobalTags
        {
            get
            {
                if (_globalTags == null)
                {
                    _globalTags = new TrackableCollection<GlobalTag>();
                    _globalTags.CollectionChanged += FixupGlobalTags;
                }
                return _globalTags;
            }
            set
            {
                if (!ReferenceEquals(_globalTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_globalTags != null)
                    {
                        _globalTags.CollectionChanged -= FixupGlobalTags;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (GlobalTag item in _globalTags)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _globalTags = value;
                    if (_globalTags != null)
                    {
                        _globalTags.CollectionChanged += FixupGlobalTags;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (GlobalTag item in _globalTags)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("GlobalTags");
                }
            }
        }
        private TrackableCollection<GlobalTag> _globalTags;
    
        [DataMember]
        public TrackableCollection<HistoryDiscussion> DiscussionHistory
        {
            get
            {
                if (_discussionHistory == null)
                {
                    _discussionHistory = new TrackableCollection<HistoryDiscussion>();
                    _discussionHistory.CollectionChanged += FixupDiscussionHistory;
                }
                return _discussionHistory;
            }
            set
            {
                if (!ReferenceEquals(_discussionHistory, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussionHistory != null)
                    {
                        _discussionHistory.CollectionChanged -= FixupDiscussionHistory;
                    }
                    _discussionHistory = value;
                    if (_discussionHistory != null)
                    {
                        _discussionHistory.CollectionChanged += FixupDiscussionHistory;
                    }
                    OnNavigationPropertyChanged("DiscussionHistory");
                }
            }
        }
        private TrackableCollection<HistoryDiscussion> _discussionHistory;
    
        [DataMember]
        public TrackableCollection<MultiApprover> MultiApprovers
        {
            get
            {
                if (_multiApprovers == null)
                {
                    _multiApprovers = new TrackableCollection<MultiApprover>();
                    _multiApprovers.CollectionChanged += FixupMultiApprovers;
                }
                return _multiApprovers;
            }
            set
            {
                if (!ReferenceEquals(_multiApprovers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_multiApprovers != null)
                    {
                        _multiApprovers.CollectionChanged -= FixupMultiApprovers;
                    }
                    _multiApprovers = value;
                    if (_multiApprovers != null)
                    {
                        _multiApprovers.CollectionChanged += FixupMultiApprovers;
                    }
                    OnNavigationPropertyChanged("MultiApprovers");
                }
            }
        }
        private TrackableCollection<MultiApprover> _multiApprovers;
    
        [DataMember]
        public TrackableCollection<MultiApproverExecuted> MultiApproverExecutedChanges
        {
            get
            {
                if (_multiApproverExecutedChanges == null)
                {
                    _multiApproverExecutedChanges = new TrackableCollection<MultiApproverExecuted>();
                    _multiApproverExecutedChanges.CollectionChanged += FixupMultiApproverExecutedChanges;
                }
                return _multiApproverExecutedChanges;
            }
            set
            {
                if (!ReferenceEquals(_multiApproverExecutedChanges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_multiApproverExecutedChanges != null)
                    {
                        _multiApproverExecutedChanges.CollectionChanged -= FixupMultiApproverExecutedChanges;
                    }
                    _multiApproverExecutedChanges = value;
                    if (_multiApproverExecutedChanges != null)
                    {
                        _multiApproverExecutedChanges.CollectionChanged += FixupMultiApproverExecutedChanges;
                    }
                    OnNavigationPropertyChanged("MultiApproverExecutedChanges");
                }
            }
        }
        private TrackableCollection<MultiApproverExecuted> _multiApproverExecutedChanges;
    
        [DataMember]
        public TrackableCollection<MultiApproverType> MultiApproverTypes
        {
            get
            {
                if (_multiApproverTypes == null)
                {
                    _multiApproverTypes = new TrackableCollection<MultiApproverType>();
                    _multiApproverTypes.CollectionChanged += FixupMultiApproverTypes;
                }
                return _multiApproverTypes;
            }
            set
            {
                if (!ReferenceEquals(_multiApproverTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_multiApproverTypes != null)
                    {
                        _multiApproverTypes.CollectionChanged -= FixupMultiApproverTypes;
                    }
                    _multiApproverTypes = value;
                    if (_multiApproverTypes != null)
                    {
                        _multiApproverTypes.CollectionChanged += FixupMultiApproverTypes;
                    }
                    OnNavigationPropertyChanged("MultiApproverTypes");
                }
            }
        }
        private TrackableCollection<MultiApproverType> _multiApproverTypes;
    
        [DataMember]
        public TrackableCollection<SourceCodeCommitArtifact> SourceCodeCommitArtifacts
        {
            get
            {
                if (_sourceCodeCommitArtifacts == null)
                {
                    _sourceCodeCommitArtifacts = new TrackableCollection<SourceCodeCommitArtifact>();
                    _sourceCodeCommitArtifacts.CollectionChanged += FixupSourceCodeCommitArtifacts;
                }
                return _sourceCodeCommitArtifacts;
            }
            set
            {
                if (!ReferenceEquals(_sourceCodeCommitArtifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sourceCodeCommitArtifacts != null)
                    {
                        _sourceCodeCommitArtifacts.CollectionChanged -= FixupSourceCodeCommitArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SourceCodeCommitArtifact item in _sourceCodeCommitArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _sourceCodeCommitArtifacts = value;
                    if (_sourceCodeCommitArtifacts != null)
                    {
                        _sourceCodeCommitArtifacts.CollectionChanged += FixupSourceCodeCommitArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SourceCodeCommitArtifact item in _sourceCodeCommitArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SourceCodeCommitArtifacts");
                }
            }
        }
        private TrackableCollection<SourceCodeCommitArtifact> _sourceCodeCommitArtifacts;
    
        [DataMember]
        public TrackableCollection<UserRecentArtifact> RecentArtifacts
        {
            get
            {
                if (_recentArtifacts == null)
                {
                    _recentArtifacts = new TrackableCollection<UserRecentArtifact>();
                    _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                }
                return _recentArtifacts;
            }
            set
            {
                if (!ReferenceEquals(_recentArtifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged -= FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recentArtifacts = value;
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecentArtifacts");
                }
            }
        }
        private TrackableCollection<UserRecentArtifact> _recentArtifacts;
    
        [DataMember]
        public TrackableCollection<TST_ARTIFACT_SIGNATURE> TST_ARTIFACT_SIGNATURE
        {
            get
            {
                if (_tST_ARTIFACT_SIGNATURE == null)
                {
                    _tST_ARTIFACT_SIGNATURE = new TrackableCollection<TST_ARTIFACT_SIGNATURE>();
                    _tST_ARTIFACT_SIGNATURE.CollectionChanged += FixupTST_ARTIFACT_SIGNATURE;
                }
                return _tST_ARTIFACT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_ARTIFACT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ARTIFACT_SIGNATURE != null)
                    {
                        _tST_ARTIFACT_SIGNATURE.CollectionChanged -= FixupTST_ARTIFACT_SIGNATURE;
                    }
                    _tST_ARTIFACT_SIGNATURE = value;
                    if (_tST_ARTIFACT_SIGNATURE != null)
                    {
                        _tST_ARTIFACT_SIGNATURE.CollectionChanged += FixupTST_ARTIFACT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_ARTIFACT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_ARTIFACT_SIGNATURE> _tST_ARTIFACT_SIGNATURE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactCustomProperties.Clear();
            CustomProperties.Clear();
            Fields.Clear();
            ReportCategories.Clear();
            ReportSections.Clear();
            ReportElements.Clear();
            SavedFilters.Clear();
            SourceCodeFiles.Clear();
            SourceCodeRevisions.Clear();
            DestArtifactLinks.Clear();
            SourceArtifactLinks.Clear();
            Attachments.Clear();
            ProjectRolePermissions.Clear();
            HistoryChangesets.Clear();
            DataSyncMappings.Clear();
            DashboardPermissions.Clear();
            Graphs.Clear();
            ProjectSharings.Clear();
            UserSubscriptions.Clear();
            Messages.Clear();
            NotificationTemplate.Clear();
            NotificationEvents.Clear();
            GlobalArtifactCustomProperties.Clear();
            GlobalCustomProperties.Clear();
            AssociationHistoryEntriesDest.Clear();
            AssociationHistoryEntriesSource.Clear();
            PositionHistoryEntriesChild.Clear();
            TimecardEntries.Clear();
            ProjectTemplateDefaults.Clear();
            ArtifactTags.Clear();
            GlobalTags.Clear();
            DiscussionHistory.Clear();
            MultiApprovers.Clear();
            MultiApproverExecutedChanges.Clear();
            MultiApproverTypes.Clear();
            SourceCodeCommitArtifacts.Clear();
            RecentArtifacts.Clear();
            TST_ARTIFACT_SIGNATURE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactCustomProperty item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomProperty item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomProperties", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomProperties", item);
                    }
                }
            }
        }
    
        private void FixupFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactField item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Fields", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactField item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Fields", item);
                    }
                }
            }
        }
    
        private void FixupReportCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportCategory item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReportCategories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReportCategories", item);
                    }
                }
            }
        }
    
        private void FixupReportSections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportSection item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReportSections", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportSection item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReportSections", item);
                    }
                }
            }
        }
    
        private void FixupReportElements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReportElement item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReportElements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportElement item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReportElements", item);
                    }
                }
            }
        }
    
        private void FixupSavedFilters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedFilter item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedFilters", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedFilter item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedFilters", item);
                    }
                }
            }
        }
    
        private void FixupSourceCodeFiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactSourceCodeFile item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SourceCodeFiles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactSourceCodeFile item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SourceCodeFiles", item);
                    }
                }
            }
        }
    
        private void FixupSourceCodeRevisions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactSourceCodeRevision item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SourceCodeRevisions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactSourceCodeRevision item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SourceCodeRevisions", item);
                    }
                }
            }
        }
    
        private void FixupDestArtifactLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactLink item in e.NewItems)
                {
                    item.DestArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DestArtifactLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.DestArtifactType, this))
                    {
                        item.DestArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DestArtifactLinks", item);
                    }
                }
            }
        }
    
        private void FixupSourceArtifactLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactLink item in e.NewItems)
                {
                    item.SourceArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SourceArtifactLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceArtifactType, this))
                    {
                        item.SourceArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SourceArtifactLinks", item);
                    }
                }
            }
        }
    
        private void FixupAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactAttachment item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Attachments", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Attachments", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjectRolePermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectRolePermission item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectRolePermissions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectRolePermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectRolePermissions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupHistoryChangesets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryChangeSet item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryChangesets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryChangeSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryChangesets", item);
                    }
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncArtifactMapping item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncArtifactMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDashboardPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DashboardCustomPermission item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DashboardPermissions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DashboardCustomPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DashboardPermissions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupGraphs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Graph item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Graphs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Graph item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Graphs", item);
                    }
                }
            }
        }
    
        private void FixupProjectSharings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectArtifactSharing item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectSharings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectArtifactSharing item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectSharings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupUserSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationUserSubscription item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserSubscriptions", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationUserSubscription item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserSubscriptions", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactMessage item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Messages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Messages", item);
                    }
                }
            }
        }
    
        private void FixupNotificationTemplate(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationArtifactTemplate item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationTemplate", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationArtifactTemplate item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationTemplate", item);
                    }
                }
            }
        }
    
        private void FixupNotificationEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEvent item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEvent item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationEvents", item);
                    }
                }
            }
        }
    
        private void FixupGlobalArtifactCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GlobalArtifactCustomProperty item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GlobalArtifactCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GlobalArtifactCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GlobalArtifactCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupGlobalCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GlobalCustomProperty item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GlobalCustomProperties", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GlobalCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GlobalCustomProperties", item);
                    }
                }
            }
        }
    
        private void FixupAssociationHistoryEntriesDest(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.DestArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssociationHistoryEntriesDest", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.DestArtifactType, this))
                    {
                        item.DestArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssociationHistoryEntriesDest", item);
                    }
                }
            }
        }
    
        private void FixupAssociationHistoryEntriesSource(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.SourceArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssociationHistoryEntriesSource", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceArtifactType, this))
                    {
                        item.SourceArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssociationHistoryEntriesSource", item);
                    }
                }
            }
        }
    
        private void FixupPositionHistoryEntriesChild(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryPosition item in e.NewItems)
                {
                    item.ChildArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PositionHistoryEntriesChild", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChildArtifactType, this))
                    {
                        item.ChildArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PositionHistoryEntriesChild", item);
                    }
                }
            }
        }
    
        private void FixupTimecardEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntry item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimecardEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimecardEntries", item);
                    }
                }
            }
        }
    
        private void FixupProjectTemplateDefaults(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectTemplateArtifactDefault item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectTemplateDefaults", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectTemplateArtifactDefault item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectTemplateDefaults", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactTag item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactTags", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactTags", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupGlobalTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GlobalTag item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GlobalTags", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GlobalTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GlobalTags", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDiscussionHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryDiscussion item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DiscussionHistory", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DiscussionHistory", item);
                    }
                }
            }
        }
    
        private void FixupMultiApprovers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MultiApprover item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MultiApprovers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MultiApprover item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MultiApprovers", item);
                    }
                }
            }
        }
    
        private void FixupMultiApproverExecutedChanges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MultiApproverExecuted item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MultiApproverExecutedChanges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MultiApproverExecuted item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MultiApproverExecutedChanges", item);
                    }
                }
            }
        }
    
        private void FixupMultiApproverTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MultiApproverType item in e.NewItems)
                {
                    item.ArtfiactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MultiApproverTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MultiApproverType item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtfiactType, this))
                    {
                        item.ArtfiactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MultiApproverTypes", item);
                    }
                }
            }
        }
    
        private void FixupSourceCodeCommitArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SourceCodeCommitArtifact item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SourceCodeCommitArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SourceCodeCommitArtifact item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SourceCodeCommitArtifacts", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRecentArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserRecentArtifact item in e.NewItems)
                {
                    item.ArtifactType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecentArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRecentArtifact item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactType, this))
                    {
                        item.ArtifactType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecentArtifacts", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_ARTIFACT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ARTIFACT_SIGNATURE item in e.NewItems)
                {
                    item.TST_ARTIFACT_TYPE = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ARTIFACT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ARTIFACT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_ARTIFACT_TYPE, this))
                    {
                        item.TST_ARTIFACT_TYPE = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ARTIFACT_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
