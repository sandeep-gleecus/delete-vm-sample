//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Build))]
    [KnownType(typeof(ProjectUser))]
    [KnownType(typeof(UserProfile))]
    [KnownType(typeof(ProjectCollectionEntry))]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(ArtifactCustomProperty))]
    [KnownType(typeof(UserArtifactField))]
    [KnownType(typeof(UserCustomProperty))]
    [KnownType(typeof(Placeholder))]
    [KnownType(typeof(SavedReport))]
    [KnownType(typeof(Requirement))]
    [KnownType(typeof(TaskFolder))]
    [KnownType(typeof(Component))]
    [KnownType(typeof(SavedFilter))]
    [KnownType(typeof(Task))]
    [KnownType(typeof(TaraVaultProject))]
    [KnownType(typeof(Incident))]
    [KnownType(typeof(VersionControlProject))]
    [KnownType(typeof(ArtifactAttachment))]
    [KnownType(typeof(ProjectAttachment))]
    [KnownType(typeof(ProjectAttachmentFolder))]
    [KnownType(typeof(HistoryChangeSet))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(AutomationHost))]
    [KnownType(typeof(TestCase))]
    [KnownType(typeof(TestCaseFolder))]
    [KnownType(typeof(TestRunsPending))]
    [KnownType(typeof(TestSet))]
    [KnownType(typeof(TestSetFolder))]
    [KnownType(typeof(DataSyncProject))]
    [KnownType(typeof(ProjectArtifactSharing))]
    [KnownType(typeof(ProjectSettingValue))]
    [KnownType(typeof(TestConfigurationSet))]
    [KnownType(typeof(ProjectTemplate))]
    [KnownType(typeof(ProjectBaseline))]
    [KnownType(typeof(ProjectGoal))]
    [KnownType(typeof(Risk))]
    [KnownType(typeof(TimecardEntry))]
    [KnownType(typeof(ArtifactTag))]
    [KnownType(typeof(ProjectTagFrequency))]
    [KnownType(typeof(TestCaseFolderHierarchy))]
    [KnownType(typeof(ProjectAttachmentFolderHierarchy))]
    [KnownType(typeof(TaskFolderHierarchy))]
    [KnownType(typeof(TestSetFolderHierarchy))]
    [KnownType(typeof(TestCaseParameterHierarchy))]
    [KnownType(typeof(TestCaseParameterHierarchyAlreadySet))]
    [KnownType(typeof(UserRecentArtifact))]
    [KnownType(typeof(UserRecentProject))]
    [KnownType(typeof(ProjectSignature))]
    [KnownType(typeof(TST_REQUIREMENT_SIGNATURE))]
    public partial class Project: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int ProjectGroupId
        {
            get { return _projectGroupId; }
            set
            {
                if (_projectGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectGroupId", _projectGroupId);
                    if (!IsDeserializing)
                    {
                        if (Group != null && Group.ProjectGroupId != value)
                        {
                            Group = null;
                        }
                    }
                    _projectGroupId = value;
                    OnPropertyChanged("ProjectGroupId");
                }
            }
        }
        private int _projectGroupId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            internal set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string Website
        {
            get { return _website; }
            set
            {
                if (_website != value)
                {
                    ChangeTracker.RecordOriginalValue("Website", _website);
                    _website = value;
                    OnPropertyChanged("Website");
                }
            }
        }
        private string _website;
    
        [DataMember]
        public int WorkingHours
        {
            get { return _workingHours; }
            set
            {
                if (_workingHours != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkingHours", _workingHours);
                    _workingHours = value;
                    OnPropertyChanged("WorkingHours");
                }
            }
        }
        private int _workingHours;
    
        [DataMember]
        public int WorkingDays
        {
            get { return _workingDays; }
            set
            {
                if (_workingDays != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkingDays", _workingDays);
                    _workingDays = value;
                    OnPropertyChanged("WorkingDays");
                }
            }
        }
        private int _workingDays;
    
        [DataMember]
        public int NonWorkingHours
        {
            get { return _nonWorkingHours; }
            set
            {
                if (_nonWorkingHours != value)
                {
                    ChangeTracker.RecordOriginalValue("NonWorkingHours", _nonWorkingHours);
                    _nonWorkingHours = value;
                    OnPropertyChanged("NonWorkingHours");
                }
            }
        }
        private int _nonWorkingHours;
    
        [DataMember]
        public Nullable<int> TaskDefaultEffort
        {
            get { return _taskDefaultEffort; }
            set
            {
                if (_taskDefaultEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("TaskDefaultEffort", _taskDefaultEffort);
                    _taskDefaultEffort = value;
                    OnPropertyChanged("TaskDefaultEffort");
                }
            }
        }
        private Nullable<int> _taskDefaultEffort;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsTimeTrackIncidents
        {
            get { return _isTimeTrackIncidents; }
            set
            {
                if (_isTimeTrackIncidents != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTimeTrackIncidents", _isTimeTrackIncidents);
                    _isTimeTrackIncidents = value;
                    OnPropertyChanged("IsTimeTrackIncidents");
                }
            }
        }
        private bool _isTimeTrackIncidents;
    
        [DataMember]
        public bool IsTimeTrackTasks
        {
            get { return _isTimeTrackTasks; }
            set
            {
                if (_isTimeTrackTasks != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTimeTrackTasks", _isTimeTrackTasks);
                    _isTimeTrackTasks = value;
                    OnPropertyChanged("IsTimeTrackTasks");
                }
            }
        }
        private bool _isTimeTrackTasks;
    
        [DataMember]
        public bool IsEffortIncidents
        {
            get { return _isEffortIncidents; }
            set
            {
                if (_isEffortIncidents != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEffortIncidents", _isEffortIncidents);
                    _isEffortIncidents = value;
                    OnPropertyChanged("IsEffortIncidents");
                }
            }
        }
        private bool _isEffortIncidents;
    
        [DataMember]
        public bool IsEffortTasks
        {
            get { return _isEffortTasks; }
            set
            {
                if (_isEffortTasks != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEffortTasks", _isEffortTasks);
                    _isEffortTasks = value;
                    OnPropertyChanged("IsEffortTasks");
                }
            }
        }
        private bool _isEffortTasks;
    
        [DataMember]
        public bool IsTasksAutoCreate
        {
            get { return _isTasksAutoCreate; }
            set
            {
                if (_isTasksAutoCreate != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTasksAutoCreate", _isTasksAutoCreate);
                    _isTasksAutoCreate = value;
                    OnPropertyChanged("IsTasksAutoCreate");
                }
            }
        }
        private bool _isTasksAutoCreate;
    
        [DataMember]
        public Nullable<decimal> ReqDefaultEstimate
        {
            get { return _reqDefaultEstimate; }
            set
            {
                if (_reqDefaultEstimate != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqDefaultEstimate", _reqDefaultEstimate);
                    _reqDefaultEstimate = value;
                    OnPropertyChanged("ReqDefaultEstimate");
                }
            }
        }
        private Nullable<decimal> _reqDefaultEstimate;
    
        [DataMember]
        public int ReqPointEffort
        {
            get { return _reqPointEffort; }
            set
            {
                if (_reqPointEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqPointEffort", _reqPointEffort);
                    _reqPointEffort = value;
                    OnPropertyChanged("ReqPointEffort");
                }
            }
        }
        private int _reqPointEffort;
    
        [DataMember]
        public bool IsReqStatusByTasks
        {
            get { return _isReqStatusByTasks; }
            set
            {
                if (_isReqStatusByTasks != value)
                {
                    ChangeTracker.RecordOriginalValue("IsReqStatusByTasks", _isReqStatusByTasks);
                    _isReqStatusByTasks = value;
                    OnPropertyChanged("IsReqStatusByTasks");
                }
            }
        }
        private bool _isReqStatusByTasks;
    
        [DataMember]
        public bool IsReqStatusByTestCases
        {
            get { return _isReqStatusByTestCases; }
            set
            {
                if (_isReqStatusByTestCases != value)
                {
                    ChangeTracker.RecordOriginalValue("IsReqStatusByTestCases", _isReqStatusByTestCases);
                    _isReqStatusByTestCases = value;
                    OnPropertyChanged("IsReqStatusByTestCases");
                }
            }
        }
        private bool _isReqStatusByTestCases;
    
        [DataMember]
        public bool IsEffortTestCases
        {
            get { return _isEffortTestCases; }
            set
            {
                if (_isEffortTestCases != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEffortTestCases", _isEffortTestCases);
                    _isEffortTestCases = value;
                    OnPropertyChanged("IsEffortTestCases");
                }
            }
        }
        private bool _isEffortTestCases;
    
        [DataMember]
        public bool IsReqStatusAutoPlanned
        {
            get { return _isReqStatusAutoPlanned; }
            set
            {
                if (_isReqStatusAutoPlanned != value)
                {
                    ChangeTracker.RecordOriginalValue("IsReqStatusAutoPlanned", _isReqStatusAutoPlanned);
                    _isReqStatusAutoPlanned = value;
                    OnPropertyChanged("IsReqStatusAutoPlanned");
                }
            }
        }
        private bool _isReqStatusAutoPlanned;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (Template != null && Template.ProjectTemplateId != value)
                        {
                            Template = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public int PercentComplete
        {
            get { return _percentComplete; }
            set
            {
                if (_percentComplete != value)
                {
                    ChangeTracker.RecordOriginalValue("PercentComplete", _percentComplete);
                    _percentComplete = value;
                    OnPropertyChanged("PercentComplete");
                }
            }
        }
        private int _percentComplete;
    
        [DataMember]
        public int RequirementCount
        {
            get { return _requirementCount; }
            set
            {
                if (_requirementCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RequirementCount", _requirementCount);
                    _requirementCount = value;
                    OnPropertyChanged("RequirementCount");
                }
            }
        }
        private int _requirementCount;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Build> Builds
        {
            get
            {
                if (_builds == null)
                {
                    _builds = new TrackableCollection<Build>();
                    _builds.CollectionChanged += FixupBuilds;
                }
                return _builds;
            }
            set
            {
                if (!ReferenceEquals(_builds, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_builds != null)
                    {
                        _builds.CollectionChanged -= FixupBuilds;
                    }
                    _builds = value;
                    if (_builds != null)
                    {
                        _builds.CollectionChanged += FixupBuilds;
                    }
                    OnNavigationPropertyChanged("Builds");
                }
            }
        }
        private TrackableCollection<Build> _builds;
    
        [DataMember]
        public TrackableCollection<ProjectUser> UserMembership
        {
            get
            {
                if (_userMembership == null)
                {
                    _userMembership = new TrackableCollection<ProjectUser>();
                    _userMembership.CollectionChanged += FixupUserMembership;
                }
                return _userMembership;
            }
            set
            {
                if (!ReferenceEquals(_userMembership, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userMembership != null)
                    {
                        _userMembership.CollectionChanged -= FixupUserMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectUser item in _userMembership)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userMembership = value;
                    if (_userMembership != null)
                    {
                        _userMembership.CollectionChanged += FixupUserMembership;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectUser item in _userMembership)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserMembership");
                }
            }
        }
        private TrackableCollection<ProjectUser> _userMembership;
    
        [DataMember]
        public TrackableCollection<UserProfile> LastOpenedForUser
        {
            get
            {
                if (_lastOpenedForUser == null)
                {
                    _lastOpenedForUser = new TrackableCollection<UserProfile>();
                    _lastOpenedForUser.CollectionChanged += FixupLastOpenedForUser;
                }
                return _lastOpenedForUser;
            }
            set
            {
                if (!ReferenceEquals(_lastOpenedForUser, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lastOpenedForUser != null)
                    {
                        _lastOpenedForUser.CollectionChanged -= FixupLastOpenedForUser;
                    }
                    _lastOpenedForUser = value;
                    if (_lastOpenedForUser != null)
                    {
                        _lastOpenedForUser.CollectionChanged += FixupLastOpenedForUser;
                    }
                    OnNavigationPropertyChanged("LastOpenedForUser");
                }
            }
        }
        private TrackableCollection<UserProfile> _lastOpenedForUser;
    
        [DataMember]
        public TrackableCollection<ProjectCollectionEntry> SettingsEntries
        {
            get
            {
                if (_settingsEntries == null)
                {
                    _settingsEntries = new TrackableCollection<ProjectCollectionEntry>();
                    _settingsEntries.CollectionChanged += FixupSettingsEntries;
                }
                return _settingsEntries;
            }
            set
            {
                if (!ReferenceEquals(_settingsEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_settingsEntries != null)
                    {
                        _settingsEntries.CollectionChanged -= FixupSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectCollectionEntry item in _settingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _settingsEntries = value;
                    if (_settingsEntries != null)
                    {
                        _settingsEntries.CollectionChanged += FixupSettingsEntries;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectCollectionEntry item in _settingsEntries)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SettingsEntries");
                }
            }
        }
        private TrackableCollection<ProjectCollectionEntry> _settingsEntries;
    
        [DataMember]
        public ProjectGroup Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                    OnNavigationPropertyChanged("Group");
                }
            }
        }
        private ProjectGroup _group;
    
        [DataMember]
        public TrackableCollection<ArtifactCustomProperty> ArtifactCustomProperties
        {
            get
            {
                if (_artifactCustomProperties == null)
                {
                    _artifactCustomProperties = new TrackableCollection<ArtifactCustomProperty>();
                    _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                }
                return _artifactCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_artifactCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged -= FixupArtifactCustomProperties;
                    }
                    _artifactCustomProperties = value;
                    if (_artifactCustomProperties != null)
                    {
                        _artifactCustomProperties.CollectionChanged += FixupArtifactCustomProperties;
                    }
                    OnNavigationPropertyChanged("ArtifactCustomProperties");
                }
            }
        }
        private TrackableCollection<ArtifactCustomProperty> _artifactCustomProperties;
    
        [DataMember]
        public TrackableCollection<UserArtifactField> UserFields
        {
            get
            {
                if (_userFields == null)
                {
                    _userFields = new TrackableCollection<UserArtifactField>();
                    _userFields.CollectionChanged += FixupUserFields;
                }
                return _userFields;
            }
            set
            {
                if (!ReferenceEquals(_userFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged -= FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserArtifactField item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userFields = value;
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged += FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserArtifactField item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserFields");
                }
            }
        }
        private TrackableCollection<UserArtifactField> _userFields;
    
        [DataMember]
        public TrackableCollection<UserCustomProperty> UserCustomProperties
        {
            get
            {
                if (_userCustomProperties == null)
                {
                    _userCustomProperties = new TrackableCollection<UserCustomProperty>();
                    _userCustomProperties.CollectionChanged += FixupUserCustomProperties;
                }
                return _userCustomProperties;
            }
            set
            {
                if (!ReferenceEquals(_userCustomProperties, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userCustomProperties != null)
                    {
                        _userCustomProperties.CollectionChanged -= FixupUserCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserCustomProperty item in _userCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userCustomProperties = value;
                    if (_userCustomProperties != null)
                    {
                        _userCustomProperties.CollectionChanged += FixupUserCustomProperties;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserCustomProperty item in _userCustomProperties)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserCustomProperties");
                }
            }
        }
        private TrackableCollection<UserCustomProperty> _userCustomProperties;
    
        [DataMember]
        public TrackableCollection<Placeholder> Placeholders
        {
            get
            {
                if (_placeholders == null)
                {
                    _placeholders = new TrackableCollection<Placeholder>();
                    _placeholders.CollectionChanged += FixupPlaceholders;
                }
                return _placeholders;
            }
            set
            {
                if (!ReferenceEquals(_placeholders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_placeholders != null)
                    {
                        _placeholders.CollectionChanged -= FixupPlaceholders;
                    }
                    _placeholders = value;
                    if (_placeholders != null)
                    {
                        _placeholders.CollectionChanged += FixupPlaceholders;
                    }
                    OnNavigationPropertyChanged("Placeholders");
                }
            }
        }
        private TrackableCollection<Placeholder> _placeholders;
    
        [DataMember]
        public TrackableCollection<SavedReport> SavedReports
        {
            get
            {
                if (_savedReports == null)
                {
                    _savedReports = new TrackableCollection<SavedReport>();
                    _savedReports.CollectionChanged += FixupSavedReports;
                }
                return _savedReports;
            }
            set
            {
                if (!ReferenceEquals(_savedReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged -= FixupSavedReports;
                    }
                    _savedReports = value;
                    if (_savedReports != null)
                    {
                        _savedReports.CollectionChanged += FixupSavedReports;
                    }
                    OnNavigationPropertyChanged("SavedReports");
                }
            }
        }
        private TrackableCollection<SavedReport> _savedReports;
    
        [DataMember]
        public TrackableCollection<Requirement> Requirements
        {
            get
            {
                if (_requirements == null)
                {
                    _requirements = new TrackableCollection<Requirement>();
                    _requirements.CollectionChanged += FixupRequirements;
                }
                return _requirements;
            }
            set
            {
                if (!ReferenceEquals(_requirements, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged -= FixupRequirements;
                    }
                    _requirements = value;
                    if (_requirements != null)
                    {
                        _requirements.CollectionChanged += FixupRequirements;
                    }
                    OnNavigationPropertyChanged("Requirements");
                }
            }
        }
        private TrackableCollection<Requirement> _requirements;
    
        [DataMember]
        public TrackableCollection<TaskFolder> TaskFolders
        {
            get
            {
                if (_taskFolders == null)
                {
                    _taskFolders = new TrackableCollection<TaskFolder>();
                    _taskFolders.CollectionChanged += FixupTaskFolders;
                }
                return _taskFolders;
            }
            set
            {
                if (!ReferenceEquals(_taskFolders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskFolders != null)
                    {
                        _taskFolders.CollectionChanged -= FixupTaskFolders;
                    }
                    _taskFolders = value;
                    if (_taskFolders != null)
                    {
                        _taskFolders.CollectionChanged += FixupTaskFolders;
                    }
                    OnNavigationPropertyChanged("TaskFolders");
                }
            }
        }
        private TrackableCollection<TaskFolder> _taskFolders;
    
        [DataMember]
        public TrackableCollection<Component> Components
        {
            get
            {
                if (_components == null)
                {
                    _components = new TrackableCollection<Component>();
                    _components.CollectionChanged += FixupComponents;
                }
                return _components;
            }
            set
            {
                if (!ReferenceEquals(_components, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_components != null)
                    {
                        _components.CollectionChanged -= FixupComponents;
                    }
                    _components = value;
                    if (_components != null)
                    {
                        _components.CollectionChanged += FixupComponents;
                    }
                    OnNavigationPropertyChanged("Components");
                }
            }
        }
        private TrackableCollection<Component> _components;
    
        [DataMember]
        public TrackableCollection<SavedFilter> SavedFilters
        {
            get
            {
                if (_savedFilters == null)
                {
                    _savedFilters = new TrackableCollection<SavedFilter>();
                    _savedFilters.CollectionChanged += FixupSavedFilters;
                }
                return _savedFilters;
            }
            set
            {
                if (!ReferenceEquals(_savedFilters, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged -= FixupSavedFilters;
                    }
                    _savedFilters = value;
                    if (_savedFilters != null)
                    {
                        _savedFilters.CollectionChanged += FixupSavedFilters;
                    }
                    OnNavigationPropertyChanged("SavedFilters");
                }
            }
        }
        private TrackableCollection<SavedFilter> _savedFilters;
    
        [DataMember]
        public TrackableCollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    _tasks = new TrackableCollection<Task>();
                    _tasks.CollectionChanged += FixupTasks;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    if (_tasks != null)
                    {
                        _tasks.CollectionChanged += FixupTasks;
                    }
                    OnNavigationPropertyChanged("Tasks");
                }
            }
        }
        private TrackableCollection<Task> _tasks;
    
        [DataMember]
        public TaraVaultProject TaraVault
        {
            get { return _taraVault; }
            set
            {
                if (!ReferenceEquals(_taraVault, value))
                {
                    var previousValue = _taraVault;
                    _taraVault = value;
                    FixupTaraVault(previousValue);
                    OnNavigationPropertyChanged("TaraVault");
                }
            }
        }
        private TaraVaultProject _taraVault;
    
        [DataMember]
        public TrackableCollection<Incident> Incidents
        {
            get
            {
                if (_incidents == null)
                {
                    _incidents = new TrackableCollection<Incident>();
                    _incidents.CollectionChanged += FixupIncidents;
                }
                return _incidents;
            }
            set
            {
                if (!ReferenceEquals(_incidents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged -= FixupIncidents;
                    }
                    _incidents = value;
                    if (_incidents != null)
                    {
                        _incidents.CollectionChanged += FixupIncidents;
                    }
                    OnNavigationPropertyChanged("Incidents");
                }
            }
        }
        private TrackableCollection<Incident> _incidents;
    
        [DataMember]
        public TrackableCollection<VersionControlProject> VersionControlProjects
        {
            get
            {
                if (_versionControlProjects == null)
                {
                    _versionControlProjects = new TrackableCollection<VersionControlProject>();
                    _versionControlProjects.CollectionChanged += FixupVersionControlProjects;
                }
                return _versionControlProjects;
            }
            set
            {
                if (!ReferenceEquals(_versionControlProjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_versionControlProjects != null)
                    {
                        _versionControlProjects.CollectionChanged -= FixupVersionControlProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (VersionControlProject item in _versionControlProjects)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _versionControlProjects = value;
                    if (_versionControlProjects != null)
                    {
                        _versionControlProjects.CollectionChanged += FixupVersionControlProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (VersionControlProject item in _versionControlProjects)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("VersionControlProjects");
                }
            }
        }
        private TrackableCollection<VersionControlProject> _versionControlProjects;
    
        [DataMember]
        public TrackableCollection<ArtifactAttachment> ArtifactAttachments
        {
            get
            {
                if (_artifactAttachments == null)
                {
                    _artifactAttachments = new TrackableCollection<ArtifactAttachment>();
                    _artifactAttachments.CollectionChanged += FixupArtifactAttachments;
                }
                return _artifactAttachments;
            }
            set
            {
                if (!ReferenceEquals(_artifactAttachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactAttachments != null)
                    {
                        _artifactAttachments.CollectionChanged -= FixupArtifactAttachments;
                    }
                    _artifactAttachments = value;
                    if (_artifactAttachments != null)
                    {
                        _artifactAttachments.CollectionChanged += FixupArtifactAttachments;
                    }
                    OnNavigationPropertyChanged("ArtifactAttachments");
                }
            }
        }
        private TrackableCollection<ArtifactAttachment> _artifactAttachments;
    
        [DataMember]
        public TrackableCollection<ProjectAttachment> Attachments
        {
            get
            {
                if (_attachments == null)
                {
                    _attachments = new TrackableCollection<ProjectAttachment>();
                    _attachments.CollectionChanged += FixupAttachments;
                }
                return _attachments;
            }
            set
            {
                if (!ReferenceEquals(_attachments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged -= FixupAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectAttachment item in _attachments)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _attachments = value;
                    if (_attachments != null)
                    {
                        _attachments.CollectionChanged += FixupAttachments;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectAttachment item in _attachments)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Attachments");
                }
            }
        }
        private TrackableCollection<ProjectAttachment> _attachments;
    
        [DataMember]
        public TrackableCollection<ProjectAttachmentFolder> AttachmentFolders
        {
            get
            {
                if (_attachmentFolders == null)
                {
                    _attachmentFolders = new TrackableCollection<ProjectAttachmentFolder>();
                    _attachmentFolders.CollectionChanged += FixupAttachmentFolders;
                }
                return _attachmentFolders;
            }
            set
            {
                if (!ReferenceEquals(_attachmentFolders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachmentFolders != null)
                    {
                        _attachmentFolders.CollectionChanged -= FixupAttachmentFolders;
                    }
                    _attachmentFolders = value;
                    if (_attachmentFolders != null)
                    {
                        _attachmentFolders.CollectionChanged += FixupAttachmentFolders;
                    }
                    OnNavigationPropertyChanged("AttachmentFolders");
                }
            }
        }
        private TrackableCollection<ProjectAttachmentFolder> _attachmentFolders;
    
        [DataMember]
        public TrackableCollection<HistoryChangeSet> HistoryChangeSets
        {
            get
            {
                if (_historyChangeSets == null)
                {
                    _historyChangeSets = new TrackableCollection<HistoryChangeSet>();
                    _historyChangeSets.CollectionChanged += FixupHistoryChangeSets;
                }
                return _historyChangeSets;
            }
            set
            {
                if (!ReferenceEquals(_historyChangeSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyChangeSets != null)
                    {
                        _historyChangeSets.CollectionChanged -= FixupHistoryChangeSets;
                    }
                    _historyChangeSets = value;
                    if (_historyChangeSets != null)
                    {
                        _historyChangeSets.CollectionChanged += FixupHistoryChangeSets;
                    }
                    OnNavigationPropertyChanged("HistoryChangeSets");
                }
            }
        }
        private TrackableCollection<HistoryChangeSet> _historyChangeSets;
    
        [DataMember]
        public TrackableCollection<Release> Releases
        {
            get
            {
                if (_releases == null)
                {
                    _releases = new TrackableCollection<Release>();
                    _releases.CollectionChanged += FixupReleases;
                }
                return _releases;
            }
            set
            {
                if (!ReferenceEquals(_releases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releases != null)
                    {
                        _releases.CollectionChanged -= FixupReleases;
                    }
                    _releases = value;
                    if (_releases != null)
                    {
                        _releases.CollectionChanged += FixupReleases;
                    }
                    OnNavigationPropertyChanged("Releases");
                }
            }
        }
        private TrackableCollection<Release> _releases;
    
        [DataMember]
        public TrackableCollection<AutomationHost> AutomationHosts
        {
            get
            {
                if (_automationHosts == null)
                {
                    _automationHosts = new TrackableCollection<AutomationHost>();
                    _automationHosts.CollectionChanged += FixupAutomationHosts;
                }
                return _automationHosts;
            }
            set
            {
                if (!ReferenceEquals(_automationHosts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_automationHosts != null)
                    {
                        _automationHosts.CollectionChanged -= FixupAutomationHosts;
                    }
                    _automationHosts = value;
                    if (_automationHosts != null)
                    {
                        _automationHosts.CollectionChanged += FixupAutomationHosts;
                    }
                    OnNavigationPropertyChanged("AutomationHosts");
                }
            }
        }
        private TrackableCollection<AutomationHost> _automationHosts;
    
        [DataMember]
        public TrackableCollection<TestCase> TestCases
        {
            get
            {
                if (_testCases == null)
                {
                    _testCases = new TrackableCollection<TestCase>();
                    _testCases.CollectionChanged += FixupTestCases;
                }
                return _testCases;
            }
            set
            {
                if (!ReferenceEquals(_testCases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged -= FixupTestCases;
                    }
                    _testCases = value;
                    if (_testCases != null)
                    {
                        _testCases.CollectionChanged += FixupTestCases;
                    }
                    OnNavigationPropertyChanged("TestCases");
                }
            }
        }
        private TrackableCollection<TestCase> _testCases;
    
        [DataMember]
        public TrackableCollection<TestCaseFolder> TestCaseFolders
        {
            get
            {
                if (_testCaseFolders == null)
                {
                    _testCaseFolders = new TrackableCollection<TestCaseFolder>();
                    _testCaseFolders.CollectionChanged += FixupTestCaseFolders;
                }
                return _testCaseFolders;
            }
            set
            {
                if (!ReferenceEquals(_testCaseFolders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseFolders != null)
                    {
                        _testCaseFolders.CollectionChanged -= FixupTestCaseFolders;
                    }
                    _testCaseFolders = value;
                    if (_testCaseFolders != null)
                    {
                        _testCaseFolders.CollectionChanged += FixupTestCaseFolders;
                    }
                    OnNavigationPropertyChanged("TestCaseFolders");
                }
            }
        }
        private TrackableCollection<TestCaseFolder> _testCaseFolders;
    
        [DataMember]
        public TrackableCollection<TestRunsPending> PendingTestRuns
        {
            get
            {
                if (_pendingTestRuns == null)
                {
                    _pendingTestRuns = new TrackableCollection<TestRunsPending>();
                    _pendingTestRuns.CollectionChanged += FixupPendingTestRuns;
                }
                return _pendingTestRuns;
            }
            set
            {
                if (!ReferenceEquals(_pendingTestRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pendingTestRuns != null)
                    {
                        _pendingTestRuns.CollectionChanged -= FixupPendingTestRuns;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestRunsPending item in _pendingTestRuns)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _pendingTestRuns = value;
                    if (_pendingTestRuns != null)
                    {
                        _pendingTestRuns.CollectionChanged += FixupPendingTestRuns;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestRunsPending item in _pendingTestRuns)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PendingTestRuns");
                }
            }
        }
        private TrackableCollection<TestRunsPending> _pendingTestRuns;
    
        [DataMember]
        public TrackableCollection<TestSet> TestSets
        {
            get
            {
                if (_testSets == null)
                {
                    _testSets = new TrackableCollection<TestSet>();
                    _testSets.CollectionChanged += FixupTestSets;
                }
                return _testSets;
            }
            set
            {
                if (!ReferenceEquals(_testSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSets != null)
                    {
                        _testSets.CollectionChanged -= FixupTestSets;
                    }
                    _testSets = value;
                    if (_testSets != null)
                    {
                        _testSets.CollectionChanged += FixupTestSets;
                    }
                    OnNavigationPropertyChanged("TestSets");
                }
            }
        }
        private TrackableCollection<TestSet> _testSets;
    
        [DataMember]
        public TrackableCollection<TestSetFolder> TestSetFolders
        {
            get
            {
                if (_testSetFolders == null)
                {
                    _testSetFolders = new TrackableCollection<TestSetFolder>();
                    _testSetFolders.CollectionChanged += FixupTestSetFolders;
                }
                return _testSetFolders;
            }
            set
            {
                if (!ReferenceEquals(_testSetFolders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetFolders != null)
                    {
                        _testSetFolders.CollectionChanged -= FixupTestSetFolders;
                    }
                    _testSetFolders = value;
                    if (_testSetFolders != null)
                    {
                        _testSetFolders.CollectionChanged += FixupTestSetFolders;
                    }
                    OnNavigationPropertyChanged("TestSetFolders");
                }
            }
        }
        private TrackableCollection<TestSetFolder> _testSetFolders;
    
        [DataMember]
        public TrackableCollection<DataSyncProject> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncProject>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncProject item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncProject item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncProject> _dataSyncMappings;
    
        [DataMember]
        public TrackableCollection<ProjectArtifactSharing> ArtifactSharings
        {
            get
            {
                if (_artifactSharings == null)
                {
                    _artifactSharings = new TrackableCollection<ProjectArtifactSharing>();
                    _artifactSharings.CollectionChanged += FixupArtifactSharings;
                }
                return _artifactSharings;
            }
            set
            {
                if (!ReferenceEquals(_artifactSharings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactSharings != null)
                    {
                        _artifactSharings.CollectionChanged -= FixupArtifactSharings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectArtifactSharing item in _artifactSharings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _artifactSharings = value;
                    if (_artifactSharings != null)
                    {
                        _artifactSharings.CollectionChanged += FixupArtifactSharings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectArtifactSharing item in _artifactSharings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ArtifactSharings");
                }
            }
        }
        private TrackableCollection<ProjectArtifactSharing> _artifactSharings;
    
        [DataMember]
        public TrackableCollection<ProjectSettingValue> ProjectSettings
        {
            get
            {
                if (_projectSettings == null)
                {
                    _projectSettings = new TrackableCollection<ProjectSettingValue>();
                    _projectSettings.CollectionChanged += FixupProjectSettings;
                }
                return _projectSettings;
            }
            set
            {
                if (!ReferenceEquals(_projectSettings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_projectSettings != null)
                    {
                        _projectSettings.CollectionChanged -= FixupProjectSettings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectSettingValue item in _projectSettings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _projectSettings = value;
                    if (_projectSettings != null)
                    {
                        _projectSettings.CollectionChanged += FixupProjectSettings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectSettingValue item in _projectSettings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProjectSettings");
                }
            }
        }
        private TrackableCollection<ProjectSettingValue> _projectSettings;
    
        [DataMember]
        public TrackableCollection<TestConfigurationSet> TestConfigurationSets
        {
            get
            {
                if (_testConfigurationSets == null)
                {
                    _testConfigurationSets = new TrackableCollection<TestConfigurationSet>();
                    _testConfigurationSets.CollectionChanged += FixupTestConfigurationSets;
                }
                return _testConfigurationSets;
            }
            set
            {
                if (!ReferenceEquals(_testConfigurationSets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testConfigurationSets != null)
                    {
                        _testConfigurationSets.CollectionChanged -= FixupTestConfigurationSets;
                    }
                    _testConfigurationSets = value;
                    if (_testConfigurationSets != null)
                    {
                        _testConfigurationSets.CollectionChanged += FixupTestConfigurationSets;
                    }
                    OnNavigationPropertyChanged("TestConfigurationSets");
                }
            }
        }
        private TrackableCollection<TestConfigurationSet> _testConfigurationSets;
    
        [DataMember]
        public TrackableCollection<ProjectArtifactSharing> SharedProjects
        {
            get
            {
                if (_sharedProjects == null)
                {
                    _sharedProjects = new TrackableCollection<ProjectArtifactSharing>();
                    _sharedProjects.CollectionChanged += FixupSharedProjects;
                }
                return _sharedProjects;
            }
            set
            {
                if (!ReferenceEquals(_sharedProjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sharedProjects != null)
                    {
                        _sharedProjects.CollectionChanged -= FixupSharedProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectArtifactSharing item in _sharedProjects)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _sharedProjects = value;
                    if (_sharedProjects != null)
                    {
                        _sharedProjects.CollectionChanged += FixupSharedProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectArtifactSharing item in _sharedProjects)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SharedProjects");
                }
            }
        }
        private TrackableCollection<ProjectArtifactSharing> _sharedProjects;
    
        [DataMember]
        public ProjectTemplate Template
        {
            get { return _template; }
            set
            {
                if (!ReferenceEquals(_template, value))
                {
                    var previousValue = _template;
                    _template = value;
                    FixupTemplate(previousValue);
                    OnNavigationPropertyChanged("Template");
                }
            }
        }
        private ProjectTemplate _template;
    
        [DataMember]
        public TrackableCollection<ProjectBaseline> Baselines
        {
            get
            {
                if (_baselines == null)
                {
                    _baselines = new TrackableCollection<ProjectBaseline>();
                    _baselines.CollectionChanged += FixupBaselines;
                }
                return _baselines;
            }
            set
            {
                if (!ReferenceEquals(_baselines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged -= FixupBaselines;
                    }
                    _baselines = value;
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged += FixupBaselines;
                    }
                    OnNavigationPropertyChanged("Baselines");
                }
            }
        }
        private TrackableCollection<ProjectBaseline> _baselines;
    
        [DataMember]
        public TrackableCollection<ProjectGoal> Goals
        {
            get
            {
                if (_goals == null)
                {
                    _goals = new TrackableCollection<ProjectGoal>();
                    _goals.CollectionChanged += FixupGoals;
                }
                return _goals;
            }
            set
            {
                if (!ReferenceEquals(_goals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_goals != null)
                    {
                        _goals.CollectionChanged -= FixupGoals;
                    }
                    _goals = value;
                    if (_goals != null)
                    {
                        _goals.CollectionChanged += FixupGoals;
                    }
                    OnNavigationPropertyChanged("Goals");
                }
            }
        }
        private TrackableCollection<ProjectGoal> _goals;
    
        [DataMember]
        public TrackableCollection<Risk> Risks
        {
            get
            {
                if (_risks == null)
                {
                    _risks = new TrackableCollection<Risk>();
                    _risks.CollectionChanged += FixupRisks;
                }
                return _risks;
            }
            set
            {
                if (!ReferenceEquals(_risks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_risks != null)
                    {
                        _risks.CollectionChanged -= FixupRisks;
                    }
                    _risks = value;
                    if (_risks != null)
                    {
                        _risks.CollectionChanged += FixupRisks;
                    }
                    OnNavigationPropertyChanged("Risks");
                }
            }
        }
        private TrackableCollection<Risk> _risks;
    
        [DataMember]
        public TrackableCollection<TimecardEntry> TimecardEntries
        {
            get
            {
                if (_timecardEntries == null)
                {
                    _timecardEntries = new TrackableCollection<TimecardEntry>();
                    _timecardEntries.CollectionChanged += FixupTimecardEntries;
                }
                return _timecardEntries;
            }
            set
            {
                if (!ReferenceEquals(_timecardEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged -= FixupTimecardEntries;
                    }
                    _timecardEntries = value;
                    if (_timecardEntries != null)
                    {
                        _timecardEntries.CollectionChanged += FixupTimecardEntries;
                    }
                    OnNavigationPropertyChanged("TimecardEntries");
                }
            }
        }
        private TrackableCollection<TimecardEntry> _timecardEntries;
    
        [DataMember]
        public TrackableCollection<ArtifactTag> ArtifactTags
        {
            get
            {
                if (_artifactTags == null)
                {
                    _artifactTags = new TrackableCollection<ArtifactTag>();
                    _artifactTags.CollectionChanged += FixupArtifactTags;
                }
                return _artifactTags;
            }
            set
            {
                if (!ReferenceEquals(_artifactTags, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_artifactTags != null)
                    {
                        _artifactTags.CollectionChanged -= FixupArtifactTags;
                    }
                    _artifactTags = value;
                    if (_artifactTags != null)
                    {
                        _artifactTags.CollectionChanged += FixupArtifactTags;
                    }
                    OnNavigationPropertyChanged("ArtifactTags");
                }
            }
        }
        private TrackableCollection<ArtifactTag> _artifactTags;
    
        [DataMember]
        public TrackableCollection<ProjectTagFrequency> TagFrequencies
        {
            get
            {
                if (_tagFrequencies == null)
                {
                    _tagFrequencies = new TrackableCollection<ProjectTagFrequency>();
                    _tagFrequencies.CollectionChanged += FixupTagFrequencies;
                }
                return _tagFrequencies;
            }
            set
            {
                if (!ReferenceEquals(_tagFrequencies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tagFrequencies != null)
                    {
                        _tagFrequencies.CollectionChanged -= FixupTagFrequencies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectTagFrequency item in _tagFrequencies)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tagFrequencies = value;
                    if (_tagFrequencies != null)
                    {
                        _tagFrequencies.CollectionChanged += FixupTagFrequencies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectTagFrequency item in _tagFrequencies)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TagFrequencies");
                }
            }
        }
        private TrackableCollection<ProjectTagFrequency> _tagFrequencies;
    
        [DataMember]
        public TrackableCollection<TestCaseFolderHierarchy> TestCaseFoldersHierarchy
        {
            get
            {
                if (_testCaseFoldersHierarchy == null)
                {
                    _testCaseFoldersHierarchy = new TrackableCollection<TestCaseFolderHierarchy>();
                    _testCaseFoldersHierarchy.CollectionChanged += FixupTestCaseFoldersHierarchy;
                }
                return _testCaseFoldersHierarchy;
            }
            set
            {
                if (!ReferenceEquals(_testCaseFoldersHierarchy, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseFoldersHierarchy != null)
                    {
                        _testCaseFoldersHierarchy.CollectionChanged -= FixupTestCaseFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseFolderHierarchy item in _testCaseFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseFoldersHierarchy = value;
                    if (_testCaseFoldersHierarchy != null)
                    {
                        _testCaseFoldersHierarchy.CollectionChanged += FixupTestCaseFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseFolderHierarchy item in _testCaseFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseFoldersHierarchy");
                }
            }
        }
        private TrackableCollection<TestCaseFolderHierarchy> _testCaseFoldersHierarchy;
    
        [DataMember]
        public TrackableCollection<ProjectAttachmentFolderHierarchy> AttachmentFoldersHierarchy
        {
            get
            {
                if (_attachmentFoldersHierarchy == null)
                {
                    _attachmentFoldersHierarchy = new TrackableCollection<ProjectAttachmentFolderHierarchy>();
                    _attachmentFoldersHierarchy.CollectionChanged += FixupAttachmentFoldersHierarchy;
                }
                return _attachmentFoldersHierarchy;
            }
            set
            {
                if (!ReferenceEquals(_attachmentFoldersHierarchy, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachmentFoldersHierarchy != null)
                    {
                        _attachmentFoldersHierarchy.CollectionChanged -= FixupAttachmentFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ProjectAttachmentFolderHierarchy item in _attachmentFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _attachmentFoldersHierarchy = value;
                    if (_attachmentFoldersHierarchy != null)
                    {
                        _attachmentFoldersHierarchy.CollectionChanged += FixupAttachmentFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ProjectAttachmentFolderHierarchy item in _attachmentFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AttachmentFoldersHierarchy");
                }
            }
        }
        private TrackableCollection<ProjectAttachmentFolderHierarchy> _attachmentFoldersHierarchy;
    
        [DataMember]
        public TrackableCollection<TaskFolderHierarchy> TaskFoldersHierarchy
        {
            get
            {
                if (_taskFoldersHierarchy == null)
                {
                    _taskFoldersHierarchy = new TrackableCollection<TaskFolderHierarchy>();
                    _taskFoldersHierarchy.CollectionChanged += FixupTaskFoldersHierarchy;
                }
                return _taskFoldersHierarchy;
            }
            set
            {
                if (!ReferenceEquals(_taskFoldersHierarchy, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskFoldersHierarchy != null)
                    {
                        _taskFoldersHierarchy.CollectionChanged -= FixupTaskFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskFolderHierarchy item in _taskFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskFoldersHierarchy = value;
                    if (_taskFoldersHierarchy != null)
                    {
                        _taskFoldersHierarchy.CollectionChanged += FixupTaskFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskFolderHierarchy item in _taskFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskFoldersHierarchy");
                }
            }
        }
        private TrackableCollection<TaskFolderHierarchy> _taskFoldersHierarchy;
    
        [DataMember]
        public TrackableCollection<TestSetFolderHierarchy> TestSetFoldersHierarchy
        {
            get
            {
                if (_testSetFoldersHierarchy == null)
                {
                    _testSetFoldersHierarchy = new TrackableCollection<TestSetFolderHierarchy>();
                    _testSetFoldersHierarchy.CollectionChanged += FixupTestSetFoldersHierarchy;
                }
                return _testSetFoldersHierarchy;
            }
            set
            {
                if (!ReferenceEquals(_testSetFoldersHierarchy, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testSetFoldersHierarchy != null)
                    {
                        _testSetFoldersHierarchy.CollectionChanged -= FixupTestSetFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestSetFolderHierarchy item in _testSetFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testSetFoldersHierarchy = value;
                    if (_testSetFoldersHierarchy != null)
                    {
                        _testSetFoldersHierarchy.CollectionChanged += FixupTestSetFoldersHierarchy;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestSetFolderHierarchy item in _testSetFoldersHierarchy)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestSetFoldersHierarchy");
                }
            }
        }
        private TrackableCollection<TestSetFolderHierarchy> _testSetFoldersHierarchy;
    
        [DataMember]
        public TrackableCollection<TestCaseParameterHierarchy> TestCaseParameterHierarchies
        {
            get
            {
                if (_testCaseParameterHierarchies == null)
                {
                    _testCaseParameterHierarchies = new TrackableCollection<TestCaseParameterHierarchy>();
                    _testCaseParameterHierarchies.CollectionChanged += FixupTestCaseParameterHierarchies;
                }
                return _testCaseParameterHierarchies;
            }
            set
            {
                if (!ReferenceEquals(_testCaseParameterHierarchies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseParameterHierarchies != null)
                    {
                        _testCaseParameterHierarchies.CollectionChanged -= FixupTestCaseParameterHierarchies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseParameterHierarchy item in _testCaseParameterHierarchies)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseParameterHierarchies = value;
                    if (_testCaseParameterHierarchies != null)
                    {
                        _testCaseParameterHierarchies.CollectionChanged += FixupTestCaseParameterHierarchies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseParameterHierarchy item in _testCaseParameterHierarchies)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseParameterHierarchies");
                }
            }
        }
        private TrackableCollection<TestCaseParameterHierarchy> _testCaseParameterHierarchies;
    
        [DataMember]
        public TrackableCollection<TestCaseParameterHierarchyAlreadySet> TestCaseParameterAlreadySetHierarchies
        {
            get
            {
                if (_testCaseParameterAlreadySetHierarchies == null)
                {
                    _testCaseParameterAlreadySetHierarchies = new TrackableCollection<TestCaseParameterHierarchyAlreadySet>();
                    _testCaseParameterAlreadySetHierarchies.CollectionChanged += FixupTestCaseParameterAlreadySetHierarchies;
                }
                return _testCaseParameterAlreadySetHierarchies;
            }
            set
            {
                if (!ReferenceEquals(_testCaseParameterAlreadySetHierarchies, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseParameterAlreadySetHierarchies != null)
                    {
                        _testCaseParameterAlreadySetHierarchies.CollectionChanged -= FixupTestCaseParameterAlreadySetHierarchies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseParameterHierarchyAlreadySet item in _testCaseParameterAlreadySetHierarchies)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseParameterAlreadySetHierarchies = value;
                    if (_testCaseParameterAlreadySetHierarchies != null)
                    {
                        _testCaseParameterAlreadySetHierarchies.CollectionChanged += FixupTestCaseParameterAlreadySetHierarchies;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseParameterHierarchyAlreadySet item in _testCaseParameterAlreadySetHierarchies)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseParameterAlreadySetHierarchies");
                }
            }
        }
        private TrackableCollection<TestCaseParameterHierarchyAlreadySet> _testCaseParameterAlreadySetHierarchies;
    
        [DataMember]
        public TrackableCollection<UserRecentArtifact> RecentArtifacts
        {
            get
            {
                if (_recentArtifacts == null)
                {
                    _recentArtifacts = new TrackableCollection<UserRecentArtifact>();
                    _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                }
                return _recentArtifacts;
            }
            set
            {
                if (!ReferenceEquals(_recentArtifacts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged -= FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recentArtifacts = value;
                    if (_recentArtifacts != null)
                    {
                        _recentArtifacts.CollectionChanged += FixupRecentArtifacts;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserRecentArtifact item in _recentArtifacts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecentArtifacts");
                }
            }
        }
        private TrackableCollection<UserRecentArtifact> _recentArtifacts;
    
        [DataMember]
        public TrackableCollection<UserRecentProject> RecentProjects
        {
            get
            {
                if (_recentProjects == null)
                {
                    _recentProjects = new TrackableCollection<UserRecentProject>();
                    _recentProjects.CollectionChanged += FixupRecentProjects;
                }
                return _recentProjects;
            }
            set
            {
                if (!ReferenceEquals(_recentProjects, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recentProjects != null)
                    {
                        _recentProjects.CollectionChanged -= FixupRecentProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserRecentProject item in _recentProjects)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recentProjects = value;
                    if (_recentProjects != null)
                    {
                        _recentProjects.CollectionChanged += FixupRecentProjects;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserRecentProject item in _recentProjects)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecentProjects");
                }
            }
        }
        private TrackableCollection<UserRecentProject> _recentProjects;
    
        [DataMember]
        public TrackableCollection<ProjectSignature> TST_PROJECT_USER_SIGNATURE
        {
            get
            {
                if (_tST_PROJECT_USER_SIGNATURE == null)
                {
                    _tST_PROJECT_USER_SIGNATURE = new TrackableCollection<ProjectSignature>();
                    _tST_PROJECT_USER_SIGNATURE.CollectionChanged += FixupTST_PROJECT_USER_SIGNATURE;
                }
                return _tST_PROJECT_USER_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_PROJECT_USER_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_PROJECT_USER_SIGNATURE != null)
                    {
                        _tST_PROJECT_USER_SIGNATURE.CollectionChanged -= FixupTST_PROJECT_USER_SIGNATURE;
                    }
                    _tST_PROJECT_USER_SIGNATURE = value;
                    if (_tST_PROJECT_USER_SIGNATURE != null)
                    {
                        _tST_PROJECT_USER_SIGNATURE.CollectionChanged += FixupTST_PROJECT_USER_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_PROJECT_USER_SIGNATURE");
                }
            }
        }
        private TrackableCollection<ProjectSignature> _tST_PROJECT_USER_SIGNATURE;
    
        [DataMember]
        public TrackableCollection<TST_REQUIREMENT_SIGNATURE> TST_REQUIREMENT_SIGNATURE
        {
            get
            {
                if (_tST_REQUIREMENT_SIGNATURE == null)
                {
                    _tST_REQUIREMENT_SIGNATURE = new TrackableCollection<TST_REQUIREMENT_SIGNATURE>();
                    _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                }
                return _tST_REQUIREMENT_SIGNATURE;
            }
            set
            {
                if (!ReferenceEquals(_tST_REQUIREMENT_SIGNATURE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged -= FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    _tST_REQUIREMENT_SIGNATURE = value;
                    if (_tST_REQUIREMENT_SIGNATURE != null)
                    {
                        _tST_REQUIREMENT_SIGNATURE.CollectionChanged += FixupTST_REQUIREMENT_SIGNATURE;
                    }
                    OnNavigationPropertyChanged("TST_REQUIREMENT_SIGNATURE");
                }
            }
        }
        private TrackableCollection<TST_REQUIREMENT_SIGNATURE> _tST_REQUIREMENT_SIGNATURE;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Builds.Clear();
            UserMembership.Clear();
            LastOpenedForUser.Clear();
            SettingsEntries.Clear();
            Group = null;
            ArtifactCustomProperties.Clear();
            UserFields.Clear();
            UserCustomProperties.Clear();
            Placeholders.Clear();
            SavedReports.Clear();
            Requirements.Clear();
            TaskFolders.Clear();
            Components.Clear();
            SavedFilters.Clear();
            Tasks.Clear();
            TaraVault = null;
            Incidents.Clear();
            VersionControlProjects.Clear();
            ArtifactAttachments.Clear();
            Attachments.Clear();
            AttachmentFolders.Clear();
            HistoryChangeSets.Clear();
            Releases.Clear();
            AutomationHosts.Clear();
            TestCases.Clear();
            TestCaseFolders.Clear();
            PendingTestRuns.Clear();
            TestSets.Clear();
            TestSetFolders.Clear();
            DataSyncMappings.Clear();
            ArtifactSharings.Clear();
            ProjectSettings.Clear();
            TestConfigurationSets.Clear();
            SharedProjects.Clear();
            Template = null;
            Baselines.Clear();
            Goals.Clear();
            Risks.Clear();
            TimecardEntries.Clear();
            ArtifactTags.Clear();
            TagFrequencies.Clear();
            TestCaseFoldersHierarchy.Clear();
            AttachmentFoldersHierarchy.Clear();
            TaskFoldersHierarchy.Clear();
            TestSetFoldersHierarchy.Clear();
            TestCaseParameterHierarchies.Clear();
            TestCaseParameterAlreadySetHierarchies.Clear();
            RecentArtifacts.Clear();
            RecentProjects.Clear();
            TST_PROJECT_USER_SIGNATURE.Clear();
            TST_REQUIREMENT_SIGNATURE.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupGroup(ProjectGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Projects.Contains(this))
            {
                previousValue.Projects.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Projects.Contains(this))
                {
                    Group.Projects.Add(this);
                }
    
                ProjectGroupId = Group.ProjectGroupId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Group")
                    && (ChangeTracker.OriginalValues["Group"] == Group))
                {
                    ChangeTracker.OriginalValues.Remove("Group");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Group", previousValue);
                }
                if (Group != null && !Group.ChangeTracker.ChangeTrackingEnabled)
                {
                    Group.StartTracking();
                }
            }
        }
    
        private void FixupTaraVault(TaraVaultProject previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (TaraVault != null)
            {
                ChangeTracker.ObjectStateChanging += TaraVault.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Project, this))
            {
                previousValue.Project = null;
            }
    
            if (TaraVault != null)
            {
                TaraVault.Project = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TaraVault")
                    && (ChangeTracker.OriginalValues["TaraVault"] == TaraVault))
                {
                    ChangeTracker.OriginalValues.Remove("TaraVault");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TaraVault", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (TaraVault != null && !TaraVault.ChangeTracker.ChangeTrackingEnabled)
                {
                    TaraVault.StartTracking();
                }
            }
        }
    
        private void FixupTemplate(ProjectTemplate previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Projects.Contains(this))
            {
                previousValue.Projects.Remove(this);
            }
    
            if (Template != null)
            {
                if (!Template.Projects.Contains(this))
                {
                    Template.Projects.Add(this);
                }
    
                ProjectTemplateId = Template.ProjectTemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Template")
                    && (ChangeTracker.OriginalValues["Template"] == Template))
                {
                    ChangeTracker.OriginalValues.Remove("Template");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Template", previousValue);
                }
                if (Template != null && !Template.ChangeTracker.ChangeTrackingEnabled)
                {
                    Template.StartTracking();
                }
            }
        }
    
        private void FixupBuilds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Build item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Builds", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Build item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Builds", item);
                    }
                }
            }
        }
    
        private void FixupUserMembership(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectUser item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserMembership", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserMembership", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupLastOpenedForUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserProfile item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LastOpenedForUser", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserProfile item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LastOpenedForUser", item);
                    }
                }
            }
        }
    
        private void FixupSettingsEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectCollectionEntry item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SettingsEntries", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectCollectionEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SettingsEntries", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactCustomProperty item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactCustomProperties", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactCustomProperties", item);
                    }
                }
            }
        }
    
        private void FixupUserFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserArtifactField item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserArtifactField item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupUserCustomProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCustomProperty item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserCustomProperties", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserCustomProperties", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPlaceholders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Placeholder item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Placeholders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Placeholder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Placeholders", item);
                    }
                }
            }
        }
    
        private void FixupSavedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedReport item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedReports", item);
                    }
                }
            }
        }
    
        private void FixupRequirements(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Requirement item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requirements", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Requirement item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requirements", item);
                    }
                }
            }
        }
    
        private void FixupTaskFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskFolder item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskFolders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskFolders", item);
                    }
                }
            }
        }
    
        private void FixupComponents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Component item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Components", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Component item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Components", item);
                    }
                }
            }
        }
    
        private void FixupSavedFilters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SavedFilter item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SavedFilters", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SavedFilter item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SavedFilters", item);
                    }
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tasks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tasks", item);
                    }
                }
            }
        }
    
        private void FixupIncidents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Incident item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Incidents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Incident item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Incidents", item);
                    }
                }
            }
        }
    
        private void FixupVersionControlProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VersionControlProject item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VersionControlProjects", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VersionControlProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VersionControlProjects", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactAttachment item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactAttachments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactAttachments", item);
                    }
                }
            }
        }
    
        private void FixupAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectAttachment item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Attachments", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Attachments", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAttachmentFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectAttachmentFolder item in e.NewItems)
                {
                    item.Folder = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttachmentFolders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectAttachmentFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Folder, this))
                    {
                        item.Folder = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttachmentFolders", item);
                    }
                }
            }
        }
    
        private void FixupHistoryChangeSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryChangeSet item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryChangeSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryChangeSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryChangeSets", item);
                    }
                }
            }
        }
    
        private void FixupReleases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Release item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Releases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Release item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Releases", item);
                    }
                }
            }
        }
    
        private void FixupAutomationHosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AutomationHost item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AutomationHosts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AutomationHost item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AutomationHosts", item);
                    }
                }
            }
        }
    
        private void FixupTestCases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCase item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCase item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCases", item);
                    }
                }
            }
        }
    
        private void FixupTestCaseFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseFolder item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseFolders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseFolders", item);
                    }
                }
            }
        }
    
        private void FixupPendingTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunsPending item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PendingTestRuns", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunsPending item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PendingTestRuns", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSet item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSets", item);
                    }
                }
            }
        }
    
        private void FixupTestSetFolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetFolder item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetFolders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetFolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetFolders", item);
                    }
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncProject item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupArtifactSharings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectArtifactSharing item in e.NewItems)
                {
                    item.SourceProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactSharings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectArtifactSharing item in e.OldItems)
                {
                    if (ReferenceEquals(item.SourceProject, this))
                    {
                        item.SourceProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactSharings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProjectSettings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectSettingValue item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProjectSettings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectSettingValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProjectSettings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestConfigurationSets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestConfigurationSet item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestConfigurationSets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestConfigurationSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestConfigurationSets", item);
                    }
                }
            }
        }
    
        private void FixupSharedProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectArtifactSharing item in e.NewItems)
                {
                    item.DestProject = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SharedProjects", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectArtifactSharing item in e.OldItems)
                {
                    if (ReferenceEquals(item.DestProject, this))
                    {
                        item.DestProject = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SharedProjects", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupBaselines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectBaseline item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Baselines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectBaseline item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Baselines", item);
                    }
                }
            }
        }
    
        private void FixupGoals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectGoal item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Goals", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectGoal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Goals", item);
                    }
                }
            }
        }
    
        private void FixupRisks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Risk item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Risks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Risk item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Risks", item);
                    }
                }
            }
        }
    
        private void FixupTimecardEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TimecardEntry item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TimecardEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TimecardEntry item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TimecardEntries", item);
                    }
                }
            }
        }
    
        private void FixupArtifactTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ArtifactTag item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ArtifactTags", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ArtifactTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ArtifactTags", item);
                    }
                }
            }
        }
    
        private void FixupTagFrequencies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectTagFrequency item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TagFrequencies", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectTagFrequency item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TagFrequencies", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseFoldersHierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseFolderHierarchy item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseFolderHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAttachmentFoldersHierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectAttachmentFolderHierarchy item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttachmentFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectAttachmentFolderHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttachmentFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskFoldersHierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskFolderHierarchy item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskFolderHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestSetFoldersHierarchy(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestSetFolderHierarchy item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestSetFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestSetFolderHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestSetFoldersHierarchy", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseParameterHierarchies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseParameterHierarchy item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseParameterHierarchies", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseParameterHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseParameterHierarchies", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseParameterAlreadySetHierarchies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseParameterHierarchyAlreadySet item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseParameterAlreadySetHierarchies", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseParameterHierarchyAlreadySet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseParameterAlreadySetHierarchies", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRecentArtifacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserRecentArtifact item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecentArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRecentArtifact item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecentArtifacts", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRecentProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserRecentProject item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecentProjects", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRecentProject item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecentProjects", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_PROJECT_USER_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectSignature item in e.NewItems)
                {
                    item.Project = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_PROJECT_USER_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectSignature item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_PROJECT_USER_SIGNATURE", item);
                    }
                }
            }
        }
    
        private void FixupTST_REQUIREMENT_SIGNATURE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.NewItems)
                {
                    item.TST_PROJECT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_REQUIREMENT_SIGNATURE item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_PROJECT, this))
                    {
                        item.TST_PROJECT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_REQUIREMENT_SIGNATURE", item);
                    }
                }
            }
        }

        #endregion

    }
}
