//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class HistoryChangeSetView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeSetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public int ArtifactId
        {
            get { return _artifactId; }
            set
            {
                if (_artifactId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactId = value;
                    OnPropertyChanged("ArtifactId");
                }
            }
        }
        private int _artifactId;
    
        [DataMember]
        public System.DateTime ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private System.DateTime _changeDate;
    
        [DataMember]
        public int ChangeTypeId
        {
            get { return _changeTypeId; }
            set
            {
                if (_changeTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeTypeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeTypeId = value;
                    OnPropertyChanged("ChangeTypeId");
                }
            }
        }
        private int _changeTypeId;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public Nullable<long> RevertId
        {
            get { return _revertId; }
            set
            {
                if (_revertId != value)
                {
                    ChangeTracker.RecordOriginalValue("RevertId", _revertId);
                    _revertId = value;
                    OnPropertyChanged("RevertId");
                }
            }
        }
        private Nullable<long> _revertId;
    
        [DataMember]
        public string ArtifactDesc
        {
            get { return _artifactDesc; }
            set
            {
                if (_artifactDesc != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactDesc", _artifactDesc);
                    _artifactDesc = value;
                    OnPropertyChanged("ArtifactDesc");
                }
            }
        }
        private string _artifactDesc;
    
        [DataMember]
        public string SignatureHash
        {
            get { return _signatureHash; }
            set
            {
                if (_signatureHash != value)
                {
                    ChangeTracker.RecordOriginalValue("SignatureHash", _signatureHash);
                    _signatureHash = value;
                    OnPropertyChanged("SignatureHash");
                }
            }
        }
        private string _signatureHash;
    
        [DataMember]
        public string ChangeTypeName
        {
            get { return _changeTypeName; }
            set
            {
                if (_changeTypeName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeTypeName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeTypeName = value;
                    OnPropertyChanged("ChangeTypeName");
                }
            }
        }
        private string _changeTypeName;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string ArtifactTypeName
        {
            get { return _artifactTypeName; }
            set
            {
                if (_artifactTypeName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactTypeName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactTypeName = value;
                    OnPropertyChanged("ArtifactTypeName");
                }
            }
        }
        private string _artifactTypeName;
    
        [DataMember]
        public string Meaning
        {
            get { return _meaning; }
            set
            {
                if (_meaning != value)
                {
                    ChangeTracker.RecordOriginalValue("Meaning", _meaning);
                    _meaning = value;
                    OnPropertyChanged("Meaning");
                }
            }
        }
        private string _meaning;
    
        [DataMember]
        public long ARTIFACT_HISTORY_ID
        {
            get { return _aRTIFACT_HISTORY_ID; }
            set
            {
                if (_aRTIFACT_HISTORY_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_HISTORY_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_HISTORY_ID = value;
                    OnPropertyChanged("ARTIFACT_HISTORY_ID");
                }
            }
        }
        private long _aRTIFACT_HISTORY_ID;
    
        [DataMember]
        public string FIELD_NAME
        {
            get { return _fIELD_NAME; }
            set
            {
                if (_fIELD_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FIELD_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fIELD_NAME = value;
                    OnPropertyChanged("FIELD_NAME");
                }
            }
        }
        private string _fIELD_NAME;
    
        [DataMember]
        public string FIELD_CAPTION
        {
            get { return _fIELD_CAPTION; }
            set
            {
                if (_fIELD_CAPTION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FIELD_CAPTION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fIELD_CAPTION = value;
                    OnPropertyChanged("FIELD_CAPTION");
                }
            }
        }
        private string _fIELD_CAPTION;
    
        [DataMember]
        public string OLD_VALUE
        {
            get { return _oLD_VALUE; }
            set
            {
                if (_oLD_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE", _oLD_VALUE);
                    _oLD_VALUE = value;
                    OnPropertyChanged("OLD_VALUE");
                }
            }
        }
        private string _oLD_VALUE;
    
        [DataMember]
        public string NEW_VALUE
        {
            get { return _nEW_VALUE; }
            set
            {
                if (_nEW_VALUE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE", _nEW_VALUE);
                    _nEW_VALUE = value;
                    OnPropertyChanged("NEW_VALUE");
                }
            }
        }
        private string _nEW_VALUE;
    
        [DataMember]
        public Nullable<int> OLD_VALUE_INT
        {
            get { return _oLD_VALUE_INT; }
            set
            {
                if (_oLD_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_INT", _oLD_VALUE_INT);
                    _oLD_VALUE_INT = value;
                    OnPropertyChanged("OLD_VALUE_INT");
                }
            }
        }
        private Nullable<int> _oLD_VALUE_INT;
    
        [DataMember]
        public Nullable<int> NEW_VALUE_INT
        {
            get { return _nEW_VALUE_INT; }
            set
            {
                if (_nEW_VALUE_INT != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_INT", _nEW_VALUE_INT);
                    _nEW_VALUE_INT = value;
                    OnPropertyChanged("NEW_VALUE_INT");
                }
            }
        }
        private Nullable<int> _nEW_VALUE_INT;
    
        [DataMember]
        public Nullable<System.DateTime> OLD_VALUE_DATE
        {
            get { return _oLD_VALUE_DATE; }
            set
            {
                if (_oLD_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("OLD_VALUE_DATE", _oLD_VALUE_DATE);
                    _oLD_VALUE_DATE = value;
                    OnPropertyChanged("OLD_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _oLD_VALUE_DATE;
    
        [DataMember]
        public Nullable<System.DateTime> NEW_VALUE_DATE
        {
            get { return _nEW_VALUE_DATE; }
            set
            {
                if (_nEW_VALUE_DATE != value)
                {
                    ChangeTracker.RecordOriginalValue("NEW_VALUE_DATE", _nEW_VALUE_DATE);
                    _nEW_VALUE_DATE = value;
                    OnPropertyChanged("NEW_VALUE_DATE");
                }
            }
        }
        private Nullable<System.DateTime> _nEW_VALUE_DATE;
    
        [DataMember]
        public Nullable<int> FIELD_ID
        {
            get { return _fIELD_ID; }
            set
            {
                if (_fIELD_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FIELD_ID", _fIELD_ID);
                    _fIELD_ID = value;
                    OnPropertyChanged("FIELD_ID");
                }
            }
        }
        private Nullable<int> _fIELD_ID;
    
        [DataMember]
        public string PROJECTNAME
        {
            get { return _pROJECTNAME; }
            set
            {
                if (_pROJECTNAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECTNAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECTNAME = value;
                    OnPropertyChanged("PROJECTNAME");
                }
            }
        }
        private string _pROJECTNAME;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
