//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomPropertyType))]
    [KnownType(typeof(CustomPropertyList))]
    [KnownType(typeof(CustomPropertyOptionValue))]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(UserCustomProperty))]
    [KnownType(typeof(WorkflowCustomProperty))]
    [KnownType(typeof(RequirementWorkflowCustomProperty))]
    [KnownType(typeof(TaskWorkflowCustomProperty))]
    [KnownType(typeof(HistoryDetail))]
    [KnownType(typeof(ReleaseWorkflowCustomProperty))]
    [KnownType(typeof(TestCaseWorkflowCustomProperty))]
    [KnownType(typeof(DataSyncCustomPropertyMapping))]
    [KnownType(typeof(CustomProperty))]
    [KnownType(typeof(DocumentWorkflowCustomProperty))]
    [KnownType(typeof(ProjectTemplate))]
    [KnownType(typeof(NotificationEvent))]
    [KnownType(typeof(RiskWorkflowCustomProperty))]
    [KnownType(typeof(TST_ADMIN_HISTORY_DETAILS))]
    public partial class CustomProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomPropertyId
        {
            get { return _customPropertyId; }
            set
            {
                if (_customPropertyId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomPropertyId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customPropertyId = value;
                    OnPropertyChanged("CustomPropertyId");
                }
            }
        }
        private int _customPropertyId;
    
        [DataMember]
        public int CustomPropertyTypeId
        {
            get { return _customPropertyTypeId; }
            set
            {
                if (_customPropertyTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyTypeId", _customPropertyTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.CustomPropertyTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _customPropertyTypeId = value;
                    OnPropertyChanged("CustomPropertyTypeId");
                }
            }
        }
        private int _customPropertyTypeId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int PropertyNumber
        {
            get { return _propertyNumber; }
            set
            {
                if (_propertyNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("PropertyNumber", _propertyNumber);
                    _propertyNumber = value;
                    OnPropertyChanged("PropertyNumber");
                }
            }
        }
        private int _propertyNumber;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> CustomPropertyListId
        {
            get { return _customPropertyListId; }
            set
            {
                if (_customPropertyListId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomPropertyListId", _customPropertyListId);
                    if (!IsDeserializing)
                    {
                        if (List != null && List.CustomPropertyListId != value)
                        {
                            List = null;
                        }
                    }
                    _customPropertyListId = value;
                    OnPropertyChanged("CustomPropertyListId");
                }
            }
        }
        private Nullable<int> _customPropertyListId;
    
        [DataMember]
        public string LegacyName
        {
            get { return _legacyName; }
            set
            {
                if (_legacyName != value)
                {
                    ChangeTracker.RecordOriginalValue("LegacyName", _legacyName);
                    _legacyName = value;
                    OnPropertyChanged("LegacyName");
                }
            }
        }
        private string _legacyName;
    
        [DataMember]
        public Nullable<int> DependentCustomPropertyId
        {
            get { return _dependentCustomPropertyId; }
            set
            {
                if (_dependentCustomPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("DependentCustomPropertyId", _dependentCustomPropertyId);
                    if (!IsDeserializing)
                    {
                        if (DependentUponCustomProperty != null && DependentUponCustomProperty.CustomPropertyId != value)
                        {
                            DependentUponCustomProperty = null;
                        }
                    }
                    _dependentCustomPropertyId = value;
                    OnPropertyChanged("DependentCustomPropertyId");
                }
            }
        }
        private Nullable<int> _dependentCustomPropertyId;
    
        [DataMember]
        public int ProjectTemplateId
        {
            get { return _projectTemplateId; }
            set
            {
                if (_projectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplateId", _projectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (ProjectTemplate != null && ProjectTemplate.ProjectTemplateId != value)
                        {
                            ProjectTemplate = null;
                        }
                    }
                    _projectTemplateId = value;
                    OnPropertyChanged("ProjectTemplateId");
                }
            }
        }
        private int _projectTemplateId;
    
        [DataMember]
        public Nullable<int> Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    ChangeTracker.RecordOriginalValue("Position", _position);
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private Nullable<int> _position;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CustomPropertyType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private CustomPropertyType _type;
    
        [DataMember]
        public CustomPropertyList List
        {
            get { return _list; }
            set
            {
                if (!ReferenceEquals(_list, value))
                {
                    var previousValue = _list;
                    _list = value;
                    FixupList(previousValue);
                    OnNavigationPropertyChanged("List");
                }
            }
        }
        private CustomPropertyList _list;
    
        [DataMember]
        public TrackableCollection<CustomPropertyOptionValue> Options
        {
            get
            {
                if (_options == null)
                {
                    _options = new TrackableCollection<CustomPropertyOptionValue>();
                    _options.CollectionChanged += FixupOptions;
                }
                return _options;
            }
            set
            {
                if (!ReferenceEquals(_options, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_options != null)
                    {
                        _options.CollectionChanged -= FixupOptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CustomPropertyOptionValue item in _options)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _options = value;
                    if (_options != null)
                    {
                        _options.CollectionChanged += FixupOptions;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CustomPropertyOptionValue item in _options)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Options");
                }
            }
        }
        private TrackableCollection<CustomPropertyOptionValue> _options;
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<UserCustomProperty> UserFields
        {
            get
            {
                if (_userFields == null)
                {
                    _userFields = new TrackableCollection<UserCustomProperty>();
                    _userFields.CollectionChanged += FixupUserFields;
                }
                return _userFields;
            }
            set
            {
                if (!ReferenceEquals(_userFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged -= FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UserCustomProperty item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _userFields = value;
                    if (_userFields != null)
                    {
                        _userFields.CollectionChanged += FixupUserFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UserCustomProperty item in _userFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("UserFields");
                }
            }
        }
        private TrackableCollection<UserCustomProperty> _userFields;
    
        [DataMember]
        public TrackableCollection<WorkflowCustomProperty> IncidentWorkflowFields
        {
            get
            {
                if (_incidentWorkflowFields == null)
                {
                    _incidentWorkflowFields = new TrackableCollection<WorkflowCustomProperty>();
                    _incidentWorkflowFields.CollectionChanged += FixupIncidentWorkflowFields;
                }
                return _incidentWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_incidentWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_incidentWorkflowFields != null)
                    {
                        _incidentWorkflowFields.CollectionChanged -= FixupIncidentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (WorkflowCustomProperty item in _incidentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _incidentWorkflowFields = value;
                    if (_incidentWorkflowFields != null)
                    {
                        _incidentWorkflowFields.CollectionChanged += FixupIncidentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (WorkflowCustomProperty item in _incidentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("IncidentWorkflowFields");
                }
            }
        }
        private TrackableCollection<WorkflowCustomProperty> _incidentWorkflowFields;
    
        [DataMember]
        public TrackableCollection<RequirementWorkflowCustomProperty> RequirementWorkflowFields
        {
            get
            {
                if (_requirementWorkflowFields == null)
                {
                    _requirementWorkflowFields = new TrackableCollection<RequirementWorkflowCustomProperty>();
                    _requirementWorkflowFields.CollectionChanged += FixupRequirementWorkflowFields;
                }
                return _requirementWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_requirementWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requirementWorkflowFields != null)
                    {
                        _requirementWorkflowFields.CollectionChanged -= FixupRequirementWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RequirementWorkflowCustomProperty item in _requirementWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _requirementWorkflowFields = value;
                    if (_requirementWorkflowFields != null)
                    {
                        _requirementWorkflowFields.CollectionChanged += FixupRequirementWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RequirementWorkflowCustomProperty item in _requirementWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RequirementWorkflowFields");
                }
            }
        }
        private TrackableCollection<RequirementWorkflowCustomProperty> _requirementWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TaskWorkflowCustomProperty> TaskWorkflowFields
        {
            get
            {
                if (_taskWorkflowFields == null)
                {
                    _taskWorkflowFields = new TrackableCollection<TaskWorkflowCustomProperty>();
                    _taskWorkflowFields.CollectionChanged += FixupTaskWorkflowFields;
                }
                return _taskWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_taskWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskWorkflowFields != null)
                    {
                        _taskWorkflowFields.CollectionChanged -= FixupTaskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TaskWorkflowCustomProperty item in _taskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _taskWorkflowFields = value;
                    if (_taskWorkflowFields != null)
                    {
                        _taskWorkflowFields.CollectionChanged += FixupTaskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TaskWorkflowCustomProperty item in _taskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TaskWorkflowFields");
                }
            }
        }
        private TrackableCollection<TaskWorkflowCustomProperty> _taskWorkflowFields;
    
        [DataMember]
        public TrackableCollection<HistoryDetail> HistoryDetails
        {
            get
            {
                if (_historyDetails == null)
                {
                    _historyDetails = new TrackableCollection<HistoryDetail>();
                    _historyDetails.CollectionChanged += FixupHistoryDetails;
                }
                return _historyDetails;
            }
            set
            {
                if (!ReferenceEquals(_historyDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyDetails != null)
                    {
                        _historyDetails.CollectionChanged -= FixupHistoryDetails;
                    }
                    _historyDetails = value;
                    if (_historyDetails != null)
                    {
                        _historyDetails.CollectionChanged += FixupHistoryDetails;
                    }
                    OnNavigationPropertyChanged("HistoryDetails");
                }
            }
        }
        private TrackableCollection<HistoryDetail> _historyDetails;
    
        [DataMember]
        public TrackableCollection<ReleaseWorkflowCustomProperty> ReleaseWorkflowFields
        {
            get
            {
                if (_releaseWorkflowFields == null)
                {
                    _releaseWorkflowFields = new TrackableCollection<ReleaseWorkflowCustomProperty>();
                    _releaseWorkflowFields.CollectionChanged += FixupReleaseWorkflowFields;
                }
                return _releaseWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_releaseWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_releaseWorkflowFields != null)
                    {
                        _releaseWorkflowFields.CollectionChanged -= FixupReleaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ReleaseWorkflowCustomProperty item in _releaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _releaseWorkflowFields = value;
                    if (_releaseWorkflowFields != null)
                    {
                        _releaseWorkflowFields.CollectionChanged += FixupReleaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ReleaseWorkflowCustomProperty item in _releaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ReleaseWorkflowFields");
                }
            }
        }
        private TrackableCollection<ReleaseWorkflowCustomProperty> _releaseWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TestCaseWorkflowCustomProperty> TestCaseWorkflowFields
        {
            get
            {
                if (_testCaseWorkflowFields == null)
                {
                    _testCaseWorkflowFields = new TrackableCollection<TestCaseWorkflowCustomProperty>();
                    _testCaseWorkflowFields.CollectionChanged += FixupTestCaseWorkflowFields;
                }
                return _testCaseWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_testCaseWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testCaseWorkflowFields != null)
                    {
                        _testCaseWorkflowFields.CollectionChanged -= FixupTestCaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (TestCaseWorkflowCustomProperty item in _testCaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _testCaseWorkflowFields = value;
                    if (_testCaseWorkflowFields != null)
                    {
                        _testCaseWorkflowFields.CollectionChanged += FixupTestCaseWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (TestCaseWorkflowCustomProperty item in _testCaseWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TestCaseWorkflowFields");
                }
            }
        }
        private TrackableCollection<TestCaseWorkflowCustomProperty> _testCaseWorkflowFields;
    
        [DataMember]
        public TrackableCollection<DataSyncCustomPropertyMapping> DataSyncMappings
        {
            get
            {
                if (_dataSyncMappings == null)
                {
                    _dataSyncMappings = new TrackableCollection<DataSyncCustomPropertyMapping>();
                    _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                }
                return _dataSyncMappings;
            }
            set
            {
                if (!ReferenceEquals(_dataSyncMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged -= FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DataSyncCustomPropertyMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dataSyncMappings = value;
                    if (_dataSyncMappings != null)
                    {
                        _dataSyncMappings.CollectionChanged += FixupDataSyncMappings;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DataSyncCustomPropertyMapping item in _dataSyncMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DataSyncMappings");
                }
            }
        }
        private TrackableCollection<DataSyncCustomPropertyMapping> _dataSyncMappings;
    
        [DataMember]
        public TrackableCollection<CustomProperty> DependentCustomProperty
        {
            get
            {
                if (_dependentCustomProperty == null)
                {
                    _dependentCustomProperty = new TrackableCollection<CustomProperty>();
                    _dependentCustomProperty.CollectionChanged += FixupDependentCustomProperty;
                }
                return _dependentCustomProperty;
            }
            set
            {
                if (!ReferenceEquals(_dependentCustomProperty, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dependentCustomProperty != null)
                    {
                        _dependentCustomProperty.CollectionChanged -= FixupDependentCustomProperty;
                    }
                    _dependentCustomProperty = value;
                    if (_dependentCustomProperty != null)
                    {
                        _dependentCustomProperty.CollectionChanged += FixupDependentCustomProperty;
                    }
                    OnNavigationPropertyChanged("DependentCustomProperty");
                }
            }
        }
        private TrackableCollection<CustomProperty> _dependentCustomProperty;
    
        [DataMember]
        public CustomProperty DependentUponCustomProperty
        {
            get { return _dependentUponCustomProperty; }
            set
            {
                if (!ReferenceEquals(_dependentUponCustomProperty, value))
                {
                    var previousValue = _dependentUponCustomProperty;
                    _dependentUponCustomProperty = value;
                    FixupDependentUponCustomProperty(previousValue);
                    OnNavigationPropertyChanged("DependentUponCustomProperty");
                }
            }
        }
        private CustomProperty _dependentUponCustomProperty;
    
        [DataMember]
        public TrackableCollection<DocumentWorkflowCustomProperty> DocumentWorkflowFields
        {
            get
            {
                if (_documentWorkflowFields == null)
                {
                    _documentWorkflowFields = new TrackableCollection<DocumentWorkflowCustomProperty>();
                    _documentWorkflowFields.CollectionChanged += FixupDocumentWorkflowFields;
                }
                return _documentWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_documentWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_documentWorkflowFields != null)
                    {
                        _documentWorkflowFields.CollectionChanged -= FixupDocumentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DocumentWorkflowCustomProperty item in _documentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _documentWorkflowFields = value;
                    if (_documentWorkflowFields != null)
                    {
                        _documentWorkflowFields.CollectionChanged += FixupDocumentWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DocumentWorkflowCustomProperty item in _documentWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DocumentWorkflowFields");
                }
            }
        }
        private TrackableCollection<DocumentWorkflowCustomProperty> _documentWorkflowFields;
    
        [DataMember]
        public ProjectTemplate ProjectTemplate
        {
            get { return _projectTemplate; }
            set
            {
                if (!ReferenceEquals(_projectTemplate, value))
                {
                    var previousValue = _projectTemplate;
                    _projectTemplate = value;
                    FixupProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("ProjectTemplate");
                }
            }
        }
        private ProjectTemplate _projectTemplate;
    
        [DataMember]
        public TrackableCollection<NotificationEvent> NotificationEvents
        {
            get
            {
                if (_notificationEvents == null)
                {
                    _notificationEvents = new TrackableCollection<NotificationEvent>();
                    _notificationEvents.CollectionChanged += FixupNotificationEvents;
                }
                return _notificationEvents;
            }
            set
            {
                if (!ReferenceEquals(_notificationEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged -= FixupNotificationEvents;
                    }
                    _notificationEvents = value;
                    if (_notificationEvents != null)
                    {
                        _notificationEvents.CollectionChanged += FixupNotificationEvents;
                    }
                    OnNavigationPropertyChanged("NotificationEvents");
                }
            }
        }
        private TrackableCollection<NotificationEvent> _notificationEvents;
    
        [DataMember]
        public TrackableCollection<RiskWorkflowCustomProperty> RiskWorkflowFields
        {
            get
            {
                if (_riskWorkflowFields == null)
                {
                    _riskWorkflowFields = new TrackableCollection<RiskWorkflowCustomProperty>();
                    _riskWorkflowFields.CollectionChanged += FixupRiskWorkflowFields;
                }
                return _riskWorkflowFields;
            }
            set
            {
                if (!ReferenceEquals(_riskWorkflowFields, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_riskWorkflowFields != null)
                    {
                        _riskWorkflowFields.CollectionChanged -= FixupRiskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RiskWorkflowCustomProperty item in _riskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _riskWorkflowFields = value;
                    if (_riskWorkflowFields != null)
                    {
                        _riskWorkflowFields.CollectionChanged += FixupRiskWorkflowFields;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RiskWorkflowCustomProperty item in _riskWorkflowFields)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RiskWorkflowFields");
                }
            }
        }
        private TrackableCollection<RiskWorkflowCustomProperty> _riskWorkflowFields;
    
        [DataMember]
        public TrackableCollection<TST_ADMIN_HISTORY_DETAILS> TST_ADMIN_HISTORY_DETAILS
        {
            get
            {
                if (_tST_ADMIN_HISTORY_DETAILS == null)
                {
                    _tST_ADMIN_HISTORY_DETAILS = new TrackableCollection<TST_ADMIN_HISTORY_DETAILS>();
                    _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                }
                return _tST_ADMIN_HISTORY_DETAILS;
            }
            set
            {
                if (!ReferenceEquals(_tST_ADMIN_HISTORY_DETAILS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged -= FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    _tST_ADMIN_HISTORY_DETAILS = value;
                    if (_tST_ADMIN_HISTORY_DETAILS != null)
                    {
                        _tST_ADMIN_HISTORY_DETAILS.CollectionChanged += FixupTST_ADMIN_HISTORY_DETAILS;
                    }
                    OnNavigationPropertyChanged("TST_ADMIN_HISTORY_DETAILS");
                }
            }
        }
        private TrackableCollection<TST_ADMIN_HISTORY_DETAILS> _tST_ADMIN_HISTORY_DETAILS;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Type = null;
            List = null;
            Options.Clear();
            ArtifactType = null;
            UserFields.Clear();
            IncidentWorkflowFields.Clear();
            RequirementWorkflowFields.Clear();
            TaskWorkflowFields.Clear();
            HistoryDetails.Clear();
            ReleaseWorkflowFields.Clear();
            TestCaseWorkflowFields.Clear();
            DataSyncMappings.Clear();
            DependentCustomProperty.Clear();
            DependentUponCustomProperty = null;
            DocumentWorkflowFields.Clear();
            ProjectTemplate = null;
            NotificationEvents.Clear();
            RiskWorkflowFields.Clear();
            TST_ADMIN_HISTORY_DETAILS.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupType(CustomPropertyType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomProperties.Contains(this))
            {
                previousValue.CustomProperties.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.CustomProperties.Contains(this))
                {
                    Type.CustomProperties.Add(this);
                }
    
                CustomPropertyTypeId = Type.CustomPropertyTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupList(CustomPropertyList previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomProperties.Contains(this))
            {
                previousValue.CustomProperties.Remove(this);
            }
    
            if (List != null)
            {
                if (!List.CustomProperties.Contains(this))
                {
                    List.CustomProperties.Add(this);
                }
    
                CustomPropertyListId = List.CustomPropertyListId;
            }
            else if (!skipKeys)
            {
                CustomPropertyListId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("List")
                    && (ChangeTracker.OriginalValues["List"] == List))
                {
                    ChangeTracker.OriginalValues.Remove("List");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("List", previousValue);
                }
                if (List != null && !List.ChangeTracker.ChangeTrackingEnabled)
                {
                    List.StartTracking();
                }
            }
        }
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomProperties.Contains(this))
            {
                previousValue.CustomProperties.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.CustomProperties.Contains(this))
                {
                    ArtifactType.CustomProperties.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupDependentUponCustomProperty(CustomProperty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DependentCustomProperty.Contains(this))
            {
                previousValue.DependentCustomProperty.Remove(this);
            }
    
            if (DependentUponCustomProperty != null)
            {
                if (!DependentUponCustomProperty.DependentCustomProperty.Contains(this))
                {
                    DependentUponCustomProperty.DependentCustomProperty.Add(this);
                }
    
                DependentCustomPropertyId = DependentUponCustomProperty.CustomPropertyId;
            }
            else if (!skipKeys)
            {
                DependentCustomPropertyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DependentUponCustomProperty")
                    && (ChangeTracker.OriginalValues["DependentUponCustomProperty"] == DependentUponCustomProperty))
                {
                    ChangeTracker.OriginalValues.Remove("DependentUponCustomProperty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DependentUponCustomProperty", previousValue);
                }
                if (DependentUponCustomProperty != null && !DependentUponCustomProperty.ChangeTracker.ChangeTrackingEnabled)
                {
                    DependentUponCustomProperty.StartTracking();
                }
            }
        }
    
        private void FixupProjectTemplate(ProjectTemplate previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomProperties.Contains(this))
            {
                previousValue.CustomProperties.Remove(this);
            }
    
            if (ProjectTemplate != null)
            {
                if (!ProjectTemplate.CustomProperties.Contains(this))
                {
                    ProjectTemplate.CustomProperties.Add(this);
                }
    
                ProjectTemplateId = ProjectTemplate.ProjectTemplateId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProjectTemplate")
                    && (ChangeTracker.OriginalValues["ProjectTemplate"] == ProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("ProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProjectTemplate", previousValue);
                }
                if (ProjectTemplate != null && !ProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProjectTemplate.StartTracking();
                }
            }
        }
    
        private void FixupOptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomPropertyOptionValue item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Options", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomPropertyOptionValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Options", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupUserFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupIncidentWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IncidentWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IncidentWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRequirementWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequirementWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequirementWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequirementWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequirementWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTaskWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupHistoryDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryDetail item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryDetails", item);
                    }
                }
            }
        }
    
        private void FixupReleaseWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReleaseWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReleaseWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReleaseWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReleaseWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTestCaseWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestCaseWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestCaseWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestCaseWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestCaseWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDataSyncMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataSyncCustomPropertyMapping item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataSyncMappings", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataSyncCustomPropertyMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataSyncMappings", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDependentCustomProperty(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomProperty item in e.NewItems)
                {
                    item.DependentUponCustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DependentCustomProperty", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.DependentUponCustomProperty, this))
                    {
                        item.DependentUponCustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DependentCustomProperty", item);
                    }
                }
            }
        }
    
        private void FixupDocumentWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DocumentWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DocumentWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DocumentWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DocumentWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupNotificationEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationEvent item in e.NewItems)
                {
                    if (!item.CustomProperties.Contains(this))
                    {
                        item.CustomProperties.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationEvent item in e.OldItems)
                {
                    if (item.CustomProperties.Contains(this))
                    {
                        item.CustomProperties.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationEvents", item);
                    }
                }
            }
        }
    
        private void FixupRiskWorkflowFields(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RiskWorkflowCustomProperty item in e.NewItems)
                {
                    item.CustomProperty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RiskWorkflowFields", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RiskWorkflowCustomProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomProperty, this))
                    {
                        item.CustomProperty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RiskWorkflowFields", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTST_ADMIN_HISTORY_DETAILS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.NewItems)
                {
                    item.TST_CUSTOM_PROPERTY = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TST_ADMIN_HISTORY_DETAILS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TST_CUSTOM_PROPERTY, this))
                    {
                        item.TST_CUSTOM_PROPERTY = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_ADMIN_HISTORY_DETAILS", item);
                    }
                }
            }
        }

        #endregion

    }
}
