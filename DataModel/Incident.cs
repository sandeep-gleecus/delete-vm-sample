//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Build))]
    [KnownType(typeof(User))]
    [KnownType(typeof(IncidentPriority))]
    [KnownType(typeof(IncidentSeverity))]
    [KnownType(typeof(IncidentStatus))]
    [KnownType(typeof(IncidentType))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(IncidentResolution))]
    [KnownType(typeof(Release))]
    [KnownType(typeof(TestRunStep))]
    public partial class Incident: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IncidentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private int _incidentId;
    
        [DataMember]
        public Nullable<int> SeverityId
        {
            get { return _severityId; }
            set
            {
                if (_severityId != value)
                {
                    ChangeTracker.RecordOriginalValue("SeverityId", _severityId);
                    if (!IsDeserializing)
                    {
                        if (Severity != null && Severity.SeverityId != value)
                        {
                            Severity = null;
                        }
                    }
                    _severityId = value;
                    OnPropertyChanged("SeverityId");
                }
            }
        }
        private Nullable<int> _severityId;
    
        [DataMember]
        public Nullable<int> DetectedReleaseId
        {
            get { return _detectedReleaseId; }
            set
            {
                if (_detectedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("DetectedReleaseId", _detectedReleaseId);
                    if (!IsDeserializing)
                    {
                        if (DetectedRelease != null && DetectedRelease.ReleaseId != value)
                        {
                            DetectedRelease = null;
                        }
                    }
                    _detectedReleaseId = value;
                    OnPropertyChanged("DetectedReleaseId");
                }
            }
        }
        private Nullable<int> _detectedReleaseId;
    
        [DataMember]
        public Nullable<int> PriorityId
        {
            get { return _priorityId; }
            set
            {
                if (_priorityId != value)
                {
                    ChangeTracker.RecordOriginalValue("PriorityId", _priorityId);
                    if (!IsDeserializing)
                    {
                        if (Priority != null && Priority.PriorityId != value)
                        {
                            Priority = null;
                        }
                    }
                    _priorityId = value;
                    OnPropertyChanged("PriorityId");
                }
            }
        }
        private Nullable<int> _priorityId;
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int IncidentStatusId
        {
            get { return _incidentStatusId; }
            set
            {
                if (_incidentStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentStatusId", _incidentStatusId);
                    if (!IsDeserializing)
                    {
                        if (Status != null && Status.IncidentStatusId != value)
                        {
                            Status = null;
                        }
                    }
                    _incidentStatusId = value;
                    OnPropertyChanged("IncidentStatusId");
                }
            }
        }
        private int _incidentStatusId;
    
        [DataMember]
        public int IncidentTypeId
        {
            get { return _incidentTypeId; }
            set
            {
                if (_incidentTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentTypeId", _incidentTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.IncidentTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _incidentTypeId = value;
                    OnPropertyChanged("IncidentTypeId");
                }
            }
        }
        private int _incidentTypeId;
    
        [DataMember]
        public int OpenerId
        {
            get { return _openerId; }
            set
            {
                if (_openerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OpenerId", _openerId);
                    if (!IsDeserializing)
                    {
                        if (Opener != null && Opener.UserId != value)
                        {
                            Opener = null;
                        }
                    }
                    _openerId = value;
                    OnPropertyChanged("OpenerId");
                }
            }
        }
        private int _openerId;
    
        [DataMember]
        public Nullable<int> OwnerId
        {
            get { return _ownerId; }
            set
            {
                if (_ownerId != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerId", _ownerId);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserId != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerId = value;
                    OnPropertyChanged("OwnerId");
                }
            }
        }
        private Nullable<int> _ownerId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> ResolvedReleaseId
        {
            get { return _resolvedReleaseId; }
            set
            {
                if (_resolvedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResolvedReleaseId", _resolvedReleaseId);
                    if (!IsDeserializing)
                    {
                        if (ResolvedRelease != null && ResolvedRelease.ReleaseId != value)
                        {
                            ResolvedRelease = null;
                        }
                    }
                    _resolvedReleaseId = value;
                    OnPropertyChanged("ResolvedReleaseId");
                }
            }
        }
        private Nullable<int> _resolvedReleaseId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> VerifiedReleaseId
        {
            get { return _verifiedReleaseId; }
            set
            {
                if (_verifiedReleaseId != value)
                {
                    ChangeTracker.RecordOriginalValue("VerifiedReleaseId", _verifiedReleaseId);
                    if (!IsDeserializing)
                    {
                        if (VerifiedRelease != null && VerifiedRelease.ReleaseId != value)
                        {
                            VerifiedRelease = null;
                        }
                    }
                    _verifiedReleaseId = value;
                    OnPropertyChanged("VerifiedReleaseId");
                }
            }
        }
        private Nullable<int> _verifiedReleaseId;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public bool IsAttachments
        {
            get { return _isAttachments; }
            set
            {
                if (_isAttachments != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAttachments", _isAttachments);
                    _isAttachments = value;
                    OnPropertyChanged("IsAttachments");
                }
            }
        }
        private bool _isAttachments;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDate", _startDate);
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> ClosedDate
        {
            get { return _closedDate; }
            set
            {
                if (_closedDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ClosedDate", _closedDate);
                    _closedDate = value;
                    OnPropertyChanged("ClosedDate");
                }
            }
        }
        private Nullable<System.DateTime> _closedDate;
    
        [DataMember]
        public int CompletionPercent
        {
            get { return _completionPercent; }
            set
            {
                if (_completionPercent != value)
                {
                    ChangeTracker.RecordOriginalValue("CompletionPercent", _completionPercent);
                    _completionPercent = value;
                    OnPropertyChanged("CompletionPercent");
                }
            }
        }
        private int _completionPercent;
    
        [DataMember]
        public Nullable<int> EstimatedEffort
        {
            get { return _estimatedEffort; }
            set
            {
                if (_estimatedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedEffort", _estimatedEffort);
                    _estimatedEffort = value;
                    OnPropertyChanged("EstimatedEffort");
                }
            }
        }
        private Nullable<int> _estimatedEffort;
    
        [DataMember]
        public Nullable<int> ActualEffort
        {
            get { return _actualEffort; }
            set
            {
                if (_actualEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualEffort", _actualEffort);
                    _actualEffort = value;
                    OnPropertyChanged("ActualEffort");
                }
            }
        }
        private Nullable<int> _actualEffort;
    
        [DataMember]
        public Nullable<int> ProjectedEffort
        {
            get { return _projectedEffort; }
            set
            {
                if (_projectedEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectedEffort", _projectedEffort);
                    _projectedEffort = value;
                    OnPropertyChanged("ProjectedEffort");
                }
            }
        }
        private Nullable<int> _projectedEffort;
    
        [DataMember]
        public Nullable<int> RemainingEffort
        {
            get { return _remainingEffort; }
            set
            {
                if (_remainingEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("RemainingEffort", _remainingEffort);
                    _remainingEffort = value;
                    OnPropertyChanged("RemainingEffort");
                }
            }
        }
        private Nullable<int> _remainingEffort;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string ComponentIds
        {
            get { return _componentIds; }
            set
            {
                if (_componentIds != value)
                {
                    ChangeTracker.RecordOriginalValue("ComponentIds", _componentIds);
                    _componentIds = value;
                    OnPropertyChanged("ComponentIds");
                }
            }
        }
        private string _componentIds;
    
        [DataMember]
        public System.DateTime ConcurrencyDate
        {
            get { return _concurrencyDate; }
            set
            {
                if (_concurrencyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ConcurrencyDate", _concurrencyDate);
                    _concurrencyDate = value;
                    OnPropertyChanged("ConcurrencyDate");
                }
            }
        }
        private System.DateTime _concurrencyDate;
    
        [DataMember]
        public Nullable<int> Rank
        {
            get { return _rank; }
            set
            {
                if (_rank != value)
                {
                    ChangeTracker.RecordOriginalValue("Rank", _rank);
                    _rank = value;
                    OnPropertyChanged("Rank");
                }
            }
        }
        private Nullable<int> _rank;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    ChangeTracker.RecordOriginalValue("EndDate", _endDate);
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public Nullable<int> DetectedBuildId
        {
            get { return _detectedBuildId; }
            set
            {
                if (_detectedBuildId != value)
                {
                    ChangeTracker.RecordOriginalValue("DetectedBuildId", _detectedBuildId);
                    if (!IsDeserializing)
                    {
                        if (DetectedBuild != null && DetectedBuild.BuildId != value)
                        {
                            DetectedBuild = null;
                        }
                    }
                    _detectedBuildId = value;
                    OnPropertyChanged("DetectedBuildId");
                }
            }
        }
        private Nullable<int> _detectedBuildId;
    
        [DataMember]
        public Nullable<int> BuildId
        {
            get { return _buildId; }
            set
            {
                if (_buildId != value)
                {
                    ChangeTracker.RecordOriginalValue("BuildId", _buildId);
                    if (!IsDeserializing)
                    {
                        if (Build != null && Build.BuildId != value)
                        {
                            Build = null;
                        }
                        if (ResolvedBuild != null && ResolvedBuild.BuildId != value)
                        {
                            ResolvedBuild = null;
                        }
                    }
                    _buildId = value;
                    OnPropertyChanged("BuildId");
                }
            }
        }
        private Nullable<int> _buildId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Build Build
        {
            get { return _build; }
            set
            {
                if (!ReferenceEquals(_build, value))
                {
                    var previousValue = _build;
                    _build = value;
                    FixupBuild(previousValue);
                    OnNavigationPropertyChanged("Build");
                }
            }
        }
        private Build _build;
    
        [DataMember]
        public User Opener
        {
            get { return _opener; }
            set
            {
                if (!ReferenceEquals(_opener, value))
                {
                    var previousValue = _opener;
                    _opener = value;
                    FixupOpener(previousValue);
                    OnNavigationPropertyChanged("Opener");
                }
            }
        }
        private User _opener;
    
        [DataMember]
        public IncidentPriority Priority
        {
            get { return _priority; }
            set
            {
                if (!ReferenceEquals(_priority, value))
                {
                    var previousValue = _priority;
                    _priority = value;
                    FixupPriority(previousValue);
                    OnNavigationPropertyChanged("Priority");
                }
            }
        }
        private IncidentPriority _priority;
    
        [DataMember]
        public IncidentSeverity Severity
        {
            get { return _severity; }
            set
            {
                if (!ReferenceEquals(_severity, value))
                {
                    var previousValue = _severity;
                    _severity = value;
                    FixupSeverity(previousValue);
                    OnNavigationPropertyChanged("Severity");
                }
            }
        }
        private IncidentSeverity _severity;
    
        [DataMember]
        public IncidentStatus Status
        {
            get { return _status; }
            set
            {
                if (!ReferenceEquals(_status, value))
                {
                    var previousValue = _status;
                    _status = value;
                    FixupStatus(previousValue);
                    OnNavigationPropertyChanged("Status");
                }
            }
        }
        private IncidentStatus _status;
    
        [DataMember]
        public IncidentType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private IncidentType _type;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public TrackableCollection<IncidentResolution> Resolutions
        {
            get
            {
                if (_resolutions == null)
                {
                    _resolutions = new TrackableCollection<IncidentResolution>();
                    _resolutions.CollectionChanged += FixupResolutions;
                }
                return _resolutions;
            }
            set
            {
                if (!ReferenceEquals(_resolutions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_resolutions != null)
                    {
                        _resolutions.CollectionChanged -= FixupResolutions;
                    }
                    _resolutions = value;
                    if (_resolutions != null)
                    {
                        _resolutions.CollectionChanged += FixupResolutions;
                    }
                    OnNavigationPropertyChanged("Resolutions");
                }
            }
        }
        private TrackableCollection<IncidentResolution> _resolutions;
    
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
        [DataMember]
        public Release DetectedRelease
        {
            get { return _detectedRelease; }
            set
            {
                if (!ReferenceEquals(_detectedRelease, value))
                {
                    var previousValue = _detectedRelease;
                    _detectedRelease = value;
                    FixupDetectedRelease(previousValue);
                    OnNavigationPropertyChanged("DetectedRelease");
                }
            }
        }
        private Release _detectedRelease;
    
        [DataMember]
        public Release ResolvedRelease
        {
            get { return _resolvedRelease; }
            set
            {
                if (!ReferenceEquals(_resolvedRelease, value))
                {
                    var previousValue = _resolvedRelease;
                    _resolvedRelease = value;
                    FixupResolvedRelease(previousValue);
                    OnNavigationPropertyChanged("ResolvedRelease");
                }
            }
        }
        private Release _resolvedRelease;
    
        [DataMember]
        public Release VerifiedRelease
        {
            get { return _verifiedRelease; }
            set
            {
                if (!ReferenceEquals(_verifiedRelease, value))
                {
                    var previousValue = _verifiedRelease;
                    _verifiedRelease = value;
                    FixupVerifiedRelease(previousValue);
                    OnNavigationPropertyChanged("VerifiedRelease");
                }
            }
        }
        private Release _verifiedRelease;
    
        [DataMember]
        public TrackableCollection<TestRunStep> TestRunSteps
        {
            get
            {
                if (_testRunSteps == null)
                {
                    _testRunSteps = new TrackableCollection<TestRunStep>();
                    _testRunSteps.CollectionChanged += FixupTestRunSteps;
                }
                return _testRunSteps;
            }
            set
            {
                if (!ReferenceEquals(_testRunSteps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged -= FixupTestRunSteps;
                    }
                    _testRunSteps = value;
                    if (_testRunSteps != null)
                    {
                        _testRunSteps.CollectionChanged += FixupTestRunSteps;
                    }
                    OnNavigationPropertyChanged("TestRunSteps");
                }
            }
        }
        private TrackableCollection<TestRunStep> _testRunSteps;
    
        [DataMember]
        public Build DetectedBuild
        {
            get { return _detectedBuild; }
            set
            {
                if (!ReferenceEquals(_detectedBuild, value))
                {
                    var previousValue = _detectedBuild;
                    _detectedBuild = value;
                    FixupDetectedBuild(previousValue);
                    OnNavigationPropertyChanged("DetectedBuild");
                }
            }
        }
        private Build _detectedBuild;
    
        [DataMember]
        public Build ResolvedBuild
        {
            get { return _resolvedBuild; }
            set
            {
                if (!ReferenceEquals(_resolvedBuild, value))
                {
                    var previousValue = _resolvedBuild;
                    _resolvedBuild = value;
                    FixupResolvedBuild(previousValue);
                    OnNavigationPropertyChanged("ResolvedBuild");
                }
            }
        }
        private Build _resolvedBuild;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Build = null;
            Opener = null;
            Priority = null;
            Severity = null;
            Status = null;
            Type = null;
            Project = null;
            Resolutions.Clear();
            Owner = null;
            DetectedRelease = null;
            ResolvedRelease = null;
            VerifiedRelease = null;
            TestRunSteps.Clear();
            DetectedBuild = null;
            ResolvedBuild = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBuild(Build previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Build != null)
            {
                BuildId = Build.BuildId;
            }
    
            else if (!skipKeys)
            {
                BuildId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Build")
                    && (ChangeTracker.OriginalValues["Build"] == Build))
                {
                    ChangeTracker.OriginalValues.Remove("Build");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Build", previousValue);
                }
                if (Build != null && !Build.ChangeTracker.ChangeTrackingEnabled)
                {
                    Build.StartTracking();
                }
            }
        }
    
        private void FixupOpener(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OpenedIncidents.Contains(this))
            {
                previousValue.OpenedIncidents.Remove(this);
            }
    
            if (Opener != null)
            {
                if (!Opener.OpenedIncidents.Contains(this))
                {
                    Opener.OpenedIncidents.Add(this);
                }
    
                OpenerId = Opener.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Opener")
                    && (ChangeTracker.OriginalValues["Opener"] == Opener))
                {
                    ChangeTracker.OriginalValues.Remove("Opener");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Opener", previousValue);
                }
                if (Opener != null && !Opener.ChangeTracker.ChangeTrackingEnabled)
                {
                    Opener.StartTracking();
                }
            }
        }
    
        private void FixupPriority(IncidentPriority previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Priority != null)
            {
                if (!Priority.Incidents.Contains(this))
                {
                    Priority.Incidents.Add(this);
                }
    
                PriorityId = Priority.PriorityId;
            }
            else if (!skipKeys)
            {
                PriorityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Priority")
                    && (ChangeTracker.OriginalValues["Priority"] == Priority))
                {
                    ChangeTracker.OriginalValues.Remove("Priority");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Priority", previousValue);
                }
                if (Priority != null && !Priority.ChangeTracker.ChangeTrackingEnabled)
                {
                    Priority.StartTracking();
                }
            }
        }
    
        private void FixupSeverity(IncidentSeverity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Severity != null)
            {
                if (!Severity.Incidents.Contains(this))
                {
                    Severity.Incidents.Add(this);
                }
    
                SeverityId = Severity.SeverityId;
            }
            else if (!skipKeys)
            {
                SeverityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Severity")
                    && (ChangeTracker.OriginalValues["Severity"] == Severity))
                {
                    ChangeTracker.OriginalValues.Remove("Severity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Severity", previousValue);
                }
                if (Severity != null && !Severity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Severity.StartTracking();
                }
            }
        }
    
        private void FixupStatus(IncidentStatus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Status != null)
            {
                if (!Status.Incidents.Contains(this))
                {
                    Status.Incidents.Add(this);
                }
    
                IncidentStatusId = Status.IncidentStatusId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Status")
                    && (ChangeTracker.OriginalValues["Status"] == Status))
                {
                    ChangeTracker.OriginalValues.Remove("Status");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Status", previousValue);
                }
                if (Status != null && !Status.ChangeTracker.ChangeTrackingEnabled)
                {
                    Status.StartTracking();
                }
            }
        }
    
        private void FixupType(IncidentType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.Incidents.Contains(this))
                {
                    Type.Incidents.Add(this);
                }
    
                IncidentTypeId = Type.IncidentTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.Incidents.Contains(this))
                {
                    Project.Incidents.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupOwner(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OwnedIncidents.Contains(this))
            {
                previousValue.OwnedIncidents.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.OwnedIncidents.Contains(this))
                {
                    Owner.OwnedIncidents.Add(this);
                }
    
                OwnerId = Owner.UserId;
            }
            else if (!skipKeys)
            {
                OwnerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupDetectedRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DetectedIncidents.Contains(this))
            {
                previousValue.DetectedIncidents.Remove(this);
            }
    
            if (DetectedRelease != null)
            {
                if (!DetectedRelease.DetectedIncidents.Contains(this))
                {
                    DetectedRelease.DetectedIncidents.Add(this);
                }
    
                DetectedReleaseId = DetectedRelease.ReleaseId;
            }
            else if (!skipKeys)
            {
                DetectedReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetectedRelease")
                    && (ChangeTracker.OriginalValues["DetectedRelease"] == DetectedRelease))
                {
                    ChangeTracker.OriginalValues.Remove("DetectedRelease");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetectedRelease", previousValue);
                }
                if (DetectedRelease != null && !DetectedRelease.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetectedRelease.StartTracking();
                }
            }
        }
    
        private void FixupResolvedRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ResolvedIncidents.Contains(this))
            {
                previousValue.ResolvedIncidents.Remove(this);
            }
    
            if (ResolvedRelease != null)
            {
                if (!ResolvedRelease.ResolvedIncidents.Contains(this))
                {
                    ResolvedRelease.ResolvedIncidents.Add(this);
                }
    
                ResolvedReleaseId = ResolvedRelease.ReleaseId;
            }
            else if (!skipKeys)
            {
                ResolvedReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResolvedRelease")
                    && (ChangeTracker.OriginalValues["ResolvedRelease"] == ResolvedRelease))
                {
                    ChangeTracker.OriginalValues.Remove("ResolvedRelease");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResolvedRelease", previousValue);
                }
                if (ResolvedRelease != null && !ResolvedRelease.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResolvedRelease.StartTracking();
                }
            }
        }
    
        private void FixupVerifiedRelease(Release previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VerifiedIncidents.Contains(this))
            {
                previousValue.VerifiedIncidents.Remove(this);
            }
    
            if (VerifiedRelease != null)
            {
                if (!VerifiedRelease.VerifiedIncidents.Contains(this))
                {
                    VerifiedRelease.VerifiedIncidents.Add(this);
                }
    
                VerifiedReleaseId = VerifiedRelease.ReleaseId;
            }
            else if (!skipKeys)
            {
                VerifiedReleaseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VerifiedRelease")
                    && (ChangeTracker.OriginalValues["VerifiedRelease"] == VerifiedRelease))
                {
                    ChangeTracker.OriginalValues.Remove("VerifiedRelease");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VerifiedRelease", previousValue);
                }
                if (VerifiedRelease != null && !VerifiedRelease.ChangeTracker.ChangeTrackingEnabled)
                {
                    VerifiedRelease.StartTracking();
                }
            }
        }
    
        private void FixupDetectedBuild(Build previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DetectedIncidents.Contains(this))
            {
                previousValue.DetectedIncidents.Remove(this);
            }
    
            if (DetectedBuild != null)
            {
                if (!DetectedBuild.DetectedIncidents.Contains(this))
                {
                    DetectedBuild.DetectedIncidents.Add(this);
                }
    
                DetectedBuildId = DetectedBuild.BuildId;
            }
            else if (!skipKeys)
            {
                DetectedBuildId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetectedBuild")
                    && (ChangeTracker.OriginalValues["DetectedBuild"] == DetectedBuild))
                {
                    ChangeTracker.OriginalValues.Remove("DetectedBuild");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetectedBuild", previousValue);
                }
                if (DetectedBuild != null && !DetectedBuild.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetectedBuild.StartTracking();
                }
            }
        }
    
        private void FixupResolvedBuild(Build previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ResolvedIncidents.Contains(this))
            {
                previousValue.ResolvedIncidents.Remove(this);
            }
    
            if (ResolvedBuild != null)
            {
                if (!ResolvedBuild.ResolvedIncidents.Contains(this))
                {
                    ResolvedBuild.ResolvedIncidents.Add(this);
                }
    
                BuildId = ResolvedBuild.BuildId;
            }
            else if (!skipKeys)
            {
                BuildId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ResolvedBuild")
                    && (ChangeTracker.OriginalValues["ResolvedBuild"] == ResolvedBuild))
                {
                    ChangeTracker.OriginalValues.Remove("ResolvedBuild");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ResolvedBuild", previousValue);
                }
                if (ResolvedBuild != null && !ResolvedBuild.ChangeTracker.ChangeTrackingEnabled)
                {
                    ResolvedBuild.StartTracking();
                }
            }
        }
    
        private void FixupResolutions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncidentResolution item in e.NewItems)
                {
                    item.Incident = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Resolutions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncidentResolution item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Resolutions", item);
                    }
                }
            }
        }
    
        private void FixupTestRunSteps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRunStep item in e.NewItems)
                {
                    if (!item.Incidents.Contains(this))
                    {
                        item.Incidents.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRunSteps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRunStep item in e.OldItems)
                {
                    if (item.Incidents.Contains(this))
                    {
                        item.Incidents.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRunSteps", item);
                    }
                }
            }
        }

        #endregion

    }
}
