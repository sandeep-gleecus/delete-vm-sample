//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(User))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(ProjectGroup))]
    [KnownType(typeof(ProjectTemplate))]
    public partial class UserProfile: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public Nullable<int> LastOpenedProjectId
        {
            get { return _lastOpenedProjectId; }
            set
            {
                if (_lastOpenedProjectId != value)
                {
                    ChangeTracker.RecordOriginalValue("LastOpenedProjectId", _lastOpenedProjectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _lastOpenedProjectId = value;
                    OnPropertyChanged("LastOpenedProjectId");
                }
            }
        }
        private Nullable<int> _lastOpenedProjectId;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    ChangeTracker.RecordOriginalValue("FirstName", _firstName);
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string MiddleInitial
        {
            get { return _middleInitial; }
            set
            {
                if (_middleInitial != value)
                {
                    ChangeTracker.RecordOriginalValue("MiddleInitial", _middleInitial);
                    _middleInitial = value;
                    OnPropertyChanged("MiddleInitial");
                }
            }
        }
        private string _middleInitial;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    ChangeTracker.RecordOriginalValue("LastName", _lastName);
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public bool IsAdmin
        {
            get { return _isAdmin; }
            set
            {
                if (_isAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAdmin", _isAdmin);
                    _isAdmin = value;
                    OnPropertyChanged("IsAdmin");
                }
            }
        }
        private bool _isAdmin;
    
        [DataMember]
        public bool IsEmailEnabled
        {
            get { return _isEmailEnabled; }
            set
            {
                if (_isEmailEnabled != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEmailEnabled", _isEmailEnabled);
                    _isEmailEnabled = value;
                    OnPropertyChanged("IsEmailEnabled");
                }
            }
        }
        private bool _isEmailEnabled;
    
        [DataMember]
        public string Department
        {
            get { return _department; }
            set
            {
                if (_department != value)
                {
                    ChangeTracker.RecordOriginalValue("Department", _department);
                    _department = value;
                    OnPropertyChanged("Department");
                }
            }
        }
        private string _department;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;
    
        [DataMember]
        public string Timezone
        {
            get { return _timezone; }
            set
            {
                if (_timezone != value)
                {
                    ChangeTracker.RecordOriginalValue("Timezone", _timezone);
                    _timezone = value;
                    OnPropertyChanged("Timezone");
                }
            }
        }
        private string _timezone;
    
        [DataMember]
        public string AvatarImage
        {
            get { return _avatarImage; }
            set
            {
                if (_avatarImage != value)
                {
                    ChangeTracker.RecordOriginalValue("AvatarImage", _avatarImage);
                    _avatarImage = value;
                    OnPropertyChanged("AvatarImage");
                }
            }
        }
        private string _avatarImage;
    
        [DataMember]
        public bool IsBusy
        {
            get { return _isBusy; }
            set
            {
                if (_isBusy != value)
                {
                    ChangeTracker.RecordOriginalValue("IsBusy", _isBusy);
                    _isBusy = value;
                    OnPropertyChanged("IsBusy");
                }
            }
        }
        private bool _isBusy;
    
        [DataMember]
        public bool IsAway
        {
            get { return _isAway; }
            set
            {
                if (_isAway != value)
                {
                    ChangeTracker.RecordOriginalValue("IsAway", _isAway);
                    _isAway = value;
                    OnPropertyChanged("IsAway");
                }
            }
        }
        private bool _isAway;
    
        [DataMember]
        public int UnreadMessages
        {
            get { return _unreadMessages; }
            set
            {
                if (_unreadMessages != value)
                {
                    ChangeTracker.RecordOriginalValue("UnreadMessages", _unreadMessages);
                    _unreadMessages = value;
                    OnPropertyChanged("UnreadMessages");
                }
            }
        }
        private int _unreadMessages;
    
        [DataMember]
        public string AvatarMimeType
        {
            get { return _avatarMimeType; }
            set
            {
                if (_avatarMimeType != value)
                {
                    ChangeTracker.RecordOriginalValue("AvatarMimeType", _avatarMimeType);
                    _avatarMimeType = value;
                    OnPropertyChanged("AvatarMimeType");
                }
            }
        }
        private string _avatarMimeType;
    
        [DataMember]
        public string Organization
        {
            get { return _organization; }
            set
            {
                if (_organization != value)
                {
                    ChangeTracker.RecordOriginalValue("Organization", _organization);
                    _organization = value;
                    OnPropertyChanged("Organization");
                }
            }
        }
        private string _organization;
    
        [DataMember]
        public Nullable<int> LastOpenedProjectGroupId
        {
            get { return _lastOpenedProjectGroupId; }
            set
            {
                if (_lastOpenedProjectGroupId != value)
                {
                    ChangeTracker.RecordOriginalValue("LastOpenedProjectGroupId", _lastOpenedProjectGroupId);
                    if (!IsDeserializing)
                    {
                        if (LastOpenedProjectGroup != null && LastOpenedProjectGroup.ProjectGroupId != value)
                        {
                            LastOpenedProjectGroup = null;
                        }
                    }
                    _lastOpenedProjectGroupId = value;
                    OnPropertyChanged("LastOpenedProjectGroupId");
                }
            }
        }
        private Nullable<int> _lastOpenedProjectGroupId;
    
        [DataMember]
        public Nullable<int> LastOpenedProjectTemplateId
        {
            get { return _lastOpenedProjectTemplateId; }
            set
            {
                if (_lastOpenedProjectTemplateId != value)
                {
                    ChangeTracker.RecordOriginalValue("LastOpenedProjectTemplateId", _lastOpenedProjectTemplateId);
                    if (!IsDeserializing)
                    {
                        if (LastOpenedProjectTemplate != null && LastOpenedProjectTemplate.ProjectTemplateId != value)
                        {
                            LastOpenedProjectTemplate = null;
                        }
                    }
                    _lastOpenedProjectTemplateId = value;
                    OnPropertyChanged("LastOpenedProjectTemplateId");
                }
            }
        }
        private Nullable<int> _lastOpenedProjectTemplateId;
    
        [DataMember]
        public bool IsResourceAdmin
        {
            get { return _isResourceAdmin; }
            set
            {
                if (_isResourceAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsResourceAdmin", _isResourceAdmin);
                    _isResourceAdmin = value;
                    OnPropertyChanged("IsResourceAdmin");
                }
            }
        }
        private bool _isResourceAdmin;
    
        [DataMember]
        public bool IsPortfolioAdmin
        {
            get { return _isPortfolioAdmin; }
            set
            {
                if (_isPortfolioAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsPortfolioAdmin", _isPortfolioAdmin);
                    _isPortfolioAdmin = value;
                    OnPropertyChanged("IsPortfolioAdmin");
                }
            }
        }
        private bool _isPortfolioAdmin;
    
        [DataMember]
        public bool IsRestricted
        {
            get { return _isRestricted; }
            set
            {
                if (_isRestricted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsRestricted", _isRestricted);
                    _isRestricted = value;
                    OnPropertyChanged("IsRestricted");
                }
            }
        }
        private bool _isRestricted;
    
        [DataMember]
        public bool IsReportAdmin
        {
            get { return _isReportAdmin; }
            set
            {
                if (_isReportAdmin != value)
                {
                    ChangeTracker.RecordOriginalValue("IsReportAdmin", _isReportAdmin);
                    _isReportAdmin = value;
                    OnPropertyChanged("IsReportAdmin");
                }
            }
        }
        private bool _isReportAdmin;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (UserId != value.UserId)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public ProjectGroup LastOpenedProjectGroup
        {
            get { return _lastOpenedProjectGroup; }
            set
            {
                if (!ReferenceEquals(_lastOpenedProjectGroup, value))
                {
                    var previousValue = _lastOpenedProjectGroup;
                    _lastOpenedProjectGroup = value;
                    FixupLastOpenedProjectGroup(previousValue);
                    OnNavigationPropertyChanged("LastOpenedProjectGroup");
                }
            }
        }
        private ProjectGroup _lastOpenedProjectGroup;
    
        [DataMember]
        public ProjectTemplate LastOpenedProjectTemplate
        {
            get { return _lastOpenedProjectTemplate; }
            set
            {
                if (!ReferenceEquals(_lastOpenedProjectTemplate, value))
                {
                    var previousValue = _lastOpenedProjectTemplate;
                    _lastOpenedProjectTemplate = value;
                    FixupLastOpenedProjectTemplate(previousValue);
                    OnNavigationPropertyChanged("LastOpenedProjectTemplate");
                }
            }
        }
        private ProjectTemplate _lastOpenedProjectTemplate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            User = null;
            Project = null;
            LastOpenedProjectGroup = null;
            LastOpenedProjectTemplate = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Profile, this))
            {
                previousValue.Profile = null;
            }
    
            if (User != null)
            {
                User.Profile = this;
                UserId = User.UserId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LastOpenedForUser.Contains(this))
            {
                previousValue.LastOpenedForUser.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.LastOpenedForUser.Contains(this))
                {
                    Project.LastOpenedForUser.Add(this);
                }
    
                LastOpenedProjectId = Project.ProjectId;
            }
            else if (!skipKeys)
            {
                LastOpenedProjectId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupLastOpenedProjectGroup(ProjectGroup previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UsersLastOpened.Contains(this))
            {
                previousValue.UsersLastOpened.Remove(this);
            }
    
            if (LastOpenedProjectGroup != null)
            {
                if (!LastOpenedProjectGroup.UsersLastOpened.Contains(this))
                {
                    LastOpenedProjectGroup.UsersLastOpened.Add(this);
                }
    
                LastOpenedProjectGroupId = LastOpenedProjectGroup.ProjectGroupId;
            }
            else if (!skipKeys)
            {
                LastOpenedProjectGroupId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LastOpenedProjectGroup")
                    && (ChangeTracker.OriginalValues["LastOpenedProjectGroup"] == LastOpenedProjectGroup))
                {
                    ChangeTracker.OriginalValues.Remove("LastOpenedProjectGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LastOpenedProjectGroup", previousValue);
                }
                if (LastOpenedProjectGroup != null && !LastOpenedProjectGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    LastOpenedProjectGroup.StartTracking();
                }
            }
        }
    
        private void FixupLastOpenedProjectTemplate(ProjectTemplate previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UsersLastOpened.Contains(this))
            {
                previousValue.UsersLastOpened.Remove(this);
            }
    
            if (LastOpenedProjectTemplate != null)
            {
                if (!LastOpenedProjectTemplate.UsersLastOpened.Contains(this))
                {
                    LastOpenedProjectTemplate.UsersLastOpened.Add(this);
                }
    
                LastOpenedProjectTemplateId = LastOpenedProjectTemplate.ProjectTemplateId;
            }
            else if (!skipKeys)
            {
                LastOpenedProjectTemplateId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LastOpenedProjectTemplate")
                    && (ChangeTracker.OriginalValues["LastOpenedProjectTemplate"] == LastOpenedProjectTemplate))
                {
                    ChangeTracker.OriginalValues.Remove("LastOpenedProjectTemplate");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LastOpenedProjectTemplate", previousValue);
                }
                if (LastOpenedProjectTemplate != null && !LastOpenedProjectTemplate.ChangeTracker.ChangeTrackingEnabled)
                {
                    LastOpenedProjectTemplate.StartTracking();
                }
            }
        }

        #endregion

    }
}
