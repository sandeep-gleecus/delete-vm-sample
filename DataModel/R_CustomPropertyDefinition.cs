//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class R_CustomPropertyDefinition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CUSTOM_PROPERTY_ID
        {
            get { return _cUSTOM_PROPERTY_ID; }
            set
            {
                if (_cUSTOM_PROPERTY_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CUSTOM_PROPERTY_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cUSTOM_PROPERTY_ID = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_ID");
                }
            }
        }
        private int _cUSTOM_PROPERTY_ID;
    
        [DataMember]
        public int CUSTOM_PROPERTY_TYPE_ID
        {
            get { return _cUSTOM_PROPERTY_TYPE_ID; }
            set
            {
                if (_cUSTOM_PROPERTY_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CUSTOM_PROPERTY_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cUSTOM_PROPERTY_TYPE_ID = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_TYPE_ID");
                }
            }
        }
        private int _cUSTOM_PROPERTY_TYPE_ID;
    
        [DataMember]
        public int PROJECT_ID
        {
            get { return _pROJECT_ID; }
            set
            {
                if (_pROJECT_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_ID = value;
                    OnPropertyChanged("PROJECT_ID");
                }
            }
        }
        private int _pROJECT_ID;
    
        [DataMember]
        public int ARTIFACT_TYPE_ID
        {
            get { return _aRTIFACT_TYPE_ID; }
            set
            {
                if (_aRTIFACT_TYPE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_TYPE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_TYPE_ID = value;
                    OnPropertyChanged("ARTIFACT_TYPE_ID");
                }
            }
        }
        private int _aRTIFACT_TYPE_ID;
    
        [DataMember]
        public string NAME
        {
            get { return _nAME; }
            set
            {
                if (_nAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _nAME = value;
                    OnPropertyChanged("NAME");
                }
            }
        }
        private string _nAME;
    
        [DataMember]
        public int PROPERTY_NUMBER
        {
            get { return _pROPERTY_NUMBER; }
            set
            {
                if (_pROPERTY_NUMBER != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROPERTY_NUMBER' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROPERTY_NUMBER = value;
                    OnPropertyChanged("PROPERTY_NUMBER");
                }
            }
        }
        private int _pROPERTY_NUMBER;
    
        [DataMember]
        public bool IS_DELETED
        {
            get { return _iS_DELETED; }
            set
            {
                if (_iS_DELETED != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IS_DELETED' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iS_DELETED = value;
                    OnPropertyChanged("IS_DELETED");
                }
            }
        }
        private bool _iS_DELETED;
    
        [DataMember]
        public Nullable<int> CUSTOM_PROPERTY_LIST_ID
        {
            get { return _cUSTOM_PROPERTY_LIST_ID; }
            set
            {
                if (_cUSTOM_PROPERTY_LIST_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("CUSTOM_PROPERTY_LIST_ID", _cUSTOM_PROPERTY_LIST_ID);
                    _cUSTOM_PROPERTY_LIST_ID = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_LIST_ID");
                }
            }
        }
        private Nullable<int> _cUSTOM_PROPERTY_LIST_ID;
    
        [DataMember]
        public string LEGACY_NAME
        {
            get { return _lEGACY_NAME; }
            set
            {
                if (_lEGACY_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("LEGACY_NAME", _lEGACY_NAME);
                    _lEGACY_NAME = value;
                    OnPropertyChanged("LEGACY_NAME");
                }
            }
        }
        private string _lEGACY_NAME;
    
        [DataMember]
        public string PROJECT_NAME
        {
            get { return _pROJECT_NAME; }
            set
            {
                if (_pROJECT_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_NAME = value;
                    OnPropertyChanged("PROJECT_NAME");
                }
            }
        }
        private string _pROJECT_NAME;
    
        [DataMember]
        public bool PROJECT_IS_ACTIVE
        {
            get { return _pROJECT_IS_ACTIVE; }
            set
            {
                if (_pROJECT_IS_ACTIVE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_IS_ACTIVE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_IS_ACTIVE = value;
                    OnPropertyChanged("PROJECT_IS_ACTIVE");
                }
            }
        }
        private bool _pROJECT_IS_ACTIVE;
    
        [DataMember]
        public string ARTIFACT_TYPE_NAME
        {
            get { return _aRTIFACT_TYPE_NAME; }
            set
            {
                if (_aRTIFACT_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ARTIFACT_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _aRTIFACT_TYPE_NAME = value;
                    OnPropertyChanged("ARTIFACT_TYPE_NAME");
                }
            }
        }
        private string _aRTIFACT_TYPE_NAME;
    
        [DataMember]
        public string CUSTOM_PROPERTY_TYPE_NAME
        {
            get { return _cUSTOM_PROPERTY_TYPE_NAME; }
            set
            {
                if (_cUSTOM_PROPERTY_TYPE_NAME != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CUSTOM_PROPERTY_TYPE_NAME' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cUSTOM_PROPERTY_TYPE_NAME = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_TYPE_NAME");
                }
            }
        }
        private string _cUSTOM_PROPERTY_TYPE_NAME;
    
        [DataMember]
        public string CUSTOM_PROPERTY_LIST_NAME
        {
            get { return _cUSTOM_PROPERTY_LIST_NAME; }
            set
            {
                if (_cUSTOM_PROPERTY_LIST_NAME != value)
                {
                    ChangeTracker.RecordOriginalValue("CUSTOM_PROPERTY_LIST_NAME", _cUSTOM_PROPERTY_LIST_NAME);
                    _cUSTOM_PROPERTY_LIST_NAME = value;
                    OnPropertyChanged("CUSTOM_PROPERTY_LIST_NAME");
                }
            }
        }
        private string _cUSTOM_PROPERTY_LIST_NAME;
    
        [DataMember]
        public Nullable<int> DEPENDENT_CUSTOM_PROPERTY_ID
        {
            get { return _dEPENDENT_CUSTOM_PROPERTY_ID; }
            set
            {
                if (_dEPENDENT_CUSTOM_PROPERTY_ID != value)
                {
                    ChangeTracker.RecordOriginalValue("DEPENDENT_CUSTOM_PROPERTY_ID", _dEPENDENT_CUSTOM_PROPERTY_ID);
                    _dEPENDENT_CUSTOM_PROPERTY_ID = value;
                    OnPropertyChanged("DEPENDENT_CUSTOM_PROPERTY_ID");
                }
            }
        }
        private Nullable<int> _dEPENDENT_CUSTOM_PROPERTY_ID;
    
        [DataMember]
        public int PROJECT_TEMPLATE_ID
        {
            get { return _pROJECT_TEMPLATE_ID; }
            set
            {
                if (_pROJECT_TEMPLATE_ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PROJECT_TEMPLATE_ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pROJECT_TEMPLATE_ID = value;
                    OnPropertyChanged("PROJECT_TEMPLATE_ID");
                }
            }
        }
        private int _pROJECT_TEMPLATE_ID;
    
        [DataMember]
        public Nullable<int> POSITION
        {
            get { return _pOSITION; }
            set
            {
                if (_pOSITION != value)
                {
                    ChangeTracker.RecordOriginalValue("POSITION", _pOSITION);
                    _pOSITION = value;
                    OnPropertyChanged("POSITION");
                }
            }
        }
        private Nullable<int> _pOSITION;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    ChangeTracker.RecordOriginalValue("DESCRIPTION", _dESCRIPTION);
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
