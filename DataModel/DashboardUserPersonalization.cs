//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Dashboard))]
    [KnownType(typeof(User))]
    public partial class DashboardUserPersonalization: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DashboardUserId
        {
            get { return _dashboardUserId; }
            set
            {
                if (_dashboardUserId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DashboardUserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dashboardUserId = value;
                    OnPropertyChanged("DashboardUserId");
                }
            }
        }
        private int _dashboardUserId;
    
        [DataMember]
        public int DashboardId
        {
            get { return _dashboardId; }
            set
            {
                if (_dashboardId != value)
                {
                    ChangeTracker.RecordOriginalValue("DashboardId", _dashboardId);
                    if (!IsDeserializing)
                    {
                        if (Dashboard != null && Dashboard.DashboardId != value)
                        {
                            Dashboard = null;
                        }
                    }
                    _dashboardId = value;
                    OnPropertyChanged("DashboardId");
                }
            }
        }
        private int _dashboardId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public byte[] PageSettings
        {
            get { return _pageSettings; }
            set
            {
                if (_pageSettings != value)
                {
                    ChangeTracker.RecordOriginalValue("PageSettings", _pageSettings);
                    _pageSettings = value;
                    OnPropertyChanged("PageSettings");
                }
            }
        }
        private byte[] _pageSettings;
    
        [DataMember]
        public System.DateTime LastUpdateDate
        {
            get { return _lastUpdateDate; }
            set
            {
                if (_lastUpdateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("LastUpdateDate", _lastUpdateDate);
                    _lastUpdateDate = value;
                    OnPropertyChanged("LastUpdateDate");
                }
            }
        }
        private System.DateTime _lastUpdateDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Dashboard Dashboard
        {
            get { return _dashboard; }
            set
            {
                if (!ReferenceEquals(_dashboard, value))
                {
                    var previousValue = _dashboard;
                    _dashboard = value;
                    FixupDashboard(previousValue);
                    OnNavigationPropertyChanged("Dashboard");
                }
            }
        }
        private Dashboard _dashboard;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Dashboard = null;
            User = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDashboard(Dashboard previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.UserPersonalization.Contains(this))
            {
                previousValue.UserPersonalization.Remove(this);
            }
    
            if (Dashboard != null)
            {
                if (!Dashboard.UserPersonalization.Contains(this))
                {
                    Dashboard.UserPersonalization.Add(this);
                }
    
                DashboardId = Dashboard.DashboardId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Dashboard")
                    && (ChangeTracker.OriginalValues["Dashboard"] == Dashboard))
                {
                    ChangeTracker.OriginalValues.Remove("Dashboard");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Dashboard", previousValue);
                }
                if (Dashboard != null && !Dashboard.ChangeTracker.ChangeTrackingEnabled)
                {
                    Dashboard.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DashboardPersonalization.Contains(this))
            {
                previousValue.DashboardPersonalization.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.DashboardPersonalization.Contains(this))
                {
                    User.DashboardPersonalization.Add(this);
                }
    
                UserId = User.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }

        #endregion

    }
}
