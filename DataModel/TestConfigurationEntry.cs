//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    
    public partial class TestConfigurationEntry : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TestCaseConfigurationId
        {
            get { return _testCaseConfigurationId; }
            set
            {
                if (_testCaseConfigurationId != value)
                {
                    OnComplexPropertyChanging();
                    _testCaseConfigurationId = value;
                    OnPropertyChanged("TestCaseConfigurationId");
                }
            }
        }
        private int _testCaseConfigurationId;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    OnComplexPropertyChanging();
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public int TestCaseParameterId
        {
            get { return _testCaseParameterId; }
            set
            {
                if (_testCaseParameterId != value)
                {
                    OnComplexPropertyChanging();
                    _testCaseParameterId = value;
                    OnPropertyChanged("TestCaseParameterId");
                }
            }
        }
        private int _testCaseParameterId;
    
        [DataMember]
        public int CustomPropertyValueId
        {
            get { return _customPropertyValueId; }
            set
            {
                if (_customPropertyValueId != value)
                {
                    OnComplexPropertyChanging();
                    _customPropertyValueId = value;
                    OnPropertyChanged("CustomPropertyValueId");
                }
            }
        }
        private int _customPropertyValueId;
    
        [DataMember]
        public string ParameterName
        {
            get { return _parameterName; }
            set
            {
                if (_parameterName != value)
                {
                    OnComplexPropertyChanging();
                    _parameterName = value;
                    OnPropertyChanged("ParameterName");
                }
            }
        }
        private string _parameterName;
    
        [DataMember]
        public string ParameterValue
        {
            get { return _parameterValue; }
            set
            {
                if (_parameterValue != value)
                {
                    OnComplexPropertyChanging();
                    _parameterValue = value;
                    OnPropertyChanged("ParameterValue");
                }
            }
        }
        private string _parameterValue;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, TestConfigurationEntry complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TestCaseConfigurationId", parentPropertyName), complexObject == null ? null : (object)complexObject.TestCaseConfigurationId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Position", parentPropertyName), complexObject == null ? null : (object)complexObject.Position);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TestCaseParameterId", parentPropertyName), complexObject == null ? null : (object)complexObject.TestCaseParameterId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CustomPropertyValueId", parentPropertyName), complexObject == null ? null : (object)complexObject.CustomPropertyValueId);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ParameterName", parentPropertyName), complexObject == null ? null : (object)complexObject.ParameterName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ParameterValue", parentPropertyName), complexObject == null ? null : (object)complexObject.ParameterValue);
        }

        #endregion

    }
}
