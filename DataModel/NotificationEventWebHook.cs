//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GlobalOAuthProvider))]
    [KnownType(typeof(NotificationEvent))]
    public partial class NotificationEventWebHook: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NotificationEventWebHookId
        {
            get { return _notificationEventWebHookId; }
            set
            {
                if (_notificationEventWebHookId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NotificationEventWebHookId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _notificationEventWebHookId = value;
                    OnPropertyChanged("NotificationEventWebHookId");
                }
            }
        }
        private int _notificationEventWebHookId;
    
        [DataMember]
        public int NotificationEventId
        {
            get { return _notificationEventId; }
            set
            {
                if (_notificationEventId != value)
                {
                    ChangeTracker.RecordOriginalValue("NotificationEventId", _notificationEventId);
                    if (!IsDeserializing)
                    {
                        if (NotificationEvent != null && NotificationEvent.NotificationEventId != value)
                        {
                            NotificationEvent = null;
                        }
                    }
                    _notificationEventId = value;
                    OnPropertyChanged("NotificationEventId");
                }
            }
        }
        private int _notificationEventId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    ChangeTracker.RecordOriginalValue("Url", _url);
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public string Login
        {
            get { return _login; }
            set
            {
                if (_login != value)
                {
                    ChangeTracker.RecordOriginalValue("Login", _login);
                    _login = value;
                    OnPropertyChanged("Login");
                }
            }
        }
        private string _login;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    ChangeTracker.RecordOriginalValue("Password", _password);
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string OAuthAcessToken
        {
            get { return _oAuthAcessToken; }
            set
            {
                if (_oAuthAcessToken != value)
                {
                    ChangeTracker.RecordOriginalValue("OAuthAcessToken", _oAuthAcessToken);
                    _oAuthAcessToken = value;
                    OnPropertyChanged("OAuthAcessToken");
                }
            }
        }
        private string _oAuthAcessToken;
    
        [DataMember]
        public Nullable<System.Guid> OAuthProviderId
        {
            get { return _oAuthProviderId; }
            set
            {
                if (_oAuthProviderId != value)
                {
                    ChangeTracker.RecordOriginalValue("OAuthProviderId", _oAuthProviderId);
                    if (!IsDeserializing)
                    {
                        if (OAuthProvider != null && OAuthProvider.OAuthProviderId != value)
                        {
                            OAuthProvider = null;
                        }
                    }
                    _oAuthProviderId = value;
                    OnPropertyChanged("OAuthProviderId");
                }
            }
        }
        private Nullable<System.Guid> _oAuthProviderId;
    
        [DataMember]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    ChangeTracker.RecordOriginalValue("Body", _body);
                    _body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        private string _body;
    
        [DataMember]
        public string Method
        {
            get { return _method; }
            set
            {
                if (_method != value)
                {
                    ChangeTracker.RecordOriginalValue("Method", _method);
                    _method = value;
                    OnPropertyChanged("Method");
                }
            }
        }
        private string _method;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public GlobalOAuthProvider OAuthProvider
        {
            get { return _oAuthProvider; }
            set
            {
                if (!ReferenceEquals(_oAuthProvider, value))
                {
                    var previousValue = _oAuthProvider;
                    _oAuthProvider = value;
                    FixupOAuthProvider(previousValue);
                    OnNavigationPropertyChanged("OAuthProvider");
                }
            }
        }
        private GlobalOAuthProvider _oAuthProvider;
    
        [DataMember]
        public NotificationEvent NotificationEvent
        {
            get { return _notificationEvent; }
            set
            {
                if (!ReferenceEquals(_notificationEvent, value))
                {
                    var previousValue = _notificationEvent;
                    _notificationEvent = value;
                    FixupNotificationEvent(previousValue);
                    OnNavigationPropertyChanged("NotificationEvent");
                }
            }
        }
        private NotificationEvent _notificationEvent;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OAuthProvider = null;
            NotificationEvent = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupOAuthProvider(GlobalOAuthProvider previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WebHooks.Contains(this))
            {
                previousValue.WebHooks.Remove(this);
            }
    
            if (OAuthProvider != null)
            {
                if (!OAuthProvider.WebHooks.Contains(this))
                {
                    OAuthProvider.WebHooks.Add(this);
                }
    
                OAuthProviderId = OAuthProvider.OAuthProviderId;
            }
            else if (!skipKeys)
            {
                OAuthProviderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OAuthProvider")
                    && (ChangeTracker.OriginalValues["OAuthProvider"] == OAuthProvider))
                {
                    ChangeTracker.OriginalValues.Remove("OAuthProvider");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OAuthProvider", previousValue);
                }
                if (OAuthProvider != null && !OAuthProvider.ChangeTracker.ChangeTrackingEnabled)
                {
                    OAuthProvider.StartTracking();
                }
            }
        }
    
        private void FixupNotificationEvent(NotificationEvent previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WebHooks.Contains(this))
            {
                previousValue.WebHooks.Remove(this);
            }
    
            if (NotificationEvent != null)
            {
                if (!NotificationEvent.WebHooks.Contains(this))
                {
                    NotificationEvent.WebHooks.Add(this);
                }
    
                NotificationEventId = NotificationEvent.NotificationEventId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NotificationEvent")
                    && (ChangeTracker.OriginalValues["NotificationEvent"] == NotificationEvent))
                {
                    ChangeTracker.OriginalValues.Remove("NotificationEvent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NotificationEvent", previousValue);
                }
                if (NotificationEvent != null && !NotificationEvent.ChangeTracker.ChangeTrackingEnabled)
                {
                    NotificationEvent.StartTracking();
                }
            }
        }

        #endregion

    }
}
