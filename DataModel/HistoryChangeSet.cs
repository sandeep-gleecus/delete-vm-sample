//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(HistoryChangeSet))]
    [KnownType(typeof(HistoryDetail))]
    [KnownType(typeof(HistoryChangeSetType))]
    [KnownType(typeof(Project))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HistoryAssociation))]
    [KnownType(typeof(HistoryPosition))]
    [KnownType(typeof(ProjectBaseline))]
    [KnownType(typeof(TestRun))]
    [KnownType(typeof(AttachmentVersion))]
    [KnownType(typeof(HistoryDiscussion))]
    [KnownType(typeof(HistoryTag))]
    public partial class HistoryChangeSet: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ChangeSetId
        {
            get { return _changeSetId; }
            set
            {
                if (_changeSetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ChangeSetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _changeSetId = value;
                    OnPropertyChanged("ChangeSetId");
                }
            }
        }
        private long _changeSetId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public int ArtifactTypeId
        {
            get { return _artifactTypeId; }
            set
            {
                if (_artifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactTypeId", _artifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (ArtifactType != null && ArtifactType.ArtifactTypeId != value)
                        {
                            ArtifactType = null;
                        }
                    }
                    _artifactTypeId = value;
                    OnPropertyChanged("ArtifactTypeId");
                }
            }
        }
        private int _artifactTypeId;
    
        [DataMember]
        public int ArtifactId
        {
            get { return _artifactId; }
            set
            {
                if (_artifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactId", _artifactId);
                    _artifactId = value;
                    OnPropertyChanged("ArtifactId");
                }
            }
        }
        private int _artifactId;
    
        [DataMember]
        public System.DateTime ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeDate", _changeDate);
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private System.DateTime _changeDate;
    
        [DataMember]
        public int ChangeTypeId
        {
            get { return _changeTypeId; }
            set
            {
                if (_changeTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeTypeId", _changeTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.ChangeTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _changeTypeId = value;
                    OnPropertyChanged("ChangeTypeId");
                }
            }
        }
        private int _changeTypeId;
    
        [DataMember]
        public Nullable<int> ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectId", _projectId);
                    if (!IsDeserializing)
                    {
                        if (Project != null && Project.ProjectId != value)
                        {
                            Project = null;
                        }
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private Nullable<int> _projectId;
    
        [DataMember]
        public Nullable<long> RevertId
        {
            get { return _revertId; }
            set
            {
                if (_revertId != value)
                {
                    ChangeTracker.RecordOriginalValue("RevertId", _revertId);
                    if (!IsDeserializing)
                    {
                        if (RevertParent != null && RevertParent.ChangeSetId != value)
                        {
                            RevertParent = null;
                        }
                    }
                    _revertId = value;
                    OnPropertyChanged("RevertId");
                }
            }
        }
        private Nullable<long> _revertId;
    
        [DataMember]
        public string ArtifactDesc
        {
            get { return _artifactDesc; }
            set
            {
                if (_artifactDesc != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactDesc", _artifactDesc);
                    _artifactDesc = value;
                    OnPropertyChanged("ArtifactDesc");
                }
            }
        }
        private string _artifactDesc;
    
        [DataMember]
        public string SignatureHash
        {
            get { return _signatureHash; }
            set
            {
                if (_signatureHash != value)
                {
                    ChangeTracker.RecordOriginalValue("SignatureHash", _signatureHash);
                    _signatureHash = value;
                    OnPropertyChanged("SignatureHash");
                }
            }
        }
        private string _signatureHash;
    
        [DataMember]
        public string Meaning
        {
            get { return _meaning; }
            set
            {
                if (_meaning != value)
                {
                    ChangeTracker.RecordOriginalValue("Meaning", _meaning);
                    _meaning = value;
                    OnPropertyChanged("Meaning");
                }
            }
        }
        private string _meaning;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactType ArtifactType
        {
            get { return _artifactType; }
            set
            {
                if (!ReferenceEquals(_artifactType, value))
                {
                    var previousValue = _artifactType;
                    _artifactType = value;
                    FixupArtifactType(previousValue);
                    OnNavigationPropertyChanged("ArtifactType");
                }
            }
        }
        private ArtifactType _artifactType;
    
        [DataMember]
        public TrackableCollection<HistoryChangeSet> RevertChildren
        {
            get
            {
                if (_revertChildren == null)
                {
                    _revertChildren = new TrackableCollection<HistoryChangeSet>();
                    _revertChildren.CollectionChanged += FixupRevertChildren;
                }
                return _revertChildren;
            }
            set
            {
                if (!ReferenceEquals(_revertChildren, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_revertChildren != null)
                    {
                        _revertChildren.CollectionChanged -= FixupRevertChildren;
                    }
                    _revertChildren = value;
                    if (_revertChildren != null)
                    {
                        _revertChildren.CollectionChanged += FixupRevertChildren;
                    }
                    OnNavigationPropertyChanged("RevertChildren");
                }
            }
        }
        private TrackableCollection<HistoryChangeSet> _revertChildren;
    
        [DataMember]
        public HistoryChangeSet RevertParent
        {
            get { return _revertParent; }
            set
            {
                if (!ReferenceEquals(_revertParent, value))
                {
                    var previousValue = _revertParent;
                    _revertParent = value;
                    FixupRevertParent(previousValue);
                    OnNavigationPropertyChanged("RevertParent");
                }
            }
        }
        private HistoryChangeSet _revertParent;
    
        [DataMember]
        public TrackableCollection<HistoryDetail> Details
        {
            get
            {
                if (_details == null)
                {
                    _details = new TrackableCollection<HistoryDetail>();
                    _details.CollectionChanged += FixupDetails;
                }
                return _details;
            }
            set
            {
                if (!ReferenceEquals(_details, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_details != null)
                    {
                        _details.CollectionChanged -= FixupDetails;
                    }
                    _details = value;
                    if (_details != null)
                    {
                        _details.CollectionChanged += FixupDetails;
                    }
                    OnNavigationPropertyChanged("Details");
                }
            }
        }
        private TrackableCollection<HistoryDetail> _details;
    
        [DataMember]
        public HistoryChangeSetType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private HistoryChangeSetType _type;
    
        [DataMember]
        public Project Project
        {
            get { return _project; }
            set
            {
                if (!ReferenceEquals(_project, value))
                {
                    var previousValue = _project;
                    _project = value;
                    FixupProject(previousValue);
                    OnNavigationPropertyChanged("Project");
                }
            }
        }
        private Project _project;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> AssociationChanges
        {
            get
            {
                if (_associationChanges == null)
                {
                    _associationChanges = new TrackableCollection<HistoryAssociation>();
                    _associationChanges.CollectionChanged += FixupAssociationChanges;
                }
                return _associationChanges;
            }
            set
            {
                if (!ReferenceEquals(_associationChanges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_associationChanges != null)
                    {
                        _associationChanges.CollectionChanged -= FixupAssociationChanges;
                    }
                    _associationChanges = value;
                    if (_associationChanges != null)
                    {
                        _associationChanges.CollectionChanged += FixupAssociationChanges;
                    }
                    OnNavigationPropertyChanged("AssociationChanges");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _associationChanges;
    
        [DataMember]
        public TrackableCollection<HistoryPosition> PositionChanges
        {
            get
            {
                if (_positionChanges == null)
                {
                    _positionChanges = new TrackableCollection<HistoryPosition>();
                    _positionChanges.CollectionChanged += FixupPositionChanges;
                }
                return _positionChanges;
            }
            set
            {
                if (!ReferenceEquals(_positionChanges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_positionChanges != null)
                    {
                        _positionChanges.CollectionChanged -= FixupPositionChanges;
                    }
                    _positionChanges = value;
                    if (_positionChanges != null)
                    {
                        _positionChanges.CollectionChanged += FixupPositionChanges;
                    }
                    OnNavigationPropertyChanged("PositionChanges");
                }
            }
        }
        private TrackableCollection<HistoryPosition> _positionChanges;
    
        [DataMember]
        public TrackableCollection<ProjectBaseline> Baselines
        {
            get
            {
                if (_baselines == null)
                {
                    _baselines = new TrackableCollection<ProjectBaseline>();
                    _baselines.CollectionChanged += FixupBaselines;
                }
                return _baselines;
            }
            set
            {
                if (!ReferenceEquals(_baselines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged -= FixupBaselines;
                    }
                    _baselines = value;
                    if (_baselines != null)
                    {
                        _baselines.CollectionChanged += FixupBaselines;
                    }
                    OnNavigationPropertyChanged("Baselines");
                }
            }
        }
        private TrackableCollection<ProjectBaseline> _baselines;
    
        [DataMember]
        public TrackableCollection<TestRun> TestRuns
        {
            get
            {
                if (_testRuns == null)
                {
                    _testRuns = new TrackableCollection<TestRun>();
                    _testRuns.CollectionChanged += FixupTestRuns;
                }
                return _testRuns;
            }
            set
            {
                if (!ReferenceEquals(_testRuns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged -= FixupTestRuns;
                    }
                    _testRuns = value;
                    if (_testRuns != null)
                    {
                        _testRuns.CollectionChanged += FixupTestRuns;
                    }
                    OnNavigationPropertyChanged("TestRuns");
                }
            }
        }
        private TrackableCollection<TestRun> _testRuns;
    
        [DataMember]
        public TrackableCollection<AttachmentVersion> AttachmentVersions
        {
            get
            {
                if (_attachmentVersions == null)
                {
                    _attachmentVersions = new TrackableCollection<AttachmentVersion>();
                    _attachmentVersions.CollectionChanged += FixupAttachmentVersions;
                }
                return _attachmentVersions;
            }
            set
            {
                if (!ReferenceEquals(_attachmentVersions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attachmentVersions != null)
                    {
                        _attachmentVersions.CollectionChanged -= FixupAttachmentVersions;
                    }
                    _attachmentVersions = value;
                    if (_attachmentVersions != null)
                    {
                        _attachmentVersions.CollectionChanged += FixupAttachmentVersions;
                    }
                    OnNavigationPropertyChanged("AttachmentVersions");
                }
            }
        }
        private TrackableCollection<AttachmentVersion> _attachmentVersions;
    
        [DataMember]
        public TrackableCollection<HistoryDiscussion> Discussions
        {
            get
            {
                if (_discussions == null)
                {
                    _discussions = new TrackableCollection<HistoryDiscussion>();
                    _discussions.CollectionChanged += FixupDiscussions;
                }
                return _discussions;
            }
            set
            {
                if (!ReferenceEquals(_discussions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged -= FixupDiscussions;
                    }
                    _discussions = value;
                    if (_discussions != null)
                    {
                        _discussions.CollectionChanged += FixupDiscussions;
                    }
                    OnNavigationPropertyChanged("Discussions");
                }
            }
        }
        private TrackableCollection<HistoryDiscussion> _discussions;
    
        [DataMember]
        public TrackableCollection<HistoryTag> TST_HISTORY_TAGS
        {
            get
            {
                if (_tST_HISTORY_TAGS == null)
                {
                    _tST_HISTORY_TAGS = new TrackableCollection<HistoryTag>();
                    _tST_HISTORY_TAGS.CollectionChanged += FixupTST_HISTORY_TAGS;
                }
                return _tST_HISTORY_TAGS;
            }
            set
            {
                if (!ReferenceEquals(_tST_HISTORY_TAGS, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tST_HISTORY_TAGS != null)
                    {
                        _tST_HISTORY_TAGS.CollectionChanged -= FixupTST_HISTORY_TAGS;
                    }
                    _tST_HISTORY_TAGS = value;
                    if (_tST_HISTORY_TAGS != null)
                    {
                        _tST_HISTORY_TAGS.CollectionChanged += FixupTST_HISTORY_TAGS;
                    }
                    OnNavigationPropertyChanged("TST_HISTORY_TAGS");
                }
            }
        }
        private TrackableCollection<HistoryTag> _tST_HISTORY_TAGS;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ArtifactType = null;
            RevertChildren.Clear();
            RevertParent = null;
            Details.Clear();
            Type = null;
            Project = null;
            User = null;
            AssociationChanges.Clear();
            PositionChanges.Clear();
            Baselines.Clear();
            TestRuns.Clear();
            AttachmentVersions.Clear();
            Discussions.Clear();
            TST_HISTORY_TAGS.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryChangesets.Contains(this))
            {
                previousValue.HistoryChangesets.Remove(this);
            }
    
            if (ArtifactType != null)
            {
                if (!ArtifactType.HistoryChangesets.Contains(this))
                {
                    ArtifactType.HistoryChangesets.Add(this);
                }
    
                ArtifactTypeId = ArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ArtifactType")
                    && (ChangeTracker.OriginalValues["ArtifactType"] == ArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("ArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ArtifactType", previousValue);
                }
                if (ArtifactType != null && !ArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    ArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupRevertParent(HistoryChangeSet previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RevertChildren.Contains(this))
            {
                previousValue.RevertChildren.Remove(this);
            }
    
            if (RevertParent != null)
            {
                if (!RevertParent.RevertChildren.Contains(this))
                {
                    RevertParent.RevertChildren.Add(this);
                }
    
                RevertId = RevertParent.ChangeSetId;
            }
            else if (!skipKeys)
            {
                RevertId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RevertParent")
                    && (ChangeTracker.OriginalValues["RevertParent"] == RevertParent))
                {
                    ChangeTracker.OriginalValues.Remove("RevertParent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RevertParent", previousValue);
                }
                if (RevertParent != null && !RevertParent.ChangeTracker.ChangeTrackingEnabled)
                {
                    RevertParent.StartTracking();
                }
            }
        }
    
        private void FixupType(HistoryChangeSetType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChangeSets.Contains(this))
            {
                previousValue.ChangeSets.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.ChangeSets.Contains(this))
                {
                    Type.ChangeSets.Add(this);
                }
    
                ChangeTypeId = Type.ChangeTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupProject(Project previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryChangeSets.Contains(this))
            {
                previousValue.HistoryChangeSets.Remove(this);
            }
    
            if (Project != null)
            {
                if (!Project.HistoryChangeSets.Contains(this))
                {
                    Project.HistoryChangeSets.Add(this);
                }
    
                ProjectId = Project.ProjectId;
            }
            else if (!skipKeys)
            {
                ProjectId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Project")
                    && (ChangeTracker.OriginalValues["Project"] == Project))
                {
                    ChangeTracker.OriginalValues.Remove("Project");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Project", previousValue);
                }
                if (Project != null && !Project.ChangeTracker.ChangeTrackingEnabled)
                {
                    Project.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HistoryChangeSets.Contains(this))
            {
                previousValue.HistoryChangeSets.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.HistoryChangeSets.Contains(this))
                {
                    User.HistoryChangeSets.Add(this);
                }
    
                UserId = User.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupRevertChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryChangeSet item in e.NewItems)
                {
                    item.RevertParent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RevertChildren", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryChangeSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.RevertParent, this))
                    {
                        item.RevertParent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RevertChildren", item);
                    }
                }
            }
        }
    
        private void FixupDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryDetail item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Details", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Details", item);
                    }
                }
            }
        }
    
        private void FixupAssociationChanges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssociationChanges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssociationChanges", item);
                    }
                }
            }
        }
    
        private void FixupPositionChanges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryPosition item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PositionChanges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PositionChanges", item);
                    }
                }
            }
        }
    
        private void FixupBaselines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProjectBaseline item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Baselines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProjectBaseline item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Baselines", item);
                    }
                }
            }
        }
    
        private void FixupTestRuns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TestRun item in e.NewItems)
                {
                    item.HistoryChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TestRuns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestRun item in e.OldItems)
                {
                    if (ReferenceEquals(item.HistoryChangeSet, this))
                    {
                        item.HistoryChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TestRuns", item);
                    }
                }
            }
        }
    
        private void FixupAttachmentVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttachmentVersion item in e.NewItems)
                {
                    item.HistoryChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttachmentVersions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttachmentVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.HistoryChangeSet, this))
                    {
                        item.HistoryChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttachmentVersions", item);
                    }
                }
            }
        }
    
        private void FixupDiscussions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryDiscussion item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Discussions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryDiscussion item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Discussions", item);
                    }
                }
            }
        }
    
        private void FixupTST_HISTORY_TAGS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryTag item in e.NewItems)
                {
                    item.ChangeSet = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TST_HISTORY_TAGS", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryTag item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChangeSet, this))
                    {
                        item.ChangeSet = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TST_HISTORY_TAGS", item);
                    }
                }
            }
        }

        #endregion

    }
}
