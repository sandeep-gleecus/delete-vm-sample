//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ArtifactLinkType))]
    [KnownType(typeof(ArtifactType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HistoryAssociation))]
    public partial class ArtifactLink: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ArtifactLinkId
        {
            get { return _artifactLinkId; }
            set
            {
                if (_artifactLinkId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ArtifactLinkId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _artifactLinkId = value;
                    OnPropertyChanged("ArtifactLinkId");
                }
            }
        }
        private int _artifactLinkId;
    
        [DataMember]
        public int ArtifactLinkTypeId
        {
            get { return _artifactLinkTypeId; }
            set
            {
                if (_artifactLinkTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ArtifactLinkTypeId", _artifactLinkTypeId);
                    if (!IsDeserializing)
                    {
                        if (Type != null && Type.ArtifactLinkTypeId != value)
                        {
                            Type = null;
                        }
                    }
                    _artifactLinkTypeId = value;
                    OnPropertyChanged("ArtifactLinkTypeId");
                }
            }
        }
        private int _artifactLinkTypeId;
    
        [DataMember]
        public int SourceArtifactId
        {
            get { return _sourceArtifactId; }
            set
            {
                if (_sourceArtifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactId", _sourceArtifactId);
                    _sourceArtifactId = value;
                    OnPropertyChanged("SourceArtifactId");
                }
            }
        }
        private int _sourceArtifactId;
    
        [DataMember]
        public int SourceArtifactTypeId
        {
            get { return _sourceArtifactTypeId; }
            set
            {
                if (_sourceArtifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactTypeId", _sourceArtifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (SourceArtifactType != null && SourceArtifactType.ArtifactTypeId != value)
                        {
                            SourceArtifactType = null;
                        }
                    }
                    _sourceArtifactTypeId = value;
                    OnPropertyChanged("SourceArtifactTypeId");
                }
            }
        }
        private int _sourceArtifactTypeId;
    
        [DataMember]
        public int DestArtifactId
        {
            get { return _destArtifactId; }
            set
            {
                if (_destArtifactId != value)
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactId", _destArtifactId);
                    _destArtifactId = value;
                    OnPropertyChanged("DestArtifactId");
                }
            }
        }
        private int _destArtifactId;
    
        [DataMember]
        public int DestArtifactTypeId
        {
            get { return _destArtifactTypeId; }
            set
            {
                if (_destArtifactTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactTypeId", _destArtifactTypeId);
                    if (!IsDeserializing)
                    {
                        if (DestArtifactType != null && DestArtifactType.ArtifactTypeId != value)
                        {
                            DestArtifactType = null;
                        }
                    }
                    _destArtifactTypeId = value;
                    OnPropertyChanged("DestArtifactTypeId");
                }
            }
        }
        private int _destArtifactTypeId;
    
        [DataMember]
        public int CreatorId
        {
            get { return _creatorId; }
            set
            {
                if (_creatorId != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatorId", _creatorId);
                    if (!IsDeserializing)
                    {
                        if (Creator != null && Creator.UserId != value)
                        {
                            Creator = null;
                        }
                    }
                    _creatorId = value;
                    OnPropertyChanged("CreatorId");
                }
            }
        }
        private int _creatorId;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreationDate", _creationDate);
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    ChangeTracker.RecordOriginalValue("Comment", _comment);
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ArtifactLinkType Type
        {
            get { return _type; }
            set
            {
                if (!ReferenceEquals(_type, value))
                {
                    var previousValue = _type;
                    _type = value;
                    FixupType(previousValue);
                    OnNavigationPropertyChanged("Type");
                }
            }
        }
        private ArtifactLinkType _type;
    
        [DataMember]
        public ArtifactType DestArtifactType
        {
            get { return _destArtifactType; }
            set
            {
                if (!ReferenceEquals(_destArtifactType, value))
                {
                    var previousValue = _destArtifactType;
                    _destArtifactType = value;
                    FixupDestArtifactType(previousValue);
                    OnNavigationPropertyChanged("DestArtifactType");
                }
            }
        }
        private ArtifactType _destArtifactType;
    
        [DataMember]
        public ArtifactType SourceArtifactType
        {
            get { return _sourceArtifactType; }
            set
            {
                if (!ReferenceEquals(_sourceArtifactType, value))
                {
                    var previousValue = _sourceArtifactType;
                    _sourceArtifactType = value;
                    FixupSourceArtifactType(previousValue);
                    OnNavigationPropertyChanged("SourceArtifactType");
                }
            }
        }
        private ArtifactType _sourceArtifactType;
    
        [DataMember]
        public User Creator
        {
            get { return _creator; }
            set
            {
                if (!ReferenceEquals(_creator, value))
                {
                    var previousValue = _creator;
                    _creator = value;
                    FixupCreator(previousValue);
                    OnNavigationPropertyChanged("Creator");
                }
            }
        }
        private User _creator;
    
        [DataMember]
        public TrackableCollection<HistoryAssociation> HistoryEntries
        {
            get
            {
                if (_historyEntries == null)
                {
                    _historyEntries = new TrackableCollection<HistoryAssociation>();
                    _historyEntries.CollectionChanged += FixupHistoryEntries;
                }
                return _historyEntries;
            }
            set
            {
                if (!ReferenceEquals(_historyEntries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historyEntries != null)
                    {
                        _historyEntries.CollectionChanged -= FixupHistoryEntries;
                    }
                    _historyEntries = value;
                    if (_historyEntries != null)
                    {
                        _historyEntries.CollectionChanged += FixupHistoryEntries;
                    }
                    OnNavigationPropertyChanged("HistoryEntries");
                }
            }
        }
        private TrackableCollection<HistoryAssociation> _historyEntries;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Type = null;
            DestArtifactType = null;
            SourceArtifactType = null;
            Creator = null;
            HistoryEntries.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupType(ArtifactLinkType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ArtifactLinks.Contains(this))
            {
                previousValue.ArtifactLinks.Remove(this);
            }
    
            if (Type != null)
            {
                if (!Type.ArtifactLinks.Contains(this))
                {
                    Type.ArtifactLinks.Add(this);
                }
    
                ArtifactLinkTypeId = Type.ArtifactLinkTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Type")
                    && (ChangeTracker.OriginalValues["Type"] == Type))
                {
                    ChangeTracker.OriginalValues.Remove("Type");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Type", previousValue);
                }
                if (Type != null && !Type.ChangeTracker.ChangeTrackingEnabled)
                {
                    Type.StartTracking();
                }
            }
        }
    
        private void FixupDestArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DestArtifactLinks.Contains(this))
            {
                previousValue.DestArtifactLinks.Remove(this);
            }
    
            if (DestArtifactType != null)
            {
                if (!DestArtifactType.DestArtifactLinks.Contains(this))
                {
                    DestArtifactType.DestArtifactLinks.Add(this);
                }
    
                DestArtifactTypeId = DestArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DestArtifactType")
                    && (ChangeTracker.OriginalValues["DestArtifactType"] == DestArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("DestArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DestArtifactType", previousValue);
                }
                if (DestArtifactType != null && !DestArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DestArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupSourceArtifactType(ArtifactType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SourceArtifactLinks.Contains(this))
            {
                previousValue.SourceArtifactLinks.Remove(this);
            }
    
            if (SourceArtifactType != null)
            {
                if (!SourceArtifactType.SourceArtifactLinks.Contains(this))
                {
                    SourceArtifactType.SourceArtifactLinks.Add(this);
                }
    
                SourceArtifactTypeId = SourceArtifactType.ArtifactTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SourceArtifactType")
                    && (ChangeTracker.OriginalValues["SourceArtifactType"] == SourceArtifactType))
                {
                    ChangeTracker.OriginalValues.Remove("SourceArtifactType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SourceArtifactType", previousValue);
                }
                if (SourceArtifactType != null && !SourceArtifactType.ChangeTracker.ChangeTrackingEnabled)
                {
                    SourceArtifactType.StartTracking();
                }
            }
        }
    
        private void FixupCreator(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ArtifactLinks.Contains(this))
            {
                previousValue.ArtifactLinks.Remove(this);
            }
    
            if (Creator != null)
            {
                if (!Creator.ArtifactLinks.Contains(this))
                {
                    Creator.ArtifactLinks.Add(this);
                }
    
                CreatorId = Creator.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Creator")
                    && (ChangeTracker.OriginalValues["Creator"] == Creator))
                {
                    ChangeTracker.OriginalValues.Remove("Creator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Creator", previousValue);
                }
                if (Creator != null && !Creator.ChangeTracker.ChangeTrackingEnabled)
                {
                    Creator.StartTracking();
                }
            }
        }
    
        private void FixupHistoryEntries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoryAssociation item in e.NewItems)
                {
                    item.ArtifactLink = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoryEntries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoryAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.ArtifactLink, this))
                    {
                        item.ArtifactLink = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoryEntries", item);
                    }
                }
            }
        }

        #endregion

    }
}
