-- =======================================================
-- Author:			Inflectra Corporation
-- Business Object: TestCase
-- Description:		Refreshes the execution status and last-run date of a folder based on its child folders and child test cases
-- Remarks:			Does not update parents itself, would need to be called for each parent folder
-- =======================================================
IF OBJECT_ID ( 'TESTCASE_REFRESH_FOLDER_EXECUTION_STATUS', 'P' ) IS NOT NULL 
    DROP PROCEDURE [TESTCASE_REFRESH_FOLDER_EXECUTION_STATUS];
GO
CREATE PROCEDURE [TESTCASE_REFRESH_FOLDER_EXECUTION_STATUS]
	@ProjectId INT,
	@TestCaseFolderId INT
AS
BEGIN
	SET ANSI_WARNINGS OFF	--We want to SUM/AVG values that have NULLs
	SET NOCOUNT ON
	DECLARE
		@CountNotApplicable INT,
		@CountNotRun INT,
		@CountPassed INT,
		@CountFailed INT,
		@CountCaution INT,
		@CountBlocked INT,
		@EstimatedDuration1 INT,
		@EstimatedDuration2 INT,
		@ActualDuration1 INT,
		@ActualDuration2 INT,
		@ExecutionDate DATETIME

	--Default counts
	SET @CountNotApplicable = 0
	SET @CountNotRun = 0
	SET @CountPassed = 0
	SET @CountFailed = 0
	SET @CountCaution = 0
	SET @CountBlocked = 0

	--Sum child folders and test cases
	--N/A
	SELECT	@CountNotApplicable = @CountNotApplicable + ISNULL(SUM(COUNT_NOT_APPLICABLE), 0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountNotApplicable = @CountNotApplicable + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 4 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0
	
	--Not Run
	SELECT	@CountNotRun = @CountNotRun + ISNULL(SUM(COUNT_NOT_RUN),0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountNotRun = @CountNotRun + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 3 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Passed
	SELECT	@CountPassed = @CountPassed + ISNULL(SUM(COUNT_PASSED),0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountPassed = @CountPassed + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 2 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Failed
	SELECT	@CountFailed = @CountFailed + ISNULL(SUM(COUNT_FAILED),0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountFailed = @CountFailed + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 1 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Caution
	SELECT	@CountCaution = @CountCaution + ISNULL(SUM(COUNT_CAUTION),0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountCaution = @CountCaution + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 6 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Blocked
	SELECT	@CountBlocked = @CountBlocked + ISNULL(SUM(COUNT_BLOCKED),0)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@CountBlocked = @CountBlocked + COUNT(TEST_CASE_ID)
	FROM TST_TEST_CASE WHERE EXECUTION_STATUS_ID = 5 AND TEST_CASE_FOLDER_ID = @TestCaseFolderId
		AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Estimated Duration
	SELECT	@EstimatedDuration1 = SUM(ESTIMATED_DURATION)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@EstimatedDuration2 = SUM(ESTIMATED_DURATION)
	FROM TST_TEST_CASE WHERE TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId AND IS_DELETED = 0
		
	--Actual Duration
	SELECT	@ActualDuration1 = SUM(ACTUAL_DURATION)
	FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
	SELECT	@ActualDuration2 = SUM(ACTUAL_DURATION)
	FROM TST_TEST_CASE WHERE TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId AND IS_DELETED = 0

	--Execution Date
	SELECT @ExecutionDate = MIN(EXECUTION_DATE)
	FROM
		(
		SELECT MIN(EXECUTION_DATE) AS EXECUTION_DATE
		FROM TST_TEST_CASE_FOLDER WHERE PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId
		UNION
		SELECT MIN(EXECUTION_DATE) AS EXECUTION_DATE
		FROM TST_TEST_CASE WHERE TEST_CASE_FOLDER_ID = @TestCaseFolderId AND PROJECT_ID = @ProjectId AND IS_DELETED = 0
		) VW

	--Now actually update the folder
	--Have to use COALESCE when adding values to avoid NULL issues
    UPDATE TST_TEST_CASE_FOLDER
		SET COUNT_NOT_APPLICABLE = @CountNotApplicable,
		COUNT_NOT_RUN = @CountNotRun,
		COUNT_PASSED = @CountPassed,
		COUNT_FAILED = @CountFailed,
		COUNT_CAUTION = @CountCaution,
		COUNT_BLOCKED = @CountBlocked,
		ESTIMATED_DURATION = COALESCE(@EstimatedDuration1 + @EstimatedDuration2, @EstimatedDuration1, @EstimatedDuration2),
		ACTUAL_DURATION = COALESCE(@ActualDuration1 + @ActualDuration2, @ActualDuration1, @ActualDuration2),
		EXECUTION_DATE = @ExecutionDate   
    WHERE TEST_CASE_FOLDER_ID = @TestCaseFolderId

	--Now we need to do the same thing for the release folder execution data as well
	MERGE TST_RELEASE_TEST_CASE_FOLDER AS TARGET
	USING (
		SELECT
			RELEASE_ID,
			TEST_CASE_FOLDER_ID,
			SUM(COUNT_FAILED) AS COUNT_FAILED,
			SUM(COUNT_PASSED) AS COUNT_PASSED,
			SUM(COUNT_NOT_RUN) AS COUNT_NOT_RUN,
			SUM(COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
			SUM(COUNT_BLOCKED) AS COUNT_BLOCKED,
			SUM(COUNT_CAUTION) AS COUNT_CAUTION,
			MIN(EXECUTION_DATE) AS EXECUTION_DATE,
			SUM(ACTUAL_DURATION) AS ACTUAL_DURATION
		FROM
		(
			SELECT
				RTC.RELEASE_ID,
				@TestCaseFolderId AS TEST_CASE_FOLDER_ID,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 1 THEN 1 ELSE 0 END) AS COUNT_FAILED,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 2 THEN 1 ELSE 0 END) AS COUNT_PASSED,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 3 THEN 1 ELSE 0 END) AS COUNT_NOT_RUN,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 4 THEN 1 ELSE 0 END) AS COUNT_NOT_APPLICABLE,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 5 THEN 1 ELSE 0 END) AS COUNT_BLOCKED,
				SUM(CASE RTC.EXECUTION_STATUS_ID WHEN 6 THEN 1 ELSE 0 END) AS COUNT_CAUTION,
				MIN(RTC.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(RTC.ACTUAL_DURATION) AS ACTUAL_DURATION
			FROM
				TST_RELEASE_TEST_CASE RTC
			INNER JOIN
				TST_TEST_CASE TST ON RTC.TEST_CASE_ID = TST.TEST_CASE_ID
			WHERE
				TST.TEST_CASE_FOLDER_ID = @TestCaseFolderId AND
				TST.IS_DELETED = 0
			GROUP BY RELEASE_ID
			UNION
			SELECT
				RTF.RELEASE_ID,
				@TestCaseFolderId AS TEST_CASE_FOLDER_ID,
				SUM(RTF.COUNT_FAILED) AS COUNT_FAILED,
				SUM(RTF.COUNT_PASSED) AS COUNT_PASSED,
				SUM(RTF.COUNT_NOT_RUN) AS COUNT_NOT_RUN,
				SUM(RTF.COUNT_NOT_APPLICABLE) AS COUNT_NOT_APPLICABLE,
				SUM(RTF.COUNT_BLOCKED) AS COUNT_BLOCKED,
				SUM(RTF.COUNT_CAUTION) AS COUNT_CAUTION,				
				MIN(RTF.EXECUTION_DATE) AS EXECUTION_DATE,
				SUM(RTF.ACTUAL_DURATION) AS ACTUAL_DURATION
			FROM
				TST_RELEASE_TEST_CASE_FOLDER RTF
			INNER JOIN
				TST_TEST_CASE_FOLDER TSF ON RTF.TEST_CASE_FOLDER_ID = TSF.TEST_CASE_FOLDER_ID
			WHERE
				TSF.PARENT_TEST_CASE_FOLDER_ID = @TestCaseFolderId
			GROUP BY RELEASE_ID
		) AS GRP
		GROUP BY RELEASE_ID, TEST_CASE_FOLDER_ID
	) AS SOURCE
	ON
		TARGET.RELEASE_ID = SOURCE.RELEASE_ID AND
		TARGET.TEST_CASE_FOLDER_ID = SOURCE.TEST_CASE_FOLDER_ID
	WHEN MATCHED THEN
		UPDATE
			SET
				TARGET.COUNT_PASSED = SOURCE.COUNT_PASSED,
				TARGET.COUNT_FAILED = SOURCE.COUNT_FAILED,
				TARGET.COUNT_CAUTION = SOURCE.COUNT_CAUTION,
				TARGET.COUNT_BLOCKED = SOURCE.COUNT_BLOCKED,
				TARGET.COUNT_NOT_RUN = SOURCE.COUNT_NOT_RUN,
				TARGET.COUNT_NOT_APPLICABLE = SOURCE.COUNT_NOT_APPLICABLE,
				TARGET.ACTUAL_DURATION = SOURCE.ACTUAL_DURATION,
				TARGET.EXECUTION_DATE = SOURCE.EXECUTION_DATE
	WHEN NOT MATCHED BY TARGET THEN 
		INSERT (RELEASE_ID, TEST_CASE_FOLDER_ID,
			COUNT_PASSED, COUNT_FAILED, COUNT_CAUTION, COUNT_BLOCKED, COUNT_NOT_RUN, COUNT_NOT_APPLICABLE,
			ACTUAL_DURATION, EXECUTION_DATE) 
		VALUES (SOURCE.RELEASE_ID, SOURCE.TEST_CASE_FOLDER_ID,
			SOURCE.COUNT_PASSED, SOURCE.COUNT_FAILED, SOURCE.COUNT_CAUTION, SOURCE.COUNT_BLOCKED, SOURCE.COUNT_NOT_RUN,
			SOURCE.COUNT_NOT_APPLICABLE, SOURCE.ACTUAL_DURATION, SOURCE.EXECUTION_DATE)
	WHEN NOT MATCHED BY SOURCE AND TARGET.TEST_CASE_FOLDER_ID = @TestCaseFolderId THEN 
		DELETE;
END
GO
