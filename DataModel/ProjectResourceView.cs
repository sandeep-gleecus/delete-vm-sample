//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Inflectra.SpiraTest.DataModel
{
    [DataContract(IsReference = true)]
    public partial class ProjectResourceView: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProjectId
        {
            get { return _projectId; }
            set
            {
                if (_projectId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProjectId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _projectId = value;
                    OnPropertyChanged("ProjectId");
                }
            }
        }
        private int _projectId;
    
        [DataMember]
        public int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private int _userId;
    
        [DataMember]
        public string FullName
        {
            get { return _fullName; }
            set
            {
                if (_fullName != value)
                {
                    ChangeTracker.RecordOriginalValue("FullName", _fullName);
                    _fullName = value;
                    OnPropertyChanged("FullName");
                }
            }
        }
        private string _fullName;
    
        [DataMember]
        public Nullable<int> ProjectRoleId
        {
            get { return _projectRoleId; }
            set
            {
                if (_projectRoleId != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectRoleId", _projectRoleId);
                    _projectRoleId = value;
                    OnPropertyChanged("ProjectRoleId");
                }
            }
        }
        private Nullable<int> _projectRoleId;
    
        [DataMember]
        public string ProjectRoleName
        {
            get { return _projectRoleName; }
            set
            {
                if (_projectRoleName != value)
                {
                    ChangeTracker.RecordOriginalValue("ProjectRoleName", _projectRoleName);
                    _projectRoleName = value;
                    OnPropertyChanged("ProjectRoleName");
                }
            }
        }
        private string _projectRoleName;
    
        [DataMember]
        public Nullable<int> IncidentEffort
        {
            get { return _incidentEffort; }
            set
            {
                if (_incidentEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentEffort", _incidentEffort);
                    _incidentEffort = value;
                    OnPropertyChanged("IncidentEffort");
                }
            }
        }
        private Nullable<int> _incidentEffort;
    
        [DataMember]
        public Nullable<int> ReqTaskEffort
        {
            get { return _reqTaskEffort; }
            set
            {
                if (_reqTaskEffort != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqTaskEffort", _reqTaskEffort);
                    _reqTaskEffort = value;
                    OnPropertyChanged("ReqTaskEffort");
                }
            }
        }
        private Nullable<int> _reqTaskEffort;
    
        [DataMember]
        public Nullable<int> IncidentEffortOpen
        {
            get { return _incidentEffortOpen; }
            set
            {
                if (_incidentEffortOpen != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentEffortOpen", _incidentEffortOpen);
                    _incidentEffortOpen = value;
                    OnPropertyChanged("IncidentEffortOpen");
                }
            }
        }
        private Nullable<int> _incidentEffortOpen;
    
        [DataMember]
        public Nullable<int> ReqTaskEffortOpen
        {
            get { return _reqTaskEffortOpen; }
            set
            {
                if (_reqTaskEffortOpen != value)
                {
                    ChangeTracker.RecordOriginalValue("ReqTaskEffortOpen", _reqTaskEffortOpen);
                    _reqTaskEffortOpen = value;
                    OnPropertyChanged("ReqTaskEffortOpen");
                }
            }
        }
        private Nullable<int> _reqTaskEffortOpen;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
